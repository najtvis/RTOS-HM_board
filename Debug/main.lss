
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00005a2c  00005ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001e78  00802104  00802104  00005bc4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005bc4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000e18  00000000  00000000  00005c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001583b  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005402  00000000  00000000  0001c273  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000091c3  00000000  00000000  00021675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002d40  00000000  00000000  0002a838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005567  00000000  00000000  0002d578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d2b8  00000000  00000000  00032adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be8  00000000  00000000  0003fd98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c3       	rjmp	.+1802   	; 0x70c <__ctors_end>
       2:	00 00       	nop
       4:	a9 c3       	rjmp	.+1874   	; 0x758 <__bad_interrupt>
       6:	00 00       	nop
       8:	a7 c3       	rjmp	.+1870   	; 0x758 <__bad_interrupt>
       a:	00 00       	nop
       c:	a5 c3       	rjmp	.+1866   	; 0x758 <__bad_interrupt>
       e:	00 00       	nop
      10:	a3 c3       	rjmp	.+1862   	; 0x758 <__bad_interrupt>
      12:	00 00       	nop
      14:	a1 c3       	rjmp	.+1858   	; 0x758 <__bad_interrupt>
      16:	00 00       	nop
      18:	9f c3       	rjmp	.+1854   	; 0x758 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9d c3       	rjmp	.+1850   	; 0x758 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9b c3       	rjmp	.+1846   	; 0x758 <__bad_interrupt>
      22:	00 00       	nop
      24:	99 c3       	rjmp	.+1842   	; 0x758 <__bad_interrupt>
      26:	00 00       	nop
      28:	97 c3       	rjmp	.+1838   	; 0x758 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	95 c3       	rjmp	.+1834   	; 0x758 <__bad_interrupt>
      2e:	00 00       	nop
      30:	93 c3       	rjmp	.+1830   	; 0x758 <__bad_interrupt>
      32:	00 00       	nop
      34:	91 c3       	rjmp	.+1826   	; 0x758 <__bad_interrupt>
      36:	00 00       	nop
      38:	13 c6       	rjmp	.+3110   	; 0xc60 <__vector_14>
      3a:	00 00       	nop
      3c:	8d c3       	rjmp	.+1818   	; 0x758 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8b c3       	rjmp	.+1814   	; 0x758 <__bad_interrupt>
      42:	00 00       	nop
      44:	89 c3       	rjmp	.+1810   	; 0x758 <__bad_interrupt>
      46:	00 00       	nop
      48:	87 c3       	rjmp	.+1806   	; 0x758 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	85 c3       	rjmp	.+1802   	; 0x758 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__vector_20>
      54:	81 c3       	rjmp	.+1794   	; 0x758 <__bad_interrupt>
      56:	00 00       	nop
      58:	7f c3       	rjmp	.+1790   	; 0x758 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7d c3       	rjmp	.+1786   	; 0x758 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7b c3       	rjmp	.+1782   	; 0x758 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5f 23 	jmp	0x46be	; 0x46be <__vector_25>
      68:	0c 94 67 24 	jmp	0x48ce	; 0x48ce <__vector_26>
      6c:	75 c3       	rjmp	.+1770   	; 0x758 <__bad_interrupt>
      6e:	00 00       	nop
      70:	73 c3       	rjmp	.+1766   	; 0x758 <__bad_interrupt>
      72:	00 00       	nop
      74:	71 c3       	rjmp	.+1762   	; 0x758 <__bad_interrupt>
      76:	00 00       	nop
      78:	6f c3       	rjmp	.+1758   	; 0x758 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6d c3       	rjmp	.+1754   	; 0x758 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6b c3       	rjmp	.+1750   	; 0x758 <__bad_interrupt>
      82:	00 00       	nop
      84:	69 c3       	rjmp	.+1746   	; 0x758 <__bad_interrupt>
      86:	00 00       	nop
      88:	67 c3       	rjmp	.+1742   	; 0x758 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	65 c3       	rjmp	.+1738   	; 0x758 <__bad_interrupt>
      8e:	00 00       	nop
      90:	63 c3       	rjmp	.+1734   	; 0x758 <__bad_interrupt>
      92:	00 00       	nop
      94:	61 c3       	rjmp	.+1730   	; 0x758 <__bad_interrupt>
      96:	00 00       	nop
      98:	5f c3       	rjmp	.+1726   	; 0x758 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5d c3       	rjmp	.+1722   	; 0x758 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5b c3       	rjmp	.+1718   	; 0x758 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	59 c3       	rjmp	.+1714   	; 0x758 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	57 c3       	rjmp	.+1710   	; 0x758 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	55 c3       	rjmp	.+1706   	; 0x758 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	53 c3       	rjmp	.+1702   	; 0x758 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6a c4       	rjmp	.+2260   	; 0x98a <__vector_45>
      b6:	00 00       	nop
      b8:	33 c4       	rjmp	.+2150   	; 0x920 <__vector_46>
      ba:	00 00       	nop
      bc:	4d c3       	rjmp	.+1690   	; 0x758 <__bad_interrupt>
      be:	00 00       	nop
      c0:	4b c3       	rjmp	.+1686   	; 0x758 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	49 c3       	rjmp	.+1682   	; 0x758 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	47 c3       	rjmp	.+1678   	; 0x758 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	45 c3       	rjmp	.+1674   	; 0x758 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	43 c3       	rjmp	.+1670   	; 0x758 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	41 c3       	rjmp	.+1666   	; 0x758 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3f c3       	rjmp	.+1662   	; 0x758 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3d c3       	rjmp	.+1658   	; 0x758 <__bad_interrupt>
      de:	00 00       	nop
      e0:	3b c3       	rjmp	.+1654   	; 0x758 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	39 c3       	rjmp	.+1650   	; 0x758 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 0f 24 	jmp	0x481e	; 0x481e <__vector_58>
      ec:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__vector_59>
      f0:	33 c3       	rjmp	.+1638   	; 0x758 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	31 c3       	rjmp	.+1634   	; 0x758 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	2f c3       	rjmp	.+1630   	; 0x758 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2d c3       	rjmp	.+1626   	; 0x758 <__bad_interrupt>
      fe:	00 00       	nop
     100:	2b c3       	rjmp	.+1622   	; 0x758 <__bad_interrupt>
     102:	00 00       	nop
     104:	29 c3       	rjmp	.+1618   	; 0x758 <__bad_interrupt>
     106:	00 00       	nop
     108:	27 c3       	rjmp	.+1614   	; 0x758 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	25 c3       	rjmp	.+1610   	; 0x758 <__bad_interrupt>
     10e:	00 00       	nop
     110:	23 c3       	rjmp	.+1606   	; 0x758 <__bad_interrupt>
     112:	00 00       	nop
     114:	21 c3       	rjmp	.+1602   	; 0x758 <__bad_interrupt>
     116:	00 00       	nop
     118:	1f c3       	rjmp	.+1598   	; 0x758 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1d c3       	rjmp	.+1594   	; 0x758 <__bad_interrupt>
     11e:	00 00       	nop
     120:	1b c3       	rjmp	.+1590   	; 0x758 <__bad_interrupt>
     122:	00 00       	nop
     124:	19 c3       	rjmp	.+1586   	; 0x758 <__bad_interrupt>
     126:	00 00       	nop
     128:	17 c3       	rjmp	.+1582   	; 0x758 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	15 c3       	rjmp	.+1578   	; 0x758 <__bad_interrupt>
     12e:	00 00       	nop
     130:	13 c3       	rjmp	.+1574   	; 0x758 <__bad_interrupt>
     132:	00 00       	nop
     134:	11 c3       	rjmp	.+1570   	; 0x758 <__bad_interrupt>
     136:	00 00       	nop
     138:	0f c3       	rjmp	.+1566   	; 0x758 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0d c3       	rjmp	.+1562   	; 0x758 <__bad_interrupt>
     13e:	00 00       	nop
     140:	0b c3       	rjmp	.+1558   	; 0x758 <__bad_interrupt>
     142:	00 00       	nop
     144:	09 c3       	rjmp	.+1554   	; 0x758 <__bad_interrupt>
     146:	00 00       	nop
     148:	07 c3       	rjmp	.+1550   	; 0x758 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	05 c3       	rjmp	.+1546   	; 0x758 <__bad_interrupt>
     14e:	00 00       	nop
     150:	03 c3       	rjmp	.+1542   	; 0x758 <__bad_interrupt>
     152:	00 00       	nop
     154:	01 c3       	rjmp	.+1538   	; 0x758 <__bad_interrupt>
     156:	00 00       	nop
     158:	ff c2       	rjmp	.+1534   	; 0x758 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	fd c2       	rjmp	.+1530   	; 0x758 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__vector_88>
     164:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__vector_89>
     168:	f7 c2       	rjmp	.+1518   	; 0x758 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	f5 c2       	rjmp	.+1514   	; 0x758 <__bad_interrupt>
     16e:	00 00       	nop
     170:	f3 c2       	rjmp	.+1510   	; 0x758 <__bad_interrupt>
     172:	00 00       	nop
     174:	f1 c2       	rjmp	.+1506   	; 0x758 <__bad_interrupt>
     176:	00 00       	nop
     178:	ef c2       	rjmp	.+1502   	; 0x758 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ed c2       	rjmp	.+1498   	; 0x758 <__bad_interrupt>
     17e:	00 00       	nop
     180:	eb c2       	rjmp	.+1494   	; 0x758 <__bad_interrupt>
     182:	00 00       	nop
     184:	e9 c2       	rjmp	.+1490   	; 0x758 <__bad_interrupt>
     186:	00 00       	nop
     188:	e7 c2       	rjmp	.+1486   	; 0x758 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e5 c2       	rjmp	.+1482   	; 0x758 <__bad_interrupt>
     18e:	00 00       	nop
     190:	e3 c2       	rjmp	.+1478   	; 0x758 <__bad_interrupt>
     192:	00 00       	nop
     194:	e1 c2       	rjmp	.+1474   	; 0x758 <__bad_interrupt>
     196:	00 00       	nop
     198:	df c2       	rjmp	.+1470   	; 0x758 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	dd c2       	rjmp	.+1466   	; 0x758 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	db c2       	rjmp	.+1462   	; 0x758 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d9 c2       	rjmp	.+1458   	; 0x758 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d7 c2       	rjmp	.+1454   	; 0x758 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d5 c2       	rjmp	.+1450   	; 0x758 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	d3 c2       	rjmp	.+1446   	; 0x758 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d1 c2       	rjmp	.+1442   	; 0x758 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	cf c2       	rjmp	.+1438   	; 0x758 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	cd c2       	rjmp	.+1434   	; 0x758 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	cb c2       	rjmp	.+1430   	; 0x758 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c9 c2       	rjmp	.+1426   	; 0x758 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c7 c2       	rjmp	.+1422   	; 0x758 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c5 c2       	rjmp	.+1418   	; 0x758 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	c3 c2       	rjmp	.+1414   	; 0x758 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c1 c2       	rjmp	.+1410   	; 0x758 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	bf c2       	rjmp	.+1406   	; 0x758 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	bd c2       	rjmp	.+1402   	; 0x758 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	bb c2       	rjmp	.+1398   	; 0x758 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b9 c2       	rjmp	.+1394   	; 0x758 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b7 c2       	rjmp	.+1390   	; 0x758 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	b5 c2       	rjmp	.+1386   	; 0x758 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	b3 c2       	rjmp	.+1382   	; 0x758 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	b1 c2       	rjmp	.+1378   	; 0x758 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	af c2       	rjmp	.+1374   	; 0x758 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	97 1d       	adc	r25, r7
     1fe:	26 1e       	adc	r2, r22
     200:	a1 1d       	adc	r26, r1
     202:	e5 1d       	adc	r30, r5
     204:	f1 1d       	adc	r31, r1
     206:	05 1e       	adc	r0, r21
     208:	16 1e       	adc	r1, r22

0000020a <__trampolines_end>:
     20a:	00 00       	nop
     20c:	00 00       	nop
     20e:	03 83       	std	Z+3, r16	; 0x03
     210:	6b f2       	brvs	.-102    	; 0x1ac <__SREG__+0x16d>
     212:	f7 70       	andi	r31, 0x07	; 7
     214:	3b e1       	ldi	r19, 0x1B	; 27
     216:	f4 f3       	brlt	.-4      	; 0x214 <__trampolines_end+0xa>
     218:	50 13       	cpse	r21, r16
     21a:	1f 97       	sbiw	r26, 0x0f	; 15
     21c:	9a c7       	rjmp	.+3892   	; 0x1152 <xQueueCreateMutex+0x10>
     21e:	1c 14       	cp	r1, r12
     220:	f1 35       	cpi	r31, 0x51	; 81
     222:	e8 e7       	ldi	r30, 0x78	; 120
     224:	a1 26       	eor	r10, r17
     226:	eb 64       	ori	r30, 0x4B	; 75
     228:	ca d4       	rcall	.+2452   	; 0xbbe <vPortYield+0xe>
     22a:	cf 58       	subi	r28, 0x8F	; 143
     22c:	d9 8a       	std	Y+17, r13	; 0x11
     22e:	cc db       	rcall	.-2152   	; 0xfffff9c8 <__eeprom_end+0xff7ef9c8>
     230:	b2 78       	andi	r27, 0x82	; 130
     232:	38 28       	or	r3, r8
     234:	e2 6b       	ori	r30, 0xB2	; 178
     236:	3b ab       	std	Y+51, r19	; 0x33
     238:	89 99       	sbic	0x11, 1	; 17
     23a:	d0 cf       	rjmp	.-96     	; 0x1dc <__SREG__+0x19d>
     23c:	43 4d       	sbci	r20, 0xD3	; 211
     23e:	d3 4c       	sbci	r29, 0xC3	; 195
     240:	28 bf       	out	0x38, r18	; 56
     242:	27 bf       	out	0x37, r18	; 55
     244:	78 ac       	ldd	r7, Y+56	; 0x38
     246:	24 3c       	cpi	r18, 0xC4	; 196
     248:	13 5e       	subi	r17, 0xE3	; 227
     24a:	6f c7       	rjmp	.+3806   	; 0x112a <xQueueGenericSend+0xf8>
     24c:	5e 10       	cpse	r5, r14
     24e:	6c 44       	sbci	r22, 0x4C	; 76
     250:	35 e2       	ldi	r19, 0x25	; 37
     252:	98 b7       	in	r25, 0x38	; 56
     254:	65 f1       	brhs	.+88     	; 0x2ae <__trampolines_end+0xa4>
     256:	9b 34       	cpi	r25, 0x4B	; 75
     258:	0e 03       	fmul	r16, r22
     25a:	70 50       	subi	r23, 0x00	; 0
     25c:	c4 d7       	rcall	.+3976   	; 0x11e6 <xQueueGenericReceive>
     25e:	73 d3       	rcall	.+1766   	; 0x946 <__vector_46+0x26>
     260:	af 25       	eor	r26, r15
     262:	87 20       	and	r8, r7
     264:	ff 36       	cpi	r31, 0x6F	; 111
     266:	84 a3       	std	Z+36, r24	; 0x24
     268:	94 c4       	rjmp	.+2344   	; 0xb92 <xPortStartScheduler+0x66>
     26a:	a0 9f       	mul	r26, r16
     26c:	87 9a       	sbi	0x10, 7	; 16
     26e:	a3 1c       	adc	r10, r3
     270:	ec 68       	ori	r30, 0x8C	; 140
     272:	57 ef       	ldi	r21, 0xF7	; 247
     274:	bc 7b       	andi	r27, 0xBC	; 188
     276:	54 6c       	ori	r21, 0xC4	; 196
     278:	d7 89       	ldd	r29, Z+23	; 0x17
     27a:	bf 08       	sbc	r11, r15
     27c:	1d 5d       	subi	r17, 0xDD	; 221
     27e:	bc 8b       	std	Y+20, r27	; 0x14
     280:	76 af       	std	Z+62, r23	; 0x3e
     282:	48 78       	andi	r20, 0x88	; 136
     284:	26 bc       	out	0x26, r2	; 38
     286:	4b fb       	.word	0xfb4b	; ????
     288:	4d 4e       	sbci	r20, 0xED	; 237
     28a:	de 8e       	std	Y+30, r13	; 0x1e
     28c:	bd 20       	and	r11, r13
     28e:	dd 0d       	add	r29, r13
     290:	d6 d2       	rcall	.+1452   	; 0x83e <TWI_CSP_SlaveProcessData+0x4>
     292:	29 fe       	.word	0xfe29	; ????
     294:	86 c1       	rjmp	.+780    	; 0x5a2 <__trampolines_end+0x398>
     296:	2a 7d       	andi	r18, 0xDA	; 218
     298:	ed 33       	cpi	r30, 0x3D	; 61
     29a:	c1 19       	sub	r28, r1
     29c:	27 e7       	ldi	r18, 0x77	; 119
     29e:	c2 9a       	sbi	0x18, 2	; 24
     2a0:	4c 15       	cp	r20, r12
     2a2:	36 69       	ori	r19, 0x96	; 150
     2a4:	1c 06       	cpc	r1, r28
     2a6:	35 ea       	ldi	r19, 0xA5	; 165
     2a8:	77 f4       	brid	.+28     	; 0x2c6 <__trampolines_end+0xbc>
     2aa:	11 d6       	rcall	.+3106   	; 0xece <prvCopyDataToQueue+0x88>
     2ac:	64 aa       	std	Z+52, r6	; 0x34
     2ae:	12 55       	subi	r17, 0x52	; 82
     2b0:	0f 58       	subi	r16, 0x8F	; 143
     2b2:	e6 a6       	std	Z+46, r14	; 0x2e
     2b4:	5f 4b       	sbci	r21, 0xBF	; 191
     2b6:	e5 25       	eor	r30, r5
     2b8:	34 b9       	out	0x04, r19	; 4
     2ba:	0e 41       	sbci	r16, 0x1E	; 30
     2bc:	fe 6d       	ori	r31, 0xDE	; 222
     2be:	0d c2       	rjmp	.+1050   	; 0x6da <__c.2159+0xcc>
     2c0:	95 9f       	mul	r25, r21
     2c2:	f9 31       	cpi	r31, 0x19	; 25
     2c4:	c5 8c       	ldd	r12, Z+29	; 0x1d
     2c6:	fa b2       	in	r15, 0x1a	; 26
     2c8:	ae 7e       	andi	r26, 0xEE	; 238
     2ca:	b1 49       	sbci	r27, 0x91	; 145
     2cc:	e3 30       	cpi	r30, 0x03	; 3
     2ce:	b2 ca       	rjmp	.-2716   	; 0xfffff834 <__eeprom_end+0xff7ef834>
     2d0:	88 c2       	rjmp	.+1296   	; 0x7e2 <cspTask+0x88>
     2d2:	46 39       	cpi	r20, 0x96	; 150
     2d4:	d8 d1       	rcall	.+944    	; 0x686 <__c.2159+0x78>
     2d6:	45 ba       	out	0x15, r4	; 21
     2d8:	b3 23       	and	r27, r19
     2da:	ae de       	rcall	.-676    	; 0x38 <__RAMPD__>
     2dc:	79 f7       	brne	.-34     	; 0x2bc <__trampolines_end+0xb2>
     2de:	ad 5d       	subi	r26, 0xDD	; 221
     2e0:	12 05       	cpc	r17, r2
     2e2:	59 ae       	std	Y+57, r5	; 0x39
     2e4:	42 16       	cp	r4, r18
     2e6:	5a 2d       	mov	r21, r10
     2e8:	29 e4       	ldi	r18, 0x49	; 73
     2ea:	7e 11       	cpse	r23, r14
     2ec:	3a ba       	out	0x1a, r3	; 26
     2ee:	7d 92       	st	X+, r7
     2f0:	51 48       	sbci	r21, 0x81	; 129
     2f2:	89 61       	ori	r24, 0x19	; 25
     2f4:	01 5b       	subi	r16, 0xB1	; 177
     2f6:	8a e2       	ldi	r24, 0x2A	; 42
     2f8:	6a a9       	ldd	r22, Y+50	; 0x32
     2fa:	61 86       	std	Z+9, r6	; 0x09
     2fc:	a0 7d       	andi	r26, 0xD0	; 208
     2fe:	62 05       	cpc	r22, r2
     300:	cb 8f       	std	Y+27, r28	; 0x1b
     302:	96 f6       	brtc	.-92     	; 0x2a8 <__trampolines_end+0x9e>
     304:	9b 9c       	mul	r9, r11
     306:	95 75       	andi	r25, 0x55	; 85
     308:	f0 6e       	ori	r31, 0xE0	; 224
     30a:	bc 1d       	adc	r27, r12
     30c:	7b 41       	sbci	r23, 0x1B	; 27
     30e:	bf 9e       	mul	r11, r31
     310:	10 b3       	in	r17, 0x10	; 16
     312:	4b 6d       	ori	r20, 0xDB	; 219
     314:	40 a0       	ldd	r4, Z+32	; 0x20
     316:	48 ee       	ldi	r20, 0xE8	; 232
     318:	2b 52       	subi	r18, 0x2B	; 43
     31a:	a3 8a       	std	Z+19, r10	; 0x13
     31c:	e1 86       	std	Z+9, r14	; 0x09
     31e:	a0 09       	sbc	r26, r0
     320:	8a 74       	andi	r24, 0x4A	; 74
     322:	54 fa       	bst	r5, 4
     324:	da 67       	ori	r29, 0x7A	; 122
     326:	57 79       	andi	r21, 0x97	; 151
     328:	b1 95       	neg	r27
     32a:	73 45       	sbci	r23, 0x53	; 83
     32c:	a2 cb       	rjmp	.-2236   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     32e:	70 c6       	rjmp	.+3296   	; 0x1010 <xQueueCreate+0x76>
     330:	c9 39       	cpi	r28, 0x99	; 153
     332:	84 35       	cpi	r24, 0x54	; 84
     334:	99 2a       	or	r9, r25
     336:	87 b6       	in	r8, 0x37	; 55
     338:	f2 d8       	rcall	.-3612   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
     33a:	6c d2       	rcall	.+1240   	; 0x814 <cspTask+0xba>
     33c:	38 0c       	add	r3, r8
     33e:	6f 51       	subi	r22, 0x1F	; 31
     340:	53 fe       	sbrs	r5, 3
     342:	9b a2       	std	Y+35, r9	; 0x23
     344:	03 ed       	ldi	r16, 0xD3	; 211
     346:	98 21       	and	r25, r8
     348:	68 1f       	adc	r22, r24
     34a:	d3 da       	rcall	.-2650   	; 0xfffff8f2 <__eeprom_end+0xff7ef8f2>
     34c:	25 51       	subi	r18, 0x15	; 21
     34e:	d0 59       	subi	r29, 0x90	; 144
     350:	4e a3       	std	Y+38, r20	; 0x26
     352:	24 aa       	std	Z+52, r2	; 0x34
     354:	1e b0       	in	r1, 0x0e	; 14
     356:	27 29       	or	r18, r7
     358:	75 42       	sbci	r23, 0x25	; 37
     35a:	cc 4d       	sbci	r28, 0xDC	; 220
     35c:	bf 96       	adiw	r30, 0x2f	; 47
     35e:	cf ce       	rjmp	.-610    	; 0xfe <__SREG__+0xbf>
     360:	d4 64       	ori	r29, 0x44	; 68
     362:	3b 3d       	cpi	r19, 0xDB	; 219
     364:	84 77       	andi	r24, 0x74	; 116
     366:	38 be       	out	0x38, r3	; 56
     368:	ef 85       	ldd	r30, Y+15	; 0x0f
     36a:	1c 82       	std	Y+4, r1	; 0x04
     36c:	fc db       	rcall	.-2056   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     36e:	1f 01       	movw	r2, r30
     370:	97 29       	or	r25, r7
     372:	eb f2       	brvs	.-70     	; 0x32e <__trampolines_end+0x124>
     374:	c7 3a       	cpi	r28, 0xA7	; 167
     376:	e8 71       	andi	r30, 0x18	; 24
     378:	ac c8       	rjmp	.-3752   	; 0xfffff4d2 <__eeprom_end+0xff7ef4d2>
     37a:	03 15       	cp	r16, r3
     37c:	66 1c       	adc	r6, r6
     37e:	00 96       	adiw	r24, 0x00	; 0
     380:	0d ee       	ldi	r16, 0xED	; 237
     382:	f4 65       	ori	r31, 0x54	; 84
     384:	5d fd       	.word	0xfd5d	; ????
     386:	f7 e6       	ldi	r31, 0x67	; 103
     388:	36 0f       	add	r19, r22
     38a:	62 93       	st	-Z, r22
     38c:	c6 61       	ori	r28, 0x16	; 22
     38e:	61 10       	cpse	r6, r1
     390:	ad 93       	st	X+, r26	; undefined
     392:	95 e3       	ldi	r25, 0x35	; 53
     394:	fd 80       	ldd	r15, Y+5	; 0x05
     396:	96 60       	ori	r25, 0x06	; 6
     398:	96 72       	andi	r25, 0x26	; 38
     39a:	7d 04       	cpc	r7, r13
     39c:	5c a6       	std	Y+44, r5	; 0x2c
     39e:	7e 87       	std	Y+14, r23	; 0x0e
     3a0:	37 54       	subi	r19, 0x47	; 71
     3a2:	8a 74       	andi	r24, 0x4A	; 74
     3a4:	67 47       	sbci	r22, 0x77	; 119
     3a6:	89 f7       	brne	.-30     	; 0x38a <__trampolines_end+0x180>
     3a8:	0c b5       	in	r16, 0x2c	; 44
     3aa:	ad cb       	rjmp	.-2214   	; 0xfffffb06 <__eeprom_end+0xff7efb06>
     3ac:	1f eb       	ldi	r17, 0xBF	; 191
     3ae:	ae 48       	sbci	r26, 0x8E	; 142
     3b0:	74 19       	sub	r23, r4
     3b2:	5a bb       	out	0x1a, r21	; 26
     3b4:	24 0a       	sbc	r2, r20
     3b6:	59 38       	cpi	r21, 0x89	; 137
     3b8:	4f f8       	.word	0xf84f	; ????
     3ba:	b2 5c       	subi	r27, 0xC2	; 194
     3bc:	85 2c       	mov	r8, r5
     3be:	b1 df       	rcall	.-158    	; 0x322 <__trampolines_end+0x118>
     3c0:	ee de       	rcall	.-548    	; 0x19e <__SREG__+0x15f>
     3c2:	45 2c       	mov	r4, r5
     3c4:	be cd       	rjmp	.-1156   	; 0xffffff42 <__eeprom_end+0xff7eff42>
     3c6:	46 af       	std	Z+62, r20	; 0x3e
     3c8:	d5 3f       	cpi	r29, 0xF5	; 245
     3ca:	0d 54       	subi	r16, 0x4D	; 77
     3cc:	98 71       	andi	r25, 0x18	; 24
     3ce:	0e d7       	rcall	.+3612   	; 0x11ec <xQueueGenericReceive+0x6>
     3d0:	f3 83       	std	Z+3, r31	; 0x03
     3d2:	fa 24       	eor	r15, r10
     3d4:	a3 90       	.word	0x90a3	; ????
     3d6:	f9 a7       	std	Y+41, r31	; 0x29
     3d8:	c8 62       	ori	r28, 0x28	; 40
     3da:	12 c3       	rjmp	.+1572   	; 0xa00 <pvPortMalloc+0xc>
     3dc:	02 b6       	in	r0, 0x32	; 50
     3de:	11 40       	sbci	r17, 0x01	; 1
     3e0:	69 44       	sbci	r22, 0x49	; 73
     3e2:	e5 b3       	in	r30, 0x15	; 21
     3e4:	39 57       	subi	r19, 0x79	; 121
     3e6:	e6 30       	cpi	r30, 0x06	; 6
     3e8:	52 a5       	ldd	r21, Z+42	; 0x2a
     3ea:	c2 0c       	add	r12, r2
     3ec:	41 fb       	bst	r20, 1
     3ee:	c1 8f       	std	Z+25, r28	; 0x19
     3f0:	2a 09       	sbc	r18, r10
     3f2:	35 7c       	andi	r19, 0xC5	; 197
     3f4:	7a 1a       	sub	r7, r26
     3f6:	36 ff       	sbrs	r19, 6
     3f8:	11 e8       	ldi	r17, 0x81	; 129
     3fa:	dd 9b       	sbis	0x1b, 5	; 27
     3fc:	db 3c       	cpi	r29, 0xCB	; 203
     3fe:	de 18       	sub	r13, r14
     400:	b0 ce       	rjmp	.-672    	; 0x162 <__SREG__+0x123>
     402:	2a eb       	ldi	r18, 0xBA	; 186
     404:	e0 dd       	rcall	.-1088   	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     406:	29 68       	ori	r18, 0x89	; 137
     408:	8b 2f       	mov	r24, r27
     40a:	78 3b       	cpi	r23, 0xB8	; 184
     40c:	f6 82       	std	Z+6, r15	; 0x06
     40e:	7b b8       	out	0x0b, r7	; 11
     410:	9d 70       	andi	r25, 0x0D	; 13
     412:	8f 4b       	sbci	r24, 0xBF	; 191
     414:	cd 63       	ori	r28, 0x3D	; 61
     416:	8c c8       	rjmp	.-3816   	; 0xfffff530 <__eeprom_end+0xff7ef530>
     418:	a6 91       	elpm	r26, Z
     41a:	67 ac       	ldd	r6, Z+63	; 0x3f
     41c:	6c 45       	sbci	r22, 0x5C	; 92
     41e:	64 2f       	mov	r22, r20
     420:	07 b7       	in	r16, 0x37	; 55
     422:	90 dc       	rcall	.-1760   	; 0xfffffd44 <__eeprom_end+0xff7efd44>
     424:	57 a4       	ldd	r5, Z+47	; 0x2f
     426:	93 5f       	subi	r25, 0xF3	; 243
     428:	3c 56       	subi	r19, 0x6C	; 108
     42a:	b7 63       	ori	r27, 0x37	; 55
     42c:	2f 08       	sbc	r2, r15
     42e:	b4 e0       	ldi	r27, 0x04	; 4
     430:	44 fa       	bst	r4, 4
     432:	40 13       	cpse	r20, r16
     434:	14 e9       	ldi	r17, 0x94	; 148
     436:	43 90       	.word	0x9043	; ????
     438:	7f 1b       	sub	r23, r31
     43a:	a8 f4       	brcc	.+42     	; 0x466 <__trampolines_end+0x25c>
     43c:	b5 cf       	rjmp	.-150    	; 0x3a8 <__trampolines_end+0x19e>
     43e:	ab 77       	andi	r26, 0x7B	; 123
     440:	de 3d       	cpi	r29, 0xDE	; 222
     442:	5f 84       	ldd	r5, Y+15	; 0x0f
     444:	8e 2e       	mov	r8, r30
     446:	5c 07       	cpc	r21, r28
     448:	e5 dc       	rcall	.-1590   	; 0xfffffe14 <__eeprom_end+0xff7efe14>
     44a:	17 fc       	sbrc	r1, 7
     44c:	a8 92       	.word	0x92a8	; ????
     44e:	14 7f       	andi	r17, 0xF4	; 244
     450:	c3 60       	ori	r28, 0x03	; 3
     452:	e0 8c       	ldd	r14, Z+24	; 0x18
     454:	93 73       	andi	r25, 0x33	; 51
     456:	e3 0f       	add	r30, r19
     458:	f8 81       	ld	r31, Y
     45a:	08 6b       	ori	r16, 0xB8	; 184
     45c:	32 55       	subi	r19, 0x52	; 82
     45e:	0b e8       	ldi	r16, 0x8B	; 139
     460:	59 a7       	std	Y+41, r21	; 0x29
     462:	ff 1b       	sub	r31, r31
     464:	09 b4       	in	r0, 0x29	; 41
     466:	fc 98       	cbi	0x1f, 4	; 31
     468:	62 46       	sbci	r22, 0x62	; 98
     46a:	d8 a4       	ldd	r13, Y+40	; 0x28
     46c:	71 18       	sub	r7, r1
     46e:	db 27       	eor	r29, r27
     470:	1a ea       	ldi	r17, 0xAA	; 170
     472:	2f d4       	rcall	.+2142   	; 0xcd2 <__vector_14+0x72>
     474:	4a f9       	.word	0xf94a	; ????
     476:	2c 57       	subi	r18, 0x7C	; 124
     478:	21 0b       	sbc	r18, r17
     47a:	c7 33       	cpi	r28, 0x37	; 55
     47c:	eb df       	rcall	.-42     	; 0x454 <__trampolines_end+0x24a>
     47e:	c4 b0       	in	r12, 0x04	; 4
     480:	80 2d       	mov	r24, r0
     482:	30 43       	sbci	r19, 0x30	; 48
     484:	d0 3e       	cpi	r29, 0xE0	; 224
     486:	33 c0       	rjmp	.+102    	; 0x4ee <__trampolines_end+0x2e4>
     488:	bb cc       	rjmp	.-1674   	; 0xfffffe00 <__eeprom_end+0xff7efe00>
     48a:	a6 b5       	in	r26, 0x26	; 38
     48c:	4b a2       	std	Y+35, r4	; 0x23
     48e:	a5 36       	cpi	r26, 0x65	; 101
     490:	20 50       	subi	r18, 0x00	; 0
     492:	51 c5       	rjmp	.+2722   	; 0xf36 <prvUnlockQueue+0x24>
     494:	70 43       	sbci	r23, 0x30	; 48
     496:	52 46       	sbci	r21, 0x62	; 98
     498:	1b b1       	in	r17, 0x0b	; 11
     49a:	b9 22       	and	r11, r25
     49c:	d1 65       	ori	r29, 0x51	; 81
     49e:	ba a1       	ldd	r27, Y+34	; 0x22
     4a0:	ba 97       	sbiw	r30, 0x2a	; 42
     4a2:	4e 52       	subi	r20, 0x2E	; 46
     4a4:	ea 84       	ldd	r14, Y+10	; 0x0a
     4a6:	4d d1       	rcall	.+666    	; 0x742 <__do_clear_bss+0x2>
     4a8:	81 76       	andi	r24, 0x61	; 97
     4aa:	69 ed       	ldi	r22, 0xD9	; 217
     4ac:	92 28       	or	r9, r2
     4ae:	6a 6e       	ori	r22, 0xEA	; 234
     4b0:	f9 da       	rcall	.-2574   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     4b2:	9e 9d       	mul	r25, r14
     4b4:	a9 c9       	rjmp	.-3246   	; 0xfffff808 <__eeprom_end+0xff7ef808>
     4b6:	9d 1e       	adc	r9, r29
     4b8:	c2 3b       	cpi	r28, 0xB2	; 178
     4ba:	76 7a       	andi	r23, 0xA6	; 166
     4bc:	08 ef       	ldi	r16, 0xF8	; 248
     4be:	75 f9       	bld	r23, 5
     4c0:	63 1d       	adc	r22, r3
     4c2:	81 0a       	sbc	r8, r17
     4c4:	33 0e       	add	r3, r19
     4c6:	82 89       	ldd	r24, Z+18	; 0x12
     4c8:	58 fc       	.word	0xfc58	; ????
     4ca:	c9 72       	andi	r28, 0x29	; 41
     4cc:	15 b2       	in	r1, 0x15	; 21
     4ce:	ca f1       	brmi	.+114    	; 0x542 <__trampolines_end+0x338>
     4d0:	7e 40       	sbci	r23, 0x0E	; 14
     4d2:	3e 02       	muls	r19, r30
     4d4:	2e 53       	subi	r18, 0x3E	; 62
     4d6:	3d 81       	ldd	r19, Y+5	; 0x05
     4d8:	45 a1       	ldd	r20, Z+37	; 0x25
     4da:	d6 e5       	ldi	r29, 0x56	; 86
     4dc:	8f 75       	andi	r24, 0x5F	; 95
     4de:	d5 66       	ori	r29, 0x65	; 101
     4e0:	e4 87       	std	Z+12, r30	; 0x0c
     4e2:	21 95       	neg	r18
     4e4:	b4 94       	.word	0x94b4	; ????
     4e6:	22 16       	cp	r2, r18
     4e8:	df 66       	ori	r29, 0x6F	; 111
     4ea:	06 2a       	or	r0, r22
     4ec:	cc 38       	cpi	r28, 0x8C	; 140
     4ee:	05 a9       	ldd	r16, Z+53	; 0x35
     4f0:	a7 ca       	rjmp	.-2738   	; 0xfffffa40 <__eeprom_end+0xff7efa40>
     4f2:	f1 5a       	subi	r31, 0xA1	; 161
     4f4:	f7 d9       	rcall	.-3090   	; 0xfffff8e4 <__eeprom_end+0xff7ef8e4>
     4f6:	f2 d9       	rcall	.-3100   	; 0xfffff8dc <__eeprom_end+0xff7ef8dc>
     4f8:	9c 2b       	or	r25, r28
     4fa:	19 bd       	out	0x29, r17	; 41
     4fc:	56 ff       	sbrs	r21, 6
     4fe:	1a 3e       	cpi	r17, 0xEA	; 234
     500:	3d 0d       	add	r19, r13
     502:	ee cd       	rjmp	.-1060   	; 0xe0 <__SREG__+0xa1>
     504:	6d 1e       	adc	r6, r29
     506:	ed 4e       	sbci	r30, 0xED	; 237
     508:	06 ec       	ldi	r16, 0xC6	; 198
     50a:	c4 26       	eor	r12, r20
     50c:	8d c3       	rjmp	.+1818   	; 0xc28 <vPortYield+0x78>
     50e:	c7 a5       	ldd	r28, Z+47	; 0x2f
     510:	e6 31       	cpi	r30, 0x16	; 22
     512:	33 56       	subi	r19, 0x63	; 99
     514:	b6 22       	and	r11, r22
     516:	30 d5       	rcall	.+2656   	; 0xf78 <prvUnlockQueue+0x66>
     518:	dd d0       	rcall	.+442    	; 0x6d4 <__c.2159+0xc6>
     51a:	db b1       	in	r29, 0x0b	; 11
     51c:	17 04       	cpc	r1, r7
     51e:	d8 32       	cpi	r29, 0x28	; 40
     520:	7c f6       	brge	.-98     	; 0x4c0 <__trampolines_end+0x2b6>
     522:	2c c1       	rjmp	.+600    	; 0x77c <cspTask+0x22>
     524:	2c e5       	ldi	r18, 0x5C	; 92
     526:	2f 42       	sbci	r18, 0x2F	; 47
     528:	47 17       	cp	r20, r23
     52a:	0b 7e       	andi	r16, 0xEB	; 235
     52c:	54 49       	sbci	r21, 0x94	; 148
     52e:	08 fd       	.word	0xfd08	; ????
     530:	3f bb       	out	0x1f, r19	; 31
     532:	fc 0e       	add	r15, r28
     534:	6f a8       	ldd	r6, Y+55	; 0x37
     536:	ff 8d       	ldd	r31, Y+31	; 0x1f
     538:	04 5a       	subi	r16, 0xA4	; 164
     53a:	14 e9       	ldi	r17, 0x94	; 148
     53c:	ce 8e       	std	Y+30, r12	; 0x1e
     53e:	17 6a       	ori	r17, 0xA7	; 167
     540:	a5 7c       	andi	r26, 0xC5	; 197
     542:	e3 99       	sbic	0x1c, 3	; 28
     544:	f5 6f       	ori	r31, 0xF5	; 245
     546:	e0 1a       	sub	r14, r16
     548:	9e 9d       	mul	r25, r14
     54a:	ab e1       	ldi	r26, 0x1B	; 27
     54c:	d3 d3       	rcall	.+1958   	; 0xcf4 <__vector_14+0x94>
     54e:	a8 62       	ori	r26, 0x28	; 40
     550:	b8 21       	and	r27, r8
     552:	5c 91       	ld	r21, X
     554:	e8 32       	cpi	r30, 0x28	; 40
     556:	5f 12       	cpse	r5, r31
     558:	83 c0       	rjmp	.+262    	; 0x660 <__c.2159+0x52>
     55a:	b4 76       	andi	r27, 0x64	; 100
     55c:	49 14       	cp	r4, r9
     55e:	b7 f5       	brid	.+108    	; 0x5cc <__trampolines_end+0x3c2>
     560:	22 e6       	ldi	r18, 0x62	; 98
     562:	43 06       	cpc	r4, r19
     564:	72 f5       	brpl	.+92     	; 0x5c2 <__trampolines_end+0x3b8>
     566:	40 85       	ldd	r20, Z+8	; 0x08
     568:	19 07       	cpc	r17, r25
     56a:	64 b9       	out	0x04, r22	; 4
     56c:	0a 59       	subi	r16, 0x9A	; 154
     56e:	67 3a       	cpi	r22, 0xA7	; 167
     570:	61 ab       	std	Z+49, r22	; 0x31
     572:	93 c9       	rjmp	.-3290   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
     574:	31 b8       	out	0x01, r3	; 1
     576:	90 4a       	sbci	r25, 0xA0	; 160
     578:	5a 4a       	sbci	r21, 0xAA	; 170
     57a:	7b 2e       	mov	r7, r27
     57c:	90 9e       	mul	r9, r16
     57e:	78 ad       	ldd	r23, Y+56	; 0x38
     580:	fb 6c       	ori	r31, 0xCB	; 203
     582:	8c 5e       	subi	r24, 0xEC	; 236
     584:	ab 7f       	andi	r26, 0xFB	; 251
     586:	8f dd       	rcall	.-1250   	; 0xa6 <__SREG__+0x67>
     588:	c0 8d       	ldd	r28, Z+24	; 0x18
     58a:	1a a8       	ldd	r1, Y+50	; 0x32
     58c:	30 e3       	ldi	r19, 0x30	; 48
     58e:	19 2b       	or	r17, r25
     590:	5b 11       	cpse	r21, r11
     592:	ed d8       	rcall	.-3622   	; 0xfffff76e <__eeprom_end+0xff7ef76e>
     594:	0b 02       	muls	r16, r27
     596:	ee 5b       	subi	r30, 0xBE	; 190
     598:	60 f0       	brcs	.+24     	; 0x5b2 <__trampolines_end+0x3a8>
     59a:	05 3f       	cpi	r16, 0xF5	; 245
     59c:	aa 24       	eor	r10, r10
     59e:	06 bc       	out	0x26, r0	; 38
     5a0:	c1 d6       	rcall	.+3458   	; 0x1324 <xQueueGenericReceive+0x13e>
     5a2:	f2 4f       	sbci	r31, 0xF2	; 242
     5a4:	91 c5       	rjmp	.+2850   	; 0x10c8 <xQueueGenericSend+0x96>
     5a6:	f1 cc       	rjmp	.-1566   	; 0xffffff8a <__eeprom_end+0xff7eff8a>
     5a8:	fa 37       	cpi	r31, 0x7A	; 122
     5aa:	d5 f0       	brhs	.+52     	; 0x5e0 <__trampolines_end+0x3d6>
     5ac:	e9 69       	ori	r30, 0x99	; 153
     5ae:	d6 73       	andi	r29, 0x36	; 54
     5b0:	82 9b       	sbis	0x10, 2	; 16
     5b2:	22 80       	ldd	r2, Z+2	; 0x02
     5b4:	d2 88       	ldd	r13, Z+18	; 0x12
     5b6:	21 03       	mulsu	r18, r17
     5b8:	b9 7a       	andi	r27, 0xA9	; 169
     5ba:	ca 67       	ori	r28, 0x7A	; 122
     5bc:	73 ae       	std	Z+59, r7	; 0x3b
     5be:	c9 e4       	ldi	r28, 0x49	; 73
     5c0:	18 5c       	subi	r17, 0xC8	; 200
     5c2:	3d 17       	cp	r19, r29
     5c4:	48 4f       	sbci	r20, 0xF8	; 248
     5c6:	3e 94 23 bd 	call	0xd7a46	; 0xd7a46 <__data_load_end+0xd1f16>
     5ca:	75 6f       	ori	r23, 0xF5	; 245
     5cc:	6e f3       	brts	.-38     	; 0x5a8 <__trampolines_end+0x39e>
     5ce:	76 ec       	ldi	r23, 0xC6	; 198
     5d0:	05 01       	movw	r0, r10
     5d2:	82 1f       	adc	r24, r18
     5d4:	55 12       	cpse	r5, r21
     5d6:	81 9c       	mul	r8, r1
     5d8:	3e e0       	ldi	r19, 0x0E	; 14
     5da:	6a f8       	.word	0xf86a	; ????
     5dc:	f4 34       	cpi	r31, 0x44	; 68
     5de:	69 7b       	andi	r22, 0xB9	; 185
     5e0:	9f c6       	rjmp	.+3390   	; 0x1320 <xQueueGenericReceive+0x13a>
     5e2:	9d 88       	ldd	r9, Y+21	; 0x15
     5e4:	cf d5       	rcall	.+2974   	; 0x1184 <xQueueCreateMutex+0x42>
     5e6:	9e 0b       	sbc	r25, r30
     5e8:	a4 27       	eor	r26, r20
     5ea:	ba 37       	cpi	r27, 0x7A	; 122
     5ec:	b7 79       	andi	r27, 0x97	; 151
     5ee:	b9 b4       	in	r11, 0x29	; 41
     5f0:	dc 8b       	std	Y+20, r29	; 0x14
     5f2:	4d 47       	sbci	r20, 0x7D	; 125
     5f4:	8c 98       	cbi	0x11, 4	; 17
     5f6:	4e c4       	rjmp	.+2204   	; 0xe94 <prvCopyDataToQueue+0x4e>
     5f8:	e7 6a       	ori	r30, 0xA7	; 167
     5fa:	a5 a0       	ldd	r10, Z+37	; 0x25
     5fc:	2d be       	out	0x3d, r2	; 61
     5fe:	a6 23       	and	r26, r22
     600:	46 4c       	sbci	r20, 0xC6	; 198
     602:	52 d0       	rcall	.+164    	; 0x6a8 <__c.2159+0x9a>
     604:	16 5f       	subi	r17, 0xF6	; 246
     606:	51 53       	subi	r21, 0x31	; 49
     608:	7d ad       	ldd	r23, Y+61	; 0x3d

0000060a <__c.2161>:
     60a:	6e 61 6e 00                                         nan.

0000060e <__c.2159>:
     60e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     61e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     62e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     63e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     64e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     65e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     66e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     67e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     68e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     69e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     6ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     6be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     6ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     6de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     6ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000070c <__ctors_end>:
     70c:	11 24       	eor	r1, r1
     70e:	1f be       	out	0x3f, r1	; 63
     710:	cf ef       	ldi	r28, 0xFF	; 255
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df e3       	ldi	r29, 0x3F	; 63
     716:	de bf       	out	0x3e, r29	; 62
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	0c bf       	out	0x3c, r16	; 60
     71c:	18 be       	out	0x38, r1	; 56
     71e:	19 be       	out	0x39, r1	; 57
     720:	1a be       	out	0x3a, r1	; 58
     722:	1b be       	out	0x3b, r1	; 59

00000724 <__do_copy_data>:
     724:	11 e2       	ldi	r17, 0x21	; 33
     726:	a0 e0       	ldi	r26, 0x00	; 0
     728:	b0 e2       	ldi	r27, 0x20	; 32
     72a:	ec e2       	ldi	r30, 0x2C	; 44
     72c:	fa e5       	ldi	r31, 0x5A	; 90
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	0b bf       	out	0x3b, r16	; 59
     732:	02 c0       	rjmp	.+4      	; 0x738 <__do_copy_data+0x14>
     734:	07 90       	elpm	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	a4 30       	cpi	r26, 0x04	; 4
     73a:	b1 07       	cpc	r27, r17
     73c:	d9 f7       	brne	.-10     	; 0x734 <__do_copy_data+0x10>
     73e:	1b be       	out	0x3b, r1	; 59

00000740 <__do_clear_bss>:
     740:	2f e3       	ldi	r18, 0x3F	; 63
     742:	a4 e0       	ldi	r26, 0x04	; 4
     744:	b1 e2       	ldi	r27, 0x21	; 33
     746:	01 c0       	rjmp	.+2      	; 0x74a <.do_clear_bss_start>

00000748 <.do_clear_bss_loop>:
     748:	1d 92       	st	X+, r1

0000074a <.do_clear_bss_start>:
     74a:	ac 37       	cpi	r26, 0x7C	; 124
     74c:	b2 07       	cpc	r27, r18
     74e:	e1 f7       	brne	.-8      	; 0x748 <.do_clear_bss_loop>
     750:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <main>
     754:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <_exit>

00000758 <__bad_interrupt>:
     758:	53 cc       	rjmp	.-1882   	; 0x0 <__vectors>

0000075a <cspTask>:
/*	Task that handles CSP incoming packets								*/
/* -------------------------------------------------------------------- */
void cspTask(void *p) {
	
	/* Create socket without any socket options */
	csp_socket_t * sock = csp_socket(CSP_SO_NONE);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	cb 01       	movw	r24, r22
     760:	0e 94 ed 16 	call	0x2dda	; 0x2dda <csp_socket>
     764:	7c 01       	movw	r14, r24

	/* Bind all ports to socket */
	csp_bind(sock, CSP_ANY);
     766:	60 e2       	ldi	r22, 0x20	; 32
     768:	0e 94 11 19 	call	0x3222	; 0x3222 <csp_bind>

	/* Create 10 connections backlog queue */
	csp_listen(sock, 10);
     76c:	6a e0       	ldi	r22, 0x0A	; 10
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	c7 01       	movw	r24, r14
     772:	0e 94 f6 18 	call	0x31ec	; 0x31ec <csp_listen>

	/* Pointer to current connection and packet */
	csp_conn_t * conn;
	csp_packet_t * packet;
	
	xCSPEventQueue = xQueueCreate(10, (portBASE_TYPE) sizeof(xCSPStackEvent_t));
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	0f d4       	rcall	.+2078   	; 0xf9a <xQueueCreate>
     77c:	80 93 bd 3e 	sts	0x3EBD, r24
     780:	90 93 be 3e 	sts	0x3EBE, r25
					
				/* if Port 16 packet received */
				// Free Heap space in Human readable form
				case 16:
				
					newEvent->eEventType = freeHeapEvent;
     784:	cc 24       	eor	r12, r12
     786:	c3 94       	inc	r12
				
				/* if Port 17 packet received */
				// Return info status message
				case 17:
				
					newEvent->eEventType = housKeepingEvent;
     788:	68 94       	set
     78a:	dd 24       	eor	r13, r13
     78c:	d1 f8       	bld	r13, 1

	/* Process incoming connections */
	while (1) {
		
		/* Wait for connection, 10000 ms timeout */
		if ((conn = csp_accept(sock, 10000)) == NULL)
     78e:	40 e1       	ldi	r20, 0x10	; 16
     790:	57 e2       	ldi	r21, 0x27	; 39
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	c7 01       	movw	r24, r14
     798:	0e 94 33 17 	call	0x2e66	; 0x2e66 <csp_accept>
     79c:	8c 01       	movw	r16, r24
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	b1 f3       	breq	.-20     	; 0x78e <cspTask+0x34>
     7a2:	3c c0       	rjmp	.+120    	; 0x81c <cspTask+0xc2>
		continue;

		/* Read packets. Timout is 1000 ms */
		while ((packet = csp_read(conn, 10)) != NULL) {
			switch (csp_conn_dport(conn)) {
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <csp_conn_dport>
     7aa:	80 31       	cpi	r24, 0x10	; 16
     7ac:	91 05       	cpc	r25, r1
     7ae:	a1 f0       	breq	.+40     	; 0x7d8 <cspTask+0x7e>
     7b0:	81 31       	cpi	r24, 0x11	; 17
     7b2:	91 05       	cpc	r25, r1
     7b4:	01 f1       	breq	.+64     	; 0x7f6 <cspTask+0x9c>
     7b6:	0f 97       	sbiw	r24, 0x0f	; 15
     7b8:	69 f5       	brne	.+90     	; 0x814 <cspTask+0xba>
				
				/* if Port 15 packet received */
				// Echo back the incoming packet
				case 15:
				
					newEvent->eEventType = echoBackEvent;
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	fb 01       	movw	r30, r22
     7c0:	10 82       	st	Z, r1
					newEvent->pvData = packet;
     7c2:	c1 83       	std	Z+1, r28	; 0x01
     7c4:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	4a e0       	ldi	r20, 0x0A	; 10
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	80 91 bd 3e 	lds	r24, 0x3EBD
     7d0:	90 91 be 3e 	lds	r25, 0x3EBE
     7d4:	2e d4       	rcall	.+2140   	; 0x1032 <xQueueGenericSend>
					
				break;
     7d6:	22 c0       	rjmp	.+68     	; 0x81c <cspTask+0xc2>
					
				/* if Port 16 packet received */
				// Free Heap space in Human readable form
				case 16:
				
					newEvent->eEventType = freeHeapEvent;
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	fb 01       	movw	r30, r22
     7de:	c0 82       	st	Z, r12
					newEvent->pvData = packet;
     7e0:	c1 83       	std	Z+1, r28	; 0x01
     7e2:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);	
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	4a e0       	ldi	r20, 0x0A	; 10
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 91 bd 3e 	lds	r24, 0x3EBD
     7ee:	90 91 be 3e 	lds	r25, 0x3EBE
     7f2:	1f d4       	rcall	.+2110   	; 0x1032 <xQueueGenericSend>
					
				break;	
     7f4:	13 c0       	rjmp	.+38     	; 0x81c <cspTask+0xc2>
				
				/* if Port 17 packet received */
				// Return info status message
				case 17:
				
					newEvent->eEventType = housKeepingEvent;
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	fb 01       	movw	r30, r22
     7fc:	d0 82       	st	Z, r13
					newEvent->pvData = packet;
     7fe:	c1 83       	std	Z+1, r28	; 0x01
     800:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	80 91 bd 3e 	lds	r24, 0x3EBD
     80c:	90 91 be 3e 	lds	r25, 0x3EBE
     810:	10 d4       	rcall	.+2080   	; 0x1032 <xQueueGenericSend>
				
				break;		
     812:	04 c0       	rjmp	.+8      	; 0x81c <cspTask+0xc2>
				
				/* Process packet here */
				default:
				
				/* Let the service handler reply pings, buffer use, etc. */
				csp_service_handler(conn, packet);
     814:	be 01       	movw	r22, r28
     816:	c8 01       	movw	r24, r16
     818:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <csp_service_handler>
		/* Wait for connection, 10000 ms timeout */
		if ((conn = csp_accept(sock, 10000)) == NULL)
		continue;

		/* Read packets. Timout is 1000 ms */
		while ((packet = csp_read(conn, 10)) != NULL) {
     81c:	4a e0       	ldi	r20, 0x0A	; 10
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	c8 01       	movw	r24, r16
     826:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <csp_read>
     82a:	ec 01       	movw	r28, r24
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	09 f0       	breq	.+2      	; 0x832 <cspTask+0xd8>
     830:	b9 cf       	rjmp	.-142    	; 0x7a4 <cspTask+0x4a>
				break;
			}
		}

		/* Close current connection, and handle next */
		csp_close(conn);
     832:	c8 01       	movw	r24, r16
     834:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <csp_close>
     838:	aa cf       	rjmp	.-172    	; 0x78e <cspTask+0x34>

0000083a <TWI_CSP_SlaveProcessData>:
TWI_Slave_t twi_csp_slave;			/*!< TWI slave module. */
i2c_callback_t callbackFunction;

// this function processes received data on the I2C Slave line
// It is call by the I2C driver
void TWI_CSP_SlaveProcessData(void) {
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	ca 50       	subi	r28, 0x0A	; 10
     844:	d1 40       	sbci	r29, 0x01	; 1
     846:	cd bf       	out	0x3d, r28	; 61
     848:	de bf       	out	0x3e, r29	; 62
	
	if (twi_csp_slave.result == TWIS_RESULT_OK) {
     84a:	80 91 0f 3f 	lds	r24, 0x3F0F
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	49 f5       	brne	.+82     	; 0x8a4 <TWI_CSP_SlaveProcessData+0x6a>
		
		i2c_frame_t newFrame;
		
		if (twi_csp_slave.bytesReceived > 0) {
     852:	80 91 0c 3f 	lds	r24, 0x3F0C
     856:	88 23       	and	r24, r24
     858:	e1 f0       	breq	.+56     	; 0x892 <TWI_CSP_SlaveProcessData+0x58>
			
			// set the data len
			newFrame.len = twi_csp_slave.bytesReceived;
     85a:	ec e0       	ldi	r30, 0x0C	; 12
     85c:	ff e3       	ldi	r31, 0x3F	; 63
     85e:	80 81       	ld	r24, Z
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	89 87       	std	Y+9, r24	; 0x09
     864:	9a 87       	std	Y+10, r25	; 0x0a
			
			// copy the data
			int i;
			for (i = 0; i < twi_csp_slave.bytesReceived; i++) {
     866:	80 81       	ld	r24, Z
     868:	88 23       	and	r24, r24
     86a:	99 f0       	breq	.+38     	; 0x892 <TWI_CSP_SlaveProcessData+0x58>
     86c:	fe 01       	movw	r30, r28
     86e:	3b 96       	adiw	r30, 0x0b	; 11
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	4c e0       	ldi	r20, 0x0C	; 12
     876:	5f e3       	ldi	r21, 0x3F	; 63
				
				newFrame.data[i] = twi_csp_slave.receivedData[i];
     878:	dc 01       	movw	r26, r24
     87a:	a1 54       	subi	r26, 0x41	; 65
     87c:	b1 4c       	sbci	r27, 0xC1	; 193
     87e:	14 96       	adiw	r26, 0x04	; 4
     880:	2c 91       	ld	r18, X
     882:	21 93       	st	Z+, r18
			// set the data len
			newFrame.len = twi_csp_slave.bytesReceived;
			
			// copy the data
			int i;
			for (i = 0; i < twi_csp_slave.bytesReceived; i++) {
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	da 01       	movw	r26, r20
     888:	2c 91       	ld	r18, X
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	9c f3       	brlt	.-26     	; 0x878 <TWI_CSP_SlaveProcessData+0x3e>
				
				newFrame.data[i] = twi_csp_slave.receivedData[i];
			}
		}
		
		callbackFunction(&newFrame, false);
     892:	e0 91 63 3f 	lds	r30, 0x3F63
     896:	f0 91 64 3f 	lds	r31, 0x3F64
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	19 95       	eicall
		
	}
}
     8a4:	c6 5f       	subi	r28, 0xF6	; 246
     8a6:	de 4f       	sbci	r29, 0xFE	; 254
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <i2c_init>:

// Initialize the i2c interface for CSP
int i2c_init(int handle, int mode, uint8_t addr, uint16_t speed, int queue_len_tx, int queue_len_rx, i2c_callback_t callback) {
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	cf 93       	push	r28
     8b8:	c4 2f       	mov	r28, r20
	
	// Initialize TWI master for CSP
	TWI_MasterInit(&twi_csp_master, &CSP_I2C_INTERFACE, TWI_MASTER_INTLVL_LO_gc, speed);
     8ba:	40 e4       	ldi	r20, 0x40	; 64
     8bc:	60 ea       	ldi	r22, 0xA0	; 160
     8be:	74 e0       	ldi	r23, 0x04	; 4
     8c0:	81 e1       	ldi	r24, 0x11	; 17
     8c2:	9f e3       	ldi	r25, 0x3F	; 63
     8c4:	0e 94 26 21 	call	0x424c	; 0x424c <TWI_MasterInit>
			
	// Initialize TWI slave for CSP
	TWI_SlaveInitializeDriver(&twi_csp_slave, &CSP_I2C_INTERFACE, TWI_CSP_SlaveProcessData);
     8c8:	4d e1       	ldi	r20, 0x1D	; 29
     8ca:	54 e0       	ldi	r21, 0x04	; 4
     8cc:	60 ea       	ldi	r22, 0xA0	; 160
     8ce:	74 e0       	ldi	r23, 0x04	; 4
     8d0:	8f eb       	ldi	r24, 0xBF	; 191
     8d2:	9e e3       	ldi	r25, 0x3E	; 62
     8d4:	0e 94 4c 22 	call	0x4498	; 0x4498 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twi_csp_slave, addr, TWI_SLAVE_INTLVL_LO_gc);
     8d8:	40 e4       	ldi	r20, 0x40	; 64
     8da:	6c 2f       	mov	r22, r28
     8dc:	8f eb       	ldi	r24, 0xBF	; 191
     8de:	9e e3       	ldi	r25, 0x3E	; 62
     8e0:	0e 94 5d 22 	call	0x44ba	; 0x44ba <TWI_SlaveInitializeModule>
	
	callbackFunction = callback;
     8e4:	c0 92 63 3f 	sts	0x3F63, r12
     8e8:	d0 92 64 3f 	sts	0x3F64, r13
	
	return E_NO_ERR;
}
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	cf 91       	pop	r28
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <i2c_send>:
 * @param timeout Ticks to wait
 * @return Error code
 */
int i2c_send(int handle, i2c_frame_t * frame, uint16_t timeout) {
		
	if (TWI_MasterWrite(&twi_csp_master, frame->dest, (uint8_t *) frame->data, frame->len)) {
     8f8:	ab 01       	movw	r20, r22
     8fa:	46 5f       	subi	r20, 0xF6	; 246
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	fb 01       	movw	r30, r22
     900:	20 85       	ldd	r18, Z+8	; 0x08
     902:	66 81       	ldd	r22, Z+6	; 0x06
     904:	81 e1       	ldi	r24, 0x11	; 17
     906:	9f e3       	ldi	r25, 0x3F	; 63
     908:	0e 94 97 21 	call	0x432e	; 0x432e <TWI_MasterWrite>
     90c:	88 23       	and	r24, r24
     90e:	19 f0       	breq	.+6      	; 0x916 <i2c_send+0x1e>
		
		return E_NO_ERR;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	08 95       	ret
	} else {
		
		return 1;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     91a:	08 95       	ret

0000091c <clock_get_time>:

/* User functions required */
void clock_get_time(csp_timestamp_t * time) {
     91c:	08 95       	ret

0000091e <clock_set_time>:
	
	
}

extern void clock_set_time(csp_timestamp_t * time) {
     91e:	08 95       	ret

00000920 <__vector_46>:
	
}

/*! CSP Master Interrupt vector. */
ISR(CSP_I2C_TWIM)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	08 b6       	in	r0, 0x38	; 56
     92c:	0f 92       	push	r0
     92e:	18 be       	out	0x38, r1	; 56
     930:	09 b6       	in	r0, 0x39	; 57
     932:	0f 92       	push	r0
     934:	19 be       	out	0x39, r1	; 57
     936:	0b b6       	in	r0, 0x3b	; 59
     938:	0f 92       	push	r0
     93a:	1b be       	out	0x3b, r1	; 59
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twi_csp_master);
     954:	81 e1       	ldi	r24, 0x11	; 17
     956:	9f e3       	ldi	r25, 0x3F	; 63
     958:	0e 94 33 22 	call	0x4466	; 0x4466 <TWI_MasterInterruptHandler>
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	09 be       	out	0x39, r0	; 57
     97c:	0f 90       	pop	r0
     97e:	08 be       	out	0x38, r0	; 56
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_45>:

/*! CPS Slave Interrupt vector. */
ISR(CSP_I2C_TWIS)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	08 b6       	in	r0, 0x38	; 56
     996:	0f 92       	push	r0
     998:	18 be       	out	0x38, r1	; 56
     99a:	09 b6       	in	r0, 0x39	; 57
     99c:	0f 92       	push	r0
     99e:	19 be       	out	0x39, r1	; 57
     9a0:	0b b6       	in	r0, 0x3b	; 59
     9a2:	0f 92       	push	r0
     9a4:	1b be       	out	0x3b, r1	; 59
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twi_csp_slave);
     9be:	8f eb       	ldi	r24, 0xBF	; 191
     9c0:	9e e3       	ldi	r25, 0x3E	; 62
     9c2:	0e 94 2c 23 	call	0x4658	; 0x4658 <TWI_SlaveInterruptHandler>
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0b be       	out	0x3b, r0	; 59
     9e2:	0f 90       	pop	r0
     9e4:	09 be       	out	0x39, r0	; 57
     9e6:	0f 90       	pop	r0
     9e8:	08 be       	out	0x38, r0	; 56
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	dd d6       	rcall	.+3514   	; 0x17b6 <vTaskSuspendAll>
     9fc:	40 91 04 21 	lds	r20, 0x2104
     a00:	50 91 05 21 	lds	r21, 0x2105
     a04:	9e 01       	movw	r18, r28
     a06:	24 0f       	add	r18, r20
     a08:	35 1f       	adc	r19, r21
     a0a:	28 35       	cpi	r18, 0x58	; 88
     a0c:	8b e1       	ldi	r24, 0x1B	; 27
     a0e:	38 07       	cpc	r19, r24
     a10:	58 f4       	brcc	.+22     	; 0xa28 <pvPortMalloc+0x34>
     a12:	42 17       	cp	r20, r18
     a14:	53 07       	cpc	r21, r19
     a16:	58 f4       	brcc	.+22     	; 0xa2e <pvPortMalloc+0x3a>
     a18:	ea 01       	movw	r28, r20
     a1a:	ca 5f       	subi	r28, 0xFA	; 250
     a1c:	de 4d       	sbci	r29, 0xDE	; 222
     a1e:	20 93 04 21 	sts	0x2104, r18
     a22:	30 93 05 21 	sts	0x2105, r19
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <pvPortMalloc+0x3e>
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <pvPortMalloc+0x3e>
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	95 d7       	rcall	.+3882   	; 0x195e <xTaskResumeAll>
     a34:	ce 01       	movw	r24, r28
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <vPortFree>:
     a3c:	08 95       	ret

00000a3e <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     a3e:	20 91 04 21 	lds	r18, 0x2104
     a42:	30 91 05 21 	lds	r19, 0x2105
}
     a46:	88 e5       	ldi	r24, 0x58	; 88
     a48:	9b e1       	ldi	r25, 0x1B	; 27
     a4a:	82 1b       	sub	r24, r18
     a4c:	93 0b       	sbc	r25, r19
     a4e:	08 95       	ret

00000a50 <pxPortInitialiseStack>:
    /* Should not get here. */
    return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler(void) {
     a50:	31 e1       	ldi	r19, 0x11	; 17
     a52:	fc 01       	movw	r30, r24
     a54:	30 83       	st	Z, r19
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	22 e2       	ldi	r18, 0x22	; 34
     a5a:	20 83       	st	Z, r18
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	a3 e3       	ldi	r26, 0x33	; 51
     a60:	a0 83       	st	Z, r26
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	60 83       	st	Z, r22
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	70 83       	st	Z, r23
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	10 82       	st	Z, r1
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	10 82       	st	Z, r1
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	60 e8       	ldi	r22, 0x80	; 128
     a76:	60 83       	st	Z, r22
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	10 82       	st	Z, r1
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	62 e0       	ldi	r22, 0x02	; 2
     a80:	60 83       	st	Z, r22
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	60 83       	st	Z, r22
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	60 83       	st	Z, r22
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	65 e0       	ldi	r22, 0x05	; 5
     a92:	60 83       	st	Z, r22
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	66 e0       	ldi	r22, 0x06	; 6
     a98:	60 83       	st	Z, r22
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	60 83       	st	Z, r22
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	68 e0       	ldi	r22, 0x08	; 8
     aa4:	60 83       	st	Z, r22
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	69 e0       	ldi	r22, 0x09	; 9
     aaa:	60 83       	st	Z, r22
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	60 e1       	ldi	r22, 0x10	; 16
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	30 83       	st	Z, r19
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	32 e1       	ldi	r19, 0x12	; 18
     aba:	30 83       	st	Z, r19
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	33 e1       	ldi	r19, 0x13	; 19
     ac0:	30 83       	st	Z, r19
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	34 e1       	ldi	r19, 0x14	; 20
     ac6:	30 83       	st	Z, r19
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	35 e1       	ldi	r19, 0x15	; 21
     acc:	30 83       	st	Z, r19
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	36 e1       	ldi	r19, 0x16	; 22
     ad2:	30 83       	st	Z, r19
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	37 e1       	ldi	r19, 0x17	; 23
     ad8:	30 83       	st	Z, r19
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	38 e1       	ldi	r19, 0x18	; 24
     ade:	30 83       	st	Z, r19
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	39 e1       	ldi	r19, 0x19	; 25
     ae4:	30 83       	st	Z, r19
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	30 e2       	ldi	r19, 0x20	; 32
     aea:	30 83       	st	Z, r19
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	31 e2       	ldi	r19, 0x21	; 33
     af0:	30 83       	st	Z, r19
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	20 83       	st	Z, r18
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	23 e2       	ldi	r18, 0x23	; 35
     afa:	20 83       	st	Z, r18
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	40 83       	st	Z, r20
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	50 83       	st	Z, r21
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	26 e2       	ldi	r18, 0x26	; 38
     b08:	20 83       	st	Z, r18
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	27 e2       	ldi	r18, 0x27	; 39
     b0e:	20 83       	st	Z, r18
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	28 e2       	ldi	r18, 0x28	; 40
     b14:	20 83       	st	Z, r18
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	29 e2       	ldi	r18, 0x29	; 41
     b1a:	20 83       	st	Z, r18
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	20 e3       	ldi	r18, 0x30	; 48
     b20:	20 83       	st	Z, r18
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	21 e3       	ldi	r18, 0x31	; 49
     b26:	20 83       	st	Z, r18
     b28:	87 97       	sbiw	r24, 0x27	; 39
     b2a:	08 95       	ret

00000b2c <xPortStartScheduler>:
     b2c:	65 e0       	ldi	r22, 0x05	; 5
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	98 e0       	ldi	r25, 0x08	; 8
     b32:	0e 94 0e 21 	call	0x421c	; 0x421c <TC0_ConfigClockSource>
     b36:	83 ef       	ldi	r24, 0xF3	; 243
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	e0 e0       	ldi	r30, 0x00	; 0
     b3c:	f8 e0       	ldi	r31, 0x08	; 8
     b3e:	86 a3       	std	Z+38, r24	; 0x26
     b40:	97 a3       	std	Z+39, r25	; 0x27
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	98 e0       	ldi	r25, 0x08	; 8
     b48:	0e 94 1a 21 	call	0x4234	; 0x4234 <TC0_SetOverflowIntLevel>
     b4c:	e0 ea       	ldi	r30, 0xA0	; 160
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	82 83       	std	Z+2, r24	; 0x02
     b56:	a0 91 d1 3c 	lds	r26, 0x3CD1
     b5a:	b0 91 d2 3c 	lds	r27, 0x3CD2
     b5e:	cd 91       	ld	r28, X+
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	dd 91       	ld	r29, X+
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	cf 90       	pop	r12
     b8e:	bf 90       	pop	r11
     b90:	af 90       	pop	r10
     b92:	9f 90       	pop	r9
     b94:	8f 90       	pop	r8
     b96:	7f 90       	pop	r7
     b98:	6f 90       	pop	r6
     b9a:	5f 90       	pop	r5
     b9c:	4f 90       	pop	r4
     b9e:	3f 90       	pop	r3
     ba0:	2f 90       	pop	r2
     ba2:	1f 90       	pop	r1
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	08 95       	ret
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	08 95       	ret

00000bb0 <vPortYield>:
 * Manual context switch.  The first thing we do is save the registers so we
 * can use a naked attribute.
 */
void vPortYield(void) __attribute__ ( ( naked ) );
void vPortYield(void) {
    portSAVE_CONTEXT();
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	0f 92       	push	r0
     bb8:	1f 92       	push	r1
     bba:	11 24       	eor	r1, r1
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
     bf8:	a0 91 d1 3c 	lds	r26, 0x3CD1
     bfc:	b0 91 d2 3c 	lds	r27, 0x3CD2
     c00:	0d b6       	in	r0, 0x3d	; 61
     c02:	0d 92       	st	X+, r0
     c04:	0e b6       	in	r0, 0x3e	; 62
     c06:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c08:	a2 d7       	rcall	.+3908   	; 0x1b4e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c0a:	a0 91 d1 3c 	lds	r26, 0x3CD1
     c0e:	b0 91 d2 3c 	lds	r27, 0x3CD2
     c12:	cd 91       	ld	r28, X+
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	dd 91       	ld	r29, X+
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	8f 90       	pop	r8
     c4a:	7f 90       	pop	r7
     c4c:	6f 90       	pop	r6
     c4e:	5f 90       	pop	r5
     c50:	4f 90       	pop	r4
     c52:	3f 90       	pop	r3
     c54:	2f 90       	pop	r2
     c56:	1f 90       	pop	r1
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0

    asm volatile ( "ret" );
     c5e:	08 95       	ret

00000c60 <__vector_14>:
     * Context switch function used by the tick.  This must be identical to
     * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
     * difference from vPortYield() is the tick count is incremented as the
     * call comes from the tick ISR.
     */
    portSAVE_CONTEXT();
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	0f 92       	push	r0
     c68:	1f 92       	push	r1
     c6a:	11 24       	eor	r1, r1
     c6c:	2f 92       	push	r2
     c6e:	3f 92       	push	r3
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
     ca8:	a0 91 d1 3c 	lds	r26, 0x3CD1
     cac:	b0 91 d2 3c 	lds	r27, 0x3CD2
     cb0:	0d b6       	in	r0, 0x3d	; 61
     cb2:	0d 92       	st	X+, r0
     cb4:	0e b6       	in	r0, 0x3e	; 62
     cb6:	0d 92       	st	X+, r0
    vTaskIncrementTick();
     cb8:	91 d5       	rcall	.+2850   	; 0x17dc <vTaskIncrementTick>
    vTaskSwitchContext();
     cba:	49 d7       	rcall	.+3730   	; 0x1b4e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     cbc:	a0 91 d1 3c 	lds	r26, 0x3CD1
     cc0:	b0 91 d2 3c 	lds	r27, 0x3CD2
     cc4:	cd 91       	ld	r28, X+
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	dd 91       	ld	r29, X+
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	5f 90       	pop	r5
     d02:	4f 90       	pop	r4
     d04:	3f 90       	pop	r3
     d06:	2f 90       	pop	r2
     d08:	1f 90       	pop	r1
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
    asm volatile ( "reti" );
     d10:	18 95       	reti

00000d12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     d12:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     d14:	03 96       	adiw	r24, 0x03	; 3
     d16:	81 83       	std	Z+1, r24	; 0x01
     d18:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d1a:	2f ef       	ldi	r18, 0xFF	; 255
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	23 83       	std	Z+3, r18	; 0x03
     d20:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     d22:	85 83       	std	Z+5, r24	; 0x05
     d24:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     d26:	87 83       	std	Z+7, r24	; 0x07
     d28:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     d2a:	10 82       	st	Z, r1
     d2c:	08 95       	ret

00000d2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d2e:	fc 01       	movw	r30, r24
     d30:	10 86       	std	Z+8, r1	; 0x08
     d32:	11 86       	std	Z+9, r1	; 0x09
     d34:	08 95       	ret

00000d36 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	fc 01       	movw	r30, r24
     d3c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d3e:	21 81       	ldd	r18, Z+1	; 0x01
     d40:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     d42:	e9 01       	movw	r28, r18
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	12 96       	adiw	r26, 0x02	; 2
     d4a:	8d 93       	st	X+, r24
     d4c:	9c 93       	st	X, r25
     d4e:	13 97       	sbiw	r26, 0x03	; 3
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	92 81       	ldd	r25, Z+2	; 0x02
     d54:	14 96       	adiw	r26, 0x04	; 4
     d56:	8d 93       	st	X+, r24
     d58:	9c 93       	st	X, r25
     d5a:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	ec 01       	movw	r28, r24
     d62:	6c 83       	std	Y+4, r22	; 0x04
     d64:	7d 83       	std	Y+5, r23	; 0x05
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     d66:	e9 01       	movw	r28, r18
     d68:	6a 83       	std	Y+2, r22	; 0x02
     d6a:	7b 83       	std	Y+3, r23	; 0x03
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     d6c:	61 83       	std	Z+1, r22	; 0x01
     d6e:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d70:	18 96       	adiw	r26, 0x08	; 8
     d72:	ed 93       	st	X+, r30
     d74:	fc 93       	st	X, r31
     d76:	19 97       	sbiw	r26, 0x09	; 9

	( pxList->uxNumberOfItems )++;
     d78:	80 81       	ld	r24, Z
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 83       	st	Z, r24
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     d8a:	48 81       	ld	r20, Y
     d8c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d8e:	4f 3f       	cpi	r20, 0xFF	; 255
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	52 07       	cpc	r21, r18
     d94:	31 f4       	brne	.+12     	; 0xda2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d96:	dc 01       	movw	r26, r24
     d98:	17 96       	adiw	r26, 0x07	; 7
     d9a:	ed 91       	ld	r30, X+
     d9c:	fc 91       	ld	r31, X
     d9e:	18 97       	sbiw	r26, 0x08	; 8
     da0:	17 c0       	rjmp	.+46     	; 0xdd0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     da2:	fc 01       	movw	r30, r24
     da4:	33 96       	adiw	r30, 0x03	; 3
     da6:	dc 01       	movw	r26, r24
     da8:	15 96       	adiw	r26, 0x05	; 5
     daa:	2d 91       	ld	r18, X+
     dac:	3c 91       	ld	r19, X
     dae:	16 97       	sbiw	r26, 0x06	; 6
     db0:	d9 01       	movw	r26, r18
     db2:	2d 91       	ld	r18, X+
     db4:	3c 91       	ld	r19, X
     db6:	42 17       	cp	r20, r18
     db8:	53 07       	cpc	r21, r19
     dba:	50 f0       	brcs	.+20     	; 0xdd0 <vListInsert+0x4c>
     dbc:	02 80       	ldd	r0, Z+2	; 0x02
     dbe:	f3 81       	ldd	r31, Z+3	; 0x03
     dc0:	e0 2d       	mov	r30, r0
     dc2:	a2 81       	ldd	r26, Z+2	; 0x02
     dc4:	b3 81       	ldd	r27, Z+3	; 0x03
     dc6:	2d 91       	ld	r18, X+
     dc8:	3c 91       	ld	r19, X
     dca:	42 17       	cp	r20, r18
     dcc:	53 07       	cpc	r21, r19
     dce:	b0 f7       	brcc	.-20     	; 0xdbc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dd0:	a2 81       	ldd	r26, Z+2	; 0x02
     dd2:	b3 81       	ldd	r27, Z+3	; 0x03
     dd4:	aa 83       	std	Y+2, r26	; 0x02
     dd6:	bb 83       	std	Y+3, r27	; 0x03
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	cd 93       	st	X+, r28
     ddc:	dc 93       	st	X, r29
     dde:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxIterator;
     de0:	ec 83       	std	Y+4, r30	; 0x04
     de2:	fd 83       	std	Y+5, r31	; 0x05
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     de4:	c2 83       	std	Z+2, r28	; 0x02
     de6:	d3 83       	std	Z+3, r29	; 0x03

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     de8:	88 87       	std	Y+8, r24	; 0x08
     dea:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     dec:	fc 01       	movw	r30, r24
     dee:	20 81       	ld	r18, Z
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	20 83       	st	Z, r18
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     dfa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	14 96       	adiw	r26, 0x04	; 4
     e06:	8d 93       	st	X+, r24
     e08:	9c 93       	st	X, r25
     e0a:	15 97       	sbiw	r26, 0x05	; 5
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e0c:	a4 81       	ldd	r26, Z+4	; 0x04
     e0e:	b5 81       	ldd	r27, Z+5	; 0x05
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	8d 93       	st	X+, r24
     e18:	9c 93       	st	X, r25
     e1a:	13 97       	sbiw	r26, 0x03	; 3
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     e1c:	a0 85       	ldd	r26, Z+8	; 0x08
     e1e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	8d 91       	ld	r24, X+
     e24:	9c 91       	ld	r25, X
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	8e 17       	cp	r24, r30
     e2a:	9f 07       	cpc	r25, r31
     e2c:	31 f4       	brne	.+12     	; 0xe3a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	8d 93       	st	X+, r24
     e36:	9c 93       	st	X, r25
     e38:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
     e3a:	10 86       	std	Z+8, r1	; 0x08
     e3c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     e3e:	8c 91       	ld	r24, X
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	8c 93       	st	X, r24
     e44:	08 95       	ret

00000e46 <prvCopyDataToQueue>:

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );

	return xReturn;
}
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e4e:	81 11       	cpse	r24, r1
     e50:	0b c0       	rjmp	.+22     	; 0xe68 <prvCopyDataToQueue+0x22>
     e52:	88 81       	ld	r24, Y
     e54:	99 81       	ldd	r25, Y+1	; 0x01
     e56:	89 2b       	or	r24, r25
     e58:	e1 f5       	brne	.+120    	; 0xed2 <prvCopyDataToQueue+0x8c>
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <vTaskPriorityDisinherit>
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	1b 82       	std	Y+3, r1	; 0x03
     e66:	35 c0       	rjmp	.+106    	; 0xed2 <prvCopyDataToQueue+0x8c>
     e68:	41 11       	cpse	r20, r1
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <prvCopyDataToQueue+0x54>
     e6c:	48 2f       	mov	r20, r24
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	0e 94 91 2b 	call	0x5722	; 0x5722 <memcpy>
     e78:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	82 0f       	add	r24, r18
     e80:	91 1d       	adc	r25, r1
     e82:	8c 83       	std	Y+4, r24	; 0x04
     e84:	9d 83       	std	Y+5, r25	; 0x05
     e86:	2a 81       	ldd	r18, Y+2	; 0x02
     e88:	3b 81       	ldd	r19, Y+3	; 0x03
     e8a:	82 17       	cp	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	08 f1       	brcs	.+66     	; 0xed2 <prvCopyDataToQueue+0x8c>
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	8c 83       	std	Y+4, r24	; 0x04
     e96:	9d 83       	std	Y+5, r25	; 0x05
     e98:	1c c0       	rjmp	.+56     	; 0xed2 <prvCopyDataToQueue+0x8c>
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	0e 94 91 2b 	call	0x5722	; 0x5722 <memcpy>
     ea6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	31 95       	neg	r19
     eac:	21 95       	neg	r18
     eae:	31 09       	sbc	r19, r1
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	8e 83       	std	Y+6, r24	; 0x06
     eba:	9f 83       	std	Y+7, r25	; 0x07
     ebc:	48 81       	ld	r20, Y
     ebe:	59 81       	ldd	r21, Y+1	; 0x01
     ec0:	84 17       	cp	r24, r20
     ec2:	95 07       	cpc	r25, r21
     ec4:	30 f4       	brcc	.+12     	; 0xed2 <prvCopyDataToQueue+0x8c>
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	28 0f       	add	r18, r24
     ecc:	39 1f       	adc	r19, r25
     ece:	2e 83       	std	Y+6, r18	; 0x06
     ed0:	3f 83       	std	Y+7, r19	; 0x07
     ed2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8a 8f       	std	Y+26, r24	; 0x1a
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <prvCopyDataFromQueue>:
     ede:	fc 01       	movw	r30, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	a0 81       	ld	r26, Z
     ee4:	b1 81       	ldd	r27, Z+1	; 0x01
     ee6:	10 97       	sbiw	r26, 0x00	; 0
     ee8:	99 f0       	breq	.+38     	; 0xf10 <prvCopyDataFromQueue+0x32>
     eea:	44 8d       	ldd	r20, Z+28	; 0x1c
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	26 81       	ldd	r18, Z+6	; 0x06
     ef0:	37 81       	ldd	r19, Z+7	; 0x07
     ef2:	24 0f       	add	r18, r20
     ef4:	35 1f       	adc	r19, r21
     ef6:	26 83       	std	Z+6, r18	; 0x06
     ef8:	37 83       	std	Z+7, r19	; 0x07
     efa:	62 81       	ldd	r22, Z+2	; 0x02
     efc:	73 81       	ldd	r23, Z+3	; 0x03
     efe:	26 17       	cp	r18, r22
     f00:	37 07       	cpc	r19, r23
     f02:	10 f0       	brcs	.+4      	; 0xf08 <prvCopyDataFromQueue+0x2a>
     f04:	a6 83       	std	Z+6, r26	; 0x06
     f06:	b7 83       	std	Z+7, r27	; 0x07
     f08:	66 81       	ldd	r22, Z+6	; 0x06
     f0a:	77 81       	ldd	r23, Z+7	; 0x07
     f0c:	0c 94 91 2b 	jmp	0x5722	; 0x5722 <memcpy>
     f10:	08 95       	ret

00000f12 <prvUnlockQueue>:
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	0f 92       	push	r0
     f22:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f24:	18 16       	cp	r1, r24
     f26:	9c f4       	brge	.+38     	; 0xf4e <prvUnlockQueue+0x3c>
     f28:	89 89       	ldd	r24, Y+17	; 0x11
     f2a:	88 23       	and	r24, r24
     f2c:	81 f0       	breq	.+32     	; 0xf4e <prvUnlockQueue+0x3c>
     f2e:	8e 01       	movw	r16, r28
     f30:	0f 5e       	subi	r16, 0xEF	; 239
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <prvUnlockQueue+0x2a>
     f36:	89 89       	ldd	r24, Y+17	; 0x11
     f38:	88 23       	and	r24, r24
     f3a:	49 f0       	breq	.+18     	; 0xf4e <prvUnlockQueue+0x3c>
     f3c:	c8 01       	movw	r24, r16
     f3e:	f7 d6       	rcall	.+3566   	; 0x1d2e <xTaskRemoveFromEventList>
     f40:	81 11       	cpse	r24, r1
     f42:	81 d7       	rcall	.+3842   	; 0x1e46 <vTaskMissedYield>
     f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	8e 8f       	std	Y+30, r24	; 0x1e
     f4a:	18 16       	cp	r1, r24
     f4c:	a4 f3       	brlt	.-24     	; 0xf36 <prvUnlockQueue+0x24>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	8e 8f       	std	Y+30, r24	; 0x1e
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5e:	18 16       	cp	r1, r24
     f60:	9c f4       	brge	.+38     	; 0xf88 <prvUnlockQueue+0x76>
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	88 23       	and	r24, r24
     f66:	81 f0       	breq	.+32     	; 0xf88 <prvUnlockQueue+0x76>
     f68:	8e 01       	movw	r16, r28
     f6a:	08 5f       	subi	r16, 0xF8	; 248
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <prvUnlockQueue+0x64>
     f70:	88 85       	ldd	r24, Y+8	; 0x08
     f72:	88 23       	and	r24, r24
     f74:	49 f0       	breq	.+18     	; 0xf88 <prvUnlockQueue+0x76>
     f76:	c8 01       	movw	r24, r16
     f78:	da d6       	rcall	.+3508   	; 0x1d2e <xTaskRemoveFromEventList>
     f7a:	81 11       	cpse	r24, r1
     f7c:	64 d7       	rcall	.+3784   	; 0x1e46 <vTaskMissedYield>
     f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f80:	81 50       	subi	r24, 0x01	; 1
     f82:	8d 8f       	std	Y+29, r24	; 0x1d
     f84:	18 16       	cp	r1, r24
     f86:	a4 f3       	brlt	.-24     	; 0xf70 <prvUnlockQueue+0x5e>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	8d 8f       	std	Y+29, r24	; 0x1d
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <xQueueCreate>:
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	d8 2e       	mov	r13, r24
     fac:	c6 2e       	mov	r12, r22
     fae:	88 23       	and	r24, r24
     fb0:	a1 f1       	breq	.+104    	; 0x101a <xQueueCreate+0x80>
     fb2:	8f e1       	ldi	r24, 0x1F	; 31
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	1e dd       	rcall	.-1476   	; 0x9f4 <pvPortMalloc>
     fb8:	ec 01       	movw	r28, r24
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	81 f1       	breq	.+96     	; 0x101e <xQueueCreate+0x84>
     fbe:	ec 2c       	mov	r14, r12
     fc0:	f1 2c       	mov	r15, r1
     fc2:	de 9c       	mul	r13, r14
     fc4:	80 01       	movw	r16, r0
     fc6:	df 9c       	mul	r13, r15
     fc8:	10 0d       	add	r17, r0
     fca:	11 24       	eor	r1, r1
     fcc:	c8 01       	movw	r24, r16
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	11 dd       	rcall	.-1502   	; 0x9f4 <pvPortMalloc>
     fd2:	88 83       	st	Y, r24
     fd4:	99 83       	std	Y+1, r25	; 0x01
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d9 f0       	breq	.+54     	; 0x1010 <xQueueCreate+0x76>
     fda:	ac 01       	movw	r20, r24
     fdc:	40 0f       	add	r20, r16
     fde:	51 1f       	adc	r21, r17
     fe0:	4a 83       	std	Y+2, r20	; 0x02
     fe2:	5b 83       	std	Y+3, r21	; 0x03
     fe4:	1a 8e       	std	Y+26, r1	; 0x1a
     fe6:	8c 83       	std	Y+4, r24	; 0x04
     fe8:	9d 83       	std	Y+5, r25	; 0x05
     fea:	0e 19       	sub	r16, r14
     fec:	1f 09       	sbc	r17, r15
     fee:	9c 01       	movw	r18, r24
     ff0:	20 0f       	add	r18, r16
     ff2:	31 1f       	adc	r19, r17
     ff4:	2e 83       	std	Y+6, r18	; 0x06
     ff6:	3f 83       	std	Y+7, r19	; 0x07
     ff8:	db 8e       	std	Y+27, r13	; 0x1b
     ffa:	cc 8e       	std	Y+28, r12	; 0x1c
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
    1002:	ce 01       	movw	r24, r28
    1004:	08 96       	adiw	r24, 0x08	; 8
    1006:	85 de       	rcall	.-758    	; 0xd12 <vListInitialise>
    1008:	ce 01       	movw	r24, r28
    100a:	41 96       	adiw	r24, 0x11	; 17
    100c:	82 de       	rcall	.-764    	; 0xd12 <vListInitialise>
    100e:	07 c0       	rjmp	.+14     	; 0x101e <xQueueCreate+0x84>
    1010:	ce 01       	movw	r24, r28
    1012:	14 dd       	rcall	.-1496   	; 0xa3c <vPortFree>
    1014:	c0 e0       	ldi	r28, 0x00	; 0
    1016:	d0 e0       	ldi	r29, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <xQueueCreate+0x84>
    101a:	c0 e0       	ldi	r28, 0x00	; 0
    101c:	d0 e0       	ldi	r29, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <xQueueGenericSend>:
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	25 97       	sbiw	r28, 0x05	; 5
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	8c 01       	movw	r16, r24
    1052:	6b 01       	movw	r12, r22
    1054:	4c 83       	std	Y+4, r20	; 0x04
    1056:	5d 83       	std	Y+5, r21	; 0x05
    1058:	a2 2e       	mov	r10, r18
    105a:	b1 2c       	mov	r11, r1
    105c:	7c 01       	movw	r14, r24
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	e8 0e       	add	r14, r24
    1062:	f1 1c       	adc	r15, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	f8 01       	movw	r30, r16
    106c:	92 8d       	ldd	r25, Z+26	; 0x1a
    106e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1070:	98 17       	cp	r25, r24
    1072:	90 f4       	brcc	.+36     	; 0x1098 <xQueueGenericSend+0x66>
    1074:	4a 2d       	mov	r20, r10
    1076:	b6 01       	movw	r22, r12
    1078:	c8 01       	movw	r24, r16
    107a:	e5 de       	rcall	.-566    	; 0xe46 <prvCopyDataToQueue>
    107c:	f8 01       	movw	r30, r16
    107e:	81 89       	ldd	r24, Z+17	; 0x11
    1080:	88 23       	and	r24, r24
    1082:	31 f0       	breq	.+12     	; 0x1090 <xQueueGenericSend+0x5e>
    1084:	c8 01       	movw	r24, r16
    1086:	41 96       	adiw	r24, 0x11	; 17
    1088:	52 d6       	rcall	.+3236   	; 0x1d2e <xTaskRemoveFromEventList>
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f4       	brne	.+2      	; 0x1090 <xQueueGenericSend+0x5e>
    108e:	90 dd       	rcall	.-1248   	; 0xbb0 <vPortYield>
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	47 c0       	rjmp	.+142    	; 0x1126 <xQueueGenericSend+0xf4>
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	ef 2b       	or	r30, r31
    109e:	21 f4       	brne	.+8      	; 0x10a8 <xQueueGenericSend+0x76>
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <xQueueGenericSend+0xf4>
    10a8:	b1 10       	cpse	r11, r1
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <xQueueGenericSend+0x84>
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	81 d6       	rcall	.+3330   	; 0x1db4 <vTaskSetTimeOutState>
    10b2:	bb 24       	eor	r11, r11
    10b4:	b3 94       	inc	r11
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	7d d3       	rcall	.+1786   	; 0x17b6 <vTaskSuspendAll>
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	0f 92       	push	r0
    10c2:	f8 01       	movw	r30, r16
    10c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    10c6:	8f 3f       	cpi	r24, 0xFF	; 255
    10c8:	09 f4       	brne	.+2      	; 0x10cc <xQueueGenericSend+0x9a>
    10ca:	15 8e       	std	Z+29, r1	; 0x1d
    10cc:	f8 01       	movw	r30, r16
    10ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    10d0:	8f 3f       	cpi	r24, 0xFF	; 255
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <xQueueGenericSend+0xa4>
    10d4:	16 8e       	std	Z+30, r1	; 0x1e
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	be 01       	movw	r22, r28
    10dc:	6c 5f       	subi	r22, 0xFC	; 252
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	72 d6       	rcall	.+3300   	; 0x1dca <xTaskCheckForTimeOut>
    10e6:	81 11       	cpse	r24, r1
    10e8:	1a c0       	rjmp	.+52     	; 0x111e <xQueueGenericSend+0xec>
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	0f 92       	push	r0
    10f0:	f8 01       	movw	r30, r16
    10f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	f8 01       	movw	r30, r16
    10fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    10fc:	98 13       	cpse	r25, r24
    10fe:	0b c0       	rjmp	.+22     	; 0x1116 <xQueueGenericSend+0xe4>
    1100:	6c 81       	ldd	r22, Y+4	; 0x04
    1102:	7d 81       	ldd	r23, Y+5	; 0x05
    1104:	c7 01       	movw	r24, r14
    1106:	d1 d5       	rcall	.+2978   	; 0x1caa <vTaskPlaceOnEventList>
    1108:	c8 01       	movw	r24, r16
    110a:	03 df       	rcall	.-506    	; 0xf12 <prvUnlockQueue>
    110c:	28 d4       	rcall	.+2128   	; 0x195e <xTaskResumeAll>
    110e:	81 11       	cpse	r24, r1
    1110:	a9 cf       	rjmp	.-174    	; 0x1064 <xQueueGenericSend+0x32>
    1112:	4e dd       	rcall	.-1380   	; 0xbb0 <vPortYield>
    1114:	a7 cf       	rjmp	.-178    	; 0x1064 <xQueueGenericSend+0x32>
    1116:	c8 01       	movw	r24, r16
    1118:	fc de       	rcall	.-520    	; 0xf12 <prvUnlockQueue>
    111a:	21 d4       	rcall	.+2114   	; 0x195e <xTaskResumeAll>
    111c:	a3 cf       	rjmp	.-186    	; 0x1064 <xQueueGenericSend+0x32>
    111e:	c8 01       	movw	r24, r16
    1120:	f8 de       	rcall	.-528    	; 0xf12 <prvUnlockQueue>
    1122:	1d d4       	rcall	.+2106   	; 0x195e <xTaskResumeAll>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	25 96       	adiw	r28, 0x05	; 5
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret

00001142 <xQueueCreateMutex>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	8f e1       	ldi	r24, 0x1F	; 31
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	54 dc       	rcall	.-1880   	; 0x9f4 <pvPortMalloc>
    114c:	ec 01       	movw	r28, r24
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	e1 f0       	breq	.+56     	; 0x118a <xQueueCreateMutex+0x48>
    1152:	1a 82       	std	Y+2, r1	; 0x02
    1154:	1b 82       	std	Y+3, r1	; 0x03
    1156:	18 82       	st	Y, r1
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	1c 82       	std	Y+4, r1	; 0x04
    115c:	1d 82       	std	Y+5, r1	; 0x05
    115e:	1e 82       	std	Y+6, r1	; 0x06
    1160:	1f 82       	std	Y+7, r1	; 0x07
    1162:	1a 8e       	std	Y+26, r1	; 0x1a
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	8b 8f       	std	Y+27, r24	; 0x1b
    1168:	1c 8e       	std	Y+28, r1	; 0x1c
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	8d 8f       	std	Y+29, r24	; 0x1d
    116e:	8e 8f       	std	Y+30, r24	; 0x1e
    1170:	ce 01       	movw	r24, r28
    1172:	08 96       	adiw	r24, 0x08	; 8
    1174:	ce dd       	rcall	.-1124   	; 0xd12 <vListInitialise>
    1176:	ce 01       	movw	r24, r28
    1178:	41 96       	adiw	r24, 0x11	; 17
    117a:	cb dd       	rcall	.-1130   	; 0xd12 <vListInitialise>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	54 df       	rcall	.-344    	; 0x1032 <xQueueGenericSend>
    118a:	ce 01       	movw	r24, r28
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <xQueueGenericSendFromISR>:
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
    119c:	8a 01       	movw	r16, r20
    119e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a2:	98 17       	cp	r25, r24
    11a4:	b0 f4       	brcc	.+44     	; 0x11d2 <xQueueGenericSendFromISR+0x40>
    11a6:	42 2f       	mov	r20, r18
    11a8:	ce 01       	movw	r24, r28
    11aa:	4d de       	rcall	.-870    	; 0xe46 <prvCopyDataToQueue>
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	8f 3f       	cpi	r24, 0xFF	; 255
    11b0:	61 f4       	brne	.+24     	; 0x11ca <xQueueGenericSendFromISR+0x38>
    11b2:	89 89       	ldd	r24, Y+17	; 0x11
    11b4:	88 23       	and	r24, r24
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <xQueueGenericSendFromISR+0x44>
    11b8:	ce 01       	movw	r24, r28
    11ba:	41 96       	adiw	r24, 0x11	; 17
    11bc:	b8 d5       	rcall	.+2928   	; 0x1d2e <xTaskRemoveFromEventList>
    11be:	88 23       	and	r24, r24
    11c0:	61 f0       	breq	.+24     	; 0x11da <xQueueGenericSendFromISR+0x48>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	f8 01       	movw	r30, r16
    11c6:	80 83       	st	Z, r24
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	8e 8f       	std	Y+30, r24	; 0x1e
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <xQueueGenericReceive>:
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	25 97       	sbiw	r28, 0x05	; 5
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	8c 01       	movw	r16, r24
    1206:	6b 01       	movw	r12, r22
    1208:	4c 83       	std	Y+4, r20	; 0x04
    120a:	5d 83       	std	Y+5, r21	; 0x05
    120c:	b2 2e       	mov	r11, r18
    120e:	a1 2c       	mov	r10, r1
    1210:	7c 01       	movw	r14, r24
    1212:	81 e1       	ldi	r24, 0x11	; 17
    1214:	e8 0e       	add	r14, r24
    1216:	f1 1c       	adc	r15, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	f8 01       	movw	r30, r16
    1220:	82 8d       	ldd	r24, Z+26	; 0x1a
    1222:	88 23       	and	r24, r24
    1224:	69 f1       	breq	.+90     	; 0x1280 <xQueueGenericReceive+0x9a>
    1226:	e6 80       	ldd	r14, Z+6	; 0x06
    1228:	f7 80       	ldd	r15, Z+7	; 0x07
    122a:	b6 01       	movw	r22, r12
    122c:	c8 01       	movw	r24, r16
    122e:	57 de       	rcall	.-850    	; 0xede <prvCopyDataFromQueue>
    1230:	b1 10       	cpse	r11, r1
    1232:	17 c0       	rjmp	.+46     	; 0x1262 <xQueueGenericReceive+0x7c>
    1234:	f8 01       	movw	r30, r16
    1236:	82 8d       	ldd	r24, Z+26	; 0x1a
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	82 8f       	std	Z+26, r24	; 0x1a
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	89 2b       	or	r24, r25
    1242:	21 f4       	brne	.+8      	; 0x124c <xQueueGenericReceive+0x66>
    1244:	04 d6       	rcall	.+3080   	; 0x1e4e <xTaskGetCurrentTaskHandle>
    1246:	f8 01       	movw	r30, r16
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	93 83       	std	Z+3, r25	; 0x03
    124c:	f8 01       	movw	r30, r16
    124e:	80 85       	ldd	r24, Z+8	; 0x08
    1250:	88 23       	and	r24, r24
    1252:	91 f0       	breq	.+36     	; 0x1278 <xQueueGenericReceive+0x92>
    1254:	c8 01       	movw	r24, r16
    1256:	08 96       	adiw	r24, 0x08	; 8
    1258:	6a d5       	rcall	.+2772   	; 0x1d2e <xTaskRemoveFromEventList>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	69 f4       	brne	.+26     	; 0x1278 <xQueueGenericReceive+0x92>
    125e:	a8 dc       	rcall	.-1712   	; 0xbb0 <vPortYield>
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <xQueueGenericReceive+0x92>
    1262:	f8 01       	movw	r30, r16
    1264:	e6 82       	std	Z+6, r14	; 0x06
    1266:	f7 82       	std	Z+7, r15	; 0x07
    1268:	81 89       	ldd	r24, Z+17	; 0x11
    126a:	88 23       	and	r24, r24
    126c:	29 f0       	breq	.+10     	; 0x1278 <xQueueGenericReceive+0x92>
    126e:	c8 01       	movw	r24, r16
    1270:	41 96       	adiw	r24, 0x11	; 17
    1272:	5d d5       	rcall	.+2746   	; 0x1d2e <xTaskRemoveFromEventList>
    1274:	81 11       	cpse	r24, r1
    1276:	9c dc       	rcall	.-1736   	; 0xbb0 <vPortYield>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	53 c0       	rjmp	.+166    	; 0x1326 <xQueueGenericReceive+0x140>
    1280:	4c 81       	ldd	r20, Y+4	; 0x04
    1282:	5d 81       	ldd	r21, Y+5	; 0x05
    1284:	45 2b       	or	r20, r21
    1286:	21 f4       	brne	.+8      	; 0x1290 <xQueueGenericReceive+0xaa>
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	4b c0       	rjmp	.+150    	; 0x1326 <xQueueGenericReceive+0x140>
    1290:	a1 10       	cpse	r10, r1
    1292:	05 c0       	rjmp	.+10     	; 0x129e <xQueueGenericReceive+0xb8>
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	8d d5       	rcall	.+2842   	; 0x1db4 <vTaskSetTimeOutState>
    129a:	aa 24       	eor	r10, r10
    129c:	a3 94       	inc	r10
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	89 d2       	rcall	.+1298   	; 0x17b6 <vTaskSuspendAll>
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	0f 92       	push	r0
    12aa:	f8 01       	movw	r30, r16
    12ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <xQueueGenericReceive+0xce>
    12b2:	15 8e       	std	Z+29, r1	; 0x1d
    12b4:	f8 01       	movw	r30, r16
    12b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	09 f4       	brne	.+2      	; 0x12be <xQueueGenericReceive+0xd8>
    12bc:	16 8e       	std	Z+30, r1	; 0x1e
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	be 01       	movw	r22, r28
    12c4:	6c 5f       	subi	r22, 0xFC	; 252
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	7e d5       	rcall	.+2812   	; 0x1dca <xTaskCheckForTimeOut>
    12ce:	81 11       	cpse	r24, r1
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <xQueueGenericReceive+0x138>
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	f8 01       	movw	r30, r16
    12da:	82 8d       	ldd	r24, Z+26	; 0x1a
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	81 11       	cpse	r24, r1
    12e2:	19 c0       	rjmp	.+50     	; 0x1316 <xQueueGenericReceive+0x130>
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	89 2b       	or	r24, r25
    12ec:	49 f4       	brne	.+18     	; 0x1300 <xQueueGenericReceive+0x11a>
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	0f 92       	push	r0
    12f4:	f8 01       	movw	r30, r16
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	bc d5       	rcall	.+2936   	; 0x1e74 <vTaskPriorityInherit>
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	6c 81       	ldd	r22, Y+4	; 0x04
    1302:	7d 81       	ldd	r23, Y+5	; 0x05
    1304:	c7 01       	movw	r24, r14
    1306:	d1 d4       	rcall	.+2466   	; 0x1caa <vTaskPlaceOnEventList>
    1308:	c8 01       	movw	r24, r16
    130a:	03 de       	rcall	.-1018   	; 0xf12 <prvUnlockQueue>
    130c:	28 d3       	rcall	.+1616   	; 0x195e <xTaskResumeAll>
    130e:	81 11       	cpse	r24, r1
    1310:	83 cf       	rjmp	.-250    	; 0x1218 <xQueueGenericReceive+0x32>
    1312:	4e dc       	rcall	.-1892   	; 0xbb0 <vPortYield>
    1314:	81 cf       	rjmp	.-254    	; 0x1218 <xQueueGenericReceive+0x32>
    1316:	c8 01       	movw	r24, r16
    1318:	fc dd       	rcall	.-1032   	; 0xf12 <prvUnlockQueue>
    131a:	21 d3       	rcall	.+1602   	; 0x195e <xTaskResumeAll>
    131c:	7d cf       	rjmp	.-262    	; 0x1218 <xQueueGenericReceive+0x32>
    131e:	c8 01       	movw	r24, r16
    1320:	f8 dd       	rcall	.-1040   	; 0xf12 <prvUnlockQueue>
    1322:	1d d3       	rcall	.+1594   	; 0x195e <xTaskResumeAll>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	25 96       	adiw	r28, 0x05	; 5
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	08 95       	ret

00001342 <xQueueReceiveFromISR>:
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
    134c:	8a 01       	movw	r16, r20
    134e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1350:	88 23       	and	r24, r24
    1352:	c1 f0       	breq	.+48     	; 0x1384 <xQueueReceiveFromISR+0x42>
    1354:	ce 01       	movw	r24, r28
    1356:	c3 dd       	rcall	.-1146   	; 0xede <prvCopyDataFromQueue>
    1358:	8a 8d       	ldd	r24, Y+26	; 0x1a
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	8a 8f       	std	Y+26, r24	; 0x1a
    135e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	61 f4       	brne	.+24     	; 0x137c <xQueueReceiveFromISR+0x3a>
    1364:	88 85       	ldd	r24, Y+8	; 0x08
    1366:	88 23       	and	r24, r24
    1368:	79 f0       	breq	.+30     	; 0x1388 <xQueueReceiveFromISR+0x46>
    136a:	ce 01       	movw	r24, r28
    136c:	08 96       	adiw	r24, 0x08	; 8
    136e:	df d4       	rcall	.+2494   	; 0x1d2e <xTaskRemoveFromEventList>
    1370:	88 23       	and	r24, r24
    1372:	61 f0       	breq	.+24     	; 0x138c <xQueueReceiveFromISR+0x4a>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	f8 01       	movw	r30, r16
    1378:	80 83       	st	Z, r24
    137a:	09 c0       	rjmp	.+18     	; 0x138e <xQueueReceiveFromISR+0x4c>
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8d 8f       	std	Y+29, r24	; 0x1d
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	05 c0       	rjmp	.+10     	; 0x138e <xQueueReceiveFromISR+0x4c>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	03 c0       	rjmp	.+6      	; 0x138e <xQueueReceiveFromISR+0x4c>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	01 c0       	rjmp	.+2      	; 0x138e <xQueueReceiveFromISR+0x4c>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <uxQueueMessagesWaiting>:
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	0f 92       	push	r0
    139e:	fc 01       	movw	r30, r24
    13a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	08 95       	ret

000013a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	0f 92       	push	r0
    13b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	09 f4       	brne	.+2      	; 0x13bc <vQueueWaitForMessageRestricted+0x14>
    13ba:	1d 8e       	std	Y+29, r1	; 0x1d
    13bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <vQueueWaitForMessageRestricted+0x1c>
    13c2:	1e 8e       	std	Y+30, r1	; 0x1e
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
    13c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13ca:	81 11       	cpse	r24, r1
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <vQueueWaitForMessageRestricted+0x2c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13ce:	ce 01       	movw	r24, r28
    13d0:	41 96       	adiw	r24, 0x11	; 17
    13d2:	93 d4       	rcall	.+2342   	; 0x1cfa <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
    13d4:	ce 01       	movw	r24, r28
    13d6:	9d dd       	rcall	.-1222   	; 0xf12 <prvUnlockQueue>
	}
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <prvIdleTask>:
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    13de:	c8 ec       	ldi	r28, 0xC8	; 200
    13e0:	dc e3       	ldi	r29, 0x3C	; 60
    13e2:	88 81       	ld	r24, Y
    13e4:	82 30       	cpi	r24, 0x02	; 2
    13e6:	e8 f3       	brcs	.-6      	; 0x13e2 <prvIdleTask+0x4>
    13e8:	e3 db       	rcall	.-2106   	; 0xbb0 <vPortYield>
    13ea:	fb cf       	rjmp	.-10     	; 0x13e2 <prvIdleTask+0x4>

000013ec <prvAddCurrentTaskToDelayedList>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	e0 91 d1 3c 	lds	r30, 0x3CD1
    13f6:	f0 91 d2 3c 	lds	r31, 0x3CD2
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	93 83       	std	Z+3, r25	; 0x03
    13fe:	80 91 9d 3c 	lds	r24, 0x3C9D
    1402:	90 91 9e 3c 	lds	r25, 0x3C9E
    1406:	c8 17       	cp	r28, r24
    1408:	d9 07       	cpc	r29, r25
    140a:	60 f4       	brcc	.+24     	; 0x1424 <prvAddCurrentTaskToDelayedList+0x38>
    140c:	60 91 d1 3c 	lds	r22, 0x3CD1
    1410:	70 91 d2 3c 	lds	r23, 0x3CD2
    1414:	80 91 b2 3c 	lds	r24, 0x3CB2
    1418:	90 91 b3 3c 	lds	r25, 0x3CB3
    141c:	6e 5f       	subi	r22, 0xFE	; 254
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	b1 dc       	rcall	.-1694   	; 0xd84 <vListInsert>
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <prvAddCurrentTaskToDelayedList+0x64>
    1424:	60 91 d1 3c 	lds	r22, 0x3CD1
    1428:	70 91 d2 3c 	lds	r23, 0x3CD2
    142c:	80 91 b4 3c 	lds	r24, 0x3CB4
    1430:	90 91 b5 3c 	lds	r25, 0x3CB5
    1434:	6e 5f       	subi	r22, 0xFE	; 254
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	a5 dc       	rcall	.-1718   	; 0xd84 <vListInsert>
    143a:	80 91 05 20 	lds	r24, 0x2005
    143e:	90 91 06 20 	lds	r25, 0x2006
    1442:	c8 17       	cp	r28, r24
    1444:	d9 07       	cpc	r29, r25
    1446:	20 f4       	brcc	.+8      	; 0x1450 <prvAddCurrentTaskToDelayedList+0x64>
    1448:	c0 93 05 20 	sts	0x2005, r28
    144c:	d0 93 06 20 	sts	0x2006, r29
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <prvListTaskWithinSingleList>:
    1456:	3f 92       	push	r3
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	5c 01       	movw	r10, r24
    147a:	4b 01       	movw	r8, r22
    147c:	34 2e       	mov	r3, r20
    147e:	db 01       	movw	r26, r22
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	12 97       	sbiw	r26, 0x02	; 2
    1488:	02 80       	ldd	r0, Z+2	; 0x02
    148a:	f3 81       	ldd	r31, Z+3	; 0x03
    148c:	e0 2d       	mov	r30, r0
    148e:	11 96       	adiw	r26, 0x01	; 1
    1490:	ed 93       	st	X+, r30
    1492:	fc 93       	st	X, r31
    1494:	12 97       	sbiw	r26, 0x02	; 2
    1496:	7b 01       	movw	r14, r22
    1498:	b3 e0       	ldi	r27, 0x03	; 3
    149a:	eb 0e       	add	r14, r27
    149c:	f1 1c       	adc	r15, r1
    149e:	ee 15       	cp	r30, r14
    14a0:	ff 05       	cpc	r31, r15
    14a2:	29 f4       	brne	.+10     	; 0x14ae <prvListTaskWithinSingleList+0x58>
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	fb 01       	movw	r30, r22
    14aa:	81 83       	std	Z+1, r24	; 0x01
    14ac:	92 83       	std	Z+2, r25	; 0x02
    14ae:	d4 01       	movw	r26, r8
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	c6 80       	ldd	r12, Z+6	; 0x06
    14ba:	d7 80       	ldd	r13, Z+7	; 0x07
    14bc:	43 2c       	mov	r4, r3
    14be:	55 24       	eor	r5, r5
    14c0:	47 fc       	sbrc	r4, 7
    14c2:	50 94       	com	r5
    14c4:	0f 2e       	mov	r0, r31
    14c6:	ff e6       	ldi	r31, 0x6F	; 111
    14c8:	6f 2e       	mov	r6, r31
    14ca:	f0 e2       	ldi	r31, 0x20	; 32
    14cc:	7f 2e       	mov	r7, r31
    14ce:	f0 2d       	mov	r31, r0
    14d0:	0e e5       	ldi	r16, 0x5E	; 94
    14d2:	1c e3       	ldi	r17, 0x3C	; 60
    14d4:	d4 01       	movw	r26, r8
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	8d 93       	st	X+, r24
    14e6:	9c 93       	st	X, r25
    14e8:	12 97       	sbiw	r26, 0x02	; 2
    14ea:	e8 16       	cp	r14, r24
    14ec:	f9 06       	cpc	r15, r25
    14ee:	39 f4       	brne	.+14     	; 0x14fe <prvListTaskWithinSingleList+0xa8>
    14f0:	f7 01       	movw	r30, r14
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	8d 93       	st	X+, r24
    14fa:	9c 93       	st	X, r25
    14fc:	12 97       	sbiw	r26, 0x02	; 2
    14fe:	d4 01       	movw	r26, r8
    1500:	11 96       	adiw	r26, 0x01	; 1
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	12 97       	sbiw	r26, 0x02	; 2
    1508:	c6 81       	ldd	r28, Z+6	; 0x06
    150a:	d7 81       	ldd	r29, Z+7	; 0x07
    150c:	ef 89       	ldd	r30, Y+23	; 0x17
    150e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1510:	80 81       	ld	r24, Z
    1512:	85 3a       	cpi	r24, 0xA5	; 165
    1514:	41 f4       	brne	.+16     	; 0x1526 <prvListTaskWithinSingleList+0xd0>
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	21 91       	ld	r18, Z+
    1520:	25 3a       	cpi	r18, 0xA5	; 165
    1522:	e1 f3       	breq	.-8      	; 0x151c <prvListTaskWithinSingleList+0xc6>
    1524:	02 c0       	rjmp	.+4      	; 0x152a <prvListTaskWithinSingleList+0xd4>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	39 a1       	ldd	r19, Y+33	; 0x21
    152c:	2e 89       	ldd	r18, Y+22	; 0x16
    152e:	1f 92       	push	r1
    1530:	3f 93       	push	r19
    1532:	9f 93       	push	r25
    1534:	8f 93       	push	r24
    1536:	1f 92       	push	r1
    1538:	2f 93       	push	r18
    153a:	5f 92       	push	r5
    153c:	3f 92       	push	r3
    153e:	ce 01       	movw	r24, r28
    1540:	49 96       	adiw	r24, 0x19	; 25
    1542:	9f 93       	push	r25
    1544:	8f 93       	push	r24
    1546:	7f 92       	push	r7
    1548:	6f 92       	push	r6
    154a:	1f 93       	push	r17
    154c:	0f 93       	push	r16
    154e:	0e 94 30 2c 	call	0x5860	; 0x5860 <sprintf>
    1552:	b8 01       	movw	r22, r16
    1554:	c5 01       	movw	r24, r10
    1556:	0e 94 a1 2b 	call	0x5742	; 0x5742 <strcat>
    155a:	ed b7       	in	r30, 0x3d	; 61
    155c:	fe b7       	in	r31, 0x3e	; 62
    155e:	3e 96       	adiw	r30, 0x0e	; 14
    1560:	ed bf       	out	0x3d, r30	; 61
    1562:	fe bf       	out	0x3e, r31	; 62
    1564:	cc 15       	cp	r28, r12
    1566:	dd 05       	cpc	r29, r13
    1568:	09 f0       	breq	.+2      	; 0x156c <prvListTaskWithinSingleList+0x116>
    156a:	b4 cf       	rjmp	.-152    	; 0x14d4 <prvListTaskWithinSingleList+0x7e>
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	4f 90       	pop	r4
    158c:	3f 90       	pop	r3
    158e:	08 95       	ret

00001590 <xTaskGenericCreate>:
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	4c 01       	movw	r8, r24
    15b0:	3b 01       	movw	r6, r22
    15b2:	5a 01       	movw	r10, r20
    15b4:	29 01       	movw	r4, r18
    15b6:	83 e2       	ldi	r24, 0x23	; 35
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	1c da       	rcall	.-3016   	; 0x9f4 <pvPortMalloc>
    15bc:	ec 01       	movw	r28, r24
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <xTaskGenericCreate+0x34>
    15c2:	9f c0       	rjmp	.+318    	; 0x1702 <xTaskGenericCreate+0x172>
    15c4:	c1 14       	cp	r12, r1
    15c6:	d1 04       	cpc	r13, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <xTaskGenericCreate+0x3c>
    15ca:	97 c0       	rjmp	.+302    	; 0x16fa <xTaskGenericCreate+0x16a>
    15cc:	c5 01       	movw	r24, r10
    15ce:	12 da       	rcall	.-3036   	; 0x9f4 <pvPortMalloc>
    15d0:	8f 8b       	std	Y+23, r24	; 0x17
    15d2:	98 8f       	std	Y+24, r25	; 0x18
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	19 f4       	brne	.+6      	; 0x15de <xTaskGenericCreate+0x4e>
    15d8:	ce 01       	movw	r24, r28
    15da:	30 da       	rcall	.-2976   	; 0xa3c <vPortFree>
    15dc:	92 c0       	rjmp	.+292    	; 0x1702 <xTaskGenericCreate+0x172>
    15de:	a5 01       	movw	r20, r10
    15e0:	65 ea       	ldi	r22, 0xA5	; 165
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 9a 2b 	call	0x5734	; 0x5734 <memset>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	a8 1a       	sub	r10, r24
    15ec:	b1 08       	sbc	r11, r1
    15ee:	8f 89       	ldd	r24, Y+23	; 0x17
    15f0:	98 8d       	ldd	r25, Y+24	; 0x18
    15f2:	a8 0e       	add	r10, r24
    15f4:	b9 1e       	adc	r11, r25
    15f6:	48 e0       	ldi	r20, 0x08	; 8
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	b3 01       	movw	r22, r6
    15fc:	ce 01       	movw	r24, r28
    15fe:	49 96       	adiw	r24, 0x19	; 25
    1600:	0e 94 c1 2b 	call	0x5782	; 0x5782 <strncpy>
    1604:	18 a2       	std	Y+32, r1	; 0x20
    1606:	1e 8a       	std	Y+22, r1	; 0x16
    1608:	1a a2       	std	Y+34, r1	; 0x22
    160a:	6e 01       	movw	r12, r28
    160c:	e2 e0       	ldi	r30, 0x02	; 2
    160e:	ce 0e       	add	r12, r30
    1610:	d1 1c       	adc	r13, r1
    1612:	c6 01       	movw	r24, r12
    1614:	8c db       	rcall	.-2280   	; 0xd2e <vListInitialiseItem>
    1616:	ce 01       	movw	r24, r28
    1618:	0c 96       	adiw	r24, 0x0c	; 12
    161a:	89 db       	rcall	.-2286   	; 0xd2e <vListInitialiseItem>
    161c:	c8 87       	std	Y+8, r28	; 0x08
    161e:	d9 87       	std	Y+9, r29	; 0x09
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	8c 87       	std	Y+12, r24	; 0x0c
    1626:	9d 87       	std	Y+13, r25	; 0x0d
    1628:	ca 8b       	std	Y+18, r28	; 0x12
    162a:	db 8b       	std	Y+19, r29	; 0x13
    162c:	a2 01       	movw	r20, r4
    162e:	b4 01       	movw	r22, r8
    1630:	c5 01       	movw	r24, r10
    1632:	0e da       	rcall	.-3044   	; 0xa50 <pxPortInitialiseStack>
    1634:	88 83       	st	Y, r24
    1636:	99 83       	std	Y+1, r25	; 0x01
    1638:	e1 14       	cp	r14, r1
    163a:	f1 04       	cpc	r15, r1
    163c:	19 f0       	breq	.+6      	; 0x1644 <xTaskGenericCreate+0xb4>
    163e:	f7 01       	movw	r30, r14
    1640:	c0 83       	st	Z, r28
    1642:	d1 83       	std	Z+1, r29	; 0x01
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	0f 92       	push	r0
    164a:	80 91 9f 3c 	lds	r24, 0x3C9F
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	80 93 9f 3c 	sts	0x3C9F, r24
    1654:	80 91 d1 3c 	lds	r24, 0x3CD1
    1658:	90 91 d2 3c 	lds	r25, 0x3CD2
    165c:	89 2b       	or	r24, r25
    165e:	49 f4       	brne	.+18     	; 0x1672 <xTaskGenericCreate+0xe2>
    1660:	c0 93 d1 3c 	sts	0x3CD1, r28
    1664:	d0 93 d2 3c 	sts	0x3CD2, r29
    1668:	80 91 9f 3c 	lds	r24, 0x3C9F
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	81 f4       	brne	.+32     	; 0x1690 <xTaskGenericCreate+0x100>
    1670:	4a c0       	rjmp	.+148    	; 0x1706 <xTaskGenericCreate+0x176>
    1672:	80 91 9a 3c 	lds	r24, 0x3C9A
    1676:	81 11       	cpse	r24, r1
    1678:	0b c0       	rjmp	.+22     	; 0x1690 <xTaskGenericCreate+0x100>
    167a:	e0 91 d1 3c 	lds	r30, 0x3CD1
    167e:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1682:	86 89       	ldd	r24, Z+22	; 0x16
    1684:	08 17       	cp	r16, r24
    1686:	20 f0       	brcs	.+8      	; 0x1690 <xTaskGenericCreate+0x100>
    1688:	c0 93 d1 3c 	sts	0x3CD1, r28
    168c:	d0 93 d2 3c 	sts	0x3CD2, r29
    1690:	8e 89       	ldd	r24, Y+22	; 0x16
    1692:	90 91 9c 3c 	lds	r25, 0x3C9C
    1696:	98 17       	cp	r25, r24
    1698:	10 f4       	brcc	.+4      	; 0x169e <xTaskGenericCreate+0x10e>
    169a:	80 93 9c 3c 	sts	0x3C9C, r24
    169e:	90 91 95 3c 	lds	r25, 0x3C95
    16a2:	99 a3       	std	Y+33, r25	; 0x21
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	90 93 95 3c 	sts	0x3C95, r25
    16aa:	90 91 9b 3c 	lds	r25, 0x3C9B
    16ae:	98 17       	cp	r25, r24
    16b0:	10 f4       	brcc	.+4      	; 0x16b6 <xTaskGenericCreate+0x126>
    16b2:	80 93 9b 3c 	sts	0x3C9B, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	b6 01       	movw	r22, r12
    16cc:	88 53       	subi	r24, 0x38	; 56
    16ce:	93 4c       	sbci	r25, 0xC3	; 195
    16d0:	32 db       	rcall	.-2460   	; 0xd36 <vListInsertEnd>
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	80 91 9a 3c 	lds	r24, 0x3C9A
    16da:	88 23       	and	r24, r24
    16dc:	51 f0       	breq	.+20     	; 0x16f2 <xTaskGenericCreate+0x162>
    16de:	e0 91 d1 3c 	lds	r30, 0x3CD1
    16e2:	f0 91 d2 3c 	lds	r31, 0x3CD2
    16e6:	86 89       	ldd	r24, Z+22	; 0x16
    16e8:	80 17       	cp	r24, r16
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <xTaskGenericCreate+0x166>
    16ec:	61 da       	rcall	.-2878   	; 0xbb0 <vPortYield>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	26 c0       	rjmp	.+76     	; 0x173e <xTaskGenericCreate+0x1ae>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	24 c0       	rjmp	.+72     	; 0x173e <xTaskGenericCreate+0x1ae>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	22 c0       	rjmp	.+68     	; 0x173e <xTaskGenericCreate+0x1ae>
    16fa:	cf 8a       	std	Y+23, r12	; 0x17
    16fc:	d8 8e       	std	Y+24, r13	; 0x18
    16fe:	c6 01       	movw	r24, r12
    1700:	6e cf       	rjmp	.-292    	; 0x15de <xTaskGenericCreate+0x4e>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	1c c0       	rjmp	.+56     	; 0x173e <xTaskGenericCreate+0x1ae>
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	9c e3       	ldi	r25, 0x3C	; 60
    170a:	03 db       	rcall	.-2554   	; 0xd12 <vListInitialise>
    170c:	8f eb       	ldi	r24, 0xBF	; 191
    170e:	9c e3       	ldi	r25, 0x3C	; 60
    1710:	00 db       	rcall	.-2560   	; 0xd12 <vListInitialise>
    1712:	86 eb       	ldi	r24, 0xB6	; 182
    1714:	9c e3       	ldi	r25, 0x3C	; 60
    1716:	fd da       	rcall	.-2566   	; 0xd12 <vListInitialise>
    1718:	89 ea       	ldi	r24, 0xA9	; 169
    171a:	9c e3       	ldi	r25, 0x3C	; 60
    171c:	fa da       	rcall	.-2572   	; 0xd12 <vListInitialise>
    171e:	80 ea       	ldi	r24, 0xA0	; 160
    1720:	9c e3       	ldi	r25, 0x3C	; 60
    1722:	f7 da       	rcall	.-2578   	; 0xd12 <vListInitialise>
    1724:	8f eb       	ldi	r24, 0xBF	; 191
    1726:	9c e3       	ldi	r25, 0x3C	; 60
    1728:	80 93 b4 3c 	sts	0x3CB4, r24
    172c:	90 93 b5 3c 	sts	0x3CB5, r25
    1730:	86 eb       	ldi	r24, 0xB6	; 182
    1732:	9c e3       	ldi	r25, 0x3C	; 60
    1734:	80 93 b2 3c 	sts	0x3CB2, r24
    1738:	90 93 b3 3c 	sts	0x3CB3, r25
    173c:	a9 cf       	rjmp	.-174    	; 0x1690 <xTaskGenericCreate+0x100>
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	bf 90       	pop	r11
    174e:	af 90       	pop	r10
    1750:	9f 90       	pop	r9
    1752:	8f 90       	pop	r8
    1754:	7f 90       	pop	r7
    1756:	6f 90       	pop	r6
    1758:	5f 90       	pop	r5
    175a:	4f 90       	pop	r4
    175c:	08 95       	ret

0000175e <vTaskStartScheduler>:
    175e:	af 92       	push	r10
    1760:	bf 92       	push	r11
    1762:	cf 92       	push	r12
    1764:	df 92       	push	r13
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	0f 93       	push	r16
    176c:	a1 2c       	mov	r10, r1
    176e:	b1 2c       	mov	r11, r1
    1770:	c1 2c       	mov	r12, r1
    1772:	d1 2c       	mov	r13, r1
    1774:	e1 2c       	mov	r14, r1
    1776:	f1 2c       	mov	r15, r1
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e4       	ldi	r20, 0x40	; 64
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	61 e8       	ldi	r22, 0x81	; 129
    1784:	70 e2       	ldi	r23, 0x20	; 32
    1786:	8f ee       	ldi	r24, 0xEF	; 239
    1788:	99 e0       	ldi	r25, 0x09	; 9
    178a:	02 df       	rcall	.-508    	; 0x1590 <xTaskGenericCreate>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	59 f4       	brne	.+22     	; 0x17a6 <vTaskStartScheduler+0x48>
    1790:	52 d4       	rcall	.+2212   	; 0x2036 <xTimerCreateTimerTask>
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	41 f4       	brne	.+16     	; 0x17a6 <vTaskStartScheduler+0x48>
    1796:	f8 94       	cli
    1798:	80 93 9a 3c 	sts	0x3C9A, r24
    179c:	10 92 9d 3c 	sts	0x3C9D, r1
    17a0:	10 92 9e 3c 	sts	0x3C9E, r1
    17a4:	c3 d9       	rcall	.-3194   	; 0xb2c <xPortStartScheduler>
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	08 95       	ret

000017b6 <vTaskSuspendAll>:
    17b6:	80 91 99 3c 	lds	r24, 0x3C99
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 99 3c 	sts	0x3C99, r24
    17c0:	08 95       	ret

000017c2 <xTaskGetTickCount>:
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	0f 92       	push	r0
    17c8:	80 91 9d 3c 	lds	r24, 0x3C9D
    17cc:	90 91 9e 3c 	lds	r25, 0x3C9E
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	08 95       	ret

000017d6 <uxTaskGetNumberOfTasks>:
    17d6:	80 91 9f 3c 	lds	r24, 0x3C9F
    17da:	08 95       	ret

000017dc <vTaskIncrementTick>:
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	80 91 99 3c 	lds	r24, 0x3C99
    17e8:	81 11       	cpse	r24, r1
    17ea:	af c0       	rjmp	.+350    	; 0x194a <vTaskIncrementTick+0x16e>
    17ec:	80 91 9d 3c 	lds	r24, 0x3C9D
    17f0:	90 91 9e 3c 	lds	r25, 0x3C9E
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	80 93 9d 3c 	sts	0x3C9D, r24
    17fa:	90 93 9e 3c 	sts	0x3C9E, r25
    17fe:	80 91 9d 3c 	lds	r24, 0x3C9D
    1802:	90 91 9e 3c 	lds	r25, 0x3C9E
    1806:	89 2b       	or	r24, r25
    1808:	99 f5       	brne	.+102    	; 0x1870 <vTaskIncrementTick+0x94>
    180a:	80 91 b4 3c 	lds	r24, 0x3CB4
    180e:	90 91 b5 3c 	lds	r25, 0x3CB5
    1812:	20 91 b2 3c 	lds	r18, 0x3CB2
    1816:	30 91 b3 3c 	lds	r19, 0x3CB3
    181a:	20 93 b4 3c 	sts	0x3CB4, r18
    181e:	30 93 b5 3c 	sts	0x3CB5, r19
    1822:	80 93 b2 3c 	sts	0x3CB2, r24
    1826:	90 93 b3 3c 	sts	0x3CB3, r25
    182a:	80 91 96 3c 	lds	r24, 0x3C96
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	80 93 96 3c 	sts	0x3C96, r24
    1834:	e0 91 b4 3c 	lds	r30, 0x3CB4
    1838:	f0 91 b5 3c 	lds	r31, 0x3CB5
    183c:	80 81       	ld	r24, Z
    183e:	81 11       	cpse	r24, r1
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <vTaskIncrementTick+0x74>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	80 93 05 20 	sts	0x2005, r24
    184a:	90 93 06 20 	sts	0x2006, r25
    184e:	10 c0       	rjmp	.+32     	; 0x1870 <vTaskIncrementTick+0x94>
    1850:	e0 91 b4 3c 	lds	r30, 0x3CB4
    1854:	f0 91 b5 3c 	lds	r31, 0x3CB5
    1858:	05 80       	ldd	r0, Z+5	; 0x05
    185a:	f6 81       	ldd	r31, Z+6	; 0x06
    185c:	e0 2d       	mov	r30, r0
    185e:	06 80       	ldd	r0, Z+6	; 0x06
    1860:	f7 81       	ldd	r31, Z+7	; 0x07
    1862:	e0 2d       	mov	r30, r0
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	80 93 05 20 	sts	0x2005, r24
    186c:	90 93 06 20 	sts	0x2006, r25
    1870:	20 91 9d 3c 	lds	r18, 0x3C9D
    1874:	30 91 9e 3c 	lds	r19, 0x3C9E
    1878:	80 91 05 20 	lds	r24, 0x2005
    187c:	90 91 06 20 	lds	r25, 0x2006
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	08 f4       	brcc	.+2      	; 0x1888 <vTaskIncrementTick+0xac>
    1886:	66 c0       	rjmp	.+204    	; 0x1954 <vTaskIncrementTick+0x178>
    1888:	e0 91 b4 3c 	lds	r30, 0x3CB4
    188c:	f0 91 b5 3c 	lds	r31, 0x3CB5
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	99 f0       	breq	.+38     	; 0x18bc <vTaskIncrementTick+0xe0>
    1896:	e0 91 b4 3c 	lds	r30, 0x3CB4
    189a:	f0 91 b5 3c 	lds	r31, 0x3CB5
    189e:	05 80       	ldd	r0, Z+5	; 0x05
    18a0:	f6 81       	ldd	r31, Z+6	; 0x06
    18a2:	e0 2d       	mov	r30, r0
    18a4:	c6 81       	ldd	r28, Z+6	; 0x06
    18a6:	d7 81       	ldd	r29, Z+7	; 0x07
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	20 91 9d 3c 	lds	r18, 0x3C9D
    18b0:	30 91 9e 3c 	lds	r19, 0x3C9E
    18b4:	28 17       	cp	r18, r24
    18b6:	39 07       	cpc	r19, r25
    18b8:	f8 f4       	brcc	.+62     	; 0x18f8 <vTaskIncrementTick+0x11c>
    18ba:	19 c0       	rjmp	.+50     	; 0x18ee <vTaskIncrementTick+0x112>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	80 93 05 20 	sts	0x2005, r24
    18c4:	90 93 06 20 	sts	0x2006, r25
    18c8:	45 c0       	rjmp	.+138    	; 0x1954 <vTaskIncrementTick+0x178>
    18ca:	e0 91 b4 3c 	lds	r30, 0x3CB4
    18ce:	f0 91 b5 3c 	lds	r31, 0x3CB5
    18d2:	05 80       	ldd	r0, Z+5	; 0x05
    18d4:	f6 81       	ldd	r31, Z+6	; 0x06
    18d6:	e0 2d       	mov	r30, r0
    18d8:	c6 81       	ldd	r28, Z+6	; 0x06
    18da:	d7 81       	ldd	r29, Z+7	; 0x07
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	20 91 9d 3c 	lds	r18, 0x3C9D
    18e4:	30 91 9e 3c 	lds	r19, 0x3C9E
    18e8:	28 17       	cp	r18, r24
    18ea:	39 07       	cpc	r19, r25
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <vTaskIncrementTick+0x11c>
    18ee:	80 93 05 20 	sts	0x2005, r24
    18f2:	90 93 06 20 	sts	0x2006, r25
    18f6:	2e c0       	rjmp	.+92     	; 0x1954 <vTaskIncrementTick+0x178>
    18f8:	8e 01       	movw	r16, r28
    18fa:	0e 5f       	subi	r16, 0xFE	; 254
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	c8 01       	movw	r24, r16
    1900:	7c da       	rcall	.-2824   	; 0xdfa <vListRemove>
    1902:	8c 89       	ldd	r24, Y+20	; 0x14
    1904:	9d 89       	ldd	r25, Y+21	; 0x15
    1906:	89 2b       	or	r24, r25
    1908:	19 f0       	breq	.+6      	; 0x1910 <vTaskIncrementTick+0x134>
    190a:	ce 01       	movw	r24, r28
    190c:	0c 96       	adiw	r24, 0x0c	; 12
    190e:	75 da       	rcall	.-2838   	; 0xdfa <vListRemove>
    1910:	8e 89       	ldd	r24, Y+22	; 0x16
    1912:	90 91 9b 3c 	lds	r25, 0x3C9B
    1916:	98 17       	cp	r25, r24
    1918:	10 f4       	brcc	.+4      	; 0x191e <vTaskIncrementTick+0x142>
    191a:	80 93 9b 3c 	sts	0x3C9B, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	b8 01       	movw	r22, r16
    1934:	88 53       	subi	r24, 0x38	; 56
    1936:	93 4c       	sbci	r25, 0xC3	; 195
    1938:	fe d9       	rcall	.-3076   	; 0xd36 <vListInsertEnd>
    193a:	e0 91 b4 3c 	lds	r30, 0x3CB4
    193e:	f0 91 b5 3c 	lds	r31, 0x3CB5
    1942:	80 81       	ld	r24, Z
    1944:	81 11       	cpse	r24, r1
    1946:	c1 cf       	rjmp	.-126    	; 0x18ca <vTaskIncrementTick+0xee>
    1948:	b9 cf       	rjmp	.-142    	; 0x18bc <vTaskIncrementTick+0xe0>
    194a:	80 91 98 3c 	lds	r24, 0x3C98
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	80 93 98 3c 	sts	0x3C98, r24
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <xTaskResumeAll>:
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	80 91 99 3c 	lds	r24, 0x3C99
    197a:	81 50       	subi	r24, 0x01	; 1
    197c:	80 93 99 3c 	sts	0x3C99, r24
    1980:	80 91 99 3c 	lds	r24, 0x3C99
    1984:	81 11       	cpse	r24, r1
    1986:	62 c0       	rjmp	.+196    	; 0x1a4c <xTaskResumeAll+0xee>
    1988:	80 91 9f 3c 	lds	r24, 0x3C9F
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <xTaskResumeAll+0x34>
    1990:	5f c0       	rjmp	.+190    	; 0x1a50 <xTaskResumeAll+0xf2>
    1992:	b1 2c       	mov	r11, r1
    1994:	0f 2e       	mov	r0, r31
    1996:	f9 ea       	ldi	r31, 0xA9	; 169
    1998:	ef 2e       	mov	r14, r31
    199a:	fc e3       	ldi	r31, 0x3C	; 60
    199c:	ff 2e       	mov	r15, r31
    199e:	f0 2d       	mov	r31, r0
    19a0:	0f 2e       	mov	r0, r31
    19a2:	fe ea       	ldi	r31, 0xAE	; 174
    19a4:	cf 2e       	mov	r12, r31
    19a6:	fc e3       	ldi	r31, 0x3C	; 60
    19a8:	df 2e       	mov	r13, r31
    19aa:	f0 2d       	mov	r31, r0
    19ac:	2c c0       	rjmp	.+88     	; 0x1a06 <xTaskResumeAll+0xa8>
    19ae:	d6 01       	movw	r26, r12
    19b0:	ed 91       	ld	r30, X+
    19b2:	fc 91       	ld	r31, X
    19b4:	c6 81       	ldd	r28, Z+6	; 0x06
    19b6:	d7 81       	ldd	r29, Z+7	; 0x07
    19b8:	ce 01       	movw	r24, r28
    19ba:	0c 96       	adiw	r24, 0x0c	; 12
    19bc:	1e da       	rcall	.-3012   	; 0xdfa <vListRemove>
    19be:	8e 01       	movw	r16, r28
    19c0:	0e 5f       	subi	r16, 0xFE	; 254
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	c8 01       	movw	r24, r16
    19c6:	19 da       	rcall	.-3022   	; 0xdfa <vListRemove>
    19c8:	8e 89       	ldd	r24, Y+22	; 0x16
    19ca:	90 91 9b 3c 	lds	r25, 0x3C9B
    19ce:	98 17       	cp	r25, r24
    19d0:	10 f4       	brcc	.+4      	; 0x19d6 <xTaskResumeAll+0x78>
    19d2:	80 93 9b 3c 	sts	0x3C9B, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 01       	movw	r18, r24
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	b8 01       	movw	r22, r16
    19ec:	88 53       	subi	r24, 0x38	; 56
    19ee:	93 4c       	sbci	r25, 0xC3	; 195
    19f0:	a2 d9       	rcall	.-3260   	; 0xd36 <vListInsertEnd>
    19f2:	e0 91 d1 3c 	lds	r30, 0x3CD1
    19f6:	f0 91 d2 3c 	lds	r31, 0x3CD2
    19fa:	9e 89       	ldd	r25, Y+22	; 0x16
    19fc:	86 89       	ldd	r24, Z+22	; 0x16
    19fe:	98 17       	cp	r25, r24
    1a00:	10 f0       	brcs	.+4      	; 0x1a06 <xTaskResumeAll+0xa8>
    1a02:	bb 24       	eor	r11, r11
    1a04:	b3 94       	inc	r11
    1a06:	f7 01       	movw	r30, r14
    1a08:	80 81       	ld	r24, Z
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	d0 cf       	rjmp	.-96     	; 0x19ae <xTaskResumeAll+0x50>
    1a0e:	80 91 98 3c 	lds	r24, 0x3C98
    1a12:	88 23       	and	r24, r24
    1a14:	79 f0       	breq	.+30     	; 0x1a34 <xTaskResumeAll+0xd6>
    1a16:	80 91 98 3c 	lds	r24, 0x3C98
    1a1a:	88 23       	and	r24, r24
    1a1c:	91 f0       	breq	.+36     	; 0x1a42 <xTaskResumeAll+0xe4>
    1a1e:	de de       	rcall	.-580    	; 0x17dc <vTaskIncrementTick>
    1a20:	80 91 98 3c 	lds	r24, 0x3C98
    1a24:	81 50       	subi	r24, 0x01	; 1
    1a26:	80 93 98 3c 	sts	0x3C98, r24
    1a2a:	80 91 98 3c 	lds	r24, 0x3C98
    1a2e:	81 11       	cpse	r24, r1
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <xTaskResumeAll+0xc0>
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <xTaskResumeAll+0xe4>
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	bf 16       	cp	r11, r31
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <xTaskResumeAll+0xe4>
    1a3a:	80 91 97 3c 	lds	r24, 0x3C97
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	49 f4       	brne	.+18     	; 0x1a54 <xTaskResumeAll+0xf6>
    1a42:	10 92 97 3c 	sts	0x3C97, r1
    1a46:	b4 d8       	rcall	.-3736   	; 0xbb0 <vPortYield>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <xTaskResumeAll+0xf8>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <xTaskResumeAll+0xf8>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <xTaskResumeAll+0xf8>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	08 95       	ret

00001a6e <vTaskDelay>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ec 01       	movw	r28, r24
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	91 f0       	breq	.+36     	; 0x1a9c <vTaskDelay+0x2e>
    1a78:	9e de       	rcall	.-708    	; 0x17b6 <vTaskSuspendAll>
    1a7a:	80 91 9d 3c 	lds	r24, 0x3C9D
    1a7e:	90 91 9e 3c 	lds	r25, 0x3C9E
    1a82:	c8 0f       	add	r28, r24
    1a84:	d9 1f       	adc	r29, r25
    1a86:	80 91 d1 3c 	lds	r24, 0x3CD1
    1a8a:	90 91 d2 3c 	lds	r25, 0x3CD2
    1a8e:	02 96       	adiw	r24, 0x02	; 2
    1a90:	b4 d9       	rcall	.-3224   	; 0xdfa <vListRemove>
    1a92:	ce 01       	movw	r24, r28
    1a94:	ab dc       	rcall	.-1706   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1a96:	63 df       	rcall	.-314    	; 0x195e <xTaskResumeAll>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <vTaskDelay+0x30>
    1a9c:	89 d8       	rcall	.-3822   	; 0xbb0 <vPortYield>
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	08 95       	ret

00001aa4 <vTaskList>:
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	84 de       	rcall	.-760    	; 0x17b6 <vTaskSuspendAll>
    1aae:	18 82       	st	Y, r1
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	00 20       	and	r0, r0
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2 <vTaskList+0xe>
    1ab8:	31 97       	sbiw	r30, 0x01	; 1
    1aba:	2d e0       	ldi	r18, 0x0D	; 13
    1abc:	3a e0       	ldi	r19, 0x0A	; 10
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	20 83       	st	Z, r18
    1ac2:	31 83       	std	Z+1, r19	; 0x01
    1ac4:	42 83       	std	Z+2, r20	; 0x02
    1ac6:	10 91 9c 3c 	lds	r17, 0x3C9C
    1aca:	1f 5f       	subi	r17, 0xFF	; 255
    1acc:	11 50       	subi	r17, 0x01	; 1
    1ace:	21 2f       	mov	r18, r17
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	e8 53       	subi	r30, 0x38	; 56
    1ae6:	f3 4c       	sbci	r31, 0xC3	; 195
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <vTaskList+0x52>
    1aee:	bf 01       	movw	r22, r30
    1af0:	42 e5       	ldi	r20, 0x52	; 82
    1af2:	ce 01       	movw	r24, r28
    1af4:	b0 dc       	rcall	.-1696   	; 0x1456 <prvListTaskWithinSingleList>
    1af6:	11 11       	cpse	r17, r1
    1af8:	e9 cf       	rjmp	.-46     	; 0x1acc <vTaskList+0x28>
    1afa:	e0 91 b4 3c 	lds	r30, 0x3CB4
    1afe:	f0 91 b5 3c 	lds	r31, 0x3CB5
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <vTaskList+0x72>
    1b08:	60 91 b4 3c 	lds	r22, 0x3CB4
    1b0c:	70 91 b5 3c 	lds	r23, 0x3CB5
    1b10:	42 e4       	ldi	r20, 0x42	; 66
    1b12:	ce 01       	movw	r24, r28
    1b14:	a0 dc       	rcall	.-1728   	; 0x1456 <prvListTaskWithinSingleList>
    1b16:	e0 91 b2 3c 	lds	r30, 0x3CB2
    1b1a:	f0 91 b3 3c 	lds	r31, 0x3CB3
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	39 f0       	breq	.+14     	; 0x1b32 <vTaskList+0x8e>
    1b24:	60 91 b2 3c 	lds	r22, 0x3CB2
    1b28:	70 91 b3 3c 	lds	r23, 0x3CB3
    1b2c:	42 e4       	ldi	r20, 0x42	; 66
    1b2e:	ce 01       	movw	r24, r28
    1b30:	92 dc       	rcall	.-1756   	; 0x1456 <prvListTaskWithinSingleList>
    1b32:	80 91 a0 3c 	lds	r24, 0x3CA0
    1b36:	88 23       	and	r24, r24
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <vTaskList+0xa0>
    1b3a:	43 e5       	ldi	r20, 0x53	; 83
    1b3c:	60 ea       	ldi	r22, 0xA0	; 160
    1b3e:	7c e3       	ldi	r23, 0x3C	; 60
    1b40:	ce 01       	movw	r24, r28
    1b42:	89 dc       	rcall	.-1774   	; 0x1456 <prvListTaskWithinSingleList>
    1b44:	0c df       	rcall	.-488    	; 0x195e <xTaskResumeAll>
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	08 95       	ret

00001b4e <vTaskSwitchContext>:
    1b4e:	80 91 99 3c 	lds	r24, 0x3C99
    1b52:	81 11       	cpse	r24, r1
    1b54:	13 c0       	rjmp	.+38     	; 0x1b7c <vTaskSwitchContext+0x2e>
    1b56:	80 91 9b 3c 	lds	r24, 0x3C9B
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	ee 0f       	add	r30, r30
    1b64:	ff 1f       	adc	r31, r31
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	8e 0f       	add	r24, r30
    1b6c:	9f 1f       	adc	r25, r31
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e8 53       	subi	r30, 0x38	; 56
    1b72:	f3 4c       	sbci	r31, 0xC3	; 195
    1b74:	80 81       	ld	r24, Z
    1b76:	88 23       	and	r24, r24
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <vTaskSwitchContext+0x36>
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <vTaskSwitchContext+0x64>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	80 93 97 3c 	sts	0x3C97, r24
    1b82:	08 95       	ret
    1b84:	80 91 9b 3c 	lds	r24, 0x3C9B
    1b88:	81 50       	subi	r24, 0x01	; 1
    1b8a:	80 93 9b 3c 	sts	0x3C9B, r24
    1b8e:	80 91 9b 3c 	lds	r24, 0x3C9B
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	fc 01       	movw	r30, r24
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	8e 0f       	add	r24, r30
    1ba4:	9f 1f       	adc	r25, r31
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e8 53       	subi	r30, 0x38	; 56
    1baa:	f3 4c       	sbci	r31, 0xC3	; 195
    1bac:	80 81       	ld	r24, Z
    1bae:	88 23       	and	r24, r24
    1bb0:	49 f3       	breq	.-46     	; 0x1b84 <vTaskSwitchContext+0x36>
    1bb2:	e0 91 9b 3c 	lds	r30, 0x3C9B
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	cf 01       	movw	r24, r30
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	e8 0f       	add	r30, r24
    1bc8:	f9 1f       	adc	r31, r25
    1bca:	e8 53       	subi	r30, 0x38	; 56
    1bcc:	f3 4c       	sbci	r31, 0xC3	; 195
    1bce:	a1 81       	ldd	r26, Z+1	; 0x01
    1bd0:	b2 81       	ldd	r27, Z+2	; 0x02
    1bd2:	12 96       	adiw	r26, 0x02	; 2
    1bd4:	0d 90       	ld	r0, X+
    1bd6:	bc 91       	ld	r27, X
    1bd8:	a0 2d       	mov	r26, r0
    1bda:	a1 83       	std	Z+1, r26	; 0x01
    1bdc:	b2 83       	std	Z+2, r27	; 0x02
    1bde:	cf 01       	movw	r24, r30
    1be0:	03 96       	adiw	r24, 0x03	; 3
    1be2:	a8 17       	cp	r26, r24
    1be4:	b9 07       	cpc	r27, r25
    1be6:	31 f4       	brne	.+12     	; 0x1bf4 <vTaskSwitchContext+0xa6>
    1be8:	12 96       	adiw	r26, 0x02	; 2
    1bea:	8d 91       	ld	r24, X+
    1bec:	9c 91       	ld	r25, X
    1bee:	13 97       	sbiw	r26, 0x03	; 3
    1bf0:	81 83       	std	Z+1, r24	; 0x01
    1bf2:	92 83       	std	Z+2, r25	; 0x02
    1bf4:	01 80       	ldd	r0, Z+1	; 0x01
    1bf6:	f2 81       	ldd	r31, Z+2	; 0x02
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	86 81       	ldd	r24, Z+6	; 0x06
    1bfc:	97 81       	ldd	r25, Z+7	; 0x07
    1bfe:	80 93 d1 3c 	sts	0x3CD1, r24
    1c02:	90 93 d2 3c 	sts	0x3CD2, r25
    1c06:	80 91 90 3c 	lds	r24, 0x3C90
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <vTaskSwitchContext+0xc2>
    1c0e:	4c c0       	rjmp	.+152    	; 0x1ca8 <vTaskSwitchContext+0x15a>
    1c10:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1c14:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1c18:	91 a1       	ldd	r25, Z+33	; 0x21
    1c1a:	80 91 04 20 	lds	r24, 0x2004
    1c1e:	98 17       	cp	r25, r24
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <vTaskSwitchContext+0xd6>
    1c22:	42 c0       	rjmp	.+132    	; 0x1ca8 <vTaskSwitchContext+0x15a>
    1c24:	80 91 93 3c 	lds	r24, 0x3C93
    1c28:	90 91 94 3c 	lds	r25, 0x3C94
    1c2c:	08 96       	adiw	r24, 0x08	; 8
    1c2e:	20 91 91 3c 	lds	r18, 0x3C91
    1c32:	30 91 92 3c 	lds	r19, 0x3C92
    1c36:	82 17       	cp	r24, r18
    1c38:	93 07       	cpc	r25, r19
    1c3a:	a0 f5       	brcc	.+104    	; 0x1ca4 <vTaskSwitchContext+0x156>
    1c3c:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1c40:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1c44:	81 a1       	ldd	r24, Z+33	; 0x21
    1c46:	80 93 04 20 	sts	0x2004, r24
    1c4a:	e0 91 93 3c 	lds	r30, 0x3C93
    1c4e:	f0 91 94 3c 	lds	r31, 0x3C94
    1c52:	40 91 9d 3c 	lds	r20, 0x3C9D
    1c56:	50 91 9e 3c 	lds	r21, 0x3C9E
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	40 83       	st	Z, r20
    1c60:	51 83       	std	Z+1, r21	; 0x01
    1c62:	62 83       	std	Z+2, r22	; 0x02
    1c64:	73 83       	std	Z+3, r23	; 0x03
    1c66:	20 91 93 3c 	lds	r18, 0x3C93
    1c6a:	30 91 94 3c 	lds	r19, 0x3C94
    1c6e:	2c 5f       	subi	r18, 0xFC	; 252
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	20 93 93 3c 	sts	0x3C93, r18
    1c76:	30 93 94 3c 	sts	0x3C94, r19
    1c7a:	e0 91 93 3c 	lds	r30, 0x3C93
    1c7e:	f0 91 94 3c 	lds	r31, 0x3C94
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e0       	ldi	r26, 0x00	; 0
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	80 83       	st	Z, r24
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	b3 83       	std	Z+3, r27	; 0x03
    1c90:	80 91 93 3c 	lds	r24, 0x3C93
    1c94:	90 91 94 3c 	lds	r25, 0x3C94
    1c98:	04 96       	adiw	r24, 0x04	; 4
    1c9a:	80 93 93 3c 	sts	0x3C93, r24
    1c9e:	90 93 94 3c 	sts	0x3C94, r25
    1ca2:	08 95       	ret
    1ca4:	10 92 90 3c 	sts	0x3C90, r1
    1ca8:	08 95       	ret

00001caa <vTaskPlaceOnEventList>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	eb 01       	movw	r28, r22
    1cb0:	60 91 d1 3c 	lds	r22, 0x3CD1
    1cb4:	70 91 d2 3c 	lds	r23, 0x3CD2
    1cb8:	64 5f       	subi	r22, 0xF4	; 244
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	63 d8       	rcall	.-3898   	; 0xd84 <vListInsert>
    1cbe:	80 91 d1 3c 	lds	r24, 0x3CD1
    1cc2:	90 91 d2 3c 	lds	r25, 0x3CD2
    1cc6:	02 96       	adiw	r24, 0x02	; 2
    1cc8:	98 d8       	rcall	.-3792   	; 0xdfa <vListRemove>
    1cca:	cf 3f       	cpi	r28, 0xFF	; 255
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	d8 07       	cpc	r29, r24
    1cd0:	51 f4       	brne	.+20     	; 0x1ce6 <vTaskPlaceOnEventList+0x3c>
    1cd2:	60 91 d1 3c 	lds	r22, 0x3CD1
    1cd6:	70 91 d2 3c 	lds	r23, 0x3CD2
    1cda:	6e 5f       	subi	r22, 0xFE	; 254
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	80 ea       	ldi	r24, 0xA0	; 160
    1ce0:	9c e3       	ldi	r25, 0x3C	; 60
    1ce2:	29 d8       	rcall	.-4014   	; 0xd36 <vListInsertEnd>
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <vTaskPlaceOnEventList+0x4a>
    1ce6:	80 91 9d 3c 	lds	r24, 0x3C9D
    1cea:	90 91 9e 3c 	lds	r25, 0x3C9E
    1cee:	8c 0f       	add	r24, r28
    1cf0:	9d 1f       	adc	r25, r29
    1cf2:	7c db       	rcall	.-2312   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <vTaskPlaceOnEventListRestricted>:
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	eb 01       	movw	r28, r22
    1d00:	60 91 d1 3c 	lds	r22, 0x3CD1
    1d04:	70 91 d2 3c 	lds	r23, 0x3CD2
    1d08:	64 5f       	subi	r22, 0xF4	; 244
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	14 d8       	rcall	.-4056   	; 0xd36 <vListInsertEnd>
    1d0e:	80 91 d1 3c 	lds	r24, 0x3CD1
    1d12:	90 91 d2 3c 	lds	r25, 0x3CD2
    1d16:	02 96       	adiw	r24, 0x02	; 2
    1d18:	70 d8       	rcall	.-3872   	; 0xdfa <vListRemove>
    1d1a:	80 91 9d 3c 	lds	r24, 0x3C9D
    1d1e:	90 91 9e 3c 	lds	r25, 0x3C9E
    1d22:	8c 0f       	add	r24, r28
    1d24:	9d 1f       	adc	r25, r29
    1d26:	62 db       	rcall	.-2364   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <xTaskRemoveFromEventList>:
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	dc 01       	movw	r26, r24
    1d38:	15 96       	adiw	r26, 0x05	; 5
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
    1d3e:	16 97       	sbiw	r26, 0x06	; 6
    1d40:	c6 81       	ldd	r28, Z+6	; 0x06
    1d42:	d7 81       	ldd	r29, Z+7	; 0x07
    1d44:	8e 01       	movw	r16, r28
    1d46:	04 5f       	subi	r16, 0xF4	; 244
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	56 d8       	rcall	.-3924   	; 0xdfa <vListRemove>
    1d4e:	80 91 99 3c 	lds	r24, 0x3C99
    1d52:	81 11       	cpse	r24, r1
    1d54:	1b c0       	rjmp	.+54     	; 0x1d8c <xTaskRemoveFromEventList+0x5e>
    1d56:	0a 50       	subi	r16, 0x0A	; 10
    1d58:	11 09       	sbc	r17, r1
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	4e d8       	rcall	.-3940   	; 0xdfa <vListRemove>
    1d5e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d60:	90 91 9b 3c 	lds	r25, 0x3C9B
    1d64:	98 17       	cp	r25, r24
    1d66:	10 f4       	brcc	.+4      	; 0x1d6c <xTaskRemoveFromEventList+0x3e>
    1d68:	80 93 9b 3c 	sts	0x3C9B, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 01       	movw	r18, r24
    1d70:	22 0f       	add	r18, r18
    1d72:	33 1f       	adc	r19, r19
    1d74:	22 0f       	add	r18, r18
    1d76:	33 1f       	adc	r19, r19
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	82 0f       	add	r24, r18
    1d7e:	93 1f       	adc	r25, r19
    1d80:	b8 01       	movw	r22, r16
    1d82:	88 53       	subi	r24, 0x38	; 56
    1d84:	93 4c       	sbci	r25, 0xC3	; 195
    1d86:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <xTaskRemoveFromEventList+0x68>
    1d8c:	b8 01       	movw	r22, r16
    1d8e:	89 ea       	ldi	r24, 0xA9	; 169
    1d90:	9c e3       	ldi	r25, 0x3C	; 60
    1d92:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1d96:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1d9a:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	2e 89       	ldd	r18, Y+22	; 0x16
    1da2:	96 89       	ldd	r25, Z+22	; 0x16
    1da4:	29 17       	cp	r18, r25
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <xTaskRemoveFromEventList+0x7c>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <vTaskSetTimeOutState>:
    1db4:	20 91 96 3c 	lds	r18, 0x3C96
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
    1dbc:	20 91 9d 3c 	lds	r18, 0x3C9D
    1dc0:	30 91 9e 3c 	lds	r19, 0x3C9E
    1dc4:	21 83       	std	Z+1, r18	; 0x01
    1dc6:	32 83       	std	Z+2, r19	; 0x02
    1dc8:	08 95       	ret

00001dca <xTaskCheckForTimeOut>:
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	0f 92       	push	r0
    1dd0:	db 01       	movw	r26, r22
    1dd2:	2d 91       	ld	r18, X+
    1dd4:	3c 91       	ld	r19, X
    1dd6:	2f 3f       	cpi	r18, 0xFF	; 255
    1dd8:	bf ef       	ldi	r27, 0xFF	; 255
    1dda:	3b 07       	cpc	r19, r27
    1ddc:	61 f1       	breq	.+88     	; 0x1e36 <xTaskCheckForTimeOut+0x6c>
    1dde:	40 91 96 3c 	lds	r20, 0x3C96
    1de2:	fc 01       	movw	r30, r24
    1de4:	50 81       	ld	r21, Z
    1de6:	54 17       	cp	r21, r20
    1de8:	51 f0       	breq	.+20     	; 0x1dfe <xTaskCheckForTimeOut+0x34>
    1dea:	40 91 9d 3c 	lds	r20, 0x3C9D
    1dee:	50 91 9e 3c 	lds	r21, 0x3C9E
    1df2:	01 80       	ldd	r0, Z+1	; 0x01
    1df4:	f2 81       	ldd	r31, Z+2	; 0x02
    1df6:	e0 2d       	mov	r30, r0
    1df8:	4e 17       	cp	r20, r30
    1dfa:	5f 07       	cpc	r21, r31
    1dfc:	f0 f4       	brcc	.+60     	; 0x1e3a <xTaskCheckForTimeOut+0x70>
    1dfe:	e0 91 9d 3c 	lds	r30, 0x3C9D
    1e02:	f0 91 9e 3c 	lds	r31, 0x3C9E
    1e06:	dc 01       	movw	r26, r24
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	4d 91       	ld	r20, X+
    1e0c:	5c 91       	ld	r21, X
    1e0e:	12 97       	sbiw	r26, 0x02	; 2
    1e10:	e4 1b       	sub	r30, r20
    1e12:	f5 0b       	sbc	r31, r21
    1e14:	e2 17       	cp	r30, r18
    1e16:	f3 07       	cpc	r31, r19
    1e18:	90 f4       	brcc	.+36     	; 0x1e3e <xTaskCheckForTimeOut+0x74>
    1e1a:	e0 91 9d 3c 	lds	r30, 0x3C9D
    1e1e:	f0 91 9e 3c 	lds	r31, 0x3C9E
    1e22:	4e 1b       	sub	r20, r30
    1e24:	5f 0b       	sbc	r21, r31
    1e26:	24 0f       	add	r18, r20
    1e28:	35 1f       	adc	r19, r21
    1e2a:	fb 01       	movw	r30, r22
    1e2c:	20 83       	st	Z, r18
    1e2e:	31 83       	std	Z+1, r19	; 0x01
    1e30:	c1 df       	rcall	.-126    	; 0x1db4 <vTaskSetTimeOutState>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <xTaskCheckForTimeOut+0x76>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <xTaskCheckForTimeOut+0x76>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <xTaskCheckForTimeOut+0x76>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	08 95       	ret

00001e46 <vTaskMissedYield>:
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 93 97 3c 	sts	0x3C97, r24
    1e4c:	08 95       	ret

00001e4e <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1e4e:	80 91 d1 3c 	lds	r24, 0x3CD1
    1e52:	90 91 d2 3c 	lds	r25, 0x3CD2

		return xReturn;
	}
    1e56:	08 95       	ret

00001e58 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e58:	80 91 9a 3c 	lds	r24, 0x3C9A
    1e5c:	88 23       	and	r24, r24
    1e5e:	31 f0       	breq	.+12     	; 0x1e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e60:	80 91 99 3c 	lds	r24, 0x3C99
    1e64:	81 11       	cpse	r24, r1
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	08 95       	ret
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e70:	82 e0       	ldi	r24, 0x02	; 2
			}
		}

		return xReturn;
	}
    1e72:	08 95       	ret

00001e74 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1e7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e80:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1e84:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1e88:	96 89       	ldd	r25, Z+22	; 0x16
    1e8a:	89 17       	cp	r24, r25
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <vTaskPriorityInherit+0x1c>
    1e8e:	44 c0       	rjmp	.+136    	; 0x1f18 <vTaskPriorityInherit+0xa4>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1e90:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1e94:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1e98:	96 89       	ldd	r25, Z+22	; 0x16
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	29 1b       	sub	r18, r25
    1ea0:	31 09       	sbc	r19, r1
    1ea2:	2c 87       	std	Y+12, r18	; 0x0c
    1ea4:	3d 87       	std	Y+13, r19	; 0x0d

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	88 53       	subi	r24, 0x38	; 56
    1ebc:	93 4c       	sbci	r25, 0xC3	; 195
    1ebe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ec0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ec2:	28 17       	cp	r18, r24
    1ec4:	39 07       	cpc	r19, r25
    1ec6:	11 f5       	brne	.+68     	; 0x1f0c <vTaskPriorityInherit+0x98>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    1ec8:	8e 01       	movw	r16, r28
    1eca:	0e 5f       	subi	r16, 0xFE	; 254
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	c8 01       	movw	r24, r16
    1ed0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1ed4:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1ed8:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1edc:	86 89       	ldd	r24, Z+22	; 0x16
    1ede:	8e 8b       	std	Y+22, r24	; 0x16
				prvAddTaskToReadyQueue( pxTCB );
    1ee0:	90 91 9b 3c 	lds	r25, 0x3C9B
    1ee4:	98 17       	cp	r25, r24
    1ee6:	10 f4       	brcc	.+4      	; 0x1eec <vTaskPriorityInherit+0x78>
    1ee8:	80 93 9b 3c 	sts	0x3C9B, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9c 01       	movw	r18, r24
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	b8 01       	movw	r22, r16
    1f02:	88 53       	subi	r24, 0x38	; 56
    1f04:	93 4c       	sbci	r25, 0xC3	; 195
    1f06:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <vTaskPriorityInherit+0xa4>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1f0c:	e0 91 d1 3c 	lds	r30, 0x3CD1
    1f10:	f0 91 d2 3c 	lds	r31, 0x3CD2
    1f14:	86 89       	ldd	r24, Z+22	; 0x16
    1f16:	8e 8b       	std	Y+22, r24	; 0x16
			}
		}
	}
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	39 f1       	breq	.+78     	; 0x1f7e <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1f30:	9e 89       	ldd	r25, Y+22	; 0x16
    1f32:	8a a1       	ldd	r24, Y+34	; 0x22
    1f34:	98 17       	cp	r25, r24
    1f36:	19 f1       	breq	.+70     	; 0x1f7e <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    1f38:	8e 01       	movw	r16, r28
    1f3a:	0e 5f       	subi	r16, 0xFE	; 254
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	c8 01       	movw	r24, r16
    1f40:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1f44:	8a a1       	ldd	r24, Y+34	; 0x22
    1f46:	8e 8b       	std	Y+22, r24	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1f48:	21 e0       	ldi	r18, 0x01	; 1
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	28 1b       	sub	r18, r24
    1f4e:	31 09       	sbc	r19, r1
    1f50:	2c 87       	std	Y+12, r18	; 0x0c
    1f52:	3d 87       	std	Y+13, r19	; 0x0d
				prvAddTaskToReadyQueue( pxTCB );
    1f54:	90 91 9b 3c 	lds	r25, 0x3C9B
    1f58:	98 17       	cp	r25, r24
    1f5a:	10 f4       	brcc	.+4      	; 0x1f60 <vTaskPriorityDisinherit+0x3e>
    1f5c:	80 93 9b 3c 	sts	0x3C9B, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 01       	movw	r18, r24
    1f64:	22 0f       	add	r18, r18
    1f66:	33 1f       	adc	r19, r19
    1f68:	22 0f       	add	r18, r18
    1f6a:	33 1f       	adc	r19, r19
    1f6c:	22 0f       	add	r18, r18
    1f6e:	33 1f       	adc	r19, r19
    1f70:	82 0f       	add	r24, r18
    1f72:	93 1f       	adc	r25, r19
    1f74:	b8 01       	movw	r22, r16
    1f76:	88 53       	subi	r24, 0x38	; 56
    1f78:	93 4c       	sbci	r25, 0xC3	; 195
    1f7a:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
			}
		}
	}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	08 95       	ret

00001f88 <prvInsertTimerInActiveList>:
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
}
    1f88:	fc 01       	movw	r30, r24
    1f8a:	62 83       	std	Z+2, r22	; 0x02
    1f8c:	73 83       	std	Z+3, r23	; 0x03
    1f8e:	80 87       	std	Z+8, r24	; 0x08
    1f90:	91 87       	std	Z+9, r25	; 0x09
    1f92:	46 17       	cp	r20, r22
    1f94:	57 07       	cpc	r21, r23
    1f96:	90 f0       	brcs	.+36     	; 0x1fbc <prvInsertTimerInActiveList+0x34>
    1f98:	42 1b       	sub	r20, r18
    1f9a:	53 0b       	sbc	r21, r19
    1f9c:	84 85       	ldd	r24, Z+12	; 0x0c
    1f9e:	95 85       	ldd	r25, Z+13	; 0x0d
    1fa0:	48 17       	cp	r20, r24
    1fa2:	59 07       	cpc	r21, r25
    1fa4:	e0 f4       	brcc	.+56     	; 0x1fde <prvInsertTimerInActiveList+0x56>
    1fa6:	bf 01       	movw	r22, r30
    1fa8:	6e 5f       	subi	r22, 0xFE	; 254
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	80 91 d7 3c 	lds	r24, 0x3CD7
    1fb0:	90 91 d8 3c 	lds	r25, 0x3CD8
    1fb4:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	08 95       	ret
    1fbc:	42 17       	cp	r20, r18
    1fbe:	53 07       	cpc	r21, r19
    1fc0:	18 f4       	brcc	.+6      	; 0x1fc8 <prvInsertTimerInActiveList+0x40>
    1fc2:	62 17       	cp	r22, r18
    1fc4:	73 07       	cpc	r23, r19
    1fc6:	68 f4       	brcc	.+26     	; 0x1fe2 <prvInsertTimerInActiveList+0x5a>
    1fc8:	bf 01       	movw	r22, r30
    1fca:	6e 5f       	subi	r22, 0xFE	; 254
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	80 91 d9 3c 	lds	r24, 0x3CD9
    1fd2:	90 91 da 3c 	lds	r25, 0x3CDA
    1fd6:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	08 95       	ret
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	08 95       	ret
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	08 95       	ret

00001fe6 <prvCheckForValidListAndQueue>:
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	0f 92       	push	r0
    1fec:	80 91 d5 3c 	lds	r24, 0x3CD5
    1ff0:	90 91 d6 3c 	lds	r25, 0x3CD6
    1ff4:	89 2b       	or	r24, r25
    1ff6:	e1 f4       	brne	.+56     	; 0x2030 <prvCheckForValidListAndQueue+0x4a>
    1ff8:	84 ee       	ldi	r24, 0xE4	; 228
    1ffa:	9c e3       	ldi	r25, 0x3C	; 60
    1ffc:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInitialise>
    2000:	8b ed       	ldi	r24, 0xDB	; 219
    2002:	9c e3       	ldi	r25, 0x3C	; 60
    2004:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInitialise>
    2008:	84 ee       	ldi	r24, 0xE4	; 228
    200a:	9c e3       	ldi	r25, 0x3C	; 60
    200c:	80 93 d9 3c 	sts	0x3CD9, r24
    2010:	90 93 da 3c 	sts	0x3CDA, r25
    2014:	8b ed       	ldi	r24, 0xDB	; 219
    2016:	9c e3       	ldi	r25, 0x3C	; 60
    2018:	80 93 d7 3c 	sts	0x3CD7, r24
    201c:	90 93 d8 3c 	sts	0x3CD8, r25
    2020:	65 e0       	ldi	r22, 0x05	; 5
    2022:	80 e1       	ldi	r24, 0x10	; 16
    2024:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueCreate>
    2028:	80 93 d5 3c 	sts	0x3CD5, r24
    202c:	90 93 d6 3c 	sts	0x3CD6, r25
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	08 95       	ret

00002036 <xTimerCreateTimerTask>:
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	0f 93       	push	r16
    2044:	d0 df       	rcall	.-96     	; 0x1fe6 <prvCheckForValidListAndQueue>
    2046:	80 91 d5 3c 	lds	r24, 0x3CD5
    204a:	90 91 d6 3c 	lds	r25, 0x3CD6
    204e:	89 2b       	or	r24, r25
    2050:	89 f0       	breq	.+34     	; 0x2074 <xTimerCreateTimerTask+0x3e>
    2052:	a1 2c       	mov	r10, r1
    2054:	b1 2c       	mov	r11, r1
    2056:	c1 2c       	mov	r12, r1
    2058:	d1 2c       	mov	r13, r1
    205a:	e1 2c       	mov	r14, r1
    205c:	f1 2c       	mov	r15, r1
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e4       	ldi	r20, 0x40	; 64
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	66 e8       	ldi	r22, 0x86	; 134
    206a:	70 e2       	ldi	r23, 0x20	; 32
    206c:	87 ef       	ldi	r24, 0xF7	; 247
    206e:	90 e1       	ldi	r25, 0x10	; 16
    2070:	8f da       	rcall	.-2786   	; 0x1590 <xTaskGenericCreate>
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <xTimerCreateTimerTask+0x40>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	08 95       	ret

00002086 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	25 97       	sbiw	r28, 0x05	; 5
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	d9 01       	movw	r26, r18
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    209a:	e0 91 d5 3c 	lds	r30, 0x3CD5
    209e:	f0 91 d6 3c 	lds	r31, 0x3CD6
    20a2:	30 97       	sbiw	r30, 0x00	; 0
    20a4:	59 f1       	breq	.+86     	; 0x20fc <xTimerGenericCommand+0x76>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    20a6:	69 83       	std	Y+1, r22	; 0x01
		xMessage.xMessageValue = xOptionalValue;
    20a8:	4a 83       	std	Y+2, r20	; 0x02
    20aa:	5b 83       	std	Y+3, r21	; 0x03
		xMessage.pxTimer = ( xTIMER * ) xTimer;
    20ac:	8c 83       	std	Y+4, r24	; 0x04
    20ae:	9d 83       	std	Y+5, r25	; 0x05

		if( pxHigherPriorityTaskWoken == NULL )
    20b0:	10 97       	sbiw	r26, 0x00	; 0
    20b2:	e1 f4       	brne	.+56     	; 0x20ec <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    20b4:	d1 de       	rcall	.-606    	; 0x1e58 <xTaskGetSchedulerState>
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	61 f4       	brne	.+24     	; 0x20d2 <xTimerGenericCommand+0x4c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	a8 01       	movw	r20, r16
    20be:	be 01       	movw	r22, r28
    20c0:	6f 5f       	subi	r22, 0xFF	; 255
    20c2:	7f 4f       	sbci	r23, 0xFF	; 255
    20c4:	80 91 d5 3c 	lds	r24, 0x3CD5
    20c8:	90 91 d6 3c 	lds	r25, 0x3CD6
    20cc:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    20d0:	16 c0       	rjmp	.+44     	; 0x20fe <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	be 01       	movw	r22, r28
    20da:	6f 5f       	subi	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	80 91 d5 3c 	lds	r24, 0x3CD5
    20e2:	90 91 d6 3c 	lds	r25, 0x3CD6
    20e6:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    20ea:	09 c0       	rjmp	.+18     	; 0x20fe <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	ad 01       	movw	r20, r26
    20f0:	be 01       	movw	r22, r28
    20f2:	6f 5f       	subi	r22, 0xFF	; 255
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	cf 01       	movw	r24, r30
    20f8:	4c d8       	rcall	.-3944   	; 0x1192 <xQueueGenericSendFromISR>
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
    20fc:	80 e0       	ldi	r24, 0x00	; 0
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
}
    20fe:	25 96       	adiw	r28, 0x05	; 5
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	5c 01       	movw	r10, r24
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
    2124:	4e db       	rcall	.-2404   	; 0x17c2 <xTaskGetTickCount>
    2126:	6c 01       	movw	r12, r24
	
	if( xTimeNow < xLastTime )
    2128:	80 91 d3 3c 	lds	r24, 0x3CD3
    212c:	90 91 d4 3c 	lds	r25, 0x3CD4
    2130:	c8 16       	cp	r12, r24
    2132:	d9 06       	cpc	r13, r25
    2134:	08 f0       	brcs	.+2      	; 0x2138 <prvSampleTimeNow+0x2a>
    2136:	49 c0       	rjmp	.+146    	; 0x21ca <prvSampleTimeNow+0xbc>
    2138:	31 c0       	rjmp	.+98     	; 0x219c <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    213a:	a5 81       	ldd	r26, Z+5	; 0x05
    213c:	b6 81       	ldd	r27, Z+6	; 0x06
    213e:	ed 90       	ld	r14, X+
    2140:	fc 90       	ld	r15, X

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2142:	05 80       	ldd	r0, Z+5	; 0x05
    2144:	f6 81       	ldd	r31, Z+6	; 0x06
    2146:	e0 2d       	mov	r30, r0
    2148:	c6 81       	ldd	r28, Z+6	; 0x06
    214a:	d7 81       	ldd	r29, Z+7	; 0x07
		vListRemove( &( pxTimer->xTimerListItem ) );
    214c:	8e 01       	movw	r16, r28
    214e:	0e 5f       	subi	r16, 0xFE	; 254
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	c8 01       	movw	r24, r16
    2154:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    2158:	e9 89       	ldd	r30, Y+17	; 0x11
    215a:	fa 89       	ldd	r31, Y+18	; 0x12
    215c:	ce 01       	movw	r24, r28
    215e:	19 95       	eicall

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    2160:	8e 85       	ldd	r24, Y+14	; 0x0e
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	d9 f4       	brne	.+54     	; 0x219c <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2166:	8c 85       	ldd	r24, Y+12	; 0x0c
    2168:	9d 85       	ldd	r25, Y+13	; 0x0d
    216a:	8e 0d       	add	r24, r14
    216c:	9f 1d       	adc	r25, r15
			if( xReloadTime > xNextExpireTime )
    216e:	e8 16       	cp	r14, r24
    2170:	f9 06       	cpc	r15, r25
    2172:	60 f4       	brcc	.+24     	; 0x218c <prvSampleTimeNow+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2174:	8a 83       	std	Y+2, r24	; 0x02
    2176:	9b 83       	std	Y+3, r25	; 0x03
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2178:	c8 87       	std	Y+8, r28	; 0x08
    217a:	d9 87       	std	Y+9, r29	; 0x09
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    217c:	b8 01       	movw	r22, r16
    217e:	80 91 d9 3c 	lds	r24, 0x3CD9
    2182:	90 91 da 3c 	lds	r25, 0x3CDA
    2186:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
    218a:	08 c0       	rjmp	.+16     	; 0x219c <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    218c:	00 e0       	ldi	r16, 0x00	; 0
    218e:	10 e0       	ldi	r17, 0x00	; 0
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a7 01       	movw	r20, r14
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	ce 01       	movw	r24, r28
    219a:	75 df       	rcall	.-278    	; 0x2086 <xTimerGenericCommand>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    219c:	e0 91 d9 3c 	lds	r30, 0x3CD9
    21a0:	f0 91 da 3c 	lds	r31, 0x3CDA
    21a4:	80 81       	ld	r24, Z
    21a6:	81 11       	cpse	r24, r1
    21a8:	c8 cf       	rjmp	.-112    	; 0x213a <prvSampleTimeNow+0x2c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    21aa:	80 91 d7 3c 	lds	r24, 0x3CD7
    21ae:	90 91 d8 3c 	lds	r25, 0x3CD8
    21b2:	80 93 d9 3c 	sts	0x3CD9, r24
    21b6:	90 93 da 3c 	sts	0x3CDA, r25
	pxOverflowTimerList = pxTemp;
    21ba:	e0 93 d7 3c 	sts	0x3CD7, r30
    21be:	f0 93 d8 3c 	sts	0x3CD8, r31
	xTimeNow = xTaskGetTickCount();
	
	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	f5 01       	movw	r30, r10
    21c6:	80 83       	st	Z, r24
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    21ca:	f5 01       	movw	r30, r10
    21cc:	10 82       	st	Z, r1
	}
	
	xLastTime = xTimeNow;
    21ce:	c0 92 d3 3c 	sts	0x3CD3, r12
    21d2:	d0 92 d4 3c 	sts	0x3CD4, r13
	
	return xTimeNow;
}
    21d6:	c6 01       	movw	r24, r12
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	08 95       	ret

000021ee <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <prvTimerTask+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <prvTimerTask+0x8>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	5c 01       	movw	r10, r24

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    2200:	88 2e       	mov	r8, r24
    2202:	9b 2c       	mov	r9, r11
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2204:	e0 91 d9 3c 	lds	r30, 0x3CD9
    2208:	f0 91 da 3c 	lds	r31, 0x3CDA
    220c:	80 81       	ld	r24, Z
	if( *pxListWasEmpty == pdFALSE )
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <prvTimerTask+0x26>
    2212:	b1 c0       	rjmp	.+354    	; 0x2376 <prvTimerTask+0x188>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2214:	05 80       	ldd	r0, Z+5	; 0x05
    2216:	f6 81       	ldd	r31, Z+6	; 0x06
    2218:	e0 2d       	mov	r30, r0
    221a:	e0 80       	ld	r14, Z
    221c:	f1 80       	ldd	r15, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    221e:	cb da       	rcall	.-2666   	; 0x17b6 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2220:	c5 01       	movw	r24, r10
    2222:	75 df       	rcall	.-278    	; 0x210e <prvSampleTimeNow>
    2224:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	81 11       	cpse	r24, r1
    222a:	43 c0       	rjmp	.+134    	; 0x22b2 <prvTimerTask+0xc4>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    222c:	0e 15       	cp	r16, r14
    222e:	1f 05       	cpc	r17, r15
    2230:	90 f1       	brcs	.+100    	; 0x2296 <prvTimerTask+0xa8>
			{
				xTaskResumeAll();
    2232:	95 db       	rcall	.-2262   	; 0x195e <xTaskResumeAll>
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2234:	e0 91 d9 3c 	lds	r30, 0x3CD9
    2238:	f0 91 da 3c 	lds	r31, 0x3CDA
    223c:	05 80       	ldd	r0, Z+5	; 0x05
    223e:	f6 81       	ldd	r31, Z+6	; 0x06
    2240:	e0 2d       	mov	r30, r0
    2242:	c6 80       	ldd	r12, Z+6	; 0x06
    2244:	d7 80       	ldd	r13, Z+7	; 0x07
	vListRemove( &( pxTimer->xTimerListItem ) );
    2246:	c6 01       	movw	r24, r12
    2248:	02 96       	adiw	r24, 0x02	; 2
    224a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    224e:	d6 01       	movw	r26, r12
    2250:	1e 96       	adiw	r26, 0x0e	; 14
    2252:	8c 91       	ld	r24, X
    2254:	1e 97       	sbiw	r26, 0x0e	; 14
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	a1 f4       	brne	.+40     	; 0x2282 <prvTimerTask+0x94>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    225a:	1c 96       	adiw	r26, 0x0c	; 12
    225c:	6d 91       	ld	r22, X+
    225e:	7c 91       	ld	r23, X
    2260:	1d 97       	sbiw	r26, 0x0d	; 13
    2262:	6e 0d       	add	r22, r14
    2264:	7f 1d       	adc	r23, r15
    2266:	97 01       	movw	r18, r14
    2268:	a8 01       	movw	r20, r16
    226a:	c6 01       	movw	r24, r12
    226c:	8d de       	rcall	.-742    	; 0x1f88 <prvInsertTimerInActiveList>
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	41 f4       	brne	.+16     	; 0x2282 <prvTimerTask+0x94>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    2272:	00 e0       	ldi	r16, 0x00	; 0
    2274:	10 e0       	ldi	r17, 0x00	; 0
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	a7 01       	movw	r20, r14
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	c6 01       	movw	r24, r12
    2280:	02 df       	rcall	.-508    	; 0x2086 <xTimerGenericCommand>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    2282:	d6 01       	movw	r26, r12
    2284:	51 96       	adiw	r26, 0x11	; 17
    2286:	ed 91       	ld	r30, X+
    2288:	fc 91       	ld	r31, X
    228a:	52 97       	sbiw	r26, 0x12	; 18
    228c:	c6 01       	movw	r24, r12
    228e:	19 95       	eicall
    2290:	11 c0       	rjmp	.+34     	; 0x22b4 <prvTimerTask+0xc6>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
    2292:	e1 2c       	mov	r14, r1
    2294:	f1 2c       	mov	r15, r1
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    2296:	b7 01       	movw	r22, r14
    2298:	60 1b       	sub	r22, r16
    229a:	71 0b       	sbc	r23, r17
    229c:	80 91 d5 3c 	lds	r24, 0x3CD5
    22a0:	90 91 d6 3c 	lds	r25, 0x3CD6
    22a4:	81 d8       	rcall	.-3838   	; 0x13a8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    22a6:	5b db       	rcall	.-2378   	; 0x195e <xTaskResumeAll>
    22a8:	81 11       	cpse	r24, r1
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <prvTimerTask+0xc6>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    22ac:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <prvTimerTask+0xc6>
				}
			}
		}
		else
		{
			xTaskResumeAll();
    22b2:	55 db       	rcall	.-2390   	; 0x195e <xTaskResumeAll>
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    22b4:	ce 01       	movw	r24, r28
    22b6:	06 96       	adiw	r24, 0x06	; 6
    22b8:	2a df       	rcall	.-428    	; 0x210e <prvSampleTimeNow>
    22ba:	6c 01       	movw	r12, r24
    22bc:	4e c0       	rjmp	.+156    	; 0x235a <prvTimerTask+0x16c>

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
    22be:	ec 80       	ldd	r14, Y+4	; 0x04
    22c0:	fd 80       	ldd	r15, Y+5	; 0x05

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
    22c2:	e1 14       	cp	r14, r1
    22c4:	f1 04       	cpc	r15, r1
    22c6:	59 f0       	breq	.+22     	; 0x22de <prvTimerTask+0xf0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    22c8:	d7 01       	movw	r26, r14
    22ca:	1a 96       	adiw	r26, 0x0a	; 10
    22cc:	ed 91       	ld	r30, X+
    22ce:	fc 91       	ld	r31, X
    22d0:	1b 97       	sbiw	r26, 0x0b	; 11
    22d2:	ef 2b       	or	r30, r31
    22d4:	21 f0       	breq	.+8      	; 0x22de <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
    22d6:	c7 01       	movw	r24, r14
    22d8:	02 96       	adiw	r24, 0x02	; 2
    22da:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	82 30       	cpi	r24, 0x02	; 2
    22e2:	49 f1       	breq	.+82     	; 0x2336 <prvTimerTask+0x148>
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	b1 f1       	breq	.+108    	; 0x2354 <prvTimerTask+0x166>
    22e8:	81 11       	cpse	r24, r1
    22ea:	37 c0       	rjmp	.+110    	; 0x235a <prvTimerTask+0x16c>
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
    22ec:	2a 81       	ldd	r18, Y+2	; 0x02
    22ee:	3b 81       	ldd	r19, Y+3	; 0x03
    22f0:	f7 01       	movw	r30, r14
    22f2:	64 85       	ldd	r22, Z+12	; 0x0c
    22f4:	75 85       	ldd	r23, Z+13	; 0x0d
    22f6:	62 0f       	add	r22, r18
    22f8:	73 1f       	adc	r23, r19
    22fa:	a6 01       	movw	r20, r12
    22fc:	c7 01       	movw	r24, r14
    22fe:	44 de       	rcall	.-888    	; 0x1f88 <prvInsertTimerInActiveList>
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	59 f5       	brne	.+86     	; 0x235a <prvTimerTask+0x16c>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    2304:	d7 01       	movw	r26, r14
    2306:	51 96       	adiw	r26, 0x11	; 17
    2308:	ed 91       	ld	r30, X+
    230a:	fc 91       	ld	r31, X
    230c:	52 97       	sbiw	r26, 0x12	; 18
    230e:	c7 01       	movw	r24, r14
    2310:	19 95       	eicall

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    2312:	f7 01       	movw	r30, r14
    2314:	86 85       	ldd	r24, Z+14	; 0x0e
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	01 f5       	brne	.+64     	; 0x235a <prvTimerTask+0x16c>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    231a:	44 85       	ldd	r20, Z+12	; 0x0c
    231c:	55 85       	ldd	r21, Z+13	; 0x0d
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	9b 81       	ldd	r25, Y+3	; 0x03
    2322:	48 0f       	add	r20, r24
    2324:	59 1f       	adc	r21, r25
    2326:	00 e0       	ldi	r16, 0x00	; 0
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	c7 01       	movw	r24, r14
    2332:	a9 de       	rcall	.-686    	; 0x2086 <xTimerGenericCommand>
    2334:	12 c0       	rjmp	.+36     	; 0x235a <prvTimerTask+0x16c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
    2336:	2a 81       	ldd	r18, Y+2	; 0x02
    2338:	3b 81       	ldd	r19, Y+3	; 0x03
    233a:	d7 01       	movw	r26, r14
    233c:	1c 96       	adiw	r26, 0x0c	; 12
    233e:	2d 93       	st	X+, r18
    2340:	3c 93       	st	X, r19
    2342:	1d 97       	sbiw	r26, 0x0d	; 13
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2344:	b6 01       	movw	r22, r12
    2346:	62 0f       	add	r22, r18
    2348:	73 1f       	adc	r23, r19
    234a:	96 01       	movw	r18, r12
    234c:	a6 01       	movw	r20, r12
    234e:	c7 01       	movw	r24, r14
    2350:	1b de       	rcall	.-970    	; 0x1f88 <prvInsertTimerInActiveList>
    2352:	03 c0       	rjmp	.+6      	; 0x235a <prvTimerTask+0x16c>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
    2354:	c7 01       	movw	r24, r14
    2356:	0e 94 1e 05 	call	0xa3c	; 0xa3c <vPortFree>

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	68 2d       	mov	r22, r8
    2362:	79 2d       	mov	r23, r9
    2364:	80 91 d5 3c 	lds	r24, 0x3CD5
    2368:	90 91 d6 3c 	lds	r25, 0x3CD6
    236c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    2370:	81 11       	cpse	r24, r1
    2372:	a5 cf       	rjmp	.-182    	; 0x22be <prvTimerTask+0xd0>
    2374:	47 cf       	rjmp	.-370    	; 0x2204 <prvTimerTask+0x16>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    2376:	1f da       	rcall	.-3010   	; 0x17b6 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2378:	c5 01       	movw	r24, r10
    237a:	c9 de       	rcall	.-622    	; 0x210e <prvSampleTimeNow>
    237c:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	88 23       	and	r24, r24
    2382:	09 f4       	brne	.+2      	; 0x2386 <prvTimerTask+0x198>
    2384:	86 cf       	rjmp	.-244    	; 0x2292 <prvTimerTask+0xa4>
    2386:	95 cf       	rjmp	.-214    	; 0x22b2 <prvTimerTask+0xc4>

00002388 <csp_malloc>:

/* FreeRTOS includes */
#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
	return pvPortMalloc(size);
    2388:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <pvPortMalloc>
}
    238c:	08 95       	ret

0000238e <csp_free>:

void csp_free(void *ptr) {
	vPortFree(ptr);
    238e:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <vPortFree>
    2392:	08 95       	ret

00002394 <csp_queue_create>:
	return xQueueReceive(handle, buf, timeout);
}

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
	return xQueueReceiveFromISR(handle, buf, (signed CSP_BASE_TYPE *)task_woken);
}
    2394:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <xQueueCreate>
    2398:	08 95       	ret

0000239a <csp_queue_enqueue>:
    239a:	fb 01       	movw	r30, r22
    239c:	ba 01       	movw	r22, r20
    239e:	a9 01       	movw	r20, r18
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	bf 01       	movw	r22, r30
    23a4:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    23a8:	99 27       	eor	r25, r25
    23aa:	87 fd       	sbrc	r24, 7
    23ac:	90 95       	com	r25
    23ae:	08 95       	ret

000023b0 <csp_queue_enqueue_isr>:
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    23b6:	99 27       	eor	r25, r25
    23b8:	87 fd       	sbrc	r24, 7
    23ba:	90 95       	com	r25
    23bc:	08 95       	ret

000023be <csp_queue_dequeue>:
    23be:	fb 01       	movw	r30, r22
    23c0:	ba 01       	movw	r22, r20
    23c2:	a9 01       	movw	r20, r18
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	bf 01       	movw	r22, r30
    23c8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    23cc:	99 27       	eor	r25, r25
    23ce:	87 fd       	sbrc	r24, 7
    23d0:	90 95       	com	r25
    23d2:	08 95       	ret

000023d4 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
	return uxQueueMessagesWaiting(handle);
    23d4:	0e 94 cc 09 	call	0x1398	; 0x1398 <uxQueueMessagesWaiting>
}
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	08 95       	ret

000023dc <csp_mutex_create>:
	return csp_bin_sem_remove(mutex);
}

int csp_mutex_lock(csp_mutex_t * mutex, uint32_t timeout) {
	return csp_bin_sem_wait(mutex, timeout);
}
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
    23e2:	0e 94 a1 08 	call	0x1142	; 0x1142 <xQueueCreateMutex>
    23e6:	9c 01       	movw	r18, r24
    23e8:	88 83       	st	Y, r24
    23ea:	99 83       	std	Y+1, r25	; 0x01
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	23 2b       	or	r18, r19
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <csp_mutex_create+0x1c>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <csp_bin_sem_create>:
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	ec 01       	movw	r28, r24
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueCreate>
    240c:	88 83       	st	Y, r24
    240e:	99 83       	std	Y+1, r25	; 0x01
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	39 f0       	breq	.+14     	; 0x2422 <csp_bin_sem_create+0x24>
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <csp_bin_sem_wait>:
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	70 e0       	ldi	r23, 0x00	; 0
    2432:	fc 01       	movw	r30, r24
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    243c:	21 e0       	ldi	r18, 0x01	; 1
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	11 f0       	breq	.+4      	; 0x2448 <csp_bin_sem_wait+0x1c>
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	c9 01       	movw	r24, r18
    244a:	08 95       	ret

0000244c <csp_bin_sem_post>:
	}
}

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
	csp_log_lock("Post: %p\r\n", sem);
	if (xSemaphoreGive(*sem) == pdPASS) {
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	fc 01       	movw	r30, r24
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2460:	21 e0       	ldi	r18, 0x01	; 1
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	11 f0       	breq	.+4      	; 0x246c <csp_bin_sem_post+0x20>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
		return CSP_SEMAPHORE_OK;
	} else {
		return CSP_SEMAPHORE_ERROR;
	}
}
    246c:	c9 01       	movw	r24, r18
    246e:	08 95       	ret

00002470 <csp_sys_tasklist>:

#include <csp/arch/csp_system.h>

int csp_sys_tasklist(char * out) {
#if FREERTOS_VERSION < 8
	vTaskList((signed char *) out);
    2470:	19 db       	rcall	.-2510   	; 0x1aa4 <vTaskList>
#else
	vTaskList(out);
#endif
	return CSP_ERR_NONE;
}
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	08 95       	ret

00002478 <csp_sys_tasklist_size>:

int csp_sys_tasklist_size(void) {
	return 40 * uxTaskGetNumberOfTasks();
    2478:	ae d9       	rcall	.-3236   	; 0x17d6 <uxTaskGetNumberOfTasks>
}
    247a:	28 e2       	ldi	r18, 0x28	; 40
    247c:	82 9f       	mul	r24, r18
    247e:	c0 01       	movw	r24, r0
    2480:	11 24       	eor	r1, r1
    2482:	08 95       	ret

00002484 <csp_sys_memfree>:

uint32_t csp_sys_memfree(void) {
    2484:	4f 92       	push	r4
    2486:	5f 92       	push	r5
    2488:	6f 92       	push	r6
    248a:	7f 92       	push	r7
    248c:	8f 92       	push	r8
    248e:	9f 92       	push	r9
    2490:	af 92       	push	r10
    2492:	bf 92       	push	r11
    2494:	cf 92       	push	r12
    2496:	df 92       	push	r13
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15

	uint32_t total = 0, max = UINT32_MAX, size;
	void * pmem;

	/* If size_t is less than 32 bits, start with 10 KiB */
	size = sizeof(uint32_t) > sizeof(size_t) ? 10000 : 1000000;
    249c:	0f 2e       	mov	r0, r31
    249e:	f0 e1       	ldi	r31, 0x10	; 16
    24a0:	cf 2e       	mov	r12, r31
    24a2:	f7 e2       	ldi	r31, 0x27	; 39
    24a4:	df 2e       	mov	r13, r31
    24a6:	e1 2c       	mov	r14, r1
    24a8:	f1 2c       	mov	r15, r1
    24aa:	f0 2d       	mov	r31, r0
	return 40 * uxTaskGetNumberOfTasks();
}

uint32_t csp_sys_memfree(void) {

	uint32_t total = 0, max = UINT32_MAX, size;
    24ac:	44 24       	eor	r4, r4
    24ae:	4a 94       	dec	r4
    24b0:	54 2c       	mov	r5, r4
    24b2:	32 01       	movw	r6, r4
    24b4:	81 2c       	mov	r8, r1
    24b6:	91 2c       	mov	r9, r1
    24b8:	54 01       	movw	r10, r8

	/* If size_t is less than 32 bits, start with 10 KiB */
	size = sizeof(uint32_t) > sizeof(size_t) ? 10000 : 1000000;

	while (1) {
		pmem = pvPortMalloc(size + total);
    24ba:	c4 01       	movw	r24, r8
    24bc:	8c 0d       	add	r24, r12
    24be:	9d 1d       	adc	r25, r13
    24c0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pvPortMalloc>
		if (pmem == NULL) {
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	59 f4       	brne	.+22     	; 0x24de <csp_sys_memfree+0x5a>
			max = size + total;
    24c8:	26 01       	movw	r4, r12
    24ca:	37 01       	movw	r6, r14
    24cc:	48 0c       	add	r4, r8
    24ce:	59 1c       	adc	r5, r9
    24d0:	6a 1c       	adc	r6, r10
    24d2:	7b 1c       	adc	r7, r11
			size = size / 2;
    24d4:	f6 94       	lsr	r15
    24d6:	e7 94       	ror	r14
    24d8:	d7 94       	ror	r13
    24da:	c7 94       	ror	r12
    24dc:	15 c0       	rjmp	.+42     	; 0x2508 <csp_sys_memfree+0x84>
		} else {
			total += size;
    24de:	8c 0c       	add	r8, r12
    24e0:	9d 1c       	adc	r9, r13
    24e2:	ae 1c       	adc	r10, r14
    24e4:	bf 1c       	adc	r11, r15
			if (total + size >= max)
    24e6:	b5 01       	movw	r22, r10
    24e8:	a4 01       	movw	r20, r8
    24ea:	4c 0d       	add	r20, r12
    24ec:	5d 1d       	adc	r21, r13
    24ee:	6e 1d       	adc	r22, r14
    24f0:	7f 1d       	adc	r23, r15
    24f2:	44 15       	cp	r20, r4
    24f4:	55 05       	cpc	r21, r5
    24f6:	66 05       	cpc	r22, r6
    24f8:	77 05       	cpc	r23, r7
    24fa:	20 f0       	brcs	.+8      	; 0x2504 <csp_sys_memfree+0x80>
				size = size / 2;
    24fc:	f6 94       	lsr	r15
    24fe:	e7 94       	ror	r14
    2500:	d7 94       	ror	r13
    2502:	c7 94       	ror	r12
			vPortFree(pmem);
    2504:	0e 94 1e 05 	call	0xa3c	; 0xa3c <vPortFree>
		}
		if (size < 32) break;
    2508:	80 e2       	ldi	r24, 0x20	; 32
    250a:	c8 16       	cp	r12, r24
    250c:	d1 04       	cpc	r13, r1
    250e:	e1 04       	cpc	r14, r1
    2510:	f1 04       	cpc	r15, r1
    2512:	98 f6       	brcc	.-90     	; 0x24ba <csp_sys_memfree+0x36>
	}

	return total;
}
    2514:	c5 01       	movw	r24, r10
    2516:	b4 01       	movw	r22, r8
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	bf 90       	pop	r11
    2522:	af 90       	pop	r10
    2524:	9f 90       	pop	r9
    2526:	8f 90       	pop	r8
    2528:	7f 90       	pop	r7
    252a:	6f 90       	pop	r6
    252c:	5f 90       	pop	r5
    252e:	4f 90       	pop	r4
    2530:	08 95       	ret

00002532 <csp_sys_reboot>:

int csp_sys_reboot(void) {

	extern void __attribute__((weak)) cpu_set_reset_cause(unsigned int);
	if (cpu_set_reset_cause)
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	89 2b       	or	r24, r25
    2538:	21 f0       	breq	.+8      	; 0x2542 <csp_sys_reboot+0x10>
		cpu_set_reset_cause(1);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
	
	extern void __attribute__((weak)) cpu_reset(void);
	if (cpu_reset) {
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	89 2b       	or	r24, r25
    2548:	19 f0       	breq	.+6      	; 0x2550 <csp_sys_reboot+0x1e>
		cpu_reset();
    254a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    254e:	ff cf       	rjmp	.-2      	; 0x254e <csp_sys_reboot+0x1c>
	}
	
	csp_log_error("Failed to reboot\r\n");

	return CSP_ERR_INVAL;
}
    2550:	8e ef       	ldi	r24, 0xFE	; 254
    2552:	9f ef       	ldi	r25, 0xFF	; 255
    2554:	08 95       	ret

00002556 <csp_thread_create>:
/* CSP includes */
#include <csp/csp.h>

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_return_t (* routine)(void *), const signed char * const thread_name, unsigned short stack_depth, void * parameters, unsigned int priority, csp_thread_handle_t * handle) {
    2556:	af 92       	push	r10
    2558:	bf 92       	push	r11
    255a:	cf 92       	push	r12
    255c:	df 92       	push	r13
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
#if (FREERTOS_VERSION >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, (char *) thread_name, stack_depth, parameters, priority, handle);
#else
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_depth, parameters, priority, handle);
    2564:	a1 2c       	mov	r10, r1
    2566:	b1 2c       	mov	r11, r1
    2568:	c1 2c       	mov	r12, r1
    256a:	d1 2c       	mov	r13, r1
    256c:	11 d8       	rcall	.-4062   	; 0x1590 <xTaskGenericCreate>
#endif
	if (ret != pdTRUE)
    256e:	21 e0       	ldi	r18, 0x01	; 1
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	11 f4       	brne	.+4      	; 0x257a <csp_thread_create+0x24>
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
		return CSP_ERR_NOMEM;
	return CSP_ERR_NONE;
}
    257a:	88 27       	eor	r24, r24
    257c:	99 27       	eor	r25, r25
    257e:	82 1b       	sub	r24, r18
    2580:	93 0b       	sbc	r25, r19
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	bf 90       	pop	r11
    258e:	af 90       	pop	r10
    2590:	08 95       	ret

00002592 <csp_get_ms>:
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
}

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
}
    2592:	17 d9       	rcall	.-3538   	; 0x17c2 <xTaskGetTickCount>
    2594:	bc 01       	movw	r22, r24
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	08 95       	ret

0000259c <csp_get_s>:

uint32_t csp_get_s(void) {
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
    259c:	12 d9       	rcall	.-3548   	; 0x17c2 <xTaskGetTickCount>
    259e:	9c 01       	movw	r18, r24
    25a0:	36 95       	lsr	r19
    25a2:	27 95       	ror	r18
    25a4:	36 95       	lsr	r19
    25a6:	27 95       	ror	r18
    25a8:	36 95       	lsr	r19
    25aa:	27 95       	ror	r18
    25ac:	a5 ec       	ldi	r26, 0xC5	; 197
    25ae:	b0 e2       	ldi	r27, 0x20	; 32
    25b0:	0e 94 27 2a 	call	0x544e	; 0x544e <__umulhisi3>
    25b4:	92 95       	swap	r25
    25b6:	82 95       	swap	r24
    25b8:	8f 70       	andi	r24, 0x0F	; 15
    25ba:	89 27       	eor	r24, r25
    25bc:	9f 70       	andi	r25, 0x0F	; 15
    25be:	89 27       	eor	r24, r25
    25c0:	bc 01       	movw	r22, r24
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
}
    25c6:	08 95       	ret

000025c8 <csp_buffer_init>:
	if (clone)
		memcpy(clone, packet, size);

	return clone;

}
    25c8:	cf 92       	push	r12
    25ca:	df 92       	push	r13
    25cc:	ef 92       	push	r14
    25ce:	ff 92       	push	r15
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	1f 92       	push	r1
    25da:	1f 92       	push	r1
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	80 93 ef 3c 	sts	0x3CEF, r24
    25e4:	90 93 f0 3c 	sts	0x3CF0, r25
    25e8:	60 93 ed 3c 	sts	0x3CED, r22
    25ec:	70 93 ee 3c 	sts	0x3CEE, r23
    25f0:	6b 01       	movw	r12, r22
    25f2:	25 e0       	ldi	r18, 0x05	; 5
    25f4:	c2 0e       	add	r12, r18
    25f6:	d1 1c       	adc	r13, r1
    25f8:	e8 94       	clt
    25fa:	c0 f8       	bld	r12, 0
    25fc:	c8 9e       	mul	r12, r24
    25fe:	80 01       	movw	r16, r0
    2600:	c9 9e       	mul	r12, r25
    2602:	10 0d       	add	r17, r0
    2604:	d8 9e       	mul	r13, r24
    2606:	10 0d       	add	r17, r0
    2608:	11 24       	eor	r1, r1
    260a:	c8 01       	movw	r24, r16
    260c:	bd de       	rcall	.-646    	; 0x2388 <csp_malloc>
    260e:	80 93 f1 3c 	sts	0x3CF1, r24
    2612:	90 93 f2 3c 	sts	0x3CF2, r25
    2616:	89 2b       	or	r24, r25
    2618:	09 f4       	brne	.+2      	; 0x261c <csp_buffer_init+0x54>
    261a:	4d c0       	rjmp	.+154    	; 0x26b6 <csp_buffer_init+0xee>
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	80 91 ef 3c 	lds	r24, 0x3CEF
    2624:	90 91 f0 3c 	lds	r25, 0x3CF0
    2628:	b5 de       	rcall	.-662    	; 0x2394 <csp_queue_create>
    262a:	80 93 f3 3c 	sts	0x3CF3, r24
    262e:	90 93 f4 3c 	sts	0x3CF4, r25
    2632:	89 2b       	or	r24, r25
    2634:	c1 f1       	breq	.+112    	; 0x26a6 <csp_buffer_init+0xde>
    2636:	a8 01       	movw	r20, r16
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 91 f1 3c 	lds	r24, 0x3CF1
    2640:	90 91 f2 3c 	lds	r25, 0x3CF2
    2644:	0e 94 9a 2b 	call	0x5734	; 0x5734 <memset>
    2648:	80 91 ef 3c 	lds	r24, 0x3CEF
    264c:	90 91 f0 3c 	lds	r25, 0x3CF0
    2650:	89 2b       	or	r24, r25
    2652:	a1 f1       	breq	.+104    	; 0x26bc <csp_buffer_init+0xf4>
    2654:	e1 2c       	mov	r14, r1
    2656:	f1 2c       	mov	r15, r1
    2658:	00 e0       	ldi	r16, 0x00	; 0
    265a:	10 e0       	ldi	r17, 0x00	; 0
    265c:	e0 91 f1 3c 	lds	r30, 0x3CF1
    2660:	f0 91 f2 3c 	lds	r31, 0x3CF2
    2664:	ee 0d       	add	r30, r14
    2666:	ff 1d       	adc	r31, r15
    2668:	e9 83       	std	Y+1, r30	; 0x01
    266a:	fa 83       	std	Y+2, r31	; 0x02
    266c:	10 82       	st	Z, r1
    266e:	11 82       	std	Z+1, r1	; 0x01
    2670:	e9 81       	ldd	r30, Y+1	; 0x01
    2672:	fa 81       	ldd	r31, Y+2	; 0x02
    2674:	e2 83       	std	Z+2, r30	; 0x02
    2676:	f3 83       	std	Z+3, r31	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	a9 01       	movw	r20, r18
    267e:	be 01       	movw	r22, r28
    2680:	6f 5f       	subi	r22, 0xFF	; 255
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	80 91 f3 3c 	lds	r24, 0x3CF3
    2688:	90 91 f4 3c 	lds	r25, 0x3CF4
    268c:	86 de       	rcall	.-756    	; 0x239a <csp_queue_enqueue>
    268e:	0f 5f       	subi	r16, 0xFF	; 255
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	ec 0c       	add	r14, r12
    2694:	fd 1c       	adc	r15, r13
    2696:	80 91 ef 3c 	lds	r24, 0x3CEF
    269a:	90 91 f0 3c 	lds	r25, 0x3CF0
    269e:	08 17       	cp	r16, r24
    26a0:	19 07       	cpc	r17, r25
    26a2:	e0 f2       	brcs	.-72     	; 0x265c <csp_buffer_init+0x94>
    26a4:	0e c0       	rjmp	.+28     	; 0x26c2 <csp_buffer_init+0xfa>
    26a6:	80 91 f1 3c 	lds	r24, 0x3CF1
    26aa:	90 91 f2 3c 	lds	r25, 0x3CF2
    26ae:	6f de       	rcall	.-802    	; 0x238e <csp_free>
    26b0:	8f ef       	ldi	r24, 0xFF	; 255
    26b2:	9f ef       	ldi	r25, 0xFF	; 255
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <csp_buffer_init+0xfe>
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
    26b8:	9f ef       	ldi	r25, 0xFF	; 255
    26ba:	05 c0       	rjmp	.+10     	; 0x26c6 <csp_buffer_init+0xfe>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <csp_buffer_init+0xfe>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	ff 90       	pop	r15
    26d4:	ef 90       	pop	r14
    26d6:	df 90       	pop	r13
    26d8:	cf 90       	pop	r12
    26da:	08 95       	ret

000026dc <csp_buffer_get>:
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	1f 92       	push	r1
    26e2:	1f 92       	push	r1
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	19 82       	std	Y+1, r1	; 0x01
    26ea:	1a 82       	std	Y+2, r1	; 0x02
    26ec:	0e 96       	adiw	r24, 0x0e	; 14
    26ee:	20 91 ed 3c 	lds	r18, 0x3CED
    26f2:	30 91 ee 3c 	lds	r19, 0x3CEE
    26f6:	28 17       	cp	r18, r24
    26f8:	39 07       	cpc	r19, r25
    26fa:	e8 f0       	brcs	.+58     	; 0x2736 <csp_buffer_get+0x5a>
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	a9 01       	movw	r20, r18
    2702:	be 01       	movw	r22, r28
    2704:	6f 5f       	subi	r22, 0xFF	; 255
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	80 91 f3 3c 	lds	r24, 0x3CF3
    270c:	90 91 f4 3c 	lds	r25, 0x3CF4
    2710:	56 de       	rcall	.-852    	; 0x23be <csp_queue_dequeue>
    2712:	e9 81       	ldd	r30, Y+1	; 0x01
    2714:	fa 81       	ldd	r31, Y+2	; 0x02
    2716:	30 97       	sbiw	r30, 0x00	; 0
    2718:	89 f0       	breq	.+34     	; 0x273c <csp_buffer_get+0x60>
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	e8 17       	cp	r30, r24
    2720:	f9 07       	cpc	r31, r25
    2722:	79 f4       	brne	.+30     	; 0x2742 <csp_buffer_get+0x66>
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	80 83       	st	Z, r24
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	04 96       	adiw	r24, 0x04	; 4
    2734:	08 c0       	rjmp	.+16     	; 0x2746 <csp_buffer_get+0x6a>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <csp_buffer_get+0x6a>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <csp_buffer_get+0x6a>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	08 95       	ret

00002750 <csp_buffer_free_isr>:
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	00 d0       	rcall	.+0      	; 0x2756 <csp_buffer_free_isr+0x6>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	19 82       	std	Y+1, r1	; 0x01
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	51 f1       	breq	.+84     	; 0x27b4 <csp_buffer_free_isr+0x64>
    2760:	9c 01       	movw	r18, r24
    2762:	24 50       	subi	r18, 0x04	; 4
    2764:	31 09       	sbc	r19, r1
    2766:	2a 83       	std	Y+2, r18	; 0x02
    2768:	3b 83       	std	Y+3, r19	; 0x03
    276a:	20 fd       	sbrc	r18, 0
    276c:	23 c0       	rjmp	.+70     	; 0x27b4 <csp_buffer_free_isr+0x64>
    276e:	f9 01       	movw	r30, r18
    2770:	42 81       	ldd	r20, Z+2	; 0x02
    2772:	53 81       	ldd	r21, Z+3	; 0x03
    2774:	24 17       	cp	r18, r20
    2776:	35 07       	cpc	r19, r21
    2778:	e9 f4       	brne	.+58     	; 0x27b4 <csp_buffer_free_isr+0x64>
    277a:	f9 01       	movw	r30, r18
    277c:	20 81       	ld	r18, Z
    277e:	31 81       	ldd	r19, Z+1	; 0x01
    2780:	21 15       	cp	r18, r1
    2782:	31 05       	cpc	r19, r1
    2784:	b9 f0       	breq	.+46     	; 0x27b4 <csp_buffer_free_isr+0x64>
    2786:	22 30       	cpi	r18, 0x02	; 2
    2788:	31 05       	cpc	r19, r1
    278a:	28 f0       	brcs	.+10     	; 0x2796 <csp_buffer_free_isr+0x46>
    278c:	21 50       	subi	r18, 0x01	; 1
    278e:	31 09       	sbc	r19, r1
    2790:	20 83       	st	Z, r18
    2792:	31 83       	std	Z+1, r19	; 0x01
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <csp_buffer_free_isr+0x64>
    2796:	fc 01       	movw	r30, r24
    2798:	34 97       	sbiw	r30, 0x04	; 4
    279a:	10 82       	st	Z, r1
    279c:	11 82       	std	Z+1, r1	; 0x01
    279e:	ae 01       	movw	r20, r28
    27a0:	4f 5f       	subi	r20, 0xFF	; 255
    27a2:	5f 4f       	sbci	r21, 0xFF	; 255
    27a4:	be 01       	movw	r22, r28
    27a6:	6e 5f       	subi	r22, 0xFE	; 254
    27a8:	7f 4f       	sbci	r23, 0xFF	; 255
    27aa:	80 91 f3 3c 	lds	r24, 0x3CF3
    27ae:	90 91 f4 3c 	lds	r25, 0x3CF4
    27b2:	fe dd       	rcall	.-1028   	; 0x23b0 <csp_queue_enqueue_isr>
    27b4:	23 96       	adiw	r28, 0x03	; 3
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	08 95       	ret

000027c0 <csp_buffer_free>:
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	1f 92       	push	r1
    27c6:	1f 92       	push	r1
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	51 f1       	breq	.+84     	; 0x2824 <csp_buffer_free+0x64>
    27d0:	9c 01       	movw	r18, r24
    27d2:	24 50       	subi	r18, 0x04	; 4
    27d4:	31 09       	sbc	r19, r1
    27d6:	29 83       	std	Y+1, r18	; 0x01
    27d8:	3a 83       	std	Y+2, r19	; 0x02
    27da:	20 fd       	sbrc	r18, 0
    27dc:	23 c0       	rjmp	.+70     	; 0x2824 <csp_buffer_free+0x64>
    27de:	f9 01       	movw	r30, r18
    27e0:	42 81       	ldd	r20, Z+2	; 0x02
    27e2:	53 81       	ldd	r21, Z+3	; 0x03
    27e4:	24 17       	cp	r18, r20
    27e6:	35 07       	cpc	r19, r21
    27e8:	e9 f4       	brne	.+58     	; 0x2824 <csp_buffer_free+0x64>
    27ea:	f9 01       	movw	r30, r18
    27ec:	20 81       	ld	r18, Z
    27ee:	31 81       	ldd	r19, Z+1	; 0x01
    27f0:	21 15       	cp	r18, r1
    27f2:	31 05       	cpc	r19, r1
    27f4:	b9 f0       	breq	.+46     	; 0x2824 <csp_buffer_free+0x64>
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	28 f0       	brcs	.+10     	; 0x2806 <csp_buffer_free+0x46>
    27fc:	21 50       	subi	r18, 0x01	; 1
    27fe:	31 09       	sbc	r19, r1
    2800:	20 83       	st	Z, r18
    2802:	31 83       	std	Z+1, r19	; 0x01
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <csp_buffer_free+0x64>
    2806:	fc 01       	movw	r30, r24
    2808:	34 97       	sbiw	r30, 0x04	; 4
    280a:	10 82       	st	Z, r1
    280c:	11 82       	std	Z+1, r1	; 0x01
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	a9 01       	movw	r20, r18
    2814:	be 01       	movw	r22, r28
    2816:	6f 5f       	subi	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	80 91 f3 3c 	lds	r24, 0x3CF3
    281e:	90 91 f4 3c 	lds	r25, 0x3CF4
    2822:	bb dd       	rcall	.-1162   	; 0x239a <csp_queue_enqueue>
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <csp_buffer_remaining>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
    282e:	80 91 f3 3c 	lds	r24, 0x3CF3
    2832:	90 91 f4 3c 	lds	r25, 0x3CF4
    2836:	ce cd       	rjmp	.-1124   	; 0x23d4 <csp_queue_size>
}
    2838:	08 95       	ret

0000283a <csp_conn_enqueue_packet>:
#endif

	/* We have a successful connection */
	return conn;

}
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	1f 92       	push	r1
    2840:	1f 92       	push	r1
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	69 83       	std	Y+1, r22	; 0x01
    2848:	7a 83       	std	Y+2, r23	; 0x02
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	a9 f0       	breq	.+42     	; 0x2878 <csp_conn_enqueue_packet+0x3e>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	a9 01       	movw	r20, r18
    2854:	be 01       	movw	r22, r28
    2856:	6f 5f       	subi	r22, 0xFF	; 255
    2858:	7f 4f       	sbci	r23, 0xFF	; 255
    285a:	fc 01       	movw	r30, r24
    285c:	84 85       	ldd	r24, Z+12	; 0x0c
    285e:	95 85       	ldd	r25, Z+13	; 0x0d
    2860:	9c dd       	rcall	.-1224   	; 0x239a <csp_queue_enqueue>
    2862:	21 e0       	ldi	r18, 0x01	; 1
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	11 f4       	brne	.+4      	; 0x286e <csp_conn_enqueue_packet+0x34>
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	88 27       	eor	r24, r24
    2870:	99 27       	eor	r25, r25
    2872:	82 1b       	sub	r24, r18
    2874:	93 0b       	sbc	r25, r19
    2876:	02 c0       	rjmp	.+4      	; 0x287c <csp_conn_enqueue_packet+0x42>
    2878:	8e ef       	ldi	r24, 0xFE	; 254
    287a:	9f ef       	ldi	r25, 0xFF	; 255
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <csp_conn_init>:
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	81 de       	rcall	.-766    	; 0x2592 <csp_get_ms>
    2890:	cb 01       	movw	r24, r22
    2892:	0e 94 96 2a 	call	0x552c	; 0x552c <srand>
    2896:	0e 94 93 2a 	call	0x5526	; 0x5526 <rand>
    289a:	8f 71       	andi	r24, 0x1F	; 31
    289c:	90 78       	andi	r25, 0x80	; 128
    289e:	99 23       	and	r25, r25
    28a0:	24 f4       	brge	.+8      	; 0x28aa <csp_conn_init+0x24>
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	80 6e       	ori	r24, 0xE0	; 224
    28a6:	9f 6f       	ori	r25, 0xFF	; 255
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	80 5e       	subi	r24, 0xE0	; 224
    28ac:	80 93 f8 3c 	sts	0x3CF8, r24
    28b0:	86 ef       	ldi	r24, 0xF6	; 246
    28b2:	9c e3       	ldi	r25, 0x3C	; 60
    28b4:	a4 dd       	rcall	.-1208   	; 0x23fe <csp_bin_sem_create>
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	31 f5       	brne	.+76     	; 0x2906 <csp_conn_init+0x80>
    28ba:	cd ef       	ldi	r28, 0xFD	; 253
    28bc:	dc e3       	ldi	r29, 0x3C	; 60
    28be:	0d ee       	ldi	r16, 0xED	; 237
    28c0:	1d e3       	ldi	r17, 0x3D	; 61
    28c2:	04 c0       	rjmp	.+8      	; 0x28cc <csp_conn_init+0x46>
    28c4:	68 96       	adiw	r28, 0x18	; 24
    28c6:	c0 17       	cp	r28, r16
    28c8:	d1 07       	cpc	r29, r17
    28ca:	79 f0       	breq	.+30     	; 0x28ea <csp_conn_init+0x64>
    28cc:	62 e0       	ldi	r22, 0x02	; 2
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	8a e0       	ldi	r24, 0x0A	; 10
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	5f dd       	rcall	.-1346   	; 0x2394 <csp_queue_create>
    28d6:	8a 87       	std	Y+10, r24	; 0x0a
    28d8:	9b 87       	std	Y+11, r25	; 0x0b
    28da:	fe 01       	movw	r30, r28
    28dc:	31 97       	sbiw	r30, 0x01	; 1
    28de:	10 82       	st	Z, r1
    28e0:	ce 01       	movw	r24, r28
    28e2:	7c dd       	rcall	.-1288   	; 0x23dc <csp_mutex_create>
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	71 f3       	breq	.-36     	; 0x28c4 <csp_conn_init+0x3e>
    28e8:	11 c0       	rjmp	.+34     	; 0x290c <csp_conn_init+0x86>
    28ea:	89 ef       	ldi	r24, 0xF9	; 249
    28ec:	9c e3       	ldi	r25, 0x3C	; 60
    28ee:	87 dd       	rcall	.-1266   	; 0x23fe <csp_bin_sem_create>
    28f0:	21 e0       	ldi	r18, 0x01	; 1
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	11 f4       	brne	.+4      	; 0x28fc <csp_conn_init+0x76>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	88 27       	eor	r24, r24
    28fe:	99 27       	eor	r25, r25
    2900:	82 1b       	sub	r24, r18
    2902:	93 0b       	sbc	r25, r19
    2904:	05 c0       	rjmp	.+10     	; 0x2910 <csp_conn_init+0x8a>
    2906:	8f ef       	ldi	r24, 0xFF	; 255
    2908:	9f ef       	ldi	r25, 0xFF	; 255
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <csp_conn_init+0x8a>
    290c:	8f ef       	ldi	r24, 0xFF	; 255
    290e:	9f ef       	ldi	r25, 0xFF	; 255
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	08 95       	ret

0000291a <csp_conn_find>:
    291a:	cf 92       	push	r12
    291c:	df 92       	push	r13
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	eb ef       	ldi	r30, 0xFB	; 251
    292c:	fc e3       	ldi	r31, 0x3C	; 60
    292e:	0b ee       	ldi	r16, 0xEB	; 235
    2930:	1d e3       	ldi	r17, 0x3D	; 61
    2932:	ef 01       	movw	r28, r30
    2934:	a1 81       	ldd	r26, Z+1	; 0x01
    2936:	aa 23       	and	r26, r26
    2938:	99 f0       	breq	.+38     	; 0x2960 <csp_conn_find+0x46>
    293a:	a0 81       	ld	r26, Z
    293c:	a1 11       	cpse	r26, r1
    293e:	10 c0       	rjmp	.+32     	; 0x2960 <csp_conn_find+0x46>
    2940:	c4 80       	ldd	r12, Z+4	; 0x04
    2942:	d5 80       	ldd	r13, Z+5	; 0x05
    2944:	e6 80       	ldd	r14, Z+6	; 0x06
    2946:	f7 80       	ldd	r15, Z+7	; 0x07
    2948:	c6 26       	eor	r12, r22
    294a:	d7 26       	eor	r13, r23
    294c:	e8 26       	eor	r14, r24
    294e:	f9 26       	eor	r15, r25
    2950:	c2 22       	and	r12, r18
    2952:	d3 22       	and	r13, r19
    2954:	e4 22       	and	r14, r20
    2956:	f5 22       	and	r15, r21
    2958:	cd 28       	or	r12, r13
    295a:	ce 28       	or	r12, r14
    295c:	cf 28       	or	r12, r15
    295e:	29 f0       	breq	.+10     	; 0x296a <csp_conn_find+0x50>
    2960:	78 96       	adiw	r30, 0x18	; 24
    2962:	e0 17       	cp	r30, r16
    2964:	f1 07       	cpc	r31, r17
    2966:	29 f7       	brne	.-54     	; 0x2932 <csp_conn_find+0x18>
    2968:	03 c0       	rjmp	.+6      	; 0x2970 <csp_conn_find+0x56>
    296a:	8e 2f       	mov	r24, r30
    296c:	9d 2f       	mov	r25, r29
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <csp_conn_find+0x5a>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	08 95       	ret

00002986 <csp_conn_flush_rx_queue>:
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	1f 92       	push	r1
    2990:	1f 92       	push	r1
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	8c 01       	movw	r16, r24
    2998:	05 c0       	rjmp	.+10     	; 0x29a4 <csp_conn_flush_rx_queue+0x1e>
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	9a 81       	ldd	r25, Y+2	; 0x02
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <csp_conn_flush_rx_queue+0x1e>
    29a2:	0e df       	rcall	.-484    	; 0x27c0 <csp_buffer_free>
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	a9 01       	movw	r20, r18
    29aa:	be 01       	movw	r22, r28
    29ac:	6f 5f       	subi	r22, 0xFF	; 255
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	f8 01       	movw	r30, r16
    29b2:	84 85       	ldd	r24, Z+12	; 0x0c
    29b4:	95 85       	ldd	r25, Z+13	; 0x0d
    29b6:	03 dd       	rcall	.-1530   	; 0x23be <csp_queue_dequeue>
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	79 f3       	breq	.-34     	; 0x299a <csp_conn_flush_rx_queue+0x14>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	08 95       	ret

000029ce <csp_conn_allocate>:
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	18 2f       	mov	r17, r24
    29d6:	44 e6       	ldi	r20, 0x64	; 100
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	89 ef       	ldi	r24, 0xF9	; 249
    29e0:	9c e3       	ldi	r25, 0x3C	; 60
    29e2:	24 dd       	rcall	.-1464   	; 0x242c <csp_bin_sem_wait>
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	09 f0       	breq	.+2      	; 0x29ea <csp_conn_allocate+0x1c>
    29e8:	47 c0       	rjmp	.+142    	; 0x2a78 <csp_conn_allocate+0xaa>
    29ea:	80 91 f5 3c 	lds	r24, 0x3CF5
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	6a e0       	ldi	r22, 0x0A	; 10
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    29fa:	ec 01       	movw	r28, r24
    29fc:	cc 0f       	add	r28, r28
    29fe:	dd 1f       	adc	r29, r29
    2a00:	c8 0f       	add	r28, r24
    2a02:	d9 1f       	adc	r29, r25
    2a04:	cc 0f       	add	r28, r28
    2a06:	dd 1f       	adc	r29, r29
    2a08:	cc 0f       	add	r28, r28
    2a0a:	dd 1f       	adc	r29, r29
    2a0c:	cc 0f       	add	r28, r28
    2a0e:	dd 1f       	adc	r29, r29
    2a10:	c5 50       	subi	r28, 0x05	; 5
    2a12:	d3 4c       	sbci	r29, 0xC3	; 195
    2a14:	49 81       	ldd	r20, Y+1	; 0x01
    2a16:	41 11       	cpse	r20, r1
    2a18:	32 c0       	rjmp	.+100    	; 0x2a7e <csp_conn_allocate+0xb0>
    2a1a:	21 c0       	rjmp	.+66     	; 0x2a5e <csp_conn_allocate+0x90>
    2a1c:	ec 01       	movw	r28, r24
    2a1e:	cc 0f       	add	r28, r28
    2a20:	dd 1f       	adc	r29, r29
    2a22:	c8 0f       	add	r28, r24
    2a24:	d9 1f       	adc	r29, r25
    2a26:	cc 0f       	add	r28, r28
    2a28:	dd 1f       	adc	r29, r29
    2a2a:	cc 0f       	add	r28, r28
    2a2c:	dd 1f       	adc	r29, r29
    2a2e:	cc 0f       	add	r28, r28
    2a30:	dd 1f       	adc	r29, r29
    2a32:	c5 50       	subi	r28, 0x05	; 5
    2a34:	d3 4c       	sbci	r29, 0xC3	; 195
    2a36:	49 81       	ldd	r20, Y+1	; 0x01
    2a38:	44 23       	and	r20, r20
    2a3a:	89 f0       	breq	.+34     	; 0x2a5e <csp_conn_allocate+0x90>
    2a3c:	01 96       	adiw	r24, 0x01	; 1
    2a3e:	bf 01       	movw	r22, r30
    2a40:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    2a44:	21 50       	subi	r18, 0x01	; 1
    2a46:	31 09       	sbc	r19, r1
    2a48:	21 15       	cp	r18, r1
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	39 f7       	brne	.-50     	; 0x2a1c <csp_conn_allocate+0x4e>
    2a4e:	41 30       	cpi	r20, 0x01	; 1
    2a50:	31 f4       	brne	.+12     	; 0x2a5e <csp_conn_allocate+0x90>
    2a52:	89 ef       	ldi	r24, 0xF9	; 249
    2a54:	9c e3       	ldi	r25, 0x3C	; 60
    2a56:	fa dc       	rcall	.-1548   	; 0x244c <csp_bin_sem_post>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	1a c0       	rjmp	.+52     	; 0x2a92 <csp_conn_allocate+0xc4>
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
    2a60:	99 83       	std	Y+1, r25	; 0x01
    2a62:	1e 86       	std	Y+14, r1	; 0x0e
    2a64:	1f 86       	std	Y+15, r1	; 0x0f
    2a66:	18 83       	st	Y, r17
    2a68:	80 93 f5 3c 	sts	0x3CF5, r24
    2a6c:	89 ef       	ldi	r24, 0xF9	; 249
    2a6e:	9c e3       	ldi	r25, 0x3C	; 60
    2a70:	ed dc       	rcall	.-1574   	; 0x244c <csp_bin_sem_post>
    2a72:	8c 2f       	mov	r24, r28
    2a74:	9d 2f       	mov	r25, r29
    2a76:	0d c0       	rjmp	.+26     	; 0x2a92 <csp_conn_allocate+0xc4>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0a c0       	rjmp	.+20     	; 0x2a92 <csp_conn_allocate+0xc4>
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	6a e0       	ldi	r22, 0x0A	; 10
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    2a88:	29 e0       	ldi	r18, 0x09	; 9
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	ea e0       	ldi	r30, 0x0A	; 10
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	c5 cf       	rjmp	.-118    	; 0x2a1c <csp_conn_allocate+0x4e>
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	08 95       	ret

00002a9a <csp_conn_new>:
    2a9a:	8f 92       	push	r8
    2a9c:	9f 92       	push	r9
    2a9e:	af 92       	push	r10
    2aa0:	bf 92       	push	r11
    2aa2:	cf 92       	push	r12
    2aa4:	df 92       	push	r13
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	4b 01       	movw	r8, r22
    2ab0:	5c 01       	movw	r10, r24
    2ab2:	69 01       	movw	r12, r18
    2ab4:	7a 01       	movw	r14, r20
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	8a df       	rcall	.-236    	; 0x29ce <csp_conn_allocate>
    2aba:	ec 01       	movw	r28, r24
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	79 f0       	breq	.+30     	; 0x2ade <csp_conn_new+0x44>
    2ac0:	8c 82       	std	Y+4, r8	; 0x04
    2ac2:	9d 82       	std	Y+5, r9	; 0x05
    2ac4:	ae 82       	std	Y+6, r10	; 0x06
    2ac6:	bf 82       	std	Y+7, r11	; 0x07
    2ac8:	c8 86       	std	Y+8, r12	; 0x08
    2aca:	d9 86       	std	Y+9, r13	; 0x09
    2acc:	ea 86       	std	Y+10, r14	; 0x0a
    2ace:	fb 86       	std	Y+11, r15	; 0x0b
    2ad0:	60 dd       	rcall	.-1344   	; 0x2592 <csp_get_ms>
    2ad2:	68 8b       	std	Y+16, r22	; 0x10
    2ad4:	79 8b       	std	Y+17, r23	; 0x11
    2ad6:	8a 8b       	std	Y+18, r24	; 0x12
    2ad8:	9b 8b       	std	Y+19, r25	; 0x13
    2ada:	ce 01       	movw	r24, r28
    2adc:	54 df       	rcall	.-344    	; 0x2986 <csp_conn_flush_rx_queue>
    2ade:	ce 01       	movw	r24, r28
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	df 90       	pop	r13
    2aea:	cf 90       	pop	r12
    2aec:	bf 90       	pop	r11
    2aee:	af 90       	pop	r10
    2af0:	9f 90       	pop	r9
    2af2:	8f 90       	pop	r8
    2af4:	08 95       	ret

00002af6 <csp_close>:
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	ec 01       	movw	r28, r24
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	a9 f0       	breq	.+42     	; 0x2b2a <csp_close+0x34>
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	88 23       	and	r24, r24
    2b04:	a9 f0       	breq	.+42     	; 0x2b30 <csp_close+0x3a>
    2b06:	44 e6       	ldi	r20, 0x64	; 100
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	89 ef       	ldi	r24, 0xF9	; 249
    2b10:	9c e3       	ldi	r25, 0x3C	; 60
    2b12:	8c dc       	rcall	.-1768   	; 0x242c <csp_bin_sem_wait>
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	79 f4       	brne	.+30     	; 0x2b36 <csp_close+0x40>
    2b18:	19 82       	std	Y+1, r1	; 0x01
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	34 df       	rcall	.-408    	; 0x2986 <csp_conn_flush_rx_queue>
    2b1e:	89 ef       	ldi	r24, 0xF9	; 249
    2b20:	9c e3       	ldi	r25, 0x3C	; 60
    2b22:	94 dc       	rcall	.-1752   	; 0x244c <csp_bin_sem_post>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	08 c0       	rjmp	.+16     	; 0x2b3a <csp_close+0x44>
    2b2a:	8e ef       	ldi	r24, 0xFE	; 254
    2b2c:	9f ef       	ldi	r25, 0xFF	; 255
    2b2e:	05 c0       	rjmp	.+10     	; 0x2b3a <csp_close+0x44>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <csp_close+0x44>
    2b36:	8d ef       	ldi	r24, 0xFD	; 253
    2b38:	9f ef       	ldi	r25, 0xFF	; 255
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	08 95       	ret

00002b40 <csp_conn_dport>:

inline int csp_conn_dport(csp_conn_t * conn) {
    2b40:	fc 01       	movw	r30, r24

	return conn->idin.dport;
    2b42:	95 81       	ldd	r25, Z+5	; 0x05
    2b44:	92 95       	swap	r25
    2b46:	96 95       	lsr	r25
    2b48:	96 95       	lsr	r25
    2b4a:	93 70       	andi	r25, 0x03	; 3
    2b4c:	86 81       	ldd	r24, Z+6	; 0x06
    2b4e:	8f 70       	andi	r24, 0x0F	; 15
    2b50:	88 0f       	add	r24, r24
    2b52:	88 0f       	add	r24, r24
    2b54:	89 2b       	or	r24, r25

}
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	08 95       	ret

00002b5a <csp_crc32_memory>:
		0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
		0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
		0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
    2b5a:	8f 92       	push	r8
    2b5c:	9f 92       	push	r9
    2b5e:	af 92       	push	r10
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
   uint32_t crc;

   crc = 0xFFFFFFFF;
   while (length--)
    2b6e:	8a 01       	movw	r16, r20
    2b70:	9b 01       	movw	r18, r22
    2b72:	01 50       	subi	r16, 0x01	; 1
    2b74:	11 09       	sbc	r17, r1
    2b76:	21 09       	sbc	r18, r1
    2b78:	31 09       	sbc	r19, r1
    2b7a:	45 2b       	or	r20, r21
    2b7c:	46 2b       	or	r20, r22
    2b7e:	47 2b       	or	r20, r23
    2b80:	49 f1       	breq	.+82     	; 0x2bd4 <csp_crc32_memory+0x7a>
    2b82:	a8 2f       	mov	r26, r24
    2b84:	b9 2f       	mov	r27, r25
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
    2b86:	88 24       	eor	r8, r8
    2b88:	8a 94       	dec	r8
    2b8a:	98 2c       	mov	r9, r8
    2b8c:	54 01       	movw	r10, r8
   while (length--)
#ifdef __AVR__
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
    2b8e:	4d 91       	ld	r20, X+
    2b90:	75 01       	movw	r14, r10
    2b92:	64 01       	movw	r12, r8
    2b94:	c4 26       	eor	r12, r20
    2b96:	dd 24       	eor	r13, r13
    2b98:	ee 24       	eor	r14, r14
    2b9a:	ff 24       	eor	r15, r15
    2b9c:	c6 01       	movw	r24, r12
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e6 5f       	subi	r30, 0xF6	; 246
    2baa:	fd 4f       	sbci	r31, 0xFD	; 253
    2bac:	c5 90       	lpm	r12, Z+
    2bae:	d5 90       	lpm	r13, Z+
    2bb0:	e5 90       	lpm	r14, Z+
    2bb2:	f4 90       	lpm	r15, Z
    2bb4:	77 27       	eor	r23, r23
    2bb6:	6b 2d       	mov	r22, r11
    2bb8:	5a 2d       	mov	r21, r10
    2bba:	49 2d       	mov	r20, r9
    2bbc:	4a 01       	movw	r8, r20
    2bbe:	5b 01       	movw	r10, r22
    2bc0:	8c 24       	eor	r8, r12
    2bc2:	9d 24       	eor	r9, r13
    2bc4:	ae 24       	eor	r10, r14
    2bc6:	bf 24       	eor	r11, r15

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
   while (length--)
    2bc8:	01 50       	subi	r16, 0x01	; 1
    2bca:	11 09       	sbc	r17, r1
    2bcc:	21 09       	sbc	r18, r1
    2bce:	31 09       	sbc	r19, r1
    2bd0:	f0 f6       	brcc	.-68     	; 0x2b8e <csp_crc32_memory+0x34>
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <csp_crc32_memory+0x82>
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
    2bd4:	88 24       	eor	r8, r8
    2bd6:	8a 94       	dec	r8
    2bd8:	98 2c       	mov	r9, r8
    2bda:	54 01       	movw	r10, r8
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
#else
	   crc = crc_tab[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
#endif

   return (crc ^ 0xFFFFFFFF);
    2bdc:	c5 01       	movw	r24, r10
    2bde:	b4 01       	movw	r22, r8
    2be0:	60 95       	com	r22
    2be2:	70 95       	com	r23
    2be4:	80 95       	com	r24
    2be6:	90 95       	com	r25
}
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	bf 90       	pop	r11
    2bf6:	af 90       	pop	r10
    2bf8:	9f 90       	pop	r9
    2bfa:	8f 90       	pop	r8
    2bfc:	08 95       	ret

00002bfe <csp_crc32_append>:

int csp_crc32_append(csp_packet_t * packet) {
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	ec 01       	movw	r28, r24

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	b9 f0       	breq	.+46     	; 0x2c36 <csp_crc32_append+0x38>
		return CSP_ERR_INVAL;

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory(packet->data, packet->length);
    2c08:	48 85       	ldd	r20, Y+8	; 0x08
    2c0a:	59 85       	ldd	r21, Y+9	; 0x09
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	0e 96       	adiw	r24, 0x0e	; 14
    2c12:	a3 df       	rcall	.-186    	; 0x2b5a <csp_crc32_memory>
	crc = csp_hton32(crc);
    2c14:	5e d0       	rcall	.+188    	; 0x2cd2 <csp_hton32>

	/* Copy checksum to packet */
	memcpy(&packet->data[packet->length], &crc, sizeof(uint32_t));
    2c16:	e8 85       	ldd	r30, Y+8	; 0x08
    2c18:	f9 85       	ldd	r31, Y+9	; 0x09
    2c1a:	ec 0f       	add	r30, r28
    2c1c:	fd 1f       	adc	r31, r29
    2c1e:	66 87       	std	Z+14, r22	; 0x0e
    2c20:	77 87       	std	Z+15, r23	; 0x0f
    2c22:	80 8b       	std	Z+16, r24	; 0x10
    2c24:	91 8b       	std	Z+17, r25	; 0x11
	packet->length += sizeof(uint32_t);
    2c26:	88 85       	ldd	r24, Y+8	; 0x08
    2c28:	99 85       	ldd	r25, Y+9	; 0x09
    2c2a:	04 96       	adiw	r24, 0x04	; 4
    2c2c:	88 87       	std	Y+8, r24	; 0x08
    2c2e:	99 87       	std	Y+9, r25	; 0x09

	return CSP_ERR_NONE;
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <csp_crc32_append+0x3c>

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
		return CSP_ERR_INVAL;
    2c36:	8e ef       	ldi	r24, 0xFE	; 254
    2c38:	9f ef       	ldi	r25, 0xFF	; 255
	memcpy(&packet->data[packet->length], &crc, sizeof(uint32_t));
	packet->length += sizeof(uint32_t);

	return CSP_ERR_NONE;

}
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	08 95       	ret

00002c40 <csp_crc32_verify>:

int csp_crc32_verify(csp_packet_t * packet) {
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <csp_crc32_verify+0xe>
    2c4e:	1f 92       	push	r1
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	8c 01       	movw	r16, r24

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	51 f1       	breq	.+84     	; 0x2cae <csp_crc32_verify+0x6e>
		return CSP_ERR_INVAL;

	if (packet->length < sizeof(uint32_t))
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	80 85       	ldd	r24, Z+8	; 0x08
    2c5e:	91 85       	ldd	r25, Z+9	; 0x09
    2c60:	84 30       	cpi	r24, 0x04	; 4
    2c62:	91 05       	cpc	r25, r1
    2c64:	38 f1       	brcs	.+78     	; 0x2cb4 <csp_crc32_verify+0x74>
		return CSP_ERR_INVAL;

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory(packet->data, packet->length - sizeof(uint32_t));
    2c66:	ac 01       	movw	r20, r24
    2c68:	44 50       	subi	r20, 0x04	; 4
    2c6a:	51 09       	sbc	r21, r1
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	c8 01       	movw	r24, r16
    2c72:	0e 96       	adiw	r24, 0x0e	; 14
    2c74:	72 df       	rcall	.-284    	; 0x2b5a <csp_crc32_memory>
	crc = csp_hton32(crc);
    2c76:	2d d0       	rcall	.+90     	; 0x2cd2 <csp_hton32>
    2c78:	69 83       	std	Y+1, r22	; 0x01
    2c7a:	7a 83       	std	Y+2, r23	; 0x02
    2c7c:	8b 83       	std	Y+3, r24	; 0x03
    2c7e:	9c 83       	std	Y+4, r25	; 0x04

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(uint32_t), &crc, sizeof(uint32_t)) != 0) {
    2c80:	f8 01       	movw	r30, r16
    2c82:	80 85       	ldd	r24, Z+8	; 0x08
    2c84:	91 85       	ldd	r25, Z+9	; 0x09
    2c86:	7c 01       	movw	r14, r24
    2c88:	f4 e0       	ldi	r31, 0x04	; 4
    2c8a:	ef 1a       	sub	r14, r31
    2c8c:	f1 08       	sbc	r15, r1
    2c8e:	0a 96       	adiw	r24, 0x0a	; 10
    2c90:	44 e0       	ldi	r20, 0x04	; 4
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	be 01       	movw	r22, r28
    2c96:	6f 5f       	subi	r22, 0xFF	; 255
    2c98:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9a:	80 0f       	add	r24, r16
    2c9c:	91 1f       	adc	r25, r17
    2c9e:	0e 94 84 2b 	call	0x5708	; 0x5708 <memcmp>
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	51 f4       	brne	.+20     	; 0x2cba <csp_crc32_verify+0x7a>
		/* CRC32 failed */
		return CSP_ERR_INVAL;
	} else {
		/* Strip CRC32 */
		packet->length -= sizeof(uint32_t);
    2ca6:	f8 01       	movw	r30, r16
    2ca8:	e0 86       	std	Z+8, r14	; 0x08
    2caa:	f1 86       	std	Z+9, r15	; 0x09
		return CSP_ERR_NONE;
    2cac:	08 c0       	rjmp	.+16     	; 0x2cbe <csp_crc32_verify+0x7e>

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
		return CSP_ERR_INVAL;
    2cae:	8e ef       	ldi	r24, 0xFE	; 254
    2cb0:	9f ef       	ldi	r25, 0xFF	; 255
    2cb2:	05 c0       	rjmp	.+10     	; 0x2cbe <csp_crc32_verify+0x7e>

	if (packet->length < sizeof(uint32_t))
		return CSP_ERR_INVAL;
    2cb4:	8e ef       	ldi	r24, 0xFE	; 254
    2cb6:	9f ef       	ldi	r25, 0xFF	; 255
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <csp_crc32_verify+0x7e>
	crc = csp_hton32(crc);

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(uint32_t), &crc, sizeof(uint32_t)) != 0) {
		/* CRC32 failed */
		return CSP_ERR_INVAL;
    2cba:	8e ef       	ldi	r24, 0xFE	; 254
    2cbc:	9f ef       	ldi	r25, 0xFF	; 255
		/* Strip CRC32 */
		packet->length -= sizeof(uint32_t);
		return CSP_ERR_NONE;
	}

}
    2cbe:	24 96       	adiw	r28, 0x04	; 4
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	08 95       	ret

00002cd2 <csp_hton32>:
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
	return csp_hton16(n16);
}

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
    2cd2:	cf 92       	push	r12
    2cd4:	df 92       	push	r13
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2cde:	f6 2e       	mov	r15, r22
    2ce0:	ee 24       	eor	r14, r14
    2ce2:	dd 24       	eor	r13, r13
    2ce4:	cc 24       	eor	r12, r12
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2ce6:	09 2f       	mov	r16, r25
    2ce8:	11 27       	eor	r17, r17
    2cea:	22 27       	eor	r18, r18
    2cec:	33 27       	eor	r19, r19
    2cee:	0c 29       	or	r16, r12
    2cf0:	1d 29       	or	r17, r13
    2cf2:	2e 29       	or	r18, r14
    2cf4:	3f 29       	or	r19, r15
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
    2cf6:	6b 01       	movw	r12, r22
    2cf8:	7c 01       	movw	r14, r24
    2cfa:	cc 24       	eor	r12, r12
    2cfc:	ee 24       	eor	r14, r14
    2cfe:	ff 24       	eor	r15, r15
    2d00:	fe 2c       	mov	r15, r14
    2d02:	ed 2c       	mov	r14, r13
    2d04:	dc 2c       	mov	r13, r12
    2d06:	cc 24       	eor	r12, r12
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d08:	0c 29       	or	r16, r12
    2d0a:	1d 29       	or	r17, r13
    2d0c:	2e 29       	or	r18, r14
    2d0e:	3f 29       	or	r19, r15
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	88 27       	eor	r24, r24
    2d16:	99 27       	eor	r25, r25
    2d18:	bb 27       	eor	r27, r27
    2d1a:	89 2f       	mov	r24, r25
    2d1c:	9a 2f       	mov	r25, r26
    2d1e:	ab 2f       	mov	r26, r27
    2d20:	bb 27       	eor	r27, r27
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	60 2b       	or	r22, r16
    2d28:	71 2b       	or	r23, r17
    2d2a:	82 2b       	or	r24, r18
    2d2c:	93 2b       	or	r25, r19
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
#endif
}
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	df 90       	pop	r13
    2d38:	cf 90       	pop	r12
    2d3a:	08 95       	ret

00002d3c <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d48:	f6 2e       	mov	r15, r22
    2d4a:	ee 24       	eor	r14, r14
    2d4c:	dd 24       	eor	r13, r13
    2d4e:	cc 24       	eor	r12, r12
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d50:	09 2f       	mov	r16, r25
    2d52:	11 27       	eor	r17, r17
    2d54:	22 27       	eor	r18, r18
    2d56:	33 27       	eor	r19, r19
    2d58:	0c 29       	or	r16, r12
    2d5a:	1d 29       	or	r17, r13
    2d5c:	2e 29       	or	r18, r14
    2d5e:	3f 29       	or	r19, r15
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
    2d60:	6b 01       	movw	r12, r22
    2d62:	7c 01       	movw	r14, r24
    2d64:	cc 24       	eor	r12, r12
    2d66:	ee 24       	eor	r14, r14
    2d68:	ff 24       	eor	r15, r15
    2d6a:	fe 2c       	mov	r15, r14
    2d6c:	ed 2c       	mov	r14, r13
    2d6e:	dc 2c       	mov	r13, r12
    2d70:	cc 24       	eor	r12, r12
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d72:	0c 29       	or	r16, r12
    2d74:	1d 29       	or	r17, r13
    2d76:	2e 29       	or	r18, r14
    2d78:	3f 29       	or	r19, r15
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	88 27       	eor	r24, r24
    2d80:	99 27       	eor	r25, r25
    2d82:	bb 27       	eor	r27, r27
    2d84:	89 2f       	mov	r24, r25
    2d86:	9a 2f       	mov	r25, r26
    2d88:	ab 2f       	mov	r26, r27
    2d8a:	bb 27       	eor	r27, r27
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	60 2b       	or	r22, r16
    2d92:	71 2b       	or	r23, r17
    2d94:	82 2b       	or	r24, r18
    2d96:	93 2b       	or	r25, r19
}

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
	return csp_hton32(n32);
}
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	df 90       	pop	r13
    2da2:	cf 90       	pop	r12
    2da4:	08 95       	ret

00002da6 <csp_get_hostname>:
	csp_packet_t * packet = NULL;
	csp_queue_dequeue(socket->socket, &packet, timeout);

	return packet;

}
    2da6:	80 91 ed 3d 	lds	r24, 0x3DED
    2daa:	90 91 ee 3d 	lds	r25, 0x3DEE
    2dae:	08 95       	ret

00002db0 <csp_get_model>:
    2db0:	80 91 eb 3d 	lds	r24, 0x3DEB
    2db4:	90 91 ec 3d 	lds	r25, 0x3DEC
    2db8:	08 95       	ret

00002dba <csp_init>:
    2dba:	80 93 65 3f 	sts	0x3F65, r24
    2dbe:	63 dd       	rcall	.-1338   	; 0x2886 <csp_conn_init>
    2dc0:	9c 01       	movw	r18, r24
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	31 f4       	brne	.+12     	; 0x2dd2 <csp_init+0x18>
    2dc6:	08 d2       	rcall	.+1040   	; 0x31d8 <csp_port_init>
    2dc8:	9c 01       	movw	r18, r24
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <csp_init+0x1c>
    2dce:	37 c3       	rjmp	.+1646   	; 0x343e <csp_route_table_init>
    2dd0:	08 95       	ret
    2dd2:	93 2f       	mov	r25, r19
    2dd4:	08 95       	ret
    2dd6:	93 2f       	mov	r25, r19
    2dd8:	08 95       	ret

00002dda <csp_socket>:
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	6b 01       	movw	r12, r22
    2de8:	7c 01       	movw	r14, r24
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	81 71       	andi	r24, 0x11	; 17
    2df0:	99 27       	eor	r25, r25
    2df2:	aa 27       	eor	r26, r26
    2df4:	bb 27       	eor	r27, r27
    2df6:	89 2b       	or	r24, r25
    2df8:	8a 2b       	or	r24, r26
    2dfa:	8b 2b       	or	r24, r27
    2dfc:	11 f5       	brne	.+68     	; 0x2e42 <csp_socket+0x68>
    2dfe:	d7 01       	movw	r26, r14
    2e00:	c6 01       	movw	r24, r12
    2e02:	8e 7a       	andi	r24, 0xAE	; 174
    2e04:	9e 7f       	andi	r25, 0xFE	; 254
    2e06:	89 2b       	or	r24, r25
    2e08:	8a 2b       	or	r24, r26
    2e0a:	8b 2b       	or	r24, r27
    2e0c:	e9 f4       	brne	.+58     	; 0x2e48 <csp_socket+0x6e>
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	de dd       	rcall	.-1092   	; 0x29ce <csp_conn_allocate>
    2e12:	ec 01       	movw	r28, r24
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	d9 f0       	breq	.+54     	; 0x2e4e <csp_socket+0x74>
    2e18:	d0 fe       	sbrs	r13, 0
    2e1a:	0a c0       	rjmp	.+20     	; 0x2e30 <csp_socket+0x56>
    2e1c:	62 e0       	ldi	r22, 0x02	; 2
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	8a e0       	ldi	r24, 0x0A	; 10
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	b7 da       	rcall	.-2706   	; 0x2394 <csp_queue_create>
    2e26:	8e 87       	std	Y+14, r24	; 0x0e
    2e28:	9f 87       	std	Y+15, r25	; 0x0f
    2e2a:	89 2b       	or	r24, r25
    2e2c:	19 f4       	brne	.+6      	; 0x2e34 <csp_socket+0x5a>
    2e2e:	12 c0       	rjmp	.+36     	; 0x2e54 <csp_socket+0x7a>
    2e30:	1e 86       	std	Y+14, r1	; 0x0e
    2e32:	1f 86       	std	Y+15, r1	; 0x0f
    2e34:	cc 8a       	std	Y+20, r12	; 0x14
    2e36:	dd 8a       	std	Y+21, r13	; 0x15
    2e38:	ee 8a       	std	Y+22, r14	; 0x16
    2e3a:	ff 8a       	std	Y+23, r15	; 0x17
    2e3c:	8c 2f       	mov	r24, r28
    2e3e:	9d 2f       	mov	r25, r29
    2e40:	0b c0       	rjmp	.+22     	; 0x2e58 <csp_socket+0x7e>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	08 c0       	rjmp	.+16     	; 0x2e58 <csp_socket+0x7e>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <csp_socket+0x7e>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <csp_socket+0x7e>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	ff 90       	pop	r15
    2e5e:	ef 90       	pop	r14
    2e60:	df 90       	pop	r13
    2e62:	cf 90       	pop	r12
    2e64:	08 95       	ret

00002e66 <csp_accept>:
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	1f 92       	push	r1
    2e6c:	1f 92       	push	r1
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	81 f0       	breq	.+32     	; 0x2e96 <csp_accept+0x30>
    2e76:	fc 01       	movw	r30, r24
    2e78:	86 85       	ldd	r24, Z+14	; 0x0e
    2e7a:	97 85       	ldd	r25, Z+15	; 0x0f
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	71 f0       	breq	.+28     	; 0x2e9c <csp_accept+0x36>
    2e80:	9a 01       	movw	r18, r20
    2e82:	ab 01       	movw	r20, r22
    2e84:	be 01       	movw	r22, r28
    2e86:	6f 5f       	subi	r22, 0xFF	; 255
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	99 da       	rcall	.-2766   	; 0x23be <csp_queue_dequeue>
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	49 f4       	brne	.+18     	; 0x2ea2 <csp_accept+0x3c>
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	08 c0       	rjmp	.+16     	; 0x2ea6 <csp_accept+0x40>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	05 c0       	rjmp	.+10     	; 0x2ea6 <csp_accept+0x40>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <csp_accept+0x40>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <csp_read>:
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	1f 92       	push	r1
    2eb6:	1f 92       	push	r1
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	19 82       	std	Y+1, r1	; 0x01
    2ebe:	1a 82       	std	Y+2, r1	; 0x02
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	89 f0       	breq	.+34     	; 0x2ee6 <csp_read+0x36>
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	21 81       	ldd	r18, Z+1	; 0x01
    2ec8:	21 30       	cpi	r18, 0x01	; 1
    2eca:	81 f4       	brne	.+32     	; 0x2eec <csp_read+0x3c>
    2ecc:	9a 01       	movw	r18, r20
    2ece:	ab 01       	movw	r20, r22
    2ed0:	be 01       	movw	r22, r28
    2ed2:	6f 5f       	subi	r22, 0xFF	; 255
    2ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed6:	84 85       	ldd	r24, Z+12	; 0x0c
    2ed8:	95 85       	ldd	r25, Z+13	; 0x0d
    2eda:	71 da       	rcall	.-2846   	; 0x23be <csp_queue_dequeue>
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	49 f4       	brne	.+18     	; 0x2ef2 <csp_read+0x42>
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	08 c0       	rjmp	.+16     	; 0x2ef6 <csp_read+0x46>
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	05 c0       	rjmp	.+10     	; 0x2ef6 <csp_read+0x46>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	02 c0       	rjmp	.+4      	; 0x2ef6 <csp_read+0x46>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	08 95       	ret

00002f00 <csp_send_direct>:
    2f00:	8f 92       	push	r8
    2f02:	9f 92       	push	r9
    2f04:	af 92       	push	r10
    2f06:	bf 92       	push	r11
    2f08:	cf 92       	push	r12
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	96 2e       	mov	r9, r22
    2f1a:	87 2e       	mov	r8, r23
    2f1c:	d8 2f       	mov	r29, r24
    2f1e:	c9 2f       	mov	r28, r25
    2f20:	5a 01       	movw	r10, r20
    2f22:	68 01       	movw	r12, r16
    2f24:	79 01       	movw	r14, r18
    2f26:	41 15       	cp	r20, r1
    2f28:	51 05       	cpc	r21, r1
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <csp_send_direct+0x2e>
    2f2c:	7b c0       	rjmp	.+246    	; 0x3024 <csp_send_direct+0x124>
    2f2e:	89 2f       	mov	r24, r25
    2f30:	81 70       	andi	r24, 0x01	; 1
    2f32:	82 95       	swap	r24
    2f34:	80 7f       	andi	r24, 0xF0	; 240
    2f36:	9d 2f       	mov	r25, r29
    2f38:	92 95       	swap	r25
    2f3a:	9f 70       	andi	r25, 0x0F	; 15
    2f3c:	89 2b       	or	r24, r25
    2f3e:	a9 d2       	rcall	.+1362   	; 0x3492 <csp_route_if>
    2f40:	8c 01       	movw	r16, r24
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <csp_send_direct+0x48>
    2f46:	71 c0       	rjmp	.+226    	; 0x302a <csp_send_direct+0x12a>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	ed 91       	ld	r30, X+
    2f4c:	fc 91       	ld	r31, X
    2f4e:	30 97       	sbiw	r30, 0x00	; 0
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <csp_send_direct+0x54>
    2f52:	6e c0       	rjmp	.+220    	; 0x3030 <csp_send_direct+0x130>
    2f54:	24 81       	ldd	r18, Z+4	; 0x04
    2f56:	35 81       	ldd	r19, Z+5	; 0x05
    2f58:	23 2b       	or	r18, r19
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <csp_send_direct+0x5e>
    2f5c:	6c c0       	rjmp	.+216    	; 0x3036 <csp_send_direct+0x136>
    2f5e:	2c 2f       	mov	r18, r28
    2f60:	26 95       	lsr	r18
    2f62:	2f 71       	andi	r18, 0x1F	; 31
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	80 91 65 3f 	lds	r24, 0x3F65
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	28 17       	cp	r18, r24
    2f6e:	39 07       	cpc	r19, r25
    2f70:	59 f4       	brne	.+22     	; 0x2f88 <csp_send_direct+0x88>
    2f72:	93 fc       	sbrc	r9, 3
    2f74:	46 c0       	rjmp	.+140    	; 0x3002 <csp_send_direct+0x102>
    2f76:	90 fe       	sbrs	r9, 0
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <csp_send_direct+0x84>
    2f7a:	c5 01       	movw	r24, r10
    2f7c:	40 de       	rcall	.-896    	; 0x2bfe <csp_crc32_append>
    2f7e:	89 2b       	or	r24, r25
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <csp_send_direct+0x84>
    2f82:	3f c0       	rjmp	.+126    	; 0x3002 <csp_send_direct+0x102>
    2f84:	92 fc       	sbrc	r9, 2
    2f86:	3d c0       	rjmp	.+122    	; 0x3002 <csp_send_direct+0x102>
    2f88:	f5 01       	movw	r30, r10
    2f8a:	92 86       	std	Z+10, r9	; 0x0a
    2f8c:	83 86       	std	Z+11, r8	; 0x0b
    2f8e:	d4 87       	std	Z+12, r29	; 0x0c
    2f90:	c5 87       	std	Z+13, r28	; 0x0d
    2f92:	c0 85       	ldd	r28, Z+8	; 0x08
    2f94:	d1 85       	ldd	r29, Z+9	; 0x09
    2f96:	f8 01       	movw	r30, r16
    2f98:	a0 81       	ld	r26, Z
    2f9a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f9c:	17 96       	adiw	r26, 0x07	; 7
    2f9e:	8d 91       	ld	r24, X+
    2fa0:	9c 91       	ld	r25, X
    2fa2:	18 97       	sbiw	r26, 0x08	; 8
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	19 f0       	breq	.+6      	; 0x2fae <csp_send_direct+0xae>
    2fa8:	8c 17       	cp	r24, r28
    2faa:	9d 07       	cpc	r25, r29
    2fac:	50 f1       	brcs	.+84     	; 0x3002 <csp_send_direct+0x102>
    2fae:	14 96       	adiw	r26, 0x04	; 4
    2fb0:	ed 91       	ld	r30, X+
    2fb2:	fc 91       	ld	r31, X
    2fb4:	15 97       	sbiw	r26, 0x05	; 5
    2fb6:	a7 01       	movw	r20, r14
    2fb8:	96 01       	movw	r18, r12
    2fba:	b5 01       	movw	r22, r10
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	19 95       	eicall
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	f9 f4       	brne	.+62     	; 0x3002 <csp_send_direct+0x102>
    2fc4:	d8 01       	movw	r26, r16
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	11 97       	sbiw	r26, 0x01	; 1
    2fcc:	42 85       	ldd	r20, Z+10	; 0x0a
    2fce:	53 85       	ldd	r21, Z+11	; 0x0b
    2fd0:	64 85       	ldd	r22, Z+12	; 0x0c
    2fd2:	75 85       	ldd	r23, Z+13	; 0x0d
    2fd4:	4f 5f       	subi	r20, 0xFF	; 255
    2fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd8:	6f 4f       	sbci	r22, 0xFF	; 255
    2fda:	7f 4f       	sbci	r23, 0xFF	; 255
    2fdc:	42 87       	std	Z+10, r20	; 0x0a
    2fde:	53 87       	std	Z+11, r21	; 0x0b
    2fe0:	64 87       	std	Z+12, r22	; 0x0c
    2fe2:	75 87       	std	Z+13, r23	; 0x0d
    2fe4:	ed 91       	ld	r30, X+
    2fe6:	fc 91       	ld	r31, X
    2fe8:	46 a1       	ldd	r20, Z+38	; 0x26
    2fea:	57 a1       	ldd	r21, Z+39	; 0x27
    2fec:	60 a5       	ldd	r22, Z+40	; 0x28
    2fee:	71 a5       	ldd	r23, Z+41	; 0x29
    2ff0:	4c 0f       	add	r20, r28
    2ff2:	5d 1f       	adc	r21, r29
    2ff4:	61 1d       	adc	r22, r1
    2ff6:	71 1d       	adc	r23, r1
    2ff8:	46 a3       	std	Z+38, r20	; 0x26
    2ffa:	57 a3       	std	Z+39, r21	; 0x27
    2ffc:	60 a7       	std	Z+40, r22	; 0x28
    2ffe:	71 a7       	std	Z+41, r23	; 0x29
    3000:	1c c0       	rjmp	.+56     	; 0x303a <csp_send_direct+0x13a>
    3002:	d8 01       	movw	r26, r16
    3004:	ed 91       	ld	r30, X+
    3006:	fc 91       	ld	r31, X
    3008:	82 89       	ldd	r24, Z+18	; 0x12
    300a:	93 89       	ldd	r25, Z+19	; 0x13
    300c:	a4 89       	ldd	r26, Z+20	; 0x14
    300e:	b5 89       	ldd	r27, Z+21	; 0x15
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	a1 1d       	adc	r26, r1
    3014:	b1 1d       	adc	r27, r1
    3016:	82 8b       	std	Z+18, r24	; 0x12
    3018:	93 8b       	std	Z+19, r25	; 0x13
    301a:	a4 8b       	std	Z+20, r26	; 0x14
    301c:	b5 8b       	std	Z+21, r27	; 0x15
    301e:	86 ef       	ldi	r24, 0xF6	; 246
    3020:	9f ef       	ldi	r25, 0xFF	; 255
    3022:	0b c0       	rjmp	.+22     	; 0x303a <csp_send_direct+0x13a>
    3024:	86 ef       	ldi	r24, 0xF6	; 246
    3026:	9f ef       	ldi	r25, 0xFF	; 255
    3028:	08 c0       	rjmp	.+16     	; 0x303a <csp_send_direct+0x13a>
    302a:	86 ef       	ldi	r24, 0xF6	; 246
    302c:	9f ef       	ldi	r25, 0xFF	; 255
    302e:	05 c0       	rjmp	.+10     	; 0x303a <csp_send_direct+0x13a>
    3030:	86 ef       	ldi	r24, 0xF6	; 246
    3032:	9f ef       	ldi	r25, 0xFF	; 255
    3034:	02 c0       	rjmp	.+4      	; 0x303a <csp_send_direct+0x13a>
    3036:	86 ef       	ldi	r24, 0xF6	; 246
    3038:	9f ef       	ldi	r25, 0xFF	; 255
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	ff 90       	pop	r15
    3044:	ef 90       	pop	r14
    3046:	df 90       	pop	r13
    3048:	cf 90       	pop	r12
    304a:	bf 90       	pop	r11
    304c:	af 90       	pop	r10
    304e:	9f 90       	pop	r9
    3050:	8f 90       	pop	r8
    3052:	08 95       	ret

00003054 <csp_send>:
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	fb 01       	movw	r30, r22
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	d1 f0       	breq	.+52     	; 0x3092 <csp_send+0x3e>
    305e:	30 97       	sbiw	r30, 0x00	; 0
    3060:	d9 f0       	breq	.+54     	; 0x3098 <csp_send+0x44>
    3062:	dc 01       	movw	r26, r24
    3064:	11 96       	adiw	r26, 0x01	; 1
    3066:	6c 91       	ld	r22, X
    3068:	11 97       	sbiw	r26, 0x01	; 1
    306a:	61 30       	cpi	r22, 0x01	; 1
    306c:	c1 f4       	brne	.+48     	; 0x309e <csp_send+0x4a>
    306e:	18 96       	adiw	r26, 0x08	; 8
    3070:	6d 91       	ld	r22, X+
    3072:	7d 91       	ld	r23, X+
    3074:	8d 91       	ld	r24, X+
    3076:	9c 91       	ld	r25, X
    3078:	1b 97       	sbiw	r26, 0x0b	; 11
    307a:	89 01       	movw	r16, r18
    307c:	9a 01       	movw	r18, r20
    307e:	af 01       	movw	r20, r30
    3080:	3f df       	rcall	.-386    	; 0x2f00 <csp_send_direct>
    3082:	31 e0       	ldi	r19, 0x01	; 1
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	89 2b       	or	r24, r25
    3088:	09 f0       	breq	.+2      	; 0x308c <csp_send+0x38>
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	83 2f       	mov	r24, r19
    308e:	92 2f       	mov	r25, r18
    3090:	08 c0       	rjmp	.+16     	; 0x30a2 <csp_send+0x4e>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	05 c0       	rjmp	.+10     	; 0x30a2 <csp_send+0x4e>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <csp_send+0x4e>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	1f 91       	pop	r17
    30a4:	0f 91       	pop	r16
    30a6:	08 95       	ret

000030a8 <csp_sendto>:

int csp_sendto(uint8_t prio, uint8_t dest, uint8_t dport, uint8_t src_port, uint32_t opts, csp_packet_t * packet, uint32_t timeout) {
    30a8:	4f 92       	push	r4
    30aa:	5f 92       	push	r5
    30ac:	6f 92       	push	r6
    30ae:	7f 92       	push	r7
    30b0:	8f 92       	push	r8
    30b2:	9f 92       	push	r9
    30b4:	af 92       	push	r10
    30b6:	bf 92       	push	r11
    30b8:	cf 92       	push	r12
    30ba:	df 92       	push	r13
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	f6 01       	movw	r30, r12

	packet->id.flags = 0;
    30ce:	12 86       	std	Z+10, r1	; 0x0a

	if (opts & CSP_O_RDP) {
    30d0:	e0 fc       	sbrc	r14, 0
    30d2:	45 c0       	rjmp	.+138    	; 0x315e <csp_sendto+0xb6>
    30d4:	27 01       	movw	r4, r14
    30d6:	38 01       	movw	r6, r16
    30d8:	94 e1       	ldi	r25, 0x14	; 20
    30da:	49 22       	and	r4, r25
    30dc:	55 24       	eor	r5, r5
    30de:	66 24       	eor	r6, r6
    30e0:	77 24       	eor	r7, r7
		csp_log_error("Attempt to create HMAC authenticated packet, but CSP was compiled without HMAC support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	if (opts & CSP_O_XTEA) {
    30e2:	45 28       	or	r4, r5
    30e4:	46 28       	or	r4, r6
    30e6:	47 28       	or	r4, r7
    30e8:	e9 f5       	brne	.+122    	; 0x3164 <csp_sendto+0xbc>
		csp_log_error("Attempt to create XTEA encrypted packet, but CSP was compiled without XTEA support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	if (opts & CSP_O_CRC32) {
    30ea:	e6 fe       	sbrs	r14, 6
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <csp_sendto+0x4a>
#ifdef CSP_USE_CRC32
		packet->id.flags |= CSP_FCRC32;
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	92 87       	std	Z+10, r25	; 0x0a
		csp_log_error("Attempt to create CRC32 validated packet, but CSP was compiled without CRC32 support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	packet->id.dst = dest;
    30f2:	64 fb       	bst	r22, 4
    30f4:	99 27       	eor	r25, r25
    30f6:	90 f9       	bld	r25, 0
    30f8:	35 85       	ldd	r19, Z+13	; 0x0d
    30fa:	3e 7f       	andi	r19, 0xFE	; 254
    30fc:	39 2b       	or	r19, r25
    30fe:	35 87       	std	Z+13, r19	; 0x0d
	packet->id.dport = dport;
    3100:	54 2f       	mov	r21, r20
    3102:	52 95       	swap	r21
    3104:	55 0f       	add	r21, r21
    3106:	55 0f       	add	r21, r21
    3108:	50 7c       	andi	r21, 0xC0	; 192
    310a:	93 85       	ldd	r25, Z+11	; 0x0b
    310c:	9f 73       	andi	r25, 0x3F	; 63
    310e:	95 2b       	or	r25, r21
    3110:	93 87       	std	Z+11, r25	; 0x0b
    3112:	46 95       	lsr	r20
    3114:	46 95       	lsr	r20
    3116:	4f 70       	andi	r20, 0x0F	; 15
    3118:	62 95       	swap	r22
    311a:	60 7f       	andi	r22, 0xF0	; 240
    311c:	64 2b       	or	r22, r20
    311e:	64 87       	std	Z+12, r22	; 0x0c
	packet->id.src = my_address;
    3120:	40 91 65 3f 	lds	r20, 0x3F65
    3124:	4f 71       	andi	r20, 0x1F	; 31
    3126:	44 0f       	add	r20, r20
    3128:	31 70       	andi	r19, 0x01	; 1
	packet->id.sport = src_port;
    312a:	2f 73       	andi	r18, 0x3F	; 63
    312c:	90 7c       	andi	r25, 0xC0	; 192
    312e:	29 2b       	or	r18, r25
    3130:	23 87       	std	Z+11, r18	; 0x0b
	packet->id.pri = prio;
    3132:	98 2f       	mov	r25, r24
    3134:	92 95       	swap	r25
    3136:	99 0f       	add	r25, r25
    3138:	99 0f       	add	r25, r25
    313a:	90 7c       	andi	r25, 0xC0	; 192
    313c:	83 2f       	mov	r24, r19
    313e:	84 2b       	or	r24, r20
    3140:	89 2b       	or	r24, r25
    3142:	85 87       	std	Z+13, r24	; 0x0d

	if (csp_send_direct(packet->id, packet, timeout) != CSP_ERR_NONE)
    3144:	62 85       	ldd	r22, Z+10	; 0x0a
    3146:	73 85       	ldd	r23, Z+11	; 0x0b
    3148:	84 85       	ldd	r24, Z+12	; 0x0c
    314a:	95 85       	ldd	r25, Z+13	; 0x0d
    314c:	95 01       	movw	r18, r10
    314e:	84 01       	movw	r16, r8
    3150:	af 01       	movw	r20, r30
    3152:	d6 de       	rcall	.-596    	; 0x2f00 <csp_send_direct>
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	41 f0       	breq	.+16     	; 0x3168 <csp_sendto+0xc0>
		return CSP_ERR_NOTSUP;
    3158:	8b ef       	ldi	r24, 0xFB	; 251
    315a:	9f ef       	ldi	r25, 0xFF	; 255
    315c:	05 c0       	rjmp	.+10     	; 0x3168 <csp_sendto+0xc0>

	packet->id.flags = 0;

	if (opts & CSP_O_RDP) {
		csp_log_error("Attempt to create RDP packet on connection-less socket\r\n");
		return CSP_ERR_INVAL;
    315e:	8e ef       	ldi	r24, 0xFE	; 254
    3160:	9f ef       	ldi	r25, 0xFF	; 255
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <csp_sendto+0xc0>
	if (opts & CSP_O_XTEA) {
#ifdef CSP_USE_XTEA
		packet->id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted packet, but CSP was compiled without XTEA support\r\n");
		return CSP_ERR_NOTSUP;
    3164:	8b ef       	ldi	r24, 0xFB	; 251
    3166:	9f ef       	ldi	r25, 0xFF	; 255
	if (csp_send_direct(packet->id, packet, timeout) != CSP_ERR_NONE)
		return CSP_ERR_NOTSUP;
	
	return CSP_ERR_NONE;

}
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	7f 90       	pop	r7
    3182:	6f 90       	pop	r6
    3184:	5f 90       	pop	r5
    3186:	4f 90       	pop	r4
    3188:	08 95       	ret

0000318a <csp_port_get_socket>:

csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;

	if (port > CSP_ANY)
    318a:	81 32       	cpi	r24, 0x21	; 33
    318c:	91 05       	cpc	r25, r1
    318e:	f0 f4       	brcc	.+60     	; 0x31cc <csp_port_get_socket+0x42>
		return NULL;

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN)
    3190:	fc 01       	movw	r30, r24
    3192:	ee 0f       	add	r30, r30
    3194:	ff 1f       	adc	r31, r31
    3196:	e8 0f       	add	r30, r24
    3198:	f9 1f       	adc	r31, r25
    319a:	e1 51       	subi	r30, 0x11	; 17
    319c:	f2 4c       	sbci	r31, 0xC2	; 194
    319e:	20 81       	ld	r18, Z
    31a0:	21 30       	cpi	r18, 0x01	; 1
    31a2:	59 f4       	brne	.+22     	; 0x31ba <csp_port_get_socket+0x30>
		ret = ports[port].socket;
    31a4:	fc 01       	movw	r30, r24
    31a6:	ee 0f       	add	r30, r30
    31a8:	ff 1f       	adc	r31, r31
    31aa:	8e 0f       	add	r24, r30
    31ac:	9f 1f       	adc	r25, r31
    31ae:	fc 01       	movw	r30, r24
    31b0:	e1 51       	subi	r30, 0x11	; 17
    31b2:	f2 4c       	sbci	r31, 0xC2	; 194
    31b4:	81 81       	ldd	r24, Z+1	; 0x01
    31b6:	92 81       	ldd	r25, Z+2	; 0x02
    31b8:	08 95       	ret
	else if (ports[CSP_ANY].state == PORT_OPEN)
    31ba:	80 91 4f 3e 	lds	r24, 0x3E4F
    31be:	81 30       	cpi	r24, 0x01	; 1
    31c0:	41 f4       	brne	.+16     	; 0x31d2 <csp_port_get_socket+0x48>
		ret = ports[CSP_ANY].socket;
    31c2:	80 91 50 3e 	lds	r24, 0x3E50
    31c6:	90 91 51 3e 	lds	r25, 0x3E51
    31ca:	08 95       	ret
csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;

	if (port > CSP_ANY)
		return NULL;
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	08 95       	ret
/* Allocation of ports */
static csp_port_t ports[CSP_MAX_BIND_PORT + 2];

csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
	else if (ports[CSP_ANY].state == PORT_OPEN)
		ret = ports[CSP_ANY].socket;

	return ret;

}
    31d6:	08 95       	ret

000031d8 <csp_port_init>:

int csp_port_init(void) {

	memset(ports, PORT_CLOSED, sizeof(csp_port_t) * (CSP_MAX_BIND_PORT + 2));
    31d8:	83 e6       	ldi	r24, 0x63	; 99
    31da:	ef ee       	ldi	r30, 0xEF	; 239
    31dc:	fd e3       	ldi	r31, 0x3D	; 61
    31de:	df 01       	movw	r26, r30
    31e0:	1d 92       	st	X+, r1
    31e2:	8a 95       	dec	r24
    31e4:	e9 f7       	brne	.-6      	; 0x31e0 <csp_port_init+0x8>

	return CSP_ERR_NONE;

}
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	08 95       	ret

000031ec <csp_listen>:

int csp_listen(csp_socket_t * socket, size_t conn_queue_length) {
    31ec:	cf 93       	push	r28
    31ee:	df 93       	push	r29
    31f0:	ec 01       	movw	r28, r24
    31f2:	cb 01       	movw	r24, r22
	
	if (socket == NULL)
    31f4:	20 97       	sbiw	r28, 0x00	; 0
    31f6:	81 f0       	breq	.+32     	; 0x3218 <csp_listen+0x2c>
		return CSP_ERR_INVAL;

	socket->socket = csp_queue_create(conn_queue_length, sizeof(csp_conn_t *));
    31f8:	62 e0       	ldi	r22, 0x02	; 2
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	cb d8       	rcall	.-3690   	; 0x2394 <csp_queue_create>
    31fe:	8e 87       	std	Y+14, r24	; 0x0e
    3200:	9f 87       	std	Y+15, r25	; 0x0f
	if (socket->socket == NULL)
    3202:	21 e0       	ldi	r18, 0x01	; 1
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	89 2b       	or	r24, r25
    3208:	11 f0       	breq	.+4      	; 0x320e <csp_listen+0x22>
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	88 27       	eor	r24, r24
    3210:	99 27       	eor	r25, r25
    3212:	82 1b       	sub	r24, r18
    3214:	93 0b       	sbc	r25, r19
    3216:	02 c0       	rjmp	.+4      	; 0x321c <csp_listen+0x30>
}

int csp_listen(csp_socket_t * socket, size_t conn_queue_length) {
	
	if (socket == NULL)
		return CSP_ERR_INVAL;
    3218:	8e ef       	ldi	r24, 0xFE	; 254
    321a:	9f ef       	ldi	r25, 0xFF	; 255
	if (socket->socket == NULL)
		return CSP_ERR_NOMEM;

	return CSP_ERR_NONE;

}
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	08 95       	ret

00003222 <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
	
	if (socket == NULL)
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	e1 f0       	breq	.+56     	; 0x325e <csp_bind+0x3c>
		return CSP_ERR_INVAL;

	if (port > CSP_ANY) {
    3226:	61 32       	cpi	r22, 0x21	; 33
    3228:	e8 f4       	brcc	.+58     	; 0x3264 <csp_bind+0x42>
		csp_log_error("Only ports from 0-%u (and CSP_ANY for default) are available for incoming ports\r\n", CSP_ANY);
		return CSP_ERR_INVAL;
	}

	/* Check if port number is valid */
	if (ports[port].state != PORT_CLOSED) {
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	fb 01       	movw	r30, r22
    322e:	ee 0f       	add	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	e6 0f       	add	r30, r22
    3234:	f7 1f       	adc	r31, r23
    3236:	e1 51       	subi	r30, 0x11	; 17
    3238:	f2 4c       	sbci	r31, 0xC2	; 194
    323a:	20 81       	ld	r18, Z
    323c:	21 11       	cpse	r18, r1
    323e:	15 c0       	rjmp	.+42     	; 0x326a <csp_bind+0x48>
	}

	csp_log_info("Binding socket %p to port %u\r\n", socket, port);

	/* Save listener */
	ports[port].socket = socket;
    3240:	fb 01       	movw	r30, r22
    3242:	ee 0f       	add	r30, r30
    3244:	ff 1f       	adc	r31, r31
    3246:	6e 0f       	add	r22, r30
    3248:	7f 1f       	adc	r23, r31
    324a:	fb 01       	movw	r30, r22
    324c:	e1 51       	subi	r30, 0x11	; 17
    324e:	f2 4c       	sbci	r31, 0xC2	; 194
    3250:	81 83       	std	Z+1, r24	; 0x01
    3252:	92 83       	std	Z+2, r25	; 0x02
	ports[port].state = PORT_OPEN;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	80 83       	st	Z, r24

	return CSP_ERR_NONE;
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	08 95       	ret
}

int csp_bind(csp_socket_t * socket, uint8_t port) {
	
	if (socket == NULL)
		return CSP_ERR_INVAL;
    325e:	8e ef       	ldi	r24, 0xFE	; 254
    3260:	9f ef       	ldi	r25, 0xFF	; 255
    3262:	08 95       	ret

	if (port > CSP_ANY) {
		csp_log_error("Only ports from 0-%u (and CSP_ANY for default) are available for incoming ports\r\n", CSP_ANY);
		return CSP_ERR_INVAL;
    3264:	8e ef       	ldi	r24, 0xFE	; 254
    3266:	9f ef       	ldi	r25, 0xFF	; 255
    3268:	08 95       	ret
	}

	/* Check if port number is valid */
	if (ports[port].state != PORT_CLOSED) {
		csp_log_error("Port %d is already in use\r\n", port);
		return CSP_ERR_USED;
    326a:	8c ef       	ldi	r24, 0xFC	; 252
    326c:	9f ef       	ldi	r25, 0xFF	; 255
	ports[port].socket = socket;
	ports[port].state = PORT_OPEN;

	return CSP_ERR_NONE;

}
    326e:	08 95       	ret

00003270 <csp_route_security_check>:
	return prio;
#else
	return 0;
#endif

}
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	ea 01       	movw	r28, r20
    327a:	89 01       	movw	r16, r18
    327c:	f9 01       	movw	r30, r18
    327e:	82 85       	ldd	r24, Z+10	; 0x0a
    3280:	82 ff       	sbrs	r24, 2
    3282:	0e c0       	rjmp	.+28     	; 0x32a0 <csp_route_security_check+0x30>
    3284:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3286:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3288:	a8 a1       	ldd	r26, Y+32	; 0x20
    328a:	b9 a1       	ldd	r27, Y+33	; 0x21
    328c:	01 96       	adiw	r24, 0x01	; 1
    328e:	a1 1d       	adc	r26, r1
    3290:	b1 1d       	adc	r27, r1
    3292:	8e 8f       	std	Y+30, r24	; 0x1e
    3294:	9f 8f       	std	Y+31, r25	; 0x1f
    3296:	a8 a3       	std	Y+32, r26	; 0x20
    3298:	b9 a3       	std	Y+33, r27	; 0x21
    329a:	8b ef       	ldi	r24, 0xFB	; 251
    329c:	9f ef       	ldi	r25, 0xFF	; 255
    329e:	28 c0       	rjmp	.+80     	; 0x32f0 <csp_route_security_check+0x80>
    32a0:	80 ff       	sbrs	r24, 0
    32a2:	12 c0       	rjmp	.+36     	; 0x32c8 <csp_route_security_check+0x58>
    32a4:	c9 01       	movw	r24, r18
    32a6:	cc dc       	rcall	.-1640   	; 0x2c40 <csp_crc32_verify>
    32a8:	89 2b       	or	r24, r25
    32aa:	71 f0       	breq	.+28     	; 0x32c8 <csp_route_security_check+0x58>
    32ac:	8e 89       	ldd	r24, Y+22	; 0x16
    32ae:	9f 89       	ldd	r25, Y+23	; 0x17
    32b0:	a8 8d       	ldd	r26, Y+24	; 0x18
    32b2:	b9 8d       	ldd	r27, Y+25	; 0x19
    32b4:	01 96       	adiw	r24, 0x01	; 1
    32b6:	a1 1d       	adc	r26, r1
    32b8:	b1 1d       	adc	r27, r1
    32ba:	8e 8b       	std	Y+22, r24	; 0x16
    32bc:	9f 8b       	std	Y+23, r25	; 0x17
    32be:	a8 8f       	std	Y+24, r26	; 0x18
    32c0:	b9 8f       	std	Y+25, r27	; 0x19
    32c2:	8a e9       	ldi	r24, 0x9A	; 154
    32c4:	9f ef       	ldi	r25, 0xFF	; 255
    32c6:	14 c0       	rjmp	.+40     	; 0x32f0 <csp_route_security_check+0x80>
    32c8:	f8 01       	movw	r30, r16
    32ca:	82 85       	ldd	r24, Z+10	; 0x0a
    32cc:	83 ff       	sbrs	r24, 3
    32ce:	0e c0       	rjmp	.+28     	; 0x32ec <csp_route_security_check+0x7c>
    32d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32d4:	a8 a1       	ldd	r26, Y+32	; 0x20
    32d6:	b9 a1       	ldd	r27, Y+33	; 0x21
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	a1 1d       	adc	r26, r1
    32dc:	b1 1d       	adc	r27, r1
    32de:	8e 8f       	std	Y+30, r24	; 0x1e
    32e0:	9f 8f       	std	Y+31, r25	; 0x1f
    32e2:	a8 a3       	std	Y+32, r26	; 0x20
    32e4:	b9 a3       	std	Y+33, r27	; 0x21
    32e6:	8b ef       	ldi	r24, 0xFB	; 251
    32e8:	9f ef       	ldi	r25, 0xFF	; 255
    32ea:	02 c0       	rjmp	.+4      	; 0x32f0 <csp_route_security_check+0x80>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <csp_route_next_packet>:
    32fa:	2f ef       	ldi	r18, 0xFF	; 255
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	bc 01       	movw	r22, r24
    3304:	80 91 52 3e 	lds	r24, 0x3E52
    3308:	90 91 53 3e 	lds	r25, 0x3E53
    330c:	58 d8       	rcall	.-3920   	; 0x23be <csp_queue_dequeue>
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	19 f0       	breq	.+6      	; 0x3318 <csp_route_next_packet+0x1e>
    3312:	8d ef       	ldi	r24, 0xFD	; 253
    3314:	9f ef       	ldi	r25, 0xFF	; 255
    3316:	08 95       	ret
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	08 95       	ret

0000331e <csp_route_start_task>:
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	0f 2e       	mov	r0, r31
    3328:	f4 e5       	ldi	r31, 0x54	; 84
    332a:	ef 2e       	mov	r14, r31
    332c:	fe e3       	ldi	r31, 0x3E	; 62
    332e:	ff 2e       	mov	r15, r31
    3330:	f0 2d       	mov	r31, r0
    3332:	8b 01       	movw	r16, r22
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	ac 01       	movw	r20, r24
    333a:	6e e8       	ldi	r22, 0x8E	; 142
    333c:	70 e2       	ldi	r23, 0x20	; 32
    333e:	83 e6       	ldi	r24, 0x63	; 99
    3340:	9a e1       	ldi	r25, 0x1A	; 26
    3342:	09 d9       	rcall	.-3566   	; 0x2556 <csp_thread_create>
    3344:	21 e0       	ldi	r18, 0x01	; 1
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	89 2b       	or	r24, r25
    334a:	11 f4       	brne	.+4      	; 0x3350 <csp_route_start_task+0x32>
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	88 27       	eor	r24, r24
    3352:	99 27       	eor	r25, r25
    3354:	82 1b       	sub	r24, r18
    3356:	93 0b       	sbc	r25, r19
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	08 95       	ret

00003362 <csp_route_get_if_by_name>:
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	8c 01       	movw	r16, r24
    336c:	c0 91 b9 3e 	lds	r28, 0x3EB9
    3370:	d0 91 ba 3e 	lds	r29, 0x3EBA
    3374:	20 97       	sbiw	r28, 0x00	; 0
    3376:	71 f0       	breq	.+28     	; 0x3394 <csp_route_get_if_by_name+0x32>
    3378:	4a e0       	ldi	r20, 0x0A	; 10
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	b8 01       	movw	r22, r16
    337e:	88 81       	ld	r24, Y
    3380:	99 81       	ldd	r25, Y+1	; 0x01
    3382:	0e 94 b3 2b 	call	0x5766	; 0x5766 <strncmp>
    3386:	89 2b       	or	r24, r25
    3388:	29 f0       	breq	.+10     	; 0x3394 <csp_route_get_if_by_name+0x32>
    338a:	0a a8       	ldd	r0, Y+50	; 0x32
    338c:	db a9       	ldd	r29, Y+51	; 0x33
    338e:	c0 2d       	mov	r28, r0
    3390:	20 97       	sbiw	r28, 0x00	; 0
    3392:	91 f7       	brne	.-28     	; 0x3378 <csp_route_get_if_by_name+0x16>
    3394:	ce 01       	movw	r24, r28
    3396:	df 91       	pop	r29
    3398:	cf 91       	pop	r28
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	08 95       	ret

000033a0 <csp_route_add_if>:
    33a0:	a0 91 b9 3e 	lds	r26, 0x3EB9
    33a4:	b0 91 ba 3e 	lds	r27, 0x3EBA
    33a8:	10 97       	sbiw	r26, 0x00	; 0
    33aa:	41 f4       	brne	.+16     	; 0x33bc <csp_route_add_if+0x1c>
    33ac:	80 93 b9 3e 	sts	0x3EB9, r24
    33b0:	90 93 ba 3e 	sts	0x3EBA, r25
    33b4:	fc 01       	movw	r30, r24
    33b6:	12 aa       	std	Z+50, r1	; 0x32
    33b8:	13 aa       	std	Z+51, r1	; 0x33
    33ba:	08 95       	ret
    33bc:	a8 17       	cp	r26, r24
    33be:	b9 07       	cpc	r27, r25
    33c0:	b9 f0       	breq	.+46     	; 0x33f0 <csp_route_add_if+0x50>
    33c2:	d2 96       	adiw	r26, 0x32	; 50
    33c4:	ed 91       	ld	r30, X+
    33c6:	fc 91       	ld	r31, X
    33c8:	d3 97       	sbiw	r26, 0x33	; 51
    33ca:	30 97       	sbiw	r30, 0x00	; 0
    33cc:	39 f4       	brne	.+14     	; 0x33dc <csp_route_add_if+0x3c>
    33ce:	0a c0       	rjmp	.+20     	; 0x33e4 <csp_route_add_if+0x44>
    33d0:	22 a9       	ldd	r18, Z+50	; 0x32
    33d2:	33 a9       	ldd	r19, Z+51	; 0x33
    33d4:	21 15       	cp	r18, r1
    33d6:	31 05       	cpc	r19, r1
    33d8:	31 f0       	breq	.+12     	; 0x33e6 <csp_route_add_if+0x46>
    33da:	f9 01       	movw	r30, r18
    33dc:	8e 17       	cp	r24, r30
    33de:	9f 07       	cpc	r25, r31
    33e0:	b9 f7       	brne	.-18     	; 0x33d0 <csp_route_add_if+0x30>
    33e2:	08 95       	ret
    33e4:	fd 01       	movw	r30, r26
    33e6:	82 ab       	std	Z+50, r24	; 0x32
    33e8:	93 ab       	std	Z+51, r25	; 0x33
    33ea:	fc 01       	movw	r30, r24
    33ec:	12 aa       	std	Z+50, r1	; 0x32
    33ee:	13 aa       	std	Z+51, r1	; 0x33
    33f0:	08 95       	ret

000033f2 <csp_route_set>:
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	18 2f       	mov	r17, r24
    33fc:	eb 01       	movw	r28, r22
    33fe:	04 2f       	mov	r16, r20
    3400:	20 97       	sbiw	r28, 0x00	; 0
    3402:	99 f0       	breq	.+38     	; 0x342a <csp_route_set+0x38>
    3404:	cb 01       	movw	r24, r22
    3406:	cc df       	rcall	.-104    	; 0x33a0 <csp_route_add_if>
    3408:	11 32       	cpi	r17, 0x21	; 33
    340a:	90 f4       	brcc	.+36     	; 0x3430 <csp_route_set+0x3e>
    340c:	81 2f       	mov	r24, r17
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	fc 01       	movw	r30, r24
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	e8 0f       	add	r30, r24
    3418:	f9 1f       	adc	r31, r25
    341a:	ea 5a       	subi	r30, 0xAA	; 170
    341c:	f1 4c       	sbci	r31, 0xC1	; 193
    341e:	c0 83       	st	Z, r28
    3420:	d1 83       	std	Z+1, r29	; 0x01
    3422:	02 83       	std	Z+2, r16	; 0x02
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	05 c0       	rjmp	.+10     	; 0x3434 <csp_route_set+0x42>
    342a:	8e ef       	ldi	r24, 0xFE	; 254
    342c:	9f ef       	ldi	r25, 0xFF	; 255
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <csp_route_set+0x42>
    3430:	8e ef       	ldi	r24, 0xFE	; 254
    3432:	9f ef       	ldi	r25, 0xFF	; 255
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	08 95       	ret

0000343e <csp_route_table_init>:
    343e:	83 e6       	ldi	r24, 0x63	; 99
    3440:	e6 e5       	ldi	r30, 0x56	; 86
    3442:	fe e3       	ldi	r31, 0x3E	; 62
    3444:	df 01       	movw	r26, r30
    3446:	1d 92       	st	X+, r1
    3448:	8a 95       	dec	r24
    344a:	e9 f7       	brne	.-6      	; 0x3446 <csp_route_table_init+0x8>
    344c:	80 91 52 3e 	lds	r24, 0x3E52
    3450:	90 91 53 3e 	lds	r25, 0x3E53
    3454:	89 2b       	or	r24, r25
    3456:	61 f4       	brne	.+24     	; 0x3470 <csp_route_table_init+0x32>
    3458:	64 e0       	ldi	r22, 0x04	; 4
    345a:	70 e0       	ldi	r23, 0x00	; 0
    345c:	8a e0       	ldi	r24, 0x0A	; 10
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	0e 94 ca 11 	call	0x2394	; 0x2394 <csp_queue_create>
    3464:	80 93 52 3e 	sts	0x3E52, r24
    3468:	90 93 53 3e 	sts	0x3E53, r25
    346c:	89 2b       	or	r24, r25
    346e:	71 f0       	breq	.+28     	; 0x348c <csp_route_table_init+0x4e>
    3470:	4f ef       	ldi	r20, 0xFF	; 255
    3472:	6b e3       	ldi	r22, 0x3B	; 59
    3474:	70 e2       	ldi	r23, 0x20	; 32
    3476:	80 91 65 3f 	lds	r24, 0x3F65
    347a:	bb df       	rcall	.-138    	; 0x33f2 <csp_route_set>
    347c:	4f ef       	ldi	r20, 0xFF	; 255
    347e:	6b e3       	ldi	r22, 0x3B	; 59
    3480:	70 e2       	ldi	r23, 0x20	; 32
    3482:	80 e2       	ldi	r24, 0x20	; 32
    3484:	b6 df       	rcall	.-148    	; 0x33f2 <csp_route_set>
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	08 95       	ret
    348c:	8f ef       	ldi	r24, 0xFF	; 255
    348e:	9f ef       	ldi	r25, 0xFF	; 255
    3490:	08 95       	ret

00003492 <csp_route_if>:
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	fc 01       	movw	r30, r24
    3496:	ee 0f       	add	r30, r30
    3498:	ff 1f       	adc	r31, r31
    349a:	e8 0f       	add	r30, r24
    349c:	f9 1f       	adc	r31, r25
    349e:	ea 5a       	subi	r30, 0xAA	; 170
    34a0:	f1 4c       	sbci	r31, 0xC1	; 193
    34a2:	20 81       	ld	r18, Z
    34a4:	31 81       	ldd	r19, Z+1	; 0x01
    34a6:	23 2b       	or	r18, r19
    34a8:	11 f0       	breq	.+4      	; 0x34ae <csp_route_if+0x1c>
    34aa:	cf 01       	movw	r24, r30
    34ac:	08 95       	ret
    34ae:	80 91 b6 3e 	lds	r24, 0x3EB6
    34b2:	90 91 b7 3e 	lds	r25, 0x3EB7
    34b6:	89 2b       	or	r24, r25
    34b8:	19 f0       	breq	.+6      	; 0x34c0 <csp_route_if+0x2e>
    34ba:	86 eb       	ldi	r24, 0xB6	; 182
    34bc:	9e e3       	ldi	r25, 0x3E	; 62
    34be:	08 95       	ret
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	08 95       	ret

000034c6 <csp_task_router>:
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <csp_task_router+0x6>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <csp_task_router+0x8>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	ce 01       	movw	r24, r28
    34d4:	01 96       	adiw	r24, 0x01	; 1
    34d6:	11 df       	rcall	.-478    	; 0x32fa <csp_route_next_packet>
    34d8:	89 2b       	or	r24, r25
    34da:	d9 f7       	brne	.-10     	; 0x34d2 <csp_task_router+0xc>
    34dc:	cb 80       	ldd	r12, Y+3	; 0x03
    34de:	dc 80       	ldd	r13, Y+4	; 0x04
    34e0:	cd 82       	std	Y+5, r12	; 0x05
    34e2:	de 82       	std	Y+6, r13	; 0x06
    34e4:	d6 01       	movw	r26, r12
    34e6:	1c 96       	adiw	r26, 0x0c	; 12
    34e8:	9c 91       	ld	r25, X
    34ea:	1c 97       	sbiw	r26, 0x0c	; 12
    34ec:	92 95       	swap	r25
    34ee:	9f 70       	andi	r25, 0x0F	; 15
    34f0:	1d 96       	adiw	r26, 0x0d	; 13
    34f2:	8c 91       	ld	r24, X
    34f4:	81 70       	andi	r24, 0x01	; 1
    34f6:	82 95       	swap	r24
    34f8:	80 7f       	andi	r24, 0xF0	; 240
    34fa:	89 2b       	or	r24, r25
    34fc:	48 2f       	mov	r20, r24
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	20 91 65 3f 	lds	r18, 0x3F65
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	42 17       	cp	r20, r18
    3508:	53 07       	cpc	r21, r19
    350a:	21 f1       	breq	.+72     	; 0x3554 <csp_task_router+0x8e>
    350c:	8f 31       	cpi	r24, 0x1F	; 31
    350e:	11 f1       	breq	.+68     	; 0x3554 <csp_task_router+0x8e>
    3510:	c0 df       	rcall	.-128    	; 0x3492 <csp_route_if>
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	59 f0       	breq	.+22     	; 0x352c <csp_task_router+0x66>
    3516:	dc 01       	movw	r26, r24
    3518:	ed 91       	ld	r30, X+
    351a:	fc 91       	ld	r31, X
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	9a 81       	ldd	r25, Y+2	; 0x02
    3520:	e8 17       	cp	r30, r24
    3522:	f9 07       	cpc	r31, r25
    3524:	31 f4       	brne	.+12     	; 0x3532 <csp_task_router+0x6c>
    3526:	81 85       	ldd	r24, Z+9	; 0x09
    3528:	81 11       	cpse	r24, r1
    352a:	03 c0       	rjmp	.+6      	; 0x3532 <csp_task_router+0x6c>
    352c:	c6 01       	movw	r24, r12
    352e:	48 d9       	rcall	.-3440   	; 0x27c0 <csp_buffer_free>
    3530:	d0 cf       	rjmp	.-96     	; 0x34d2 <csp_task_router+0xc>
    3532:	f6 01       	movw	r30, r12
    3534:	62 85       	ldd	r22, Z+10	; 0x0a
    3536:	73 85       	ldd	r23, Z+11	; 0x0b
    3538:	84 85       	ldd	r24, Z+12	; 0x0c
    353a:	95 85       	ldd	r25, Z+13	; 0x0d
    353c:	00 e0       	ldi	r16, 0x00	; 0
    353e:	10 e0       	ldi	r17, 0x00	; 0
    3540:	98 01       	movw	r18, r16
    3542:	a6 01       	movw	r20, r12
    3544:	dd dc       	rcall	.-1606   	; 0x2f00 <csp_send_direct>
    3546:	89 2b       	or	r24, r25
    3548:	09 f4       	brne	.+2      	; 0x354c <csp_task_router+0x86>
    354a:	c3 cf       	rjmp	.-122    	; 0x34d2 <csp_task_router+0xc>
    354c:	8d 81       	ldd	r24, Y+5	; 0x05
    354e:	9e 81       	ldd	r25, Y+6	; 0x06
    3550:	37 d9       	rcall	.-3474   	; 0x27c0 <csp_buffer_free>
    3552:	bf cf       	rjmp	.-130    	; 0x34d2 <csp_task_router+0xc>
    3554:	d6 01       	movw	r26, r12
    3556:	1b 96       	adiw	r26, 0x0b	; 11
    3558:	9c 91       	ld	r25, X
    355a:	1b 97       	sbiw	r26, 0x0b	; 11
    355c:	92 95       	swap	r25
    355e:	96 95       	lsr	r25
    3560:	96 95       	lsr	r25
    3562:	93 70       	andi	r25, 0x03	; 3
    3564:	1c 96       	adiw	r26, 0x0c	; 12
    3566:	8c 91       	ld	r24, X
    3568:	8f 70       	andi	r24, 0x0F	; 15
    356a:	88 0f       	add	r24, r24
    356c:	88 0f       	add	r24, r24
    356e:	89 2b       	or	r24, r25
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0b de       	rcall	.-1002   	; 0x318a <csp_port_get_socket>
    3574:	8c 01       	movw	r16, r24
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	09 f4       	brne	.+2      	; 0x357c <csp_task_router+0xb6>
    357a:	b5 c0       	rjmp	.+362    	; 0x36e6 <csp_task_router+0x220>
    357c:	fc 01       	movw	r30, r24
    357e:	64 89       	ldd	r22, Z+20	; 0x14
    3580:	75 89       	ldd	r23, Z+21	; 0x15
    3582:	86 89       	ldd	r24, Z+22	; 0x16
    3584:	97 89       	ldd	r25, Z+23	; 0x17
    3586:	70 ff       	sbrs	r23, 0
    3588:	bd c0       	rjmp	.+378    	; 0x3704 <csp_task_router+0x23e>
    358a:	2d 81       	ldd	r18, Y+5	; 0x05
    358c:	3e 81       	ldd	r19, Y+6	; 0x06
    358e:	49 81       	ldd	r20, Y+1	; 0x01
    3590:	5a 81       	ldd	r21, Y+2	; 0x02
    3592:	6e de       	rcall	.-804    	; 0x3270 <csp_route_security_check>
    3594:	99 23       	and	r25, r25
    3596:	24 f4       	brge	.+8      	; 0x35a0 <csp_task_router+0xda>
    3598:	8d 81       	ldd	r24, Y+5	; 0x05
    359a:	9e 81       	ldd	r25, Y+6	; 0x06
    359c:	11 d9       	rcall	.-3550   	; 0x27c0 <csp_buffer_free>
    359e:	99 cf       	rjmp	.-206    	; 0x34d2 <csp_task_router+0xc>
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	a9 01       	movw	r20, r18
    35a6:	be 01       	movw	r22, r28
    35a8:	6b 5f       	subi	r22, 0xFB	; 251
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	d8 01       	movw	r26, r16
    35ae:	1e 96       	adiw	r26, 0x0e	; 14
    35b0:	8d 91       	ld	r24, X+
    35b2:	9c 91       	ld	r25, X
    35b4:	1f 97       	sbiw	r26, 0x0f	; 15
    35b6:	0e 94 cd 11 	call	0x239a	; 0x239a <csp_queue_enqueue>
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <csp_task_router+0xfa>
    35be:	89 cf       	rjmp	.-238    	; 0x34d2 <csp_task_router+0xc>
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	fd d8       	rcall	.-3590   	; 0x27c0 <csp_buffer_free>
    35c6:	85 cf       	rjmp	.-246    	; 0x34d2 <csp_task_router+0xc>
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	f9 d8       	rcall	.-3598   	; 0x27c0 <csp_buffer_free>
    35ce:	81 cf       	rjmp	.-254    	; 0x34d2 <csp_task_router+0xc>
    35d0:	2d 81       	ldd	r18, Y+5	; 0x05
    35d2:	3e 81       	ldd	r19, Y+6	; 0x06
    35d4:	49 81       	ldd	r20, Y+1	; 0x01
    35d6:	5a 81       	ldd	r21, Y+2	; 0x02
    35d8:	f8 01       	movw	r30, r16
    35da:	64 89       	ldd	r22, Z+20	; 0x14
    35dc:	75 89       	ldd	r23, Z+21	; 0x15
    35de:	86 89       	ldd	r24, Z+22	; 0x16
    35e0:	97 89       	ldd	r25, Z+23	; 0x17
    35e2:	46 de       	rcall	.-884    	; 0x3270 <csp_route_security_check>
    35e4:	99 23       	and	r25, r25
    35e6:	24 f4       	brge	.+8      	; 0x35f0 <csp_task_router+0x12a>
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	e9 d8       	rcall	.-3630   	; 0x27c0 <csp_buffer_free>
    35ee:	71 cf       	rjmp	.-286    	; 0x34d2 <csp_task_router+0xc>
    35f0:	ed 81       	ldd	r30, Y+5	; 0x05
    35f2:	fe 81       	ldd	r31, Y+6	; 0x06
    35f4:	95 85       	ldd	r25, Z+13	; 0x0d
    35f6:	89 2f       	mov	r24, r25
    35f8:	80 7c       	andi	r24, 0xC0	; 192
    35fa:	2f 2d       	mov	r18, r15
    35fc:	2f 73       	andi	r18, 0x3F	; 63
    35fe:	f2 2e       	mov	r15, r18
    3600:	f8 2a       	or	r15, r24
    3602:	80 91 65 3f 	lds	r24, 0x3F65
    3606:	8f 71       	andi	r24, 0x1F	; 31
    3608:	88 0f       	add	r24, r24
    360a:	2f 2d       	mov	r18, r15
    360c:	21 7c       	andi	r18, 0xC1	; 193
    360e:	f2 2e       	mov	r15, r18
    3610:	f8 2a       	or	r15, r24
    3612:	96 95       	lsr	r25
    3614:	94 fb       	bst	r25, 4
    3616:	88 27       	eor	r24, r24
    3618:	80 f9       	bld	r24, 0
    361a:	80 fb       	bst	r24, 0
    361c:	f0 f8       	bld	r15, 0
    361e:	83 85       	ldd	r24, Z+11	; 0x0b
    3620:	48 2f       	mov	r20, r24
    3622:	4f 73       	andi	r20, 0x3F	; 63
    3624:	46 95       	lsr	r20
    3626:	46 95       	lsr	r20
    3628:	92 95       	swap	r25
    362a:	90 7f       	andi	r25, 0xF0	; 240
    362c:	49 2b       	or	r20, r25
    362e:	98 2f       	mov	r25, r24
    3630:	92 95       	swap	r25
    3632:	96 95       	lsr	r25
    3634:	96 95       	lsr	r25
    3636:	93 70       	andi	r25, 0x03	; 3
    3638:	34 85       	ldd	r19, Z+12	; 0x0c
    363a:	3f 70       	andi	r19, 0x0F	; 15
    363c:	33 0f       	add	r19, r19
    363e:	33 0f       	add	r19, r19
    3640:	39 2b       	or	r19, r25
    3642:	82 95       	swap	r24
    3644:	88 0f       	add	r24, r24
    3646:	88 0f       	add	r24, r24
    3648:	80 7c       	andi	r24, 0xC0	; 192
    364a:	38 2b       	or	r19, r24
    364c:	22 85       	ldd	r18, Z+10	; 0x0a
    364e:	62 85       	ldd	r22, Z+10	; 0x0a
    3650:	73 85       	ldd	r23, Z+11	; 0x0b
    3652:	84 85       	ldd	r24, Z+12	; 0x0c
    3654:	95 85       	ldd	r25, Z+13	; 0x0d
    3656:	5f 2d       	mov	r21, r15
    3658:	20 da       	rcall	.-3008   	; 0x2a9a <csp_conn_new>
    365a:	6c 01       	movw	r12, r24
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	21 f4       	brne	.+8      	; 0x3668 <csp_task_router+0x1a2>
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	ad d8       	rcall	.-3750   	; 0x27c0 <csp_buffer_free>
    3666:	35 cf       	rjmp	.-406    	; 0x34d2 <csp_task_router+0xc>
    3668:	d8 01       	movw	r26, r16
    366a:	1e 96       	adiw	r26, 0x0e	; 14
    366c:	8d 91       	ld	r24, X+
    366e:	9c 91       	ld	r25, X
    3670:	1f 97       	sbiw	r26, 0x0f	; 15
    3672:	f6 01       	movw	r30, r12
    3674:	86 87       	std	Z+14, r24	; 0x0e
    3676:	97 87       	std	Z+15, r25	; 0x0f
    3678:	54 96       	adiw	r26, 0x14	; 20
    367a:	8d 91       	ld	r24, X+
    367c:	9d 91       	ld	r25, X+
    367e:	0d 90       	ld	r0, X+
    3680:	bc 91       	ld	r27, X
    3682:	a0 2d       	mov	r26, r0
    3684:	84 8b       	std	Z+20, r24	; 0x14
    3686:	95 8b       	std	Z+21, r25	; 0x15
    3688:	a6 8b       	std	Z+22, r26	; 0x16
    368a:	b7 8b       	std	Z+23, r27	; 0x17
    368c:	12 c0       	rjmp	.+36     	; 0x36b2 <csp_task_router+0x1ec>
    368e:	2d 81       	ldd	r18, Y+5	; 0x05
    3690:	3e 81       	ldd	r19, Y+6	; 0x06
    3692:	49 81       	ldd	r20, Y+1	; 0x01
    3694:	5a 81       	ldd	r21, Y+2	; 0x02
    3696:	d6 01       	movw	r26, r12
    3698:	54 96       	adiw	r26, 0x14	; 20
    369a:	6d 91       	ld	r22, X+
    369c:	7d 91       	ld	r23, X+
    369e:	8d 91       	ld	r24, X+
    36a0:	9c 91       	ld	r25, X
    36a2:	57 97       	sbiw	r26, 0x17	; 23
    36a4:	e5 dd       	rcall	.-1078   	; 0x3270 <csp_route_security_check>
    36a6:	99 23       	and	r25, r25
    36a8:	24 f4       	brge	.+8      	; 0x36b2 <csp_task_router+0x1ec>
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	9e 81       	ldd	r25, Y+6	; 0x06
    36ae:	88 d8       	rcall	.-3824   	; 0x27c0 <csp_buffer_free>
    36b0:	10 cf       	rjmp	.-480    	; 0x34d2 <csp_task_router+0xc>
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	fc 01       	movw	r30, r24
    36b8:	22 85       	ldd	r18, Z+10	; 0x0a
    36ba:	21 ff       	sbrs	r18, 1
    36bc:	10 c0       	rjmp	.+32     	; 0x36de <csp_task_router+0x218>
    36be:	e9 81       	ldd	r30, Y+1	; 0x01
    36c0:	fa 81       	ldd	r31, Y+2	; 0x02
    36c2:	46 89       	ldd	r20, Z+22	; 0x16
    36c4:	57 89       	ldd	r21, Z+23	; 0x17
    36c6:	60 8d       	ldd	r22, Z+24	; 0x18
    36c8:	71 8d       	ldd	r23, Z+25	; 0x19
    36ca:	4f 5f       	subi	r20, 0xFF	; 255
    36cc:	5f 4f       	sbci	r21, 0xFF	; 255
    36ce:	6f 4f       	sbci	r22, 0xFF	; 255
    36d0:	7f 4f       	sbci	r23, 0xFF	; 255
    36d2:	46 8b       	std	Z+22, r20	; 0x16
    36d4:	57 8b       	std	Z+23, r21	; 0x17
    36d6:	60 8f       	std	Z+24, r22	; 0x18
    36d8:	71 8f       	std	Z+25, r23	; 0x19
    36da:	72 d8       	rcall	.-3868   	; 0x27c0 <csp_buffer_free>
    36dc:	fa ce       	rjmp	.-524    	; 0x34d2 <csp_task_router+0xc>
    36de:	bc 01       	movw	r22, r24
    36e0:	c6 01       	movw	r24, r12
    36e2:	8a d3       	rcall	.+1812   	; 0x3df8 <csp_udp_new_packet>
    36e4:	f6 ce       	rjmp	.-532    	; 0x34d2 <csp_task_router+0xc>
    36e6:	ed 81       	ldd	r30, Y+5	; 0x05
    36e8:	fe 81       	ldd	r31, Y+6	; 0x06
    36ea:	62 85       	ldd	r22, Z+10	; 0x0a
    36ec:	73 85       	ldd	r23, Z+11	; 0x0b
    36ee:	84 85       	ldd	r24, Z+12	; 0x0c
    36f0:	95 85       	ldd	r25, Z+13	; 0x0d
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	3f ef       	ldi	r19, 0xFF	; 255
    36f6:	4f ef       	ldi	r20, 0xFF	; 255
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0f d9       	rcall	.-3554   	; 0x291a <csp_conn_find>
    36fc:	6c 01       	movw	r12, r24
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	31 f6       	brne	.-116    	; 0x368e <csp_task_router+0x1c8>
    3702:	62 cf       	rjmp	.-316    	; 0x35c8 <csp_task_router+0x102>
    3704:	ed 81       	ldd	r30, Y+5	; 0x05
    3706:	fe 81       	ldd	r31, Y+6	; 0x06
    3708:	62 85       	ldd	r22, Z+10	; 0x0a
    370a:	73 85       	ldd	r23, Z+11	; 0x0b
    370c:	84 85       	ldd	r24, Z+12	; 0x0c
    370e:	95 85       	ldd	r25, Z+13	; 0x0d
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	3f ef       	ldi	r19, 0xFF	; 255
    3714:	4f ef       	ldi	r20, 0xFF	; 255
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	00 d9       	rcall	.-3584   	; 0x291a <csp_conn_find>
    371a:	6c 01       	movw	r12, r24
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	09 f0       	breq	.+2      	; 0x3722 <csp_task_router+0x25c>
    3720:	b6 cf       	rjmp	.-148    	; 0x368e <csp_task_router+0x1c8>
    3722:	56 cf       	rjmp	.-340    	; 0x35d0 <csp_task_router+0x10a>

00003724 <csp_route_enqueue>:
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	01 15       	cp	r16, r1
    372a:	11 05       	cpc	r17, r1
    372c:	19 f4       	brne	.+6      	; 0x3734 <csp_route_enqueue+0x10>
    372e:	0e 94 cd 11 	call	0x239a	; 0x239a <csp_queue_enqueue>
    3732:	03 c0       	rjmp	.+6      	; 0x373a <csp_route_enqueue+0x16>
    3734:	a8 01       	movw	r20, r16
    3736:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <csp_queue_enqueue_isr>
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	19 f4       	brne	.+6      	; 0x3744 <csp_route_enqueue+0x20>
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <csp_route_enqueue+0x24>
    3744:	87 ef       	ldi	r24, 0xF7	; 247
    3746:	9f ef       	ldi	r25, 0xFF	; 255
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	08 95       	ret

0000374e <csp_new_packet>:

void csp_new_packet(csp_packet_t * packet, csp_iface_t * interface, CSP_BASE_TYPE * pxTaskWoken) {
    374e:	af 92       	push	r10
    3750:	bf 92       	push	r11
    3752:	cf 92       	push	r12
    3754:	df 92       	push	r13
    3756:	ef 92       	push	r14
    3758:	ff 92       	push	r15
    375a:	0f 93       	push	r16
    375c:	1f 93       	push	r17
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	00 d0       	rcall	.+0      	; 0x3764 <csp_new_packet+0x16>
    3764:	1f 92       	push	r1
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	6c 01       	movw	r12, r24
    376c:	7b 01       	movw	r14, r22
    376e:	5a 01       	movw	r10, r20

	int result, fifo;

	if (packet == NULL) {
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	09 f4       	brne	.+2      	; 0x3776 <csp_new_packet+0x28>
    3774:	50 c0       	rjmp	.+160    	; 0x3816 <csp_new_packet+0xc8>
		csp_log_warn("csp_new packet called with NULL packet\r\n");
		return;
	} else if (interface == NULL) {
    3776:	61 15       	cp	r22, r1
    3778:	71 05       	cpc	r23, r1
    377a:	41 f4       	brne	.+16     	; 0x378c <csp_new_packet+0x3e>
		csp_log_warn("csp_new packet called with NULL interface\r\n");
		if (pxTaskWoken == NULL)
    377c:	41 15       	cp	r20, r1
    377e:	51 05       	cpc	r21, r1
    3780:	11 f4       	brne	.+4      	; 0x3786 <csp_new_packet+0x38>
			csp_buffer_free(packet);
    3782:	1e d8       	rcall	.-4036   	; 0x27c0 <csp_buffer_free>
    3784:	48 c0       	rjmp	.+144    	; 0x3816 <csp_new_packet+0xc8>
		else
			csp_buffer_free_isr(packet);
    3786:	0e 94 a8 13 	call	0x2750	; 0x2750 <csp_buffer_free_isr>
    378a:	45 c0       	rjmp	.+138    	; 0x3816 <csp_new_packet+0xc8>
		return;
	}

	csp_route_queue_t queue_element;
	queue_element.interface = interface;
    378c:	69 83       	std	Y+1, r22	; 0x01
    378e:	7a 83       	std	Y+2, r23	; 0x02
	queue_element.outcomingPacket = packet;
    3790:	8b 83       	std	Y+3, r24	; 0x03
    3792:	9c 83       	std	Y+4, r25	; 0x04

	fifo = csp_route_get_fifo(packet->id.pri);
	result = csp_route_enqueue(router_input_fifo[fifo], &queue_element, 0, pxTaskWoken);
    3794:	8a 01       	movw	r16, r20
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	a9 01       	movw	r20, r18
    379c:	be 01       	movw	r22, r28
    379e:	6f 5f       	subi	r22, 0xFF	; 255
    37a0:	7f 4f       	sbci	r23, 0xFF	; 255
    37a2:	80 91 52 3e 	lds	r24, 0x3E52
    37a6:	90 91 53 3e 	lds	r25, 0x3E53
    37aa:	bc df       	rcall	.-136    	; 0x3724 <csp_route_enqueue>

	if (result != CSP_ERR_NONE) {
    37ac:	89 2b       	or	r24, r25
    37ae:	b1 f0       	breq	.+44     	; 0x37dc <csp_new_packet+0x8e>
		csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.\r\n");
		interface->drop++;
    37b0:	f7 01       	movw	r30, r14
    37b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    37b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    37b6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    37b8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    37ba:	01 96       	adiw	r24, 0x01	; 1
    37bc:	a1 1d       	adc	r26, r1
    37be:	b1 1d       	adc	r27, r1
    37c0:	82 8f       	std	Z+26, r24	; 0x1a
    37c2:	93 8f       	std	Z+27, r25	; 0x1b
    37c4:	a4 8f       	std	Z+28, r26	; 0x1c
    37c6:	b5 8f       	std	Z+29, r27	; 0x1d
		if (pxTaskWoken == NULL)
    37c8:	ab 28       	or	r10, r11
    37ca:	21 f4       	brne	.+8      	; 0x37d4 <csp_new_packet+0x86>
			csp_buffer_free(packet);
    37cc:	c6 01       	movw	r24, r12
    37ce:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
    37d2:	21 c0       	rjmp	.+66     	; 0x3816 <csp_new_packet+0xc8>
		else
			csp_buffer_free_isr(packet);
    37d4:	c6 01       	movw	r24, r12
    37d6:	0e 94 a8 13 	call	0x2750	; 0x2750 <csp_buffer_free_isr>
    37da:	1d c0       	rjmp	.+58     	; 0x3816 <csp_new_packet+0xc8>
	} else {
		interface->rx++;
    37dc:	f7 01       	movw	r30, r14
    37de:	46 85       	ldd	r20, Z+14	; 0x0e
    37e0:	57 85       	ldd	r21, Z+15	; 0x0f
    37e2:	60 89       	ldd	r22, Z+16	; 0x10
    37e4:	71 89       	ldd	r23, Z+17	; 0x11
    37e6:	4f 5f       	subi	r20, 0xFF	; 255
    37e8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ea:	6f 4f       	sbci	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	46 87       	std	Z+14, r20	; 0x0e
    37f0:	57 87       	std	Z+15, r21	; 0x0f
    37f2:	60 8b       	std	Z+16, r22	; 0x10
    37f4:	71 8b       	std	Z+17, r23	; 0x11
		interface->rxbytes += packet->length;
    37f6:	f6 01       	movw	r30, r12
    37f8:	20 85       	ldd	r18, Z+8	; 0x08
    37fa:	31 85       	ldd	r19, Z+9	; 0x09
    37fc:	f7 01       	movw	r30, r14
    37fe:	82 a5       	ldd	r24, Z+42	; 0x2a
    3800:	93 a5       	ldd	r25, Z+43	; 0x2b
    3802:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3804:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3806:	82 0f       	add	r24, r18
    3808:	93 1f       	adc	r25, r19
    380a:	a1 1d       	adc	r26, r1
    380c:	b1 1d       	adc	r27, r1
    380e:	82 a7       	std	Z+42, r24	; 0x2a
    3810:	93 a7       	std	Z+43, r25	; 0x2b
    3812:	a4 a7       	std	Z+44, r26	; 0x2c
    3814:	b5 a7       	std	Z+45, r27	; 0x2d
	}

}
    3816:	24 96       	adiw	r28, 0x04	; 4
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	ff 90       	pop	r15
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	cf 90       	pop	r12
    382c:	bf 90       	pop	r11
    382e:	af 90       	pop	r10
    3830:	08 95       	ret

00003832 <csp_route_get_nexthop_mac>:

uint8_t csp_route_get_nexthop_mac(uint8_t node) {

	csp_route_t * route = csp_route_if(node);
    3832:	2f de       	rcall	.-930    	; 0x3492 <csp_route_if>
	return route->nexthop_mac_addr;

}
    3834:	fc 01       	movw	r30, r24
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	08 95       	ret

0000383a <csp_cmp_handler>:
	return CSP_ERR_NONE;

}

/* CSP Management Protocol handler */
int csp_cmp_handler(csp_conn_t * conn, csp_packet_t * packet) {
    383a:	0f 93       	push	r16
    383c:	1f 93       	push	r17
    383e:	cf 93       	push	r28
    3840:	df 93       	push	r29
    3842:	eb 01       	movw	r28, r22

	int ret = CSP_ERR_INVAL;
	struct csp_cmp_message * cmp = (struct csp_cmp_message *) packet->data;

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
    3844:	8e 85       	ldd	r24, Y+14	; 0x0e
    3846:	81 11       	cpse	r24, r1
    3848:	55 c1       	rjmp	.+682    	; 0x3af4 <csp_cmp_handler+0x2ba>
		return ret;

	switch (cmp->code) {
    384a:	8f 85       	ldd	r24, Y+15	; 0x0f
    384c:	83 30       	cpi	r24, 0x03	; 3
    384e:	09 f4       	brne	.+2      	; 0x3852 <csp_cmp_handler+0x18>
    3850:	6d c0       	rjmp	.+218    	; 0x392c <csp_cmp_handler+0xf2>
    3852:	30 f4       	brcc	.+12     	; 0x3860 <csp_cmp_handler+0x26>
    3854:	81 30       	cpi	r24, 0x01	; 1
    3856:	69 f0       	breq	.+26     	; 0x3872 <csp_cmp_handler+0x38>
    3858:	82 30       	cpi	r24, 0x02	; 2
    385a:	09 f4       	brne	.+2      	; 0x385e <csp_cmp_handler+0x24>
    385c:	4f c0       	rjmp	.+158    	; 0x38fc <csp_cmp_handler+0xc2>
    385e:	45 c1       	rjmp	.+650    	; 0x3aea <csp_cmp_handler+0x2b0>
    3860:	85 30       	cpi	r24, 0x05	; 5
    3862:	09 f4       	brne	.+2      	; 0x3866 <csp_cmp_handler+0x2c>
    3864:	f1 c0       	rjmp	.+482    	; 0x3a48 <csp_cmp_handler+0x20e>
    3866:	08 f4       	brcc	.+2      	; 0x386a <csp_cmp_handler+0x30>
    3868:	d8 c0       	rjmp	.+432    	; 0x3a1a <csp_cmp_handler+0x1e0>
    386a:	86 30       	cpi	r24, 0x06	; 6
    386c:	09 f4       	brne	.+2      	; 0x3870 <csp_cmp_handler+0x36>
    386e:	06 c1       	rjmp	.+524    	; 0x3a7c <csp_cmp_handler+0x242>
    3870:	3c c1       	rjmp	.+632    	; 0x3aea <csp_cmp_handler+0x2b0>
#define CSP_RPS_MTU	196

static int do_cmp_ident(struct csp_cmp_message *cmp) {

	/* Copy revision */
	strncpy(cmp->ident.revision, GIT_REV, CSP_CMP_IDENT_REV_LEN);
    3872:	44 e1       	ldi	r20, 0x14	; 20
    3874:	50 e0       	ldi	r21, 0x00	; 0
    3876:	62 e9       	ldi	r22, 0x92	; 146
    3878:	70 e2       	ldi	r23, 0x20	; 32
    387a:	ce 01       	movw	r24, r28
    387c:	8e 5b       	subi	r24, 0xBE	; 190
    387e:	9f 4f       	sbci	r25, 0xFF	; 255
    3880:	0e 94 c1 2b 	call	0x5782	; 0x5782 <strncpy>
	cmp->ident.revision[CSP_CMP_IDENT_REV_LEN - 1] = '\0';
    3884:	fe 01       	movw	r30, r28
    3886:	eb 5a       	subi	r30, 0xAB	; 171
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	10 82       	st	Z, r1

	/* Copy compilation date */
	strncpy(cmp->ident.date, __DATE__, CSP_CMP_IDENT_DATE_LEN);
    388c:	8c e0       	ldi	r24, 0x0C	; 12
    388e:	ea e9       	ldi	r30, 0x9A	; 154
    3890:	f0 e2       	ldi	r31, 0x20	; 32
    3892:	de 01       	movw	r26, r28
    3894:	aa 5a       	subi	r26, 0xAA	; 170
    3896:	bf 4f       	sbci	r27, 0xFF	; 255
    3898:	01 90       	ld	r0, Z+
    389a:	0d 92       	st	X+, r0
    389c:	8a 95       	dec	r24
    389e:	e1 f7       	brne	.-8      	; 0x3898 <csp_cmp_handler+0x5e>
	cmp->ident.date[CSP_CMP_IDENT_DATE_LEN - 1] = '\0';
    38a0:	fe 01       	movw	r30, r28
    38a2:	ef 59       	subi	r30, 0x9F	; 159
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	10 82       	st	Z, r1

	/* Copy compilation time */
	strncpy(cmp->ident.time, __TIME__, CSP_CMP_IDENT_TIME_LEN);
    38a8:	89 e0       	ldi	r24, 0x09	; 9
    38aa:	e6 ea       	ldi	r30, 0xA6	; 166
    38ac:	f0 e2       	ldi	r31, 0x20	; 32
    38ae:	de 01       	movw	r26, r28
    38b0:	ae 59       	subi	r26, 0x9E	; 158
    38b2:	bf 4f       	sbci	r27, 0xFF	; 255
    38b4:	01 90       	ld	r0, Z+
    38b6:	0d 92       	st	X+, r0
    38b8:	8a 95       	dec	r24
    38ba:	e1 f7       	brne	.-8      	; 0x38b4 <csp_cmp_handler+0x7a>
	cmp->ident.time[CSP_CMP_IDENT_TIME_LEN - 1] = '\0';
    38bc:	fe 01       	movw	r30, r28
    38be:	e6 59       	subi	r30, 0x96	; 150
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	10 82       	st	Z, r1

	/* Copy hostname */
	strncpy(cmp->ident.hostname, csp_get_hostname(), CSP_HOSTNAME_LEN);
    38c4:	70 da       	rcall	.-2848   	; 0x2da6 <csp_get_hostname>
    38c6:	44 e1       	ldi	r20, 0x14	; 20
    38c8:	50 e0       	ldi	r21, 0x00	; 0
    38ca:	bc 01       	movw	r22, r24
    38cc:	ce 01       	movw	r24, r28
    38ce:	40 96       	adiw	r24, 0x10	; 16
    38d0:	0e 94 c1 2b 	call	0x5782	; 0x5782 <strncpy>
	cmp->ident.hostname[CSP_HOSTNAME_LEN - 1] = '\0';
    38d4:	1b a2       	std	Y+35, r1	; 0x23

	/* Copy model name */
	strncpy(cmp->ident.model, csp_get_model(), CSP_MODEL_LEN);
    38d6:	6c da       	rcall	.-2856   	; 0x2db0 <csp_get_model>
    38d8:	4e e1       	ldi	r20, 0x1E	; 30
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	bc 01       	movw	r22, r24
    38de:	ce 01       	movw	r24, r28
    38e0:	84 96       	adiw	r24, 0x24	; 36
    38e2:	0e 94 c1 2b 	call	0x5782	; 0x5782 <strncpy>
	cmp->ident.model[CSP_MODEL_LEN - 1] = '\0';
    38e6:	fe 01       	movw	r30, r28
    38e8:	ef 5b       	subi	r30, 0xBF	; 191
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	10 82       	st	Z, r1
		return ret;

	switch (cmp->code) {
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
			packet->length = CMP_SIZE(ident);
    38ee:	8d e5       	ldi	r24, 0x5D	; 93
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	88 87       	std	Y+8, r24	; 0x08
    38f4:	99 87       	std	Y+9, r25	; 0x09
	if (cmp->type != CSP_CMP_REQUEST)
		return ret;

	switch (cmp->code) {
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
			packet->length = CMP_SIZE(ident);
			break;
    38fa:	f9 c0       	rjmp	.+498    	; 0x3aee <csp_cmp_handler+0x2b4>

}

static int do_cmp_route_set(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->route_set.interface);
    38fc:	cb 01       	movw	r24, r22
    38fe:	42 96       	adiw	r24, 0x12	; 18
    3900:	30 dd       	rcall	.-1440   	; 0x3362 <csp_route_get_if_by_name>
	if (ifc == NULL)
    3902:	00 97       	sbiw	r24, 0x00	; 0
    3904:	49 f0       	breq	.+18     	; 0x3918 <csp_cmp_handler+0xde>
		return CSP_ERR_INVAL;

	if (csp_route_set(cmp->route_set.dest_node, ifc, cmp->route_set.next_hop_mac) != CSP_ERR_NONE)
    3906:	49 89       	ldd	r20, Y+17	; 0x11
    3908:	bc 01       	movw	r22, r24
    390a:	88 89       	ldd	r24, Y+16	; 0x10
    390c:	72 dd       	rcall	.-1308   	; 0x33f2 <csp_route_set>
    390e:	89 2b       	or	r24, r25
    3910:	31 f0       	breq	.+12     	; 0x391e <csp_cmp_handler+0xe4>
		return CSP_ERR_INVAL;
    3912:	8e ef       	ldi	r24, 0xFE	; 254
    3914:	9f ef       	ldi	r25, 0xFF	; 255
    3916:	05 c0       	rjmp	.+10     	; 0x3922 <csp_cmp_handler+0xe8>

static int do_cmp_route_set(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->route_set.interface);
	if (ifc == NULL)
		return CSP_ERR_INVAL;
    3918:	8e ef       	ldi	r24, 0xFE	; 254
    391a:	9f ef       	ldi	r25, 0xFF	; 255
    391c:	02 c0       	rjmp	.+4      	; 0x3922 <csp_cmp_handler+0xe8>

	if (csp_route_set(cmp->route_set.dest_node, ifc, cmp->route_set.next_hop_mac) != CSP_ERR_NONE)
		return CSP_ERR_INVAL;

	return CSP_ERR_NONE;
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
			packet->length = CMP_SIZE(ident);
			break;

		case CSP_CMP_ROUTE_SET:
			ret = do_cmp_route_set(cmp);
			packet->length = CMP_SIZE(route_set);
    3922:	2f e0       	ldi	r18, 0x0F	; 15
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	28 87       	std	Y+8, r18	; 0x08
    3928:	39 87       	std	Y+9, r19	; 0x09
			break;
    392a:	e1 c0       	rjmp	.+450    	; 0x3aee <csp_cmp_handler+0x2b4>

}

static int do_cmp_if_stats(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->if_stats.interface);
    392c:	cb 01       	movw	r24, r22
    392e:	40 96       	adiw	r24, 0x10	; 16
    3930:	18 dd       	rcall	.-1488   	; 0x3362 <csp_route_get_if_by_name>
    3932:	8c 01       	movw	r16, r24
	if (ifc == NULL)
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	09 f4       	brne	.+2      	; 0x393a <csp_cmp_handler+0x100>
    3938:	69 c0       	rjmp	.+210    	; 0x3a0c <csp_cmp_handler+0x1d2>
		return CSP_ERR_INVAL;

	cmp->if_stats.tx =       csp_hton32(ifc->tx);
    393a:	fc 01       	movw	r30, r24
    393c:	62 85       	ldd	r22, Z+10	; 0x0a
    393e:	73 85       	ldd	r23, Z+11	; 0x0b
    3940:	84 85       	ldd	r24, Z+12	; 0x0c
    3942:	95 85       	ldd	r25, Z+13	; 0x0d
    3944:	c6 d9       	rcall	.-3188   	; 0x2cd2 <csp_hton32>
    3946:	6b 8f       	std	Y+27, r22	; 0x1b
    3948:	7c 8f       	std	Y+28, r23	; 0x1c
    394a:	8d 8f       	std	Y+29, r24	; 0x1d
    394c:	9e 8f       	std	Y+30, r25	; 0x1e
	cmp->if_stats.rx =       csp_hton32(ifc->rx);
    394e:	f8 01       	movw	r30, r16
    3950:	66 85       	ldd	r22, Z+14	; 0x0e
    3952:	77 85       	ldd	r23, Z+15	; 0x0f
    3954:	80 89       	ldd	r24, Z+16	; 0x10
    3956:	91 89       	ldd	r25, Z+17	; 0x11
    3958:	bc d9       	rcall	.-3208   	; 0x2cd2 <csp_hton32>
    395a:	6f 8f       	std	Y+31, r22	; 0x1f
    395c:	78 a3       	std	Y+32, r23	; 0x20
    395e:	89 a3       	std	Y+33, r24	; 0x21
    3960:	9a a3       	std	Y+34, r25	; 0x22
	cmp->if_stats.tx_error = csp_hton32(ifc->tx_error);
    3962:	f8 01       	movw	r30, r16
    3964:	62 89       	ldd	r22, Z+18	; 0x12
    3966:	73 89       	ldd	r23, Z+19	; 0x13
    3968:	84 89       	ldd	r24, Z+20	; 0x14
    396a:	95 89       	ldd	r25, Z+21	; 0x15
    396c:	b2 d9       	rcall	.-3228   	; 0x2cd2 <csp_hton32>
    396e:	6b a3       	std	Y+35, r22	; 0x23
    3970:	7c a3       	std	Y+36, r23	; 0x24
    3972:	8d a3       	std	Y+37, r24	; 0x25
    3974:	9e a3       	std	Y+38, r25	; 0x26
	cmp->if_stats.rx_error = csp_hton32(ifc->rx_error);
    3976:	f8 01       	movw	r30, r16
    3978:	66 89       	ldd	r22, Z+22	; 0x16
    397a:	77 89       	ldd	r23, Z+23	; 0x17
    397c:	80 8d       	ldd	r24, Z+24	; 0x18
    397e:	91 8d       	ldd	r25, Z+25	; 0x19
    3980:	a8 d9       	rcall	.-3248   	; 0x2cd2 <csp_hton32>
    3982:	6f a3       	std	Y+39, r22	; 0x27
    3984:	78 a7       	std	Y+40, r23	; 0x28
    3986:	89 a7       	std	Y+41, r24	; 0x29
    3988:	9a a7       	std	Y+42, r25	; 0x2a
	cmp->if_stats.drop =     csp_hton32(ifc->drop);
    398a:	f8 01       	movw	r30, r16
    398c:	62 8d       	ldd	r22, Z+26	; 0x1a
    398e:	73 8d       	ldd	r23, Z+27	; 0x1b
    3990:	84 8d       	ldd	r24, Z+28	; 0x1c
    3992:	95 8d       	ldd	r25, Z+29	; 0x1d
    3994:	9e d9       	rcall	.-3268   	; 0x2cd2 <csp_hton32>
    3996:	6b a7       	std	Y+43, r22	; 0x2b
    3998:	7c a7       	std	Y+44, r23	; 0x2c
    399a:	8d a7       	std	Y+45, r24	; 0x2d
    399c:	9e a7       	std	Y+46, r25	; 0x2e
	cmp->if_stats.autherr =  csp_hton32(ifc->autherr);
    399e:	f8 01       	movw	r30, r16
    39a0:	66 8d       	ldd	r22, Z+30	; 0x1e
    39a2:	77 8d       	ldd	r23, Z+31	; 0x1f
    39a4:	80 a1       	ldd	r24, Z+32	; 0x20
    39a6:	91 a1       	ldd	r25, Z+33	; 0x21
    39a8:	94 d9       	rcall	.-3288   	; 0x2cd2 <csp_hton32>
    39aa:	6f a7       	std	Y+47, r22	; 0x2f
    39ac:	78 ab       	std	Y+48, r23	; 0x30
    39ae:	89 ab       	std	Y+49, r24	; 0x31
    39b0:	9a ab       	std	Y+50, r25	; 0x32
	cmp->if_stats.frame =    csp_hton32(ifc->frame);
    39b2:	f8 01       	movw	r30, r16
    39b4:	62 a1       	ldd	r22, Z+34	; 0x22
    39b6:	73 a1       	ldd	r23, Z+35	; 0x23
    39b8:	84 a1       	ldd	r24, Z+36	; 0x24
    39ba:	95 a1       	ldd	r25, Z+37	; 0x25
    39bc:	8a d9       	rcall	.-3308   	; 0x2cd2 <csp_hton32>
    39be:	6b ab       	std	Y+51, r22	; 0x33
    39c0:	7c ab       	std	Y+52, r23	; 0x34
    39c2:	8d ab       	std	Y+53, r24	; 0x35
    39c4:	9e ab       	std	Y+54, r25	; 0x36
	cmp->if_stats.txbytes =  csp_hton32(ifc->txbytes);
    39c6:	f8 01       	movw	r30, r16
    39c8:	66 a1       	ldd	r22, Z+38	; 0x26
    39ca:	77 a1       	ldd	r23, Z+39	; 0x27
    39cc:	80 a5       	ldd	r24, Z+40	; 0x28
    39ce:	91 a5       	ldd	r25, Z+41	; 0x29
    39d0:	80 d9       	rcall	.-3328   	; 0x2cd2 <csp_hton32>
    39d2:	6f ab       	std	Y+55, r22	; 0x37
    39d4:	78 af       	std	Y+56, r23	; 0x38
    39d6:	89 af       	std	Y+57, r24	; 0x39
    39d8:	9a af       	std	Y+58, r25	; 0x3a
	cmp->if_stats.rxbytes =  csp_hton32(ifc->rxbytes);
    39da:	f8 01       	movw	r30, r16
    39dc:	62 a5       	ldd	r22, Z+42	; 0x2a
    39de:	73 a5       	ldd	r23, Z+43	; 0x2b
    39e0:	84 a5       	ldd	r24, Z+44	; 0x2c
    39e2:	95 a5       	ldd	r25, Z+45	; 0x2d
    39e4:	76 d9       	rcall	.-3348   	; 0x2cd2 <csp_hton32>
    39e6:	6b af       	std	Y+59, r22	; 0x3b
    39e8:	7c af       	std	Y+60, r23	; 0x3c
    39ea:	8d af       	std	Y+61, r24	; 0x3d
    39ec:	9e af       	std	Y+62, r25	; 0x3e
	cmp->if_stats.irq = 	 csp_hton32(ifc->irq);
    39ee:	f8 01       	movw	r30, r16
    39f0:	66 a5       	ldd	r22, Z+46	; 0x2e
    39f2:	77 a5       	ldd	r23, Z+47	; 0x2f
    39f4:	80 a9       	ldd	r24, Z+48	; 0x30
    39f6:	91 a9       	ldd	r25, Z+49	; 0x31
    39f8:	6c d9       	rcall	.-3368   	; 0x2cd2 <csp_hton32>
    39fa:	fe 01       	movw	r30, r28
    39fc:	ff 96       	adiw	r30, 0x3f	; 63
    39fe:	60 83       	st	Z, r22
    3a00:	71 83       	std	Z+1, r23	; 0x01
    3a02:	82 83       	std	Z+2, r24	; 0x02
    3a04:	93 83       	std	Z+3, r25	; 0x03

	return CSP_ERR_NONE;
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <csp_cmp_handler+0x1d6>

static int do_cmp_if_stats(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->if_stats.interface);
	if (ifc == NULL)
		return CSP_ERR_INVAL;
    3a0c:	8e ef       	ldi	r24, 0xFE	; 254
    3a0e:	9f ef       	ldi	r25, 0xFF	; 255
			packet->length = CMP_SIZE(route_set);
			break;

		case CSP_CMP_IF_STATS:
			ret = do_cmp_if_stats(cmp);
			packet->length = CMP_SIZE(if_stats);
    3a10:	25 e3       	ldi	r18, 0x35	; 53
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	28 87       	std	Y+8, r18	; 0x08
    3a16:	39 87       	std	Y+9, r19	; 0x09
			break;
    3a18:	6a c0       	rjmp	.+212    	; 0x3aee <csp_cmp_handler+0x2b4>
	return CSP_ERR_NONE;
}

static int do_cmp_peek(struct csp_cmp_message *cmp) {

	cmp->peek.addr = csp_hton32(cmp->peek.addr);
    3a1a:	68 89       	ldd	r22, Y+16	; 0x10
    3a1c:	79 89       	ldd	r23, Y+17	; 0x11
    3a1e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a20:	9b 89       	ldd	r25, Y+19	; 0x13
    3a22:	57 d9       	rcall	.-3410   	; 0x2cd2 <csp_hton32>
    3a24:	68 8b       	std	Y+16, r22	; 0x10
    3a26:	79 8b       	std	Y+17, r23	; 0x11
    3a28:	8a 8b       	std	Y+18, r24	; 0x12
    3a2a:	9b 8b       	std	Y+19, r25	; 0x13
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
    3a2c:	4c 89       	ldd	r20, Y+20	; 0x14
    3a2e:	49 3c       	cpi	r20, 0xC9	; 201
    3a30:	40 f4       	brcc	.+16     	; 0x3a42 <csp_cmp_handler+0x208>
		return CSP_ERR_INVAL;

	/* Dangerous, you better know what you are doing */
	memcpy(cmp->peek.data, (void *) (uintptr_t) cmp->peek.addr, cmp->peek.len);
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	ce 01       	movw	r24, r28
    3a36:	45 96       	adiw	r24, 0x15	; 21
    3a38:	0e 94 91 2b 	call	0x5722	; 0x5722 <memcpy>

	return CSP_ERR_NONE;
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	56 c0       	rjmp	.+172    	; 0x3aee <csp_cmp_handler+0x2b4>

static int do_cmp_peek(struct csp_cmp_message *cmp) {

	cmp->peek.addr = csp_hton32(cmp->peek.addr);
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
		return CSP_ERR_INVAL;
    3a42:	8e ef       	ldi	r24, 0xFE	; 254
    3a44:	9f ef       	ldi	r25, 0xFF	; 255
			packet->length = CMP_SIZE(if_stats);
			break;

		case CSP_CMP_PEEK:
			ret = do_cmp_peek(cmp);
			break;
    3a46:	53 c0       	rjmp	.+166    	; 0x3aee <csp_cmp_handler+0x2b4>

}

static int do_cmp_poke(struct csp_cmp_message *cmp) {

	cmp->poke.addr = csp_hton32(cmp->poke.addr);
    3a48:	68 89       	ldd	r22, Y+16	; 0x10
    3a4a:	79 89       	ldd	r23, Y+17	; 0x11
    3a4c:	8a 89       	ldd	r24, Y+18	; 0x12
    3a4e:	9b 89       	ldd	r25, Y+19	; 0x13
    3a50:	40 d9       	rcall	.-3456   	; 0x2cd2 <csp_hton32>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	88 8b       	std	Y+16, r24	; 0x10
    3a58:	99 8b       	std	Y+17, r25	; 0x11
    3a5a:	aa 8b       	std	Y+18, r26	; 0x12
    3a5c:	bb 8b       	std	Y+19, r27	; 0x13
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
    3a5e:	4c 89       	ldd	r20, Y+20	; 0x14
    3a60:	49 3c       	cpi	r20, 0xC9	; 201
    3a62:	48 f4       	brcc	.+18     	; 0x3a76 <csp_cmp_handler+0x23c>
		return CSP_ERR_INVAL;

	/* Extremely dangerous, you better know what you are doing */
	memcpy((void *) (uintptr_t) cmp->poke.addr, cmp->poke.data, cmp->poke.len);
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	be 01       	movw	r22, r28
    3a68:	6b 5e       	subi	r22, 0xEB	; 235
    3a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6c:	0e 94 91 2b 	call	0x5722	; 0x5722 <memcpy>

	return CSP_ERR_NONE;
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	3c c0       	rjmp	.+120    	; 0x3aee <csp_cmp_handler+0x2b4>

static int do_cmp_poke(struct csp_cmp_message *cmp) {

	cmp->poke.addr = csp_hton32(cmp->poke.addr);
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
		return CSP_ERR_INVAL;
    3a76:	8e ef       	ldi	r24, 0xFE	; 254
    3a78:	9f ef       	ldi	r25, 0xFF	; 255
			ret = do_cmp_peek(cmp);
			break;

		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
			break;
    3a7a:	39 c0       	rjmp	.+114    	; 0x3aee <csp_cmp_handler+0x2b4>

}

static int do_cmp_clock(struct csp_cmp_message *cmp) {

	cmp->clock.tv_sec = csp_ntoh32(cmp->clock.tv_sec);
    3a7c:	68 89       	ldd	r22, Y+16	; 0x10
    3a7e:	79 89       	ldd	r23, Y+17	; 0x11
    3a80:	8a 89       	ldd	r24, Y+18	; 0x12
    3a82:	9b 89       	ldd	r25, Y+19	; 0x13
    3a84:	5b d9       	rcall	.-3402   	; 0x2d3c <csp_ntoh32>
    3a86:	68 8b       	std	Y+16, r22	; 0x10
    3a88:	79 8b       	std	Y+17, r23	; 0x11
    3a8a:	8a 8b       	std	Y+18, r24	; 0x12
    3a8c:	9b 8b       	std	Y+19, r25	; 0x13
	cmp->clock.tv_nsec = csp_ntoh32(cmp->clock.tv_nsec);
    3a8e:	6c 89       	ldd	r22, Y+20	; 0x14
    3a90:	7d 89       	ldd	r23, Y+21	; 0x15
    3a92:	8e 89       	ldd	r24, Y+22	; 0x16
    3a94:	9f 89       	ldd	r25, Y+23	; 0x17
    3a96:	52 d9       	rcall	.-3420   	; 0x2d3c <csp_ntoh32>
    3a98:	6c 8b       	std	Y+20, r22	; 0x14
    3a9a:	7d 8b       	std	Y+21, r23	; 0x15
    3a9c:	8e 8b       	std	Y+22, r24	; 0x16
    3a9e:	9f 8b       	std	Y+23, r25	; 0x17

	if (cmp->clock.tv_sec != 0) {
    3aa0:	88 89       	ldd	r24, Y+16	; 0x10
    3aa2:	99 89       	ldd	r25, Y+17	; 0x11
    3aa4:	aa 89       	ldd	r26, Y+18	; 0x12
    3aa6:	bb 89       	ldd	r27, Y+19	; 0x13
    3aa8:	89 2b       	or	r24, r25
    3aaa:	8a 2b       	or	r24, r26
    3aac:	8b 2b       	or	r24, r27
    3aae:	21 f0       	breq	.+8      	; 0x3ab8 <csp_cmp_handler+0x27e>
		clock_set_time(&cmp->clock);
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	40 96       	adiw	r24, 0x10	; 16
    3ab4:	0e 94 8f 04 	call	0x91e	; 0x91e <clock_set_time>
	}

	clock_get_time(&cmp->clock);
    3ab8:	ce 01       	movw	r24, r28
    3aba:	40 96       	adiw	r24, 0x10	; 16
    3abc:	0e 94 8e 04 	call	0x91c	; 0x91c <clock_get_time>
	cmp->clock.tv_sec = csp_hton32(cmp->clock.tv_sec);
    3ac0:	68 89       	ldd	r22, Y+16	; 0x10
    3ac2:	79 89       	ldd	r23, Y+17	; 0x11
    3ac4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ac6:	9b 89       	ldd	r25, Y+19	; 0x13
    3ac8:	04 d9       	rcall	.-3576   	; 0x2cd2 <csp_hton32>
    3aca:	68 8b       	std	Y+16, r22	; 0x10
    3acc:	79 8b       	std	Y+17, r23	; 0x11
    3ace:	8a 8b       	std	Y+18, r24	; 0x12
    3ad0:	9b 8b       	std	Y+19, r25	; 0x13
	cmp->clock.tv_nsec = csp_hton32(cmp->clock.tv_nsec);
    3ad2:	6c 89       	ldd	r22, Y+20	; 0x14
    3ad4:	7d 89       	ldd	r23, Y+21	; 0x15
    3ad6:	8e 89       	ldd	r24, Y+22	; 0x16
    3ad8:	9f 89       	ldd	r25, Y+23	; 0x17
    3ada:	fb d8       	rcall	.-3594   	; 0x2cd2 <csp_hton32>
    3adc:	6c 8b       	std	Y+20, r22	; 0x14
    3ade:	7d 8b       	std	Y+21, r23	; 0x15
    3ae0:	8e 8b       	std	Y+22, r24	; 0x16
    3ae2:	9f 8b       	std	Y+23, r25	; 0x17
		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
			break;

		case CSP_CMP_CLOCK:
			ret = do_cmp_clock(cmp);
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
			break;
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <csp_cmp_handler+0x2b4>

		default:
			ret = CSP_ERR_INVAL;
    3aea:	8e ef       	ldi	r24, 0xFE	; 254
    3aec:	9f ef       	ldi	r25, 0xFF	; 255
			break;
	}

	cmp->type = CSP_CMP_REPLY;
    3aee:	2f ef       	ldi	r18, 0xFF	; 255
    3af0:	2e 87       	std	Y+14, r18	; 0x0e

	return ret;
    3af2:	02 c0       	rjmp	.+4      	; 0x3af8 <csp_cmp_handler+0x2be>
	int ret = CSP_ERR_INVAL;
	struct csp_cmp_message * cmp = (struct csp_cmp_message *) packet->data;

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
		return ret;
    3af4:	8e ef       	ldi	r24, 0xFE	; 254
    3af6:	9f ef       	ldi	r25, 0xFF	; 255
	}

	cmp->type = CSP_CMP_REPLY;

	return ret;
}
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	08 95       	ret

00003b02 <csp_service_handler>:

void csp_service_handler(csp_conn_t * conn, csp_packet_t * packet) {
    3b02:	af 92       	push	r10
    3b04:	bf 92       	push	r11
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	cf 93       	push	r28
    3b14:	df 93       	push	r29
    3b16:	8c 01       	movw	r16, r24
    3b18:	eb 01       	movw	r28, r22

	switch (csp_conn_dport(conn)) {
    3b1a:	12 d8       	rcall	.-4060   	; 0x2b40 <csp_conn_dport>
    3b1c:	87 30       	cpi	r24, 0x07	; 7
    3b1e:	91 05       	cpc	r25, r1
    3b20:	08 f0       	brcs	.+2      	; 0x3b24 <csp_service_handler+0x22>
    3b22:	90 c0       	rjmp	.+288    	; 0x3c44 <csp_service_handler+0x142>
    3b24:	fc 01       	movw	r30, r24
    3b26:	e2 50       	subi	r30, 0x02	; 2
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	0c 94 21 2a 	jmp	0x5442	; 0x5442 <__tablejump2__>

	case CSP_CMP:
		/* Pass to CMP handler */
		if (csp_cmp_handler(conn, packet) != CSP_ERR_NONE) {
    3b2e:	be 01       	movw	r22, r28
    3b30:	c8 01       	movw	r24, r16
    3b32:	83 de       	rcall	.-762    	; 0x383a <csp_cmp_handler>
    3b34:	89 2b       	or	r24, r25
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <csp_service_handler+0x38>
    3b38:	89 c0       	rjmp	.+274    	; 0x3c4c <csp_service_handler+0x14a>
			csp_buffer_free(packet);
    3b3a:	ce 01       	movw	r24, r28
    3b3c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
			return;
    3b40:	92 c0       	rjmp	.+292    	; 0x3c66 <csp_service_handler+0x164>
		break;

	case CSP_PS: {

		/* Start by allocating just the right amount of memory */
		int task_list_size = csp_sys_tasklist_size();
    3b42:	0e 94 3c 12 	call	0x2478	; 0x2478 <csp_sys_tasklist_size>
    3b46:	7c 01       	movw	r14, r24
		char * pslist = csp_malloc(task_list_size);
    3b48:	0e 94 c4 11 	call	0x2388	; 0x2388 <csp_malloc>
    3b4c:	5c 01       	movw	r10, r24

		/* Retrieve the tasklist */
		csp_sys_tasklist(pslist);
    3b4e:	0e 94 38 12 	call	0x2470	; 0x2470 <csp_sys_tasklist>
		int pslen = strnlen(pslist, task_list_size);
    3b52:	b7 01       	movw	r22, r14
    3b54:	c5 01       	movw	r24, r10
    3b56:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <strnlen>
    3b5a:	6c 01       	movw	r12, r24

		/* Split the potentially very long string into packets */
		int i = 0;
		while(i < pslen) {
    3b5c:	18 16       	cp	r1, r24
    3b5e:	19 06       	cpc	r1, r25
    3b60:	0c f0       	brlt	.+2      	; 0x3b64 <csp_service_handler+0x62>
    3b62:	74 c0       	rjmp	.+232    	; 0x3c4c <csp_service_handler+0x14a>
		/* Retrieve the tasklist */
		csp_sys_tasklist(pslist);
		int pslen = strnlen(pslist, task_list_size);

		/* Split the potentially very long string into packets */
		int i = 0;
    3b64:	e1 2c       	mov	r14, r1
    3b66:	f1 2c       	mov	r15, r1
		while(i < pslen) {

			/* Allocate packet buffer, if need be */
			if (packet == NULL)
    3b68:	20 97       	sbiw	r28, 0x00	; 0
    3b6a:	41 f4       	brne	.+16     	; 0x3b7c <csp_service_handler+0x7a>
				packet = csp_buffer_get(CSP_RPS_MTU);
    3b6c:	84 ec       	ldi	r24, 0xC4	; 196
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	0e 94 6e 13 	call	0x26dc	; 0x26dc <csp_buffer_get>
    3b74:	ec 01       	movw	r28, r24
			if (packet == NULL)
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <csp_service_handler+0x7a>
    3b7a:	75 c0       	rjmp	.+234    	; 0x3c66 <csp_service_handler+0x164>
				break;

			/* Calculate length, either full MTU or the remainder */
			packet->length = (pslen - i > CSP_RPS_MTU) ? CSP_RPS_MTU : (pslen - i);
    3b7c:	a6 01       	movw	r20, r12
    3b7e:	4e 19       	sub	r20, r14
    3b80:	5f 09       	sbc	r21, r15
    3b82:	45 3c       	cpi	r20, 0xC5	; 197
    3b84:	51 05       	cpc	r21, r1
    3b86:	14 f0       	brlt	.+4      	; 0x3b8c <csp_service_handler+0x8a>
    3b88:	44 ec       	ldi	r20, 0xC4	; 196
    3b8a:	50 e0       	ldi	r21, 0x00	; 0
    3b8c:	48 87       	std	Y+8, r20	; 0x08
    3b8e:	59 87       	std	Y+9, r21	; 0x09

			/* Send out the data */
			memcpy(packet->data, &pslist[i], packet->length);
    3b90:	b5 01       	movw	r22, r10
    3b92:	6e 0d       	add	r22, r14
    3b94:	7f 1d       	adc	r23, r15
    3b96:	ce 01       	movw	r24, r28
    3b98:	0e 96       	adiw	r24, 0x0e	; 14
    3b9a:	0e 94 91 2b 	call	0x5722	; 0x5722 <memcpy>
			i += packet->length;
    3b9e:	88 85       	ldd	r24, Y+8	; 0x08
    3ba0:	99 85       	ldd	r25, Y+9	; 0x09
    3ba2:	e8 0e       	add	r14, r24
    3ba4:	f9 1e       	adc	r15, r25
			if (!csp_send(conn, packet, 0))
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	a9 01       	movw	r20, r18
    3bac:	be 01       	movw	r22, r28
    3bae:	c8 01       	movw	r24, r16
    3bb0:	51 da       	rcall	.-2910   	; 0x3054 <csp_send>
    3bb2:	89 2b       	or	r24, r25
    3bb4:	19 f4       	brne	.+6      	; 0x3bbc <csp_service_handler+0xba>
				csp_buffer_free(packet);
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
		csp_sys_tasklist(pslist);
		int pslen = strnlen(pslist, task_list_size);

		/* Split the potentially very long string into packets */
		int i = 0;
		while(i < pslen) {
    3bbc:	ec 14       	cp	r14, r12
    3bbe:	fd 04       	cpc	r15, r13
    3bc0:	0c f0       	brlt	.+2      	; 0x3bc4 <csp_service_handler+0xc2>
    3bc2:	51 c0       	rjmp	.+162    	; 0x3c66 <csp_service_handler+0x164>
    3bc4:	c0 e0       	ldi	r28, 0x00	; 0
    3bc6:	d0 e0       	ldi	r29, 0x00	; 0
    3bc8:	cf cf       	rjmp	.-98     	; 0x3b68 <csp_service_handler+0x66>
		}
		break;
	}

	case CSP_MEMFREE: {
		uint32_t total = csp_sys_memfree();
    3bca:	0e 94 42 12 	call	0x2484	; 0x2484 <csp_sys_memfree>

		total = csp_hton32(total);
    3bce:	81 d8       	rcall	.-3838   	; 0x2cd2 <csp_hton32>
		memcpy(packet->data, &total, sizeof(total));
    3bd0:	6e 87       	std	Y+14, r22	; 0x0e
    3bd2:	7f 87       	std	Y+15, r23	; 0x0f
    3bd4:	88 8b       	std	Y+16, r24	; 0x10
    3bd6:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(total);
    3bd8:	84 e0       	ldi	r24, 0x04	; 4
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	88 87       	std	Y+8, r24	; 0x08
    3bde:	99 87       	std	Y+9, r25	; 0x09
    3be0:	35 c0       	rjmp	.+106    	; 0x3c4c <csp_service_handler+0x14a>

	case CSP_REBOOT: {
		uint32_t magic_word;
		memcpy(&magic_word, packet->data, sizeof(magic_word));

		magic_word = csp_ntoh32(magic_word);
    3be2:	6e 85       	ldd	r22, Y+14	; 0x0e
    3be4:	7f 85       	ldd	r23, Y+15	; 0x0f
    3be6:	88 89       	ldd	r24, Y+16	; 0x10
    3be8:	99 89       	ldd	r25, Y+17	; 0x11
    3bea:	a8 d8       	rcall	.-3760   	; 0x2d3c <csp_ntoh32>

		/* If the magic word is invalid, return */
		if (magic_word != 0x80078007) {
    3bec:	67 30       	cpi	r22, 0x07	; 7
    3bee:	70 48       	sbci	r23, 0x80	; 128
    3bf0:	87 40       	sbci	r24, 0x07	; 7
    3bf2:	90 48       	sbci	r25, 0x80	; 128
    3bf4:	21 f0       	breq	.+8      	; 0x3bfe <csp_service_handler+0xfc>
			csp_buffer_free(packet);
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
			return;
    3bfc:	34 c0       	rjmp	.+104    	; 0x3c66 <csp_service_handler+0x164>
		}

		/* Otherwise Reboot */
		csp_sys_reboot();
    3bfe:	0e 94 99 12 	call	0x2532	; 0x2532 <csp_sys_reboot>
		
		csp_buffer_free(packet);
    3c02:	ce 01       	movw	r24, r28
    3c04:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
		return;
    3c08:	2e c0       	rjmp	.+92     	; 0x3c66 <csp_service_handler+0x164>
	}

	case CSP_BUF_FREE: {
		uint32_t size = csp_buffer_remaining();
    3c0a:	0e 94 17 14 	call	0x282e	; 0x282e <csp_buffer_remaining>
    3c0e:	bc 01       	movw	r22, r24
    3c10:	88 27       	eor	r24, r24
    3c12:	77 fd       	sbrc	r23, 7
    3c14:	80 95       	com	r24
    3c16:	98 2f       	mov	r25, r24
		size = csp_hton32(size);
    3c18:	5c d8       	rcall	.-3912   	; 0x2cd2 <csp_hton32>
		memcpy(packet->data, &size, sizeof(size));
    3c1a:	6e 87       	std	Y+14, r22	; 0x0e
    3c1c:	7f 87       	std	Y+15, r23	; 0x0f
    3c1e:	88 8b       	std	Y+16, r24	; 0x10
    3c20:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(size);
    3c22:	84 e0       	ldi	r24, 0x04	; 4
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	88 87       	std	Y+8, r24	; 0x08
    3c28:	99 87       	std	Y+9, r25	; 0x09
    3c2a:	10 c0       	rjmp	.+32     	; 0x3c4c <csp_service_handler+0x14a>
		break;
	}

	case CSP_UPTIME: {
		uint32_t time = csp_get_s();
    3c2c:	0e 94 ce 12 	call	0x259c	; 0x259c <csp_get_s>
		time = csp_hton32(time);
    3c30:	50 d8       	rcall	.-3936   	; 0x2cd2 <csp_hton32>
		memcpy(packet->data, &time, sizeof(time));
    3c32:	6e 87       	std	Y+14, r22	; 0x0e
    3c34:	7f 87       	std	Y+15, r23	; 0x0f
    3c36:	88 8b       	std	Y+16, r24	; 0x10
    3c38:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(time);
    3c3a:	84 e0       	ldi	r24, 0x04	; 4
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	88 87       	std	Y+8, r24	; 0x08
    3c40:	99 87       	std	Y+9, r25	; 0x09
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <csp_service_handler+0x14a>
		break;
	}

	default:
		csp_buffer_free(packet);
    3c44:	ce 01       	movw	r24, r28
    3c46:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
		return;
    3c4a:	0d c0       	rjmp	.+26     	; 0x3c66 <csp_service_handler+0x164>
	}

	if (packet != NULL) {
    3c4c:	20 97       	sbiw	r28, 0x00	; 0
    3c4e:	59 f0       	breq	.+22     	; 0x3c66 <csp_service_handler+0x164>
		if (!csp_send(conn, packet, 0))
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	a9 01       	movw	r20, r18
    3c56:	be 01       	movw	r22, r28
    3c58:	c8 01       	movw	r24, r16
    3c5a:	fc d9       	rcall	.-3080   	; 0x3054 <csp_send>
    3c5c:	89 2b       	or	r24, r25
    3c5e:	19 f4       	brne	.+6      	; 0x3c66 <csp_service_handler+0x164>
			csp_buffer_free(packet);
    3c60:	ce 01       	movw	r24, r28
    3c62:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
	}

}
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	1f 91       	pop	r17
    3c6c:	0f 91       	pop	r16
    3c6e:	ff 90       	pop	r15
    3c70:	ef 90       	pop	r14
    3c72:	df 90       	pop	r13
    3c74:	cf 90       	pop	r12
    3c76:	bf 90       	pop	r11
    3c78:	af 90       	pop	r10
    3c7a:	08 95       	ret

00003c7c <csp_i2c_tx>:
#include <csp/csp_interface.h>
#include <csp/csp_error.h>
#include <csp/interfaces/csp_if_i2c.h>
#include <csp/drivers/i2c.h>

int csp_i2c_tx(csp_iface_t * interface, csp_packet_t * packet, uint32_t timeout) {
    3c7c:	cf 92       	push	r12
    3c7e:	df 92       	push	r13
    3c80:	ef 92       	push	r14
    3c82:	ff 92       	push	r15
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	eb 01       	movw	r28, r22
    3c8a:	69 01       	movw	r12, r18
    3c8c:	7a 01       	movw	r14, r20

	/* Cast the CSP packet buffer into an i2c frame */
	i2c_frame_t * frame = (i2c_frame_t *) packet;

	/* Insert destination node into the i2c destination field */
	if (csp_route_get_nexthop_mac(packet->id.dst) == CSP_NODE_MAC) {
    3c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c90:	92 95       	swap	r25
    3c92:	9f 70       	andi	r25, 0x0F	; 15
    3c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c96:	81 70       	andi	r24, 0x01	; 1
    3c98:	82 95       	swap	r24
    3c9a:	80 7f       	andi	r24, 0xF0	; 240
    3c9c:	89 2b       	or	r24, r25
    3c9e:	c9 dd       	rcall	.-1134   	; 0x3832 <csp_route_get_nexthop_mac>
    3ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca2:	51 f4       	brne	.+20     	; 0x3cb8 <csp_i2c_tx+0x3c>
		frame->dest = packet->id.dst;
    3ca4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ca6:	92 95       	swap	r25
    3ca8:	9f 70       	andi	r25, 0x0F	; 15
    3caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cac:	81 70       	andi	r24, 0x01	; 1
    3cae:	82 95       	swap	r24
    3cb0:	80 7f       	andi	r24, 0xF0	; 240
    3cb2:	89 2b       	or	r24, r25
    3cb4:	8e 83       	std	Y+6, r24	; 0x06
    3cb6:	0a c0       	rjmp	.+20     	; 0x3ccc <csp_i2c_tx+0x50>
	} else {
		frame->dest = csp_route_get_nexthop_mac(packet->id.dst);
    3cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cba:	92 95       	swap	r25
    3cbc:	9f 70       	andi	r25, 0x0F	; 15
    3cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc0:	81 70       	andi	r24, 0x01	; 1
    3cc2:	82 95       	swap	r24
    3cc4:	80 7f       	andi	r24, 0xF0	; 240
    3cc6:	89 2b       	or	r24, r25
    3cc8:	b4 dd       	rcall	.-1176   	; 0x3832 <csp_route_get_nexthop_mac>
    3cca:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* Save the outgoing id in the buffer */
	packet->id.ext = csp_hton32(packet->id.ext);
    3ccc:	6a 85       	ldd	r22, Y+10	; 0x0a
    3cce:	7b 85       	ldd	r23, Y+11	; 0x0b
    3cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cd4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <csp_hton32>
    3cd8:	6a 87       	std	Y+10, r22	; 0x0a
    3cda:	7b 87       	std	Y+11, r23	; 0x0b
    3cdc:	8c 87       	std	Y+12, r24	; 0x0c
    3cde:	9d 87       	std	Y+13, r25	; 0x0d

	/* Add the CSP header to the I2C length field */
	frame->len += sizeof(packet->id);
    3ce0:	88 85       	ldd	r24, Y+8	; 0x08
    3ce2:	99 85       	ldd	r25, Y+9	; 0x09
    3ce4:	04 96       	adiw	r24, 0x04	; 4
    3ce6:	88 87       	std	Y+8, r24	; 0x08
    3ce8:	99 87       	std	Y+9, r25	; 0x09
	frame->len_rx = 0;
    3cea:	1f 82       	std	Y+7, r1	; 0x07

	/* Some I2C drivers support X number of retries
	 * CSP don't care about this. If it doesn't work the first
	 * time, don'y use time on it.
	 */
	frame->retries = 0;
    3cec:	19 82       	std	Y+1, r1	; 0x01

	/* enqueue the frame */
	if (i2c_send(0, frame, timeout) != E_NO_ERR)
    3cee:	a6 01       	movw	r20, r12
    3cf0:	be 01       	movw	r22, r28
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <i2c_send>
    3cfa:	01 96       	adiw	r24, 0x01	; 1
    3cfc:	19 f0       	breq	.+6      	; 0x3d04 <csp_i2c_tx+0x88>
		return CSP_ERR_DRIVER;
    3cfe:	85 ef       	ldi	r24, 0xF5	; 245
    3d00:	9f ef       	ldi	r25, 0xFF	; 255
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <csp_i2c_tx+0x8c>

	return CSP_ERR_NONE;
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0

}
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	ff 90       	pop	r15
    3d0e:	ef 90       	pop	r14
    3d10:	df 90       	pop	r13
    3d12:	cf 90       	pop	r12
    3d14:	08 95       	ret

00003d16 <csp_i2c_rx>:
 * When a frame is received, cast it to a csp_packet
 * and send it directly to the CSP new packet function.
 * Context: ISR only
 * @param frame
 */
void csp_i2c_rx(i2c_frame_t * frame, void * pxTaskWoken) {
    3d16:	0f 93       	push	r16
    3d18:	1f 93       	push	r17
    3d1a:	cf 93       	push	r28
    3d1c:	df 93       	push	r29
    3d1e:	ec 01       	movw	r28, r24
    3d20:	8b 01       	movw	r16, r22

	static csp_packet_t * packet;

	/* Validate input */
	if (frame == NULL)
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	79 f1       	breq	.+94     	; 0x3d84 <csp_i2c_rx+0x6e>
		return;

	if ((frame->len < 4) || (frame->len > I2C_MTU)) {
    3d26:	88 85       	ldd	r24, Y+8	; 0x08
    3d28:	99 85       	ldd	r25, Y+9	; 0x09
    3d2a:	04 97       	sbiw	r24, 0x04	; 4
    3d2c:	8d 3f       	cpi	r24, 0xFD	; 253
    3d2e:	91 05       	cpc	r25, r1
    3d30:	88 f0       	brcs	.+34     	; 0x3d54 <csp_i2c_rx+0x3e>
		csp_if_i2c.frame++;
    3d32:	e9 e2       	ldi	r30, 0x29	; 41
    3d34:	f0 e2       	ldi	r31, 0x20	; 32
    3d36:	80 81       	ld	r24, Z
    3d38:	91 81       	ldd	r25, Z+1	; 0x01
    3d3a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d3c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d3e:	01 96       	adiw	r24, 0x01	; 1
    3d40:	a1 1d       	adc	r26, r1
    3d42:	b1 1d       	adc	r27, r1
    3d44:	80 83       	st	Z, r24
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	a2 83       	std	Z+2, r26	; 0x02
    3d4a:	b3 83       	std	Z+3, r27	; 0x03
		csp_buffer_free_isr(frame);
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	0e 94 a8 13 	call	0x2750	; 0x2750 <csp_buffer_free_isr>
		return;
    3d52:	18 c0       	rjmp	.+48     	; 0x3d84 <csp_i2c_rx+0x6e>
	}

	/* Strip the CSP header off the length field before converting to CSP packet */
	frame->len -= sizeof(csp_id_t);
    3d54:	88 87       	std	Y+8, r24	; 0x08
    3d56:	99 87       	std	Y+9, r25	; 0x09

	/* Convert the packet from network to host order */
	packet = (csp_packet_t *) frame;
    3d58:	c0 93 bb 3e 	sts	0x3EBB, r28
    3d5c:	d0 93 bc 3e 	sts	0x3EBC, r29
	packet->id.ext = csp_ntoh32(packet->id.ext);
    3d60:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d62:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d66:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d68:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <csp_ntoh32>
    3d6c:	6a 87       	std	Y+10, r22	; 0x0a
    3d6e:	7b 87       	std	Y+11, r23	; 0x0b
    3d70:	8c 87       	std	Y+12, r24	; 0x0c
    3d72:	9d 87       	std	Y+13, r25	; 0x0d

	/* Receive the packet in CSP */
	csp_new_packet(packet, &csp_if_i2c, pxTaskWoken);
    3d74:	a8 01       	movw	r20, r16
    3d76:	67 e0       	ldi	r22, 0x07	; 7
    3d78:	70 e2       	ldi	r23, 0x20	; 32
    3d7a:	80 91 bb 3e 	lds	r24, 0x3EBB
    3d7e:	90 91 bc 3e 	lds	r25, 0x3EBC
    3d82:	e5 dc       	rcall	.-1590   	; 0x374e <csp_new_packet>

}
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	08 95       	ret

00003d8e <csp_i2c_init>:

int csp_i2c_init(uint8_t addr, int handle, int speed) {
    3d8e:	cf 92       	push	r12
    3d90:	df 92       	push	r13
    3d92:	ef 92       	push	r14
    3d94:	ff 92       	push	r15
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	e8 2f       	mov	r30, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9a 01       	movw	r18, r20

	/* Create i2c_handle */
	if (i2c_init(handle, I2C_MASTER, addr, speed, 10, 10, csp_i2c_rx) != E_NO_ERR)
    3da0:	0f 2e       	mov	r0, r31
    3da2:	fb e8       	ldi	r31, 0x8B	; 139
    3da4:	cf 2e       	mov	r12, r31
    3da6:	fe e1       	ldi	r31, 0x1E	; 30
    3da8:	df 2e       	mov	r13, r31
    3daa:	f0 2d       	mov	r31, r0
    3dac:	0f 2e       	mov	r0, r31
    3dae:	fa e0       	ldi	r31, 0x0A	; 10
    3db0:	ef 2e       	mov	r14, r31
    3db2:	f1 2c       	mov	r15, r1
    3db4:	f0 2d       	mov	r31, r0
    3db6:	0a e0       	ldi	r16, 0x0A	; 10
    3db8:	10 e0       	ldi	r17, 0x00	; 0
    3dba:	4e 2f       	mov	r20, r30
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2c_init>
    3dc4:	01 96       	adiw	r24, 0x01	; 1
    3dc6:	31 f4       	brne	.+12     	; 0x3dd4 <csp_i2c_init+0x46>
		return CSP_ERR_DRIVER;

	/* Regsiter interface */
	csp_route_add_if(&csp_if_i2c);
    3dc8:	87 e0       	ldi	r24, 0x07	; 7
    3dca:	90 e2       	ldi	r25, 0x20	; 32
    3dcc:	e9 da       	rcall	.-2606   	; 0x33a0 <csp_route_add_if>

	return CSP_ERR_NONE;
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	02 c0       	rjmp	.+4      	; 0x3dd8 <csp_i2c_init+0x4a>

int csp_i2c_init(uint8_t addr, int handle, int speed) {

	/* Create i2c_handle */
	if (i2c_init(handle, I2C_MASTER, addr, speed, 10, 10, csp_i2c_rx) != E_NO_ERR)
		return CSP_ERR_DRIVER;
    3dd4:	85 ef       	ldi	r24, 0xF5	; 245
    3dd6:	9f ef       	ldi	r25, 0xFF	; 255
	/* Regsiter interface */
	csp_route_add_if(&csp_if_i2c);

	return CSP_ERR_NONE;

}
    3dd8:	1f 91       	pop	r17
    3dda:	0f 91       	pop	r16
    3ddc:	ff 90       	pop	r15
    3dde:	ef 90       	pop	r14
    3de0:	df 90       	pop	r13
    3de2:	cf 90       	pop	r12
    3de4:	08 95       	ret

00003de6 <csp_lo_tx>:
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @param timeout Timout in ms
 * @return 1 if packet was successfully transmitted, 0 on error
 */
int csp_lo_tx(csp_iface_t * interface, csp_packet_t * packet, uint32_t timeout) {
    3de6:	cb 01       	movw	r24, r22

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_new_packet(packet, &csp_if_lo, NULL);
    3de8:	40 e0       	ldi	r20, 0x00	; 0
    3dea:	50 e0       	ldi	r21, 0x00	; 0
    3dec:	6b e3       	ldi	r22, 0x3B	; 59
    3dee:	70 e2       	ldi	r23, 0x20	; 32
    3df0:	ae dc       	rcall	.-1700   	; 0x374e <csp_new_packet>

	return CSP_ERR_NONE;

}
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	08 95       	ret

00003df8 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>
#include "../csp_port.h"
#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
    3df8:	0f 93       	push	r16
    3dfa:	1f 93       	push	r17
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	1f 92       	push	r1
    3e02:	1f 92       	push	r1
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	89 83       	std	Y+1, r24	; 0x01
    3e0a:	9a 83       	std	Y+2, r25	; 0x02
    3e0c:	8b 01       	movw	r16, r22

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
    3e0e:	0e 94 1d 14 	call	0x283a	; 0x283a <csp_conn_enqueue_packet>
    3e12:	99 23       	and	r25, r25
    3e14:	24 f4       	brge	.+8      	; 0x3e1e <csp_udp_new_packet+0x26>
		csp_log_error("Connection buffer queue full!\r\n");
		csp_buffer_free(packet);
    3e16:	c8 01       	movw	r24, r16
    3e18:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free>
		return;
    3e1c:	19 c0       	rjmp	.+50     	; 0x3e50 <csp_udp_new_packet+0x58>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
    3e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e20:	fa 81       	ldd	r31, Y+2	; 0x02
    3e22:	86 85       	ldd	r24, Z+14	; 0x0e
    3e24:	97 85       	ldd	r25, Z+15	; 0x0f
    3e26:	00 97       	sbiw	r24, 0x00	; 0
    3e28:	99 f0       	breq	.+38     	; 0x3e50 <csp_udp_new_packet+0x58>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	a9 01       	movw	r20, r18
    3e30:	be 01       	movw	r22, r28
    3e32:	6f 5f       	subi	r22, 0xFF	; 255
    3e34:	7f 4f       	sbci	r23, 0xFF	; 255
    3e36:	0e 94 cd 11 	call	0x239a	; 0x239a <csp_queue_enqueue>
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	29 f0       	breq	.+10     	; 0x3e48 <csp_udp_new_packet+0x50>
			csp_log_warn("Warning socket connection queue full\r\n");
			csp_close(conn);
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	9a 81       	ldd	r25, Y+2	; 0x02
    3e42:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <csp_close>
			return;
    3e46:	04 c0       	rjmp	.+8      	; 0x3e50 <csp_udp_new_packet+0x58>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
    3e48:	e9 81       	ldd	r30, Y+1	; 0x01
    3e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e4c:	16 86       	std	Z+14, r1	; 0x0e
    3e4e:	17 86       	std	Z+15, r1	; 0x0f
	}

}
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	08 95       	ret

00003e5e <blink>:

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    3e5e:	c0 e0       	ldi	r28, 0x00	; 0
    3e60:	d6 e0       	ldi	r29, 0x06	; 6
    3e62:	11 e0       	ldi	r17, 0x01	; 1
    3e64:	1f 83       	std	Y+7, r17	; 0x07
	
	while (1) {
				
		led_yellow_toggle();
		
        vTaskDelay(1000);
    3e66:	88 ee       	ldi	r24, 0xE8	; 232
    3e68:	93 e0       	ldi	r25, 0x03	; 3
    3e6a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <vTaskDelay>
    3e6e:	fa cf       	rjmp	.-12     	; 0x3e64 <blink+0x6>

00003e70 <main>:
	}
}

int main(void) {
    3e70:	af 92       	push	r10
    3e72:	bf 92       	push	r11
    3e74:	cf 92       	push	r12
    3e76:	df 92       	push	r13
    3e78:	ef 92       	push	r14
    3e7a:	ff 92       	push	r15
    3e7c:	0f 93       	push	r16
	
	// initialize the xMega peripherals
	boardInit();
    3e7e:	50 d6       	rcall	.+3232   	; 0x4b20 <boardInit>
	
	// Initialize the CSP buffers
	csp_buffer_init(CSP_BUFFER_COUNT, CSP_BUFFER_SIZE);
    3e80:	66 e5       	ldi	r22, 0x56	; 86
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <csp_buffer_init>
			
	// Initialize the CSP
	csp_init(CSP_MY_ADDRESS);
    3e8c:	84 e0       	ldi	r24, 0x04	; 4
    3e8e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <csp_init>
	
	// Initialize the CSP I2C interface
	csp_i2c_init(CSP_I2C_SLAVE_ADDRESS, 0, CSP_I2C_BAUDSETTING);
    3e92:	43 e2       	ldi	r20, 0x23	; 35
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	60 e0       	ldi	r22, 0x00	; 0
    3e98:	70 e0       	ldi	r23, 0x00	; 0
    3e9a:	84 e0       	ldi	r24, 0x04	; 4
    3e9c:	78 df       	rcall	.-272    	; 0x3d8e <csp_i2c_init>
					
	// Add route to OBC via i2c
	csp_route_set(CSP_OBC_ADDRESS, &csp_if_i2c, CSP_I2C_OBC_ADDRESS);
    3e9e:	41 e0       	ldi	r20, 0x01	; 1
    3ea0:	67 e0       	ldi	r22, 0x07	; 7
    3ea2:	70 e2       	ldi	r23, 0x20	; 32
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	a5 da       	rcall	.-2742   	; 0x33f2 <csp_route_set>
					
	// Start router task
	csp_route_start_task(CSP_ROUTER_STACK, CSP_ROUTER_PRIORITY);
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	84 ef       	ldi	r24, 0xF4	; 244
    3eae:	91 e0       	ldi	r25, 0x01	; 1
    3eb0:	36 da       	rcall	.-2964   	; 0x331e <csp_route_start_task>
				
	/* -------------------------------------------------------------------- */
	/*	Starts blinking task - only for debug								*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(blink, (signed char*) "blink", 64, NULL, configNORMAL_PRIORITY, NULL);
    3eb2:	a1 2c       	mov	r10, r1
    3eb4:	b1 2c       	mov	r11, r1
    3eb6:	c1 2c       	mov	r12, r1
    3eb8:	d1 2c       	mov	r13, r1
    3eba:	e1 2c       	mov	r14, r1
    3ebc:	f1 2c       	mov	r15, r1
    3ebe:	00 e0       	ldi	r16, 0x00	; 0
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e4       	ldi	r20, 0x40	; 64
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	68 eb       	ldi	r22, 0xB8	; 184
    3eca:	70 e2       	ldi	r23, 0x20	; 32
    3ecc:	8f e2       	ldi	r24, 0x2F	; 47
    3ece:	9f e1       	ldi	r25, 0x1F	; 31
    3ed0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
		
	/* -------------------------------------------------------------------- */
	/*	Starts task that handles incoming communication		 				*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(cspTask, (signed char*) "cspTask", 256, NULL, configNORMAL_PRIORITY, NULL);
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	51 e0       	ldi	r21, 0x01	; 1
    3edc:	6e eb       	ldi	r22, 0xBE	; 190
    3ede:	70 e2       	ldi	r23, 0x20	; 32
    3ee0:	8d ea       	ldi	r24, 0xAD	; 173
    3ee2:	93 e0       	ldi	r25, 0x03	; 3
    3ee4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	/* -------------------------------------------------------------------- */
	/*	Starts task that handles outgoing communication		 				*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(mainTask, (signed char*) "mainTask", 512, NULL, configNORMAL_PRIORITY, NULL);
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	52 e0       	ldi	r21, 0x02	; 2
    3ef0:	66 ec       	ldi	r22, 0xC6	; 198
    3ef2:	70 e2       	ldi	r23, 0x20	; 32
    3ef4:	80 ee       	ldi	r24, 0xE0	; 224
    3ef6:	90 e2       	ldi	r25, 0x20	; 32
    3ef8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	/* -------------------------------------------------------------------- */
	/*	Starts the scheduler and all previously created tasks				*/
	/* -------------------------------------------------------------------- */
	vTaskStartScheduler();
    3efc:	0e 94 af 0b 	call	0x175e	; 0x175e <vTaskStartScheduler>
	
	return 0;
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	0f 91       	pop	r16
    3f06:	ff 90       	pop	r15
    3f08:	ef 90       	pop	r14
    3f0a:	df 90       	pop	r13
    3f0c:	cf 90       	pop	r12
    3f0e:	bf 90       	pop	r11
    3f10:	af 90       	pop	r10
    3f12:	08 95       	ret

00003f14 <sendFreeHeapSpace>:
csp_packet_t * outcomingPacket;

/* -------------------------------------------------------------------- */
/*	Reply the free heap space in human readable form					*/
/* -------------------------------------------------------------------- */
int sendFreeHeapSpace(csp_packet_t * inPacket) {
    3f14:	8f 92       	push	r8
    3f16:	9f 92       	push	r9
    3f18:	af 92       	push	r10
    3f1a:	bf 92       	push	r11
    3f1c:	cf 92       	push	r12
    3f1e:	df 92       	push	r13
    3f20:	ef 92       	push	r14
    3f22:	ff 92       	push	r15
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	64 97       	sbiw	r28, 0x14	; 20
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	7c 01       	movw	r14, r24
	
	char msg[20];
	itoa(xPortGetFreeHeapSize(), msg, 10);
    3f38:	0e 94 1f 05 	call	0xa3e	; 0xa3e <xPortGetFreeHeapSize>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3f3c:	4a e0       	ldi	r20, 0x0A	; 10
    3f3e:	8e 01       	movw	r16, r28
    3f40:	0f 5f       	subi	r16, 0xFF	; 255
    3f42:	1f 4f       	sbci	r17, 0xFF	; 255
    3f44:	b8 01       	movw	r22, r16
    3f46:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__itoa_ncheck>
	
	/* Copy message to packet */
	strcpy(outcomingPacket->data, msg);
    3f4a:	80 91 66 3f 	lds	r24, 0x3F66
    3f4e:	90 91 67 3f 	lds	r25, 0x3F67
    3f52:	b8 01       	movw	r22, r16
    3f54:	0e 96       	adiw	r24, 0x0e	; 14
    3f56:	0e 94 ac 2b 	call	0x5758	; 0x5758 <strcpy>
	outcomingPacket->length = strlen(msg);
    3f5a:	c0 90 66 3f 	lds	r12, 0x3F66
    3f5e:	d0 90 67 3f 	lds	r13, 0x3F67
    3f62:	f8 01       	movw	r30, r16
    3f64:	01 90       	ld	r0, Z+
    3f66:	00 20       	and	r0, r0
    3f68:	e9 f7       	brne	.-6      	; 0x3f64 <sendFreeHeapSpace+0x50>
    3f6a:	31 97       	sbiw	r30, 0x01	; 1
    3f6c:	e0 1b       	sub	r30, r16
    3f6e:	f1 0b       	sbc	r31, r17
    3f70:	d6 01       	movw	r26, r12
    3f72:	18 96       	adiw	r26, 0x08	; 8
    3f74:	ed 93       	st	X+, r30
    3f76:	fc 93       	st	X, r31
    3f78:	19 97       	sbiw	r26, 0x09	; 9

	/* Send packet */
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, outcomingPacket, 1000) == CSP_ERR_NONE) {
    3f7a:	f7 01       	movw	r30, r14
    3f7c:	43 85       	ldd	r20, Z+11	; 0x0b
    3f7e:	84 2f       	mov	r24, r20
    3f80:	82 95       	swap	r24
    3f82:	86 95       	lsr	r24
    3f84:	86 95       	lsr	r24
    3f86:	83 70       	andi	r24, 0x03	; 3
    3f88:	24 85       	ldd	r18, Z+12	; 0x0c
    3f8a:	2f 70       	andi	r18, 0x0F	; 15
    3f8c:	22 0f       	add	r18, r18
    3f8e:	22 0f       	add	r18, r18
    3f90:	28 2b       	or	r18, r24
    3f92:	4f 73       	andi	r20, 0x3F	; 63
    3f94:	65 85       	ldd	r22, Z+13	; 0x0d
    3f96:	66 95       	lsr	r22
    3f98:	6f 71       	andi	r22, 0x1F	; 31
    3f9a:	0f 2e       	mov	r0, r31
    3f9c:	f8 ee       	ldi	r31, 0xE8	; 232
    3f9e:	8f 2e       	mov	r8, r31
    3fa0:	f3 e0       	ldi	r31, 0x03	; 3
    3fa2:	9f 2e       	mov	r9, r31
    3fa4:	a1 2c       	mov	r10, r1
    3fa6:	b1 2c       	mov	r11, r1
    3fa8:	f0 2d       	mov	r31, r0
    3faa:	e1 2c       	mov	r14, r1
    3fac:	f1 2c       	mov	r15, r1
    3fae:	87 01       	movw	r16, r14
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	7a d8       	rcall	.-3852   	; 0x30a8 <csp_sendto>
    3fb4:	89 2b       	or	r24, r25
    3fb6:	21 f4       	brne	.+8      	; 0x3fc0 <sendFreeHeapSpace+0xac>
    3fb8:	80 e1       	ldi	r24, 0x10	; 16
    3fba:	e0 e0       	ldi	r30, 0x00	; 0
    3fbc:	f6 e0       	ldi	r31, 0x06	; 6
    3fbe:	87 83       	std	Z+7, r24	; 0x07
	} else {
		/* Send failed */
	}

	return 0;
}
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	64 96       	adiw	r28, 0x14	; 20
    3fc6:	cd bf       	out	0x3d, r28	; 61
    3fc8:	de bf       	out	0x3e, r29	; 62
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	1f 91       	pop	r17
    3fd0:	0f 91       	pop	r16
    3fd2:	ff 90       	pop	r15
    3fd4:	ef 90       	pop	r14
    3fd6:	df 90       	pop	r13
    3fd8:	cf 90       	pop	r12
    3fda:	bf 90       	pop	r11
    3fdc:	af 90       	pop	r10
    3fde:	9f 90       	pop	r9
    3fe0:	8f 90       	pop	r8
    3fe2:	08 95       	ret

00003fe4 <houseKeeping>:

/* -------------------------------------------------------------------- */
/*	Reply with some status info message									*/
/* -------------------------------------------------------------------- */
int houseKeeping(csp_packet_t * inPacket) {
    3fe4:	4f 92       	push	r4
    3fe6:	5f 92       	push	r5
    3fe8:	6f 92       	push	r6
    3fea:	7f 92       	push	r7
    3fec:	8f 92       	push	r8
    3fee:	9f 92       	push	r9
    3ff0:	af 92       	push	r10
    3ff2:	bf 92       	push	r11
    3ff4:	cf 92       	push	r12
    3ff6:	df 92       	push	r13
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	c0 54       	subi	r28, 0x40	; 64
    400a:	d1 09       	sbc	r29, r1
    400c:	cd bf       	out	0x3d, r28	; 61
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	7c 01       	movw	r14, r24
	
	// put the info message into the packet
	char msg[64];
	sprintf(msg, "*** Board\n\rSoftware v1.0\n\rUptime: %id %ih %im %ds\n\r", (int16_t) hoursTimer/24, (int16_t) hoursTimer%24, (int16_t) secondsTimer/60, (int16_t) secondsTimer%60);
    4012:	80 91 78 3f 	lds	r24, 0x3F78
    4016:	90 91 79 3f 	lds	r25, 0x3F79
    401a:	a0 91 7a 3f 	lds	r26, 0x3F7A
    401e:	b0 91 7b 3f 	lds	r27, 0x3F7B
    4022:	40 90 78 3f 	lds	r4, 0x3F78
    4026:	50 90 79 3f 	lds	r5, 0x3F79
    402a:	60 90 7a 3f 	lds	r6, 0x3F7A
    402e:	70 90 7b 3f 	lds	r7, 0x3F7B
    4032:	80 90 70 3f 	lds	r8, 0x3F70
    4036:	90 90 71 3f 	lds	r9, 0x3F71
    403a:	a0 90 72 3f 	lds	r10, 0x3F72
    403e:	b0 90 73 3f 	lds	r11, 0x3F73
    4042:	00 91 70 3f 	lds	r16, 0x3F70
    4046:	10 91 71 3f 	lds	r17, 0x3F71
    404a:	20 91 72 3f 	lds	r18, 0x3F72
    404e:	30 91 73 3f 	lds	r19, 0x3F73
    4052:	ec e3       	ldi	r30, 0x3C	; 60
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	bf 01       	movw	r22, r30
    4058:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    405c:	9f 93       	push	r25
    405e:	8f 93       	push	r24
    4060:	c2 01       	movw	r24, r4
    4062:	bf 01       	movw	r22, r30
    4064:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    4068:	7f 93       	push	r23
    406a:	6f 93       	push	r22
    406c:	e8 e1       	ldi	r30, 0x18	; 24
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	c4 01       	movw	r24, r8
    4072:	bf 01       	movw	r22, r30
    4074:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    4078:	9f 93       	push	r25
    407a:	8f 93       	push	r24
    407c:	c8 01       	movw	r24, r16
    407e:	bf 01       	movw	r22, r30
    4080:	0e 94 0e 2a 	call	0x541c	; 0x541c <__divmodhi4>
    4084:	7f 93       	push	r23
    4086:	6f 93       	push	r22
    4088:	8f ec       	ldi	r24, 0xCF	; 207
    408a:	90 e2       	ldi	r25, 0x20	; 32
    408c:	9f 93       	push	r25
    408e:	8f 93       	push	r24
    4090:	8e 01       	movw	r16, r28
    4092:	0f 5f       	subi	r16, 0xFF	; 255
    4094:	1f 4f       	sbci	r17, 0xFF	; 255
    4096:	1f 93       	push	r17
    4098:	0f 93       	push	r16
    409a:	0e 94 30 2c 	call	0x5860	; 0x5860 <sprintf>

	strcpy(outcomingPacket->data, msg);
    409e:	80 91 66 3f 	lds	r24, 0x3F66
    40a2:	90 91 67 3f 	lds	r25, 0x3F67
    40a6:	b8 01       	movw	r22, r16
    40a8:	0e 96       	adiw	r24, 0x0e	; 14
    40aa:	0e 94 ac 2b 	call	0x5758	; 0x5758 <strcpy>
	outcomingPacket->length = strlen(msg);
    40ae:	c0 90 66 3f 	lds	r12, 0x3F66
    40b2:	d0 90 67 3f 	lds	r13, 0x3F67
    40b6:	f8 01       	movw	r30, r16
    40b8:	01 90       	ld	r0, Z+
    40ba:	00 20       	and	r0, r0
    40bc:	e9 f7       	brne	.-6      	; 0x40b8 <__stack+0xb9>
    40be:	31 97       	sbiw	r30, 0x01	; 1
    40c0:	e0 1b       	sub	r30, r16
    40c2:	f1 0b       	sbc	r31, r17
    40c4:	d6 01       	movw	r26, r12
    40c6:	18 96       	adiw	r26, 0x08	; 8
    40c8:	ed 93       	st	X+, r30
    40ca:	fc 93       	st	X, r31
    40cc:	19 97       	sbiw	r26, 0x09	; 9

	/* Send packet */
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, outcomingPacket, 1000) == CSP_ERR_NONE) {
    40ce:	f7 01       	movw	r30, r14
    40d0:	43 85       	ldd	r20, Z+11	; 0x0b
    40d2:	84 2f       	mov	r24, r20
    40d4:	82 95       	swap	r24
    40d6:	86 95       	lsr	r24
    40d8:	86 95       	lsr	r24
    40da:	83 70       	andi	r24, 0x03	; 3
    40dc:	24 85       	ldd	r18, Z+12	; 0x0c
    40de:	2f 70       	andi	r18, 0x0F	; 15
    40e0:	22 0f       	add	r18, r18
    40e2:	22 0f       	add	r18, r18
    40e4:	28 2b       	or	r18, r24
    40e6:	4f 73       	andi	r20, 0x3F	; 63
    40e8:	65 85       	ldd	r22, Z+13	; 0x0d
    40ea:	66 95       	lsr	r22
    40ec:	6f 71       	andi	r22, 0x1F	; 31
    40ee:	0f 2e       	mov	r0, r31
    40f0:	f8 ee       	ldi	r31, 0xE8	; 232
    40f2:	8f 2e       	mov	r8, r31
    40f4:	f3 e0       	ldi	r31, 0x03	; 3
    40f6:	9f 2e       	mov	r9, r31
    40f8:	a1 2c       	mov	r10, r1
    40fa:	b1 2c       	mov	r11, r1
    40fc:	f0 2d       	mov	r31, r0
    40fe:	e1 2c       	mov	r14, r1
    4100:	f1 2c       	mov	r15, r1
    4102:	87 01       	movw	r16, r14
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	0e 94 54 18 	call	0x30a8	; 0x30a8 <csp_sendto>
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	89 2b       	or	r24, r25
    4110:	21 f4       	brne	.+8      	; 0x411a <__stack+0x11b>
    4112:	80 e1       	ldi	r24, 0x10	; 16
    4114:	e0 e0       	ldi	r30, 0x00	; 0
    4116:	f6 e0       	ldi	r31, 0x06	; 6
    4118:	87 83       	std	Z+7, r24	; 0x07
	} else {
		/* Send failed */
	}

	return 0;
}
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	c0 5c       	subi	r28, 0xC0	; 192
    4120:	df 4f       	sbci	r29, 0xFF	; 255
    4122:	cd bf       	out	0x3d, r28	; 61
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	ff 90       	pop	r15
    4130:	ef 90       	pop	r14
    4132:	df 90       	pop	r13
    4134:	cf 90       	pop	r12
    4136:	bf 90       	pop	r11
    4138:	af 90       	pop	r10
    413a:	9f 90       	pop	r9
    413c:	8f 90       	pop	r8
    413e:	7f 90       	pop	r7
    4140:	6f 90       	pop	r6
    4142:	5f 90       	pop	r5
    4144:	4f 90       	pop	r4
    4146:	08 95       	ret

00004148 <echoBack>:

/* -------------------------------------------------------------------- */
/*	Sends back the incoming packet										*/
/* -------------------------------------------------------------------- */
int echoBack(csp_packet_t * inPacket) {
    4148:	8f 92       	push	r8
    414a:	9f 92       	push	r9
    414c:	af 92       	push	r10
    414e:	bf 92       	push	r11
    4150:	cf 92       	push	r12
    4152:	df 92       	push	r13
    4154:	ef 92       	push	r14
    4156:	ff 92       	push	r15
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	fc 01       	movw	r30, r24

	/* Send packet */
	// reuses the incoming packet for the response
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, inPacket, 1000) == CSP_ERR_NONE) {
    415e:	43 85       	ldd	r20, Z+11	; 0x0b
    4160:	84 2f       	mov	r24, r20
    4162:	82 95       	swap	r24
    4164:	86 95       	lsr	r24
    4166:	86 95       	lsr	r24
    4168:	83 70       	andi	r24, 0x03	; 3
    416a:	24 85       	ldd	r18, Z+12	; 0x0c
    416c:	2f 70       	andi	r18, 0x0F	; 15
    416e:	22 0f       	add	r18, r18
    4170:	22 0f       	add	r18, r18
    4172:	28 2b       	or	r18, r24
    4174:	4f 73       	andi	r20, 0x3F	; 63
    4176:	65 85       	ldd	r22, Z+13	; 0x0d
    4178:	66 95       	lsr	r22
    417a:	6f 71       	andi	r22, 0x1F	; 31
    417c:	0f 2e       	mov	r0, r31
    417e:	f8 ee       	ldi	r31, 0xE8	; 232
    4180:	8f 2e       	mov	r8, r31
    4182:	f3 e0       	ldi	r31, 0x03	; 3
    4184:	9f 2e       	mov	r9, r31
    4186:	a1 2c       	mov	r10, r1
    4188:	b1 2c       	mov	r11, r1
    418a:	f0 2d       	mov	r31, r0
    418c:	6f 01       	movw	r12, r30
    418e:	e1 2c       	mov	r14, r1
    4190:	f1 2c       	mov	r15, r1
    4192:	87 01       	movw	r16, r14
    4194:	82 e0       	ldi	r24, 0x02	; 2
    4196:	0e 94 54 18 	call	0x30a8	; 0x30a8 <csp_sendto>
    419a:	89 2b       	or	r24, r25
    419c:	21 f4       	brne	.+8      	; 0x41a6 <echoBack+0x5e>
    419e:	80 e1       	ldi	r24, 0x10	; 16
    41a0:	e0 e0       	ldi	r30, 0x00	; 0
    41a2:	f6 e0       	ldi	r31, 0x06	; 6
    41a4:	87 83       	std	Z+7, r24	; 0x07
	} else {
		/* Send failed */
	}

	return 0;
}
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	df 90       	pop	r13
    41b4:	cf 90       	pop	r12
    41b6:	bf 90       	pop	r11
    41b8:	af 90       	pop	r10
    41ba:	9f 90       	pop	r9
    41bc:	8f 90       	pop	r8
    41be:	08 95       	ret

000041c0 <mainTask>:

/* -------------------------------------------------------------------- */
/*	The main task														*/
/* -------------------------------------------------------------------- */
void mainTask(void *p) {
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	00 d0       	rcall	.+0      	; 0x41c6 <mainTask+0x6>
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
	
	/* The variable used to receive from the queue. */
	xCSPStackEvent_t xReceivedEvent;
	
	outcomingPacket = csp_buffer_get(CSP_PACKET_SIZE);
    41ca:	88 e4       	ldi	r24, 0x48	; 72
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 6e 13 	call	0x26dc	; 0x26dc <csp_buffer_get>
    41d2:	80 93 66 3f 	sts	0x3F66, r24
    41d6:	90 93 67 3f 	sts	0x3F67, r25
	// infinite while loop of the program 
	while (1) {
		
		// the queue between cspTask and the main task
		// this is unblocking way how to read from the queue, the last parameter is "ticks to wait"
		if (xQueueReceive(xCSPEventQueue, &xReceivedEvent, 1)) {
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	41 e0       	ldi	r20, 0x01	; 1
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	be 01       	movw	r22, r28
    41e2:	6f 5f       	subi	r22, 0xFF	; 255
    41e4:	7f 4f       	sbci	r23, 0xFF	; 255
    41e6:	80 91 bd 3e 	lds	r24, 0x3EBD
    41ea:	90 91 be 3e 	lds	r25, 0x3EBE
    41ee:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    41f2:	88 23       	and	r24, r24
    41f4:	91 f3       	breq	.-28     	; 0x41da <mainTask+0x1a>
		
			switch( xReceivedEvent.eEventType )
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	81 30       	cpi	r24, 0x01	; 1
    41fa:	21 f0       	breq	.+8      	; 0x4204 <mainTask+0x44>
    41fc:	38 f0       	brcs	.+14     	; 0x420c <mainTask+0x4c>
    41fe:	82 30       	cpi	r24, 0x02	; 2
    4200:	49 f0       	breq	.+18     	; 0x4214 <mainTask+0x54>
    4202:	eb cf       	rjmp	.-42     	; 0x41da <mainTask+0x1a>
			{
				// Reply with RTOS free heap space
				// replies in Human Readable form
				case freeHeapEvent :
			
					sendFreeHeapSpace(xReceivedEvent.pvData);
    4204:	8a 81       	ldd	r24, Y+2	; 0x02
    4206:	9b 81       	ldd	r25, Y+3	; 0x03
    4208:	85 de       	rcall	.-758    	; 0x3f14 <sendFreeHeapSpace>
			
				break;
    420a:	e7 cf       	rjmp	.-50     	; 0x41da <mainTask+0x1a>
			
				// Echo back the whole packet
				// incoming port => outcoming
				case echoBackEvent :
			
					echoBack(xReceivedEvent.pvData);
    420c:	8a 81       	ldd	r24, Y+2	; 0x02
    420e:	9b 81       	ldd	r25, Y+3	; 0x03
    4210:	9b df       	rcall	.-202    	; 0x4148 <echoBack>
			
				break;
    4212:	e3 cf       	rjmp	.-58     	; 0x41da <mainTask+0x1a>
			
				// sends the info about the system
				case housKeepingEvent :
			
					houseKeeping(xReceivedEvent.pvData);
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
    4216:	9b 81       	ldd	r25, Y+3	; 0x03
    4218:	e5 de       	rcall	.-566    	; 0x3fe4 <houseKeeping>
			
				break;
    421a:	df cf       	rjmp	.-66     	; 0x41da <mainTask+0x1a>

0000421c <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    421c:	fc 01       	movw	r30, r24
    421e:	20 81       	ld	r18, Z
    4220:	20 7f       	andi	r18, 0xF0	; 240
    4222:	62 2b       	or	r22, r18
    4224:	60 83       	st	Z, r22
    4226:	08 95       	ret

00004228 <TC1_ConfigClockSource>:
    4228:	fc 01       	movw	r30, r24
    422a:	20 81       	ld	r18, Z
    422c:	20 7f       	andi	r18, 0xF0	; 240
    422e:	62 2b       	or	r22, r18
    4230:	60 83       	st	Z, r22
    4232:	08 95       	ret

00004234 <TC0_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    4234:	fc 01       	movw	r30, r24
    4236:	26 81       	ldd	r18, Z+6	; 0x06
    4238:	2c 7f       	andi	r18, 0xFC	; 252
    423a:	62 2b       	or	r22, r18
    423c:	66 83       	std	Z+6, r22	; 0x06
    423e:	08 95       	ret

00004240 <TC1_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    4240:	fc 01       	movw	r30, r24
    4242:	26 81       	ldd	r18, Z+6	; 0x06
    4244:	2c 7f       	andi	r18, 0xFC	; 252
    4246:	62 2b       	or	r22, r18
    4248:	66 83       	std	Z+6, r22	; 0x06
    424a:	08 95       	ret

0000424c <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    424c:	fc 01       	movw	r30, r24
    424e:	60 83       	st	Z, r22
    4250:	71 83       	std	Z+1, r23	; 0x01
    4252:	48 63       	ori	r20, 0x38	; 56
    4254:	db 01       	movw	r26, r22
    4256:	11 96       	adiw	r26, 0x01	; 1
    4258:	4c 93       	st	X, r20
    425a:	a0 81       	ld	r26, Z
    425c:	b1 81       	ldd	r27, Z+1	; 0x01
    425e:	15 96       	adiw	r26, 0x05	; 5
    4260:	2c 93       	st	X, r18
    4262:	01 90       	ld	r0, Z+
    4264:	f0 81       	ld	r31, Z
    4266:	e0 2d       	mov	r30, r0
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	84 83       	std	Z+4, r24	; 0x04
    426c:	08 95       	ret

0000426e <TWI_MasterWriteRead>:
    426e:	0f 93       	push	r16
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	29 34       	cpi	r18, 0x49	; 73
    4276:	08 f0       	brcs	.+2      	; 0x427a <TWI_MasterWriteRead+0xc>
    4278:	4f c0       	rjmp	.+158    	; 0x4318 <TWI_MasterWriteRead+0xaa>
    427a:	02 30       	cpi	r16, 0x02	; 2
    427c:	08 f0       	brcs	.+2      	; 0x4280 <TWI_MasterWriteRead+0x12>
    427e:	4e c0       	rjmp	.+156    	; 0x431c <TWI_MasterWriteRead+0xae>
    4280:	fc 01       	movw	r30, r24
    4282:	e0 5b       	subi	r30, 0xB0	; 176
    4284:	ff 4f       	sbci	r31, 0xFF	; 255
    4286:	30 81       	ld	r19, Z
    4288:	31 11       	cpse	r19, r1
    428a:	4a c0       	rjmp	.+148    	; 0x4320 <TWI_MasterWriteRead+0xb2>
    428c:	31 e0       	ldi	r19, 0x01	; 1
    428e:	30 83       	st	Z, r19
    4290:	31 96       	adiw	r30, 0x01	; 1
    4292:	10 82       	st	Z, r1
    4294:	66 0f       	add	r22, r22
    4296:	dc 01       	movw	r26, r24
    4298:	12 96       	adiw	r26, 0x02	; 2
    429a:	6c 93       	st	X, r22
    429c:	22 23       	and	r18, r18
    429e:	a1 f0       	breq	.+40     	; 0x42c8 <TWI_MasterWriteRead+0x5a>
    42a0:	ea 01       	movw	r28, r20
    42a2:	ba 01       	movw	r22, r20
    42a4:	6f 5f       	subi	r22, 0xFF	; 255
    42a6:	7f 4f       	sbci	r23, 0xFF	; 255
    42a8:	3f ef       	ldi	r19, 0xFF	; 255
    42aa:	32 0f       	add	r19, r18
    42ac:	63 0f       	add	r22, r19
    42ae:	71 1d       	adc	r23, r1
    42b0:	fa 01       	movw	r30, r20
    42b2:	df 01       	movw	r26, r30
    42b4:	ac 1b       	sub	r26, r28
    42b6:	bd 0b       	sbc	r27, r29
    42b8:	31 91       	ld	r19, Z+
    42ba:	a8 0f       	add	r26, r24
    42bc:	b9 1f       	adc	r27, r25
    42be:	13 96       	adiw	r26, 0x03	; 3
    42c0:	3c 93       	st	X, r19
    42c2:	e6 17       	cp	r30, r22
    42c4:	f7 07       	cpc	r31, r23
    42c6:	a9 f7       	brne	.-22     	; 0x42b2 <TWI_MasterWriteRead+0x44>
    42c8:	fc 01       	movw	r30, r24
    42ca:	e4 5b       	subi	r30, 0xB4	; 180
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	20 83       	st	Z, r18
    42d0:	dc 01       	movw	r26, r24
    42d2:	a3 5b       	subi	r26, 0xB3	; 179
    42d4:	bf 4f       	sbci	r27, 0xFF	; 255
    42d6:	0c 93       	st	X, r16
    42d8:	11 96       	adiw	r26, 0x01	; 1
    42da:	1c 92       	st	X, r1
    42dc:	11 96       	adiw	r26, 0x01	; 1
    42de:	1c 92       	st	X, r1
    42e0:	20 81       	ld	r18, Z
    42e2:	22 23       	and	r18, r18
    42e4:	49 f0       	breq	.+18     	; 0x42f8 <TWI_MasterWriteRead+0x8a>
    42e6:	fc 01       	movw	r30, r24
    42e8:	22 81       	ldd	r18, Z+2	; 0x02
    42ea:	2e 7f       	andi	r18, 0xFE	; 254
    42ec:	01 90       	ld	r0, Z+
    42ee:	f0 81       	ld	r31, Z
    42f0:	e0 2d       	mov	r30, r0
    42f2:	26 83       	std	Z+6, r18	; 0x06
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	17 c0       	rjmp	.+46     	; 0x4326 <TWI_MasterWriteRead+0xb8>
    42f8:	fc 01       	movw	r30, r24
    42fa:	e3 5b       	subi	r30, 0xB3	; 179
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	20 81       	ld	r18, Z
    4300:	22 23       	and	r18, r18
    4302:	81 f0       	breq	.+32     	; 0x4324 <TWI_MasterWriteRead+0xb6>
    4304:	dc 01       	movw	r26, r24
    4306:	12 96       	adiw	r26, 0x02	; 2
    4308:	2c 91       	ld	r18, X
    430a:	12 97       	sbiw	r26, 0x02	; 2
    430c:	21 60       	ori	r18, 0x01	; 1
    430e:	ed 91       	ld	r30, X+
    4310:	fc 91       	ld	r31, X
    4312:	26 83       	std	Z+6, r18	; 0x06
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	07 c0       	rjmp	.+14     	; 0x4326 <TWI_MasterWriteRead+0xb8>
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	05 c0       	rjmp	.+10     	; 0x4326 <TWI_MasterWriteRead+0xb8>
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	03 c0       	rjmp	.+6      	; 0x4326 <TWI_MasterWriteRead+0xb8>
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	01 c0       	rjmp	.+2      	; 0x4326 <TWI_MasterWriteRead+0xb8>
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	df 91       	pop	r29
    4328:	cf 91       	pop	r28
    432a:	0f 91       	pop	r16
    432c:	08 95       	ret

0000432e <TWI_MasterWrite>:
    432e:	0f 93       	push	r16
    4330:	00 e0       	ldi	r16, 0x00	; 0
    4332:	9d df       	rcall	.-198    	; 0x426e <TWI_MasterWriteRead>
    4334:	0f 91       	pop	r16
    4336:	08 95       	ret

00004338 <TWI_MasterArbitrationLostBusErrorHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4338:	dc 01       	movw	r26, r24
    433a:	ed 91       	ld	r30, X+
    433c:	fc 91       	ld	r31, X
    433e:	11 97       	sbiw	r26, 0x01	; 1
    4340:	24 81       	ldd	r18, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    4342:	22 ff       	sbrs	r18, 2
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <TWI_MasterArbitrationLostBusErrorHandler+0x18>
		twi->result = TWIM_RESULT_BUS_ERROR;
    4346:	34 e0       	ldi	r19, 0x04	; 4
    4348:	af 5a       	subi	r26, 0xAF	; 175
    434a:	bf 4f       	sbci	r27, 0xFF	; 255
    434c:	3c 93       	st	X, r19
    434e:	05 c0       	rjmp	.+10     	; 0x435a <TWI_MasterArbitrationLostBusErrorHandler+0x22>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    4350:	33 e0       	ldi	r19, 0x03	; 3
    4352:	dc 01       	movw	r26, r24
    4354:	af 5a       	subi	r26, 0xAF	; 175
    4356:	bf 4f       	sbci	r27, 0xFF	; 255
    4358:	3c 93       	st	X, r19
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    435a:	28 60       	ori	r18, 0x08	; 8
    435c:	24 83       	std	Z+4, r18	; 0x04

	twi->status = TWIM_STATUS_READY;
    435e:	fc 01       	movw	r30, r24
    4360:	e0 5b       	subi	r30, 0xB0	; 176
    4362:	ff 4f       	sbci	r31, 0xFF	; 255
    4364:	10 82       	st	Z, r1
    4366:	08 95       	ret

00004368 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    436c:	fc 01       	movw	r30, r24
    436e:	e4 5b       	subi	r30, 0xB4	; 180
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	30 81       	ld	r19, Z
	uint8_t bytesToRead   = twi->bytesToRead;
    4374:	31 96       	adiw	r30, 0x01	; 1
    4376:	40 81       	ld	r20, Z

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    4378:	dc 01       	movw	r26, r24
    437a:	ed 91       	ld	r30, X+
    437c:	fc 91       	ld	r31, X
    437e:	24 81       	ldd	r18, Z+4	; 0x04
    4380:	24 ff       	sbrs	r18, 4
    4382:	0a c0       	rjmp	.+20     	; 0x4398 <TWI_MasterWriteHandler+0x30>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4384:	23 e0       	ldi	r18, 0x03	; 3
    4386:	23 83       	std	Z+3, r18	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    4388:	fc 01       	movw	r30, r24
    438a:	ef 5a       	subi	r30, 0xAF	; 175
    438c:	ff 4f       	sbci	r31, 0xFF	; 255
    438e:	25 e0       	ldi	r18, 0x05	; 5
    4390:	20 83       	st	Z, r18
		twi->status = TWIM_STATUS_READY;
    4392:	31 97       	sbiw	r30, 0x01	; 1
    4394:	10 82       	st	Z, r1
    4396:	25 c0       	rjmp	.+74     	; 0x43e2 <TWI_MasterWriteHandler+0x7a>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    4398:	dc 01       	movw	r26, r24
    439a:	a2 5b       	subi	r26, 0xB2	; 178
    439c:	bf 4f       	sbci	r27, 0xFF	; 255
    439e:	2c 91       	ld	r18, X
    43a0:	23 17       	cp	r18, r19
    43a2:	50 f4       	brcc	.+20     	; 0x43b8 <TWI_MasterWriteHandler+0x50>
		uint8_t data = twi->writeData[twi->bytesWritten];
    43a4:	2c 91       	ld	r18, X
    43a6:	ec 01       	movw	r28, r24
    43a8:	c2 0f       	add	r28, r18
    43aa:	d1 1d       	adc	r29, r1
    43ac:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    43ae:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    43b0:	8c 91       	ld	r24, X
    43b2:	8f 5f       	subi	r24, 0xFF	; 255
    43b4:	8c 93       	st	X, r24
    43b6:	15 c0       	rjmp	.+42     	; 0x43e2 <TWI_MasterWriteHandler+0x7a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    43b8:	dc 01       	movw	r26, r24
    43ba:	a1 5b       	subi	r26, 0xB1	; 177
    43bc:	bf 4f       	sbci	r27, 0xFF	; 255
    43be:	2c 91       	ld	r18, X
    43c0:	24 17       	cp	r18, r20
    43c2:	30 f4       	brcc	.+12     	; 0x43d0 <TWI_MasterWriteHandler+0x68>
		uint8_t readAddress = twi->address | 0x01;
    43c4:	dc 01       	movw	r26, r24
    43c6:	12 96       	adiw	r26, 0x02	; 2
    43c8:	8c 91       	ld	r24, X
    43ca:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    43cc:	86 83       	std	Z+6, r24	; 0x06
    43ce:	09 c0       	rjmp	.+18     	; 0x43e2 <TWI_MasterWriteHandler+0x7a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    43d0:	23 e0       	ldi	r18, 0x03	; 3
    43d2:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    43d4:	fc 01       	movw	r30, r24
    43d6:	ef 5a       	subi	r30, 0xAF	; 175
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	21 e0       	ldi	r18, 0x01	; 1
    43dc:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    43de:	31 97       	sbiw	r30, 0x01	; 1
    43e0:	10 82       	st	Z, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    43e2:	df 91       	pop	r29
    43e4:	cf 91       	pop	r28
    43e6:	08 95       	ret

000043e8 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    43e8:	fc 01       	movw	r30, r24
    43ea:	e1 5b       	subi	r30, 0xB1	; 177
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	20 81       	ld	r18, Z
    43f0:	21 11       	cpse	r18, r1
    43f2:	12 c0       	rjmp	.+36     	; 0x4418 <TWI_MasterReadHandler+0x30>
		uint8_t data = twi->interface->MASTER.DATA;
    43f4:	dc 01       	movw	r26, r24
    43f6:	ed 91       	ld	r30, X+
    43f8:	fc 91       	ld	r31, X
    43fa:	11 97       	sbiw	r26, 0x01	; 1
    43fc:	27 81       	ldd	r18, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    43fe:	fc 01       	movw	r30, r24
    4400:	e1 5b       	subi	r30, 0xB1	; 177
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	30 81       	ld	r19, Z
    4406:	a3 0f       	add	r26, r19
    4408:	b1 1d       	adc	r27, r1
    440a:	a5 5b       	subi	r26, 0xB5	; 181
    440c:	bf 4f       	sbci	r27, 0xFF	; 255
    440e:	2c 93       	st	X, r18
		twi->bytesRead++;
    4410:	20 81       	ld	r18, Z
    4412:	2f 5f       	subi	r18, 0xFF	; 255
    4414:	20 83       	st	Z, r18
    4416:	0c c0       	rjmp	.+24     	; 0x4430 <TWI_MasterReadHandler+0x48>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4418:	dc 01       	movw	r26, r24
    441a:	ed 91       	ld	r30, X+
    441c:	fc 91       	ld	r31, X
    441e:	23 e0       	ldi	r18, 0x03	; 3
    4420:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4422:	22 e0       	ldi	r18, 0x02	; 2
    4424:	fc 01       	movw	r30, r24
    4426:	ef 5a       	subi	r30, 0xAF	; 175
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    442c:	31 97       	sbiw	r30, 0x01	; 1
    442e:	10 82       	st	Z, r1
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    4430:	fc 01       	movw	r30, r24
    4432:	e3 5b       	subi	r30, 0xB3	; 179
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	30 81       	ld	r19, Z

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    4438:	32 96       	adiw	r30, 0x02	; 2
    443a:	20 81       	ld	r18, Z
    443c:	23 17       	cp	r18, r19
    443e:	30 f4       	brcc	.+12     	; 0x444c <TWI_MasterReadHandler+0x64>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    4440:	dc 01       	movw	r26, r24
    4442:	ed 91       	ld	r30, X+
    4444:	fc 91       	ld	r31, X
    4446:	82 e0       	ldi	r24, 0x02	; 2
    4448:	83 83       	std	Z+3, r24	; 0x03
    444a:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    444c:	dc 01       	movw	r26, r24
    444e:	ed 91       	ld	r30, X+
    4450:	fc 91       	ld	r31, X
    4452:	27 e0       	ldi	r18, 0x07	; 7
    4454:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4456:	fc 01       	movw	r30, r24
    4458:	ef 5a       	subi	r30, 0xAF	; 175
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	21 e0       	ldi	r18, 0x01	; 1
    445e:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    4460:	31 97       	sbiw	r30, 0x01	; 1
    4462:	10 82       	st	Z, r1
    4464:	08 95       	ret

00004466 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4466:	dc 01       	movw	r26, r24
    4468:	ed 91       	ld	r30, X+
    446a:	fc 91       	ld	r31, X
    446c:	24 81       	ldd	r18, Z+4	; 0x04
    446e:	32 2f       	mov	r19, r18
    4470:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    4472:	11 f0       	breq	.+4      	; 0x4478 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    4474:	61 cf       	rjmp	.-318    	; 0x4338 <TWI_MasterArbitrationLostBusErrorHandler>
    4476:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    4478:	26 ff       	sbrs	r18, 6
    447a:	02 c0       	rjmp	.+4      	; 0x4480 <TWI_MasterInterruptHandler+0x1a>
		TWI_MasterWriteHandler(twi);
    447c:	75 cf       	rjmp	.-278    	; 0x4368 <TWI_MasterWriteHandler>
    447e:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    4480:	22 23       	and	r18, r18
    4482:	14 f4       	brge	.+4      	; 0x4488 <TWI_MasterInterruptHandler+0x22>
		TWI_MasterReadHandler(twi);
    4484:	b1 cf       	rjmp	.-158    	; 0x43e8 <TWI_MasterReadHandler>
    4486:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4488:	fc 01       	movw	r30, r24
    448a:	ef 5a       	subi	r30, 0xAF	; 175
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	26 e0       	ldi	r18, 0x06	; 6
    4490:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    4492:	31 97       	sbiw	r30, 0x01	; 1
    4494:	10 82       	st	Z, r1
    4496:	08 95       	ret

00004498 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
    4498:	fc 01       	movw	r30, r24
    449a:	60 83       	st	Z, r22
    449c:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
    449e:	42 83       	std	Z+2, r20	; 0x02
    44a0:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
    44a2:	e3 5b       	subi	r30, 0xB3	; 179
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	10 82       	st	Z, r1
	twi->bytesSent = 0;
    44a8:	31 96       	adiw	r30, 0x01	; 1
    44aa:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
    44ac:	31 96       	adiw	r30, 0x01	; 1
    44ae:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
    44b0:	31 96       	adiw	r30, 0x01	; 1
    44b2:	10 82       	st	Z, r1
	twi->abort = false;
    44b4:	31 96       	adiw	r30, 0x01	; 1
    44b6:	10 82       	st	Z, r1
    44b8:	08 95       	ret

000044ba <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
    44ba:	dc 01       	movw	r26, r24
    44bc:	ed 91       	ld	r30, X+
    44be:	fc 91       	ld	r31, X
    44c0:	11 97       	sbiw	r26, 0x01	; 1
    44c2:	48 63       	ori	r20, 0x38	; 56
    44c4:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
    44c6:	ed 91       	ld	r30, X+
    44c8:	fc 91       	ld	r31, X
    44ca:	66 0f       	add	r22, r22
    44cc:	63 87       	std	Z+11, r22	; 0x0b
    44ce:	08 95       	ret

000044d0 <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    44d0:	fc 01       	movw	r30, r24
    44d2:	e0 5b       	subi	r30, 0xB0	; 176
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
    44d8:	31 97       	sbiw	r30, 0x01	; 1
    44da:	10 82       	st	Z, r1
	

	/* Process data. */
	twi->Process_Data();
    44dc:	dc 01       	movw	r26, r24
    44de:	12 96       	adiw	r26, 0x02	; 2
    44e0:	ed 91       	ld	r30, X+
    44e2:	fc 91       	ld	r31, X
    44e4:	13 97       	sbiw	r26, 0x03	; 3
    44e6:	19 95       	eicall
    44e8:	08 95       	ret

000044ea <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
    44f0:	fc 01       	movw	r30, r24
    44f2:	ef 5a       	subi	r30, 0xAF	; 175
    44f4:	ff 4f       	sbci	r31, 0xFF	; 255
    44f6:	80 81       	ld	r24, Z
    44f8:	88 23       	and	r24, r24
    44fa:	59 f0       	breq	.+22     	; 0x4512 <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    44fc:	e8 81       	ld	r30, Y
    44fe:	f9 81       	ldd	r31, Y+1	; 0x01
    4500:	82 e0       	ldi	r24, 0x02	; 2
    4502:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
    4504:	66 e0       	ldi	r22, 0x06	; 6
    4506:	ce 01       	movw	r24, r28
    4508:	e3 df       	rcall	.-58     	; 0x44d0 <TWI_SlaveTransactionFinished>
		twi->abort = false;
    450a:	cf 5a       	subi	r28, 0xAF	; 175
    450c:	df 4f       	sbci	r29, 0xFF	; 255
    450e:	18 82       	st	Y, r1
    4510:	16 c0       	rjmp	.+44     	; 0x453e <TWI_SlaveAddressMatchHandler+0x54>
	} else {
		twi->status = TWIS_STATUS_BUSY;
    4512:	fe 01       	movw	r30, r28
    4514:	e1 5b       	subi	r30, 0xB1	; 177
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
    451c:	31 96       	adiw	r30, 0x01	; 1
    451e:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    4520:	e8 81       	ld	r30, Y
    4522:	f9 81       	ldd	r31, Y+1	; 0x01
    4524:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    4526:	8b 7f       	andi	r24, 0xFB	; 251
    4528:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
    452a:	fe 01       	movw	r30, r28
    452c:	e3 5b       	subi	r30, 0xB3	; 179
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    4532:	31 96       	adiw	r30, 0x01	; 1
    4534:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    4536:	e8 81       	ld	r30, Y
    4538:	f9 81       	ldd	r31, Y+1	; 0x01
    453a:	83 e0       	ldi	r24, 0x03	; 3
    453c:	81 87       	std	Z+9, r24	; 0x09
	}
}
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	08 95       	ret

00004544 <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    4544:	dc 01       	movw	r26, r24
    4546:	ed 91       	ld	r30, X+
    4548:	fc 91       	ld	r31, X
    454a:	11 97       	sbiw	r26, 0x01	; 1
    454c:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    454e:	2b 7f       	andi	r18, 0xFB	; 251
    4550:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    4552:	ed 91       	ld	r30, X+
    4554:	fc 91       	ld	r31, X
    4556:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
    4558:	20 64       	ori	r18, 0x40	; 64
    455a:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
    455c:	61 e0       	ldi	r22, 0x01	; 1
    455e:	b8 cf       	rjmp	.-144    	; 0x44d0 <TWI_SlaveTransactionFinished>
    4560:	08 95       	ret

00004562 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    4568:	e8 81       	ld	r30, Y
    456a:	f9 81       	ldd	r31, Y+1	; 0x01
    456c:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
    456e:	84 60       	ori	r24, 0x04	; 4
    4570:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
    4572:	fe 01       	movw	r30, r28
    4574:	e3 5b       	subi	r30, 0xB3	; 179
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 81       	ld	r24, Z
    457a:	88 34       	cpi	r24, 0x48	; 72
    457c:	10 f5       	brcc	.+68     	; 0x45c2 <TWI_SlaveReadHandler+0x60>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
    457e:	68 81       	ld	r22, Y
    4580:	79 81       	ldd	r23, Y+1	; 0x01
    4582:	db 01       	movw	r26, r22
    4584:	1c 96       	adiw	r26, 0x0c	; 12
    4586:	2c 91       	ld	r18, X
		twi->receivedData[twi->bytesReceived] = data;
    4588:	80 81       	ld	r24, Z
    458a:	ae 01       	movw	r20, r28
    458c:	48 0f       	add	r20, r24
    458e:	51 1d       	adc	r21, r1
    4590:	da 01       	movw	r26, r20
    4592:	14 96       	adiw	r26, 0x04	; 4
    4594:	2c 93       	st	X, r18

		twi->bytesReceived++;
    4596:	80 81       	ld	r24, Z
    4598:	8f 5f       	subi	r24, 0xFF	; 255
    459a:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
    459c:	34 96       	adiw	r30, 0x04	; 4
    459e:	80 81       	ld	r24, Z
    45a0:	88 23       	and	r24, r24
    45a2:	51 f0       	breq	.+20     	; 0x45b8 <TWI_SlaveReadHandler+0x56>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    45a4:	82 e0       	ldi	r24, 0x02	; 2
    45a6:	fb 01       	movw	r30, r22
    45a8:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
    45aa:	66 e0       	ldi	r22, 0x06	; 6
    45ac:	ce 01       	movw	r24, r28
    45ae:	90 df       	rcall	.-224    	; 0x44d0 <TWI_SlaveTransactionFinished>
			twi->abort = false;
    45b0:	cf 5a       	subi	r28, 0xAF	; 175
    45b2:	df 4f       	sbci	r29, 0xFF	; 255
    45b4:	18 82       	st	Y, r1
    45b6:	0c c0       	rjmp	.+24     	; 0x45d0 <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    45b8:	83 e0       	ldi	r24, 0x03	; 3
    45ba:	db 01       	movw	r26, r22
    45bc:	19 96       	adiw	r26, 0x09	; 9
    45be:	8c 93       	st	X, r24
    45c0:	07 c0       	rjmp	.+14     	; 0x45d0 <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
    45c2:	e8 81       	ld	r30, Y
    45c4:	f9 81       	ldd	r31, Y+1	; 0x01
    45c6:	86 e0       	ldi	r24, 0x06	; 6
    45c8:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
    45ca:	62 e0       	ldi	r22, 0x02	; 2
    45cc:	ce 01       	movw	r24, r28
    45ce:	80 df       	rcall	.-256    	; 0x44d0 <TWI_SlaveTransactionFinished>
	}
}
    45d0:	df 91       	pop	r29
    45d2:	cf 91       	pop	r28
    45d4:	08 95       	ret

000045d6 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
    45d6:	cf 93       	push	r28
    45d8:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
    45da:	fc 01       	movw	r30, r24
    45dc:	e2 5b       	subi	r30, 0xB2	; 178
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	20 81       	ld	r18, Z
    45e2:	22 23       	and	r18, r18
    45e4:	59 f0       	breq	.+22     	; 0x45fc <TWI_SlaveWriteHandler+0x26>
    45e6:	dc 01       	movw	r26, r24
    45e8:	ed 91       	ld	r30, X+
    45ea:	fc 91       	ld	r31, X
    45ec:	22 85       	ldd	r18, Z+10	; 0x0a
    45ee:	24 ff       	sbrs	r18, 4
    45f0:	05 c0       	rjmp	.+10     	; 0x45fc <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    45f2:	22 e0       	ldi	r18, 0x02	; 2
    45f4:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
    45f6:	61 e0       	ldi	r22, 0x01	; 1
    45f8:	6b df       	rcall	.-298    	; 0x44d0 <TWI_SlaveTransactionFinished>
    45fa:	21 c0       	rjmp	.+66     	; 0x463e <TWI_SlaveWriteHandler+0x68>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
    45fc:	fc 01       	movw	r30, r24
    45fe:	e2 5b       	subi	r30, 0xB2	; 178
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	20 81       	ld	r18, Z
    4604:	21 11       	cpse	r18, r1
    4606:	14 c0       	rjmp	.+40     	; 0x4630 <TWI_SlaveWriteHandler+0x5a>
			uint8_t data = twi->sendData[twi->bytesSent];
    4608:	20 81       	ld	r18, Z
    460a:	dc 01       	movw	r26, r24
    460c:	a2 0f       	add	r26, r18
    460e:	b1 1d       	adc	r27, r1
    4610:	a4 5b       	subi	r26, 0xB4	; 180
    4612:	bf 4f       	sbci	r27, 0xFF	; 255
    4614:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
    4616:	ec 01       	movw	r28, r24
    4618:	a8 81       	ld	r26, Y
    461a:	b9 81       	ldd	r27, Y+1	; 0x01
    461c:	1c 96       	adiw	r26, 0x0c	; 12
    461e:	2c 93       	st	X, r18
			twi->bytesSent++;
    4620:	20 81       	ld	r18, Z
    4622:	2f 5f       	subi	r18, 0xFF	; 255
    4624:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    4626:	e8 81       	ld	r30, Y
    4628:	f9 81       	ldd	r31, Y+1	; 0x01
    462a:	83 e0       	ldi	r24, 0x03	; 3
    462c:	81 87       	std	Z+9, r24	; 0x09
    462e:	07 c0       	rjmp	.+14     	; 0x463e <TWI_SlaveWriteHandler+0x68>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    4630:	dc 01       	movw	r26, r24
    4632:	ed 91       	ld	r30, X+
    4634:	fc 91       	ld	r31, X
    4636:	22 e0       	ldi	r18, 0x02	; 2
    4638:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
    463a:	62 e0       	ldi	r22, 0x02	; 2
    463c:	49 df       	rcall	.-366    	; 0x44d0 <TWI_SlaveTransactionFinished>
		}
	}
}
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	08 95       	ret

00004644 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
    4644:	dc 01       	movw	r26, r24
    4646:	ed 91       	ld	r30, X+
    4648:	fc 91       	ld	r31, X
    464a:	22 85       	ldd	r18, Z+10	; 0x0a
    464c:	21 ff       	sbrs	r18, 1
    464e:	02 c0       	rjmp	.+4      	; 0x4654 <TWI_SlaveDataHandler+0x10>
		TWI_SlaveWriteHandler(twi);
    4650:	c2 cf       	rjmp	.-124    	; 0x45d6 <TWI_SlaveWriteHandler>
    4652:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
    4654:	86 cf       	rjmp	.-244    	; 0x4562 <TWI_SlaveReadHandler>
    4656:	08 95       	ret

00004658 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    4658:	dc 01       	movw	r26, r24
    465a:	ed 91       	ld	r30, X+
    465c:	fc 91       	ld	r31, X
    465e:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
    4660:	22 ff       	sbrs	r18, 2
    4662:	0c c0       	rjmp	.+24     	; 0x467c <TWI_SlaveInterruptHandler+0x24>
		twi->bytesReceived = 0;
    4664:	fc 01       	movw	r30, r24
    4666:	e3 5b       	subi	r30, 0xB3	; 179
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    466c:	31 96       	adiw	r30, 0x01	; 1
    466e:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
    4670:	32 96       	adiw	r30, 0x02	; 2
    4672:	24 e0       	ldi	r18, 0x04	; 4
    4674:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
    4676:	31 97       	sbiw	r30, 0x01	; 1
    4678:	10 82       	st	Z, r1
    467a:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
    467c:	23 ff       	sbrs	r18, 3
    467e:	0c c0       	rjmp	.+24     	; 0x4698 <TWI_SlaveInterruptHandler+0x40>
		twi->bytesReceived = 0;
    4680:	fc 01       	movw	r30, r24
    4682:	e3 5b       	subi	r30, 0xB3	; 179
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    4688:	31 96       	adiw	r30, 0x01	; 1
    468a:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
    468c:	32 96       	adiw	r30, 0x02	; 2
    468e:	23 e0       	ldi	r18, 0x03	; 3
    4690:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
    4692:	31 97       	sbiw	r30, 0x01	; 1
    4694:	10 82       	st	Z, r1
    4696:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
    4698:	42 2f       	mov	r20, r18
    469a:	40 74       	andi	r20, 0x40	; 64
    469c:	32 2f       	mov	r19, r18
    469e:	31 74       	andi	r19, 0x41	; 65
    46a0:	31 34       	cpi	r19, 0x41	; 65
    46a2:	11 f4       	brne	.+4      	; 0x46a8 <TWI_SlaveInterruptHandler+0x50>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
    46a4:	22 cf       	rjmp	.-444    	; 0x44ea <TWI_SlaveAddressMatchHandler>
    46a6:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
    46a8:	44 23       	and	r20, r20
    46aa:	11 f0       	breq	.+4      	; 0x46b0 <TWI_SlaveInterruptHandler+0x58>
		TWI_SlaveStopHandler(twi);
    46ac:	4b cf       	rjmp	.-362    	; 0x4544 <TWI_SlaveStopHandler>
    46ae:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
    46b0:	22 23       	and	r18, r18
    46b2:	14 f4       	brge	.+4      	; 0x46b8 <TWI_SlaveInterruptHandler+0x60>
		TWI_SlaveDataHandler(twi);
    46b4:	c7 cf       	rjmp	.-114    	; 0x4644 <TWI_SlaveDataHandler>
    46b6:	08 95       	ret
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
    46b8:	65 e0       	ldi	r22, 0x05	; 5
    46ba:	0a cf       	rjmp	.-492    	; 0x44d0 <TWI_SlaveTransactionFinished>
    46bc:	08 95       	ret

000046be <__vector_25>:
 *  as argument.
 */
ISR(USARTC0_RXC_vect){ if( USART_RXComplete(usartBufferC) ) taskYIELD(); }
ISR(USARTD0_RXC_vect){ if( USART_RXComplete(usartBufferD) ) taskYIELD(); }
ISR(USARTE0_RXC_vect){ if( USART_RXComplete(usartBufferE) ) taskYIELD(); }
ISR(USARTF0_RXC_vect){ if( USART_RXComplete(usartBufferF) ) taskYIELD(); }
    46be:	1f 92       	push	r1
    46c0:	0f 92       	push	r0
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	0f 92       	push	r0
    46c6:	11 24       	eor	r1, r1
    46c8:	08 b6       	in	r0, 0x38	; 56
    46ca:	0f 92       	push	r0
    46cc:	18 be       	out	0x38, r1	; 56
    46ce:	09 b6       	in	r0, 0x39	; 57
    46d0:	0f 92       	push	r0
    46d2:	19 be       	out	0x39, r1	; 57
    46d4:	0a b6       	in	r0, 0x3a	; 58
    46d6:	0f 92       	push	r0
    46d8:	1a be       	out	0x3a, r1	; 58
    46da:	0b b6       	in	r0, 0x3b	; 59
    46dc:	0f 92       	push	r0
    46de:	1b be       	out	0x3b, r1	; 59
    46e0:	2f 93       	push	r18
    46e2:	3f 93       	push	r19
    46e4:	4f 93       	push	r20
    46e6:	5f 93       	push	r21
    46e8:	6f 93       	push	r22
    46ea:	7f 93       	push	r23
    46ec:	8f 93       	push	r24
    46ee:	9f 93       	push	r25
    46f0:	af 93       	push	r26
    46f2:	bf 93       	push	r27
    46f4:	ef 93       	push	r30
    46f6:	ff 93       	push	r31
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	1f 92       	push	r1
    46fe:	1f 92       	push	r1
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	e0 91 6e 3f 	lds	r30, 0x3F6E
    4708:	f0 91 6f 3f 	lds	r31, 0x3F6F
    470c:	1a 82       	std	Y+2, r1	; 0x02
    470e:	a0 81       	ld	r26, Z
    4710:	b1 81       	ldd	r27, Z+1	; 0x01
    4712:	8c 91       	ld	r24, X
    4714:	89 83       	std	Y+1, r24	; 0x01
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	ae 01       	movw	r20, r28
    471a:	4e 5f       	subi	r20, 0xFE	; 254
    471c:	5f 4f       	sbci	r21, 0xFF	; 255
    471e:	be 01       	movw	r22, r28
    4720:	6f 5f       	subi	r22, 0xFF	; 255
    4722:	7f 4f       	sbci	r23, 0xFF	; 255
    4724:	83 81       	ldd	r24, Z+3	; 0x03
    4726:	94 81       	ldd	r25, Z+4	; 0x04
    4728:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	81 11       	cpse	r24, r1
    4730:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    4734:	0f 90       	pop	r0
    4736:	0f 90       	pop	r0
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	ff 91       	pop	r31
    473e:	ef 91       	pop	r30
    4740:	bf 91       	pop	r27
    4742:	af 91       	pop	r26
    4744:	9f 91       	pop	r25
    4746:	8f 91       	pop	r24
    4748:	7f 91       	pop	r23
    474a:	6f 91       	pop	r22
    474c:	5f 91       	pop	r21
    474e:	4f 91       	pop	r20
    4750:	3f 91       	pop	r19
    4752:	2f 91       	pop	r18
    4754:	0f 90       	pop	r0
    4756:	0b be       	out	0x3b, r0	; 59
    4758:	0f 90       	pop	r0
    475a:	0a be       	out	0x3a, r0	; 58
    475c:	0f 90       	pop	r0
    475e:	09 be       	out	0x39, r0	; 57
    4760:	0f 90       	pop	r0
    4762:	08 be       	out	0x38, r0	; 56
    4764:	0f 90       	pop	r0
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	0f 90       	pop	r0
    476a:	1f 90       	pop	r1
    476c:	18 95       	reti

0000476e <__vector_88>:
    476e:	1f 92       	push	r1
    4770:	0f 92       	push	r0
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	0f 92       	push	r0
    4776:	11 24       	eor	r1, r1
    4778:	08 b6       	in	r0, 0x38	; 56
    477a:	0f 92       	push	r0
    477c:	18 be       	out	0x38, r1	; 56
    477e:	09 b6       	in	r0, 0x39	; 57
    4780:	0f 92       	push	r0
    4782:	19 be       	out	0x39, r1	; 57
    4784:	0a b6       	in	r0, 0x3a	; 58
    4786:	0f 92       	push	r0
    4788:	1a be       	out	0x3a, r1	; 58
    478a:	0b b6       	in	r0, 0x3b	; 59
    478c:	0f 92       	push	r0
    478e:	1b be       	out	0x3b, r1	; 59
    4790:	2f 93       	push	r18
    4792:	3f 93       	push	r19
    4794:	4f 93       	push	r20
    4796:	5f 93       	push	r21
    4798:	6f 93       	push	r22
    479a:	7f 93       	push	r23
    479c:	8f 93       	push	r24
    479e:	9f 93       	push	r25
    47a0:	af 93       	push	r26
    47a2:	bf 93       	push	r27
    47a4:	ef 93       	push	r30
    47a6:	ff 93       	push	r31
    47a8:	cf 93       	push	r28
    47aa:	df 93       	push	r29
    47ac:	1f 92       	push	r1
    47ae:	1f 92       	push	r1
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
    47b4:	e0 91 6c 3f 	lds	r30, 0x3F6C
    47b8:	f0 91 6d 3f 	lds	r31, 0x3F6D
    47bc:	1a 82       	std	Y+2, r1	; 0x02
    47be:	a0 81       	ld	r26, Z
    47c0:	b1 81       	ldd	r27, Z+1	; 0x01
    47c2:	8c 91       	ld	r24, X
    47c4:	89 83       	std	Y+1, r24	; 0x01
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	ae 01       	movw	r20, r28
    47ca:	4e 5f       	subi	r20, 0xFE	; 254
    47cc:	5f 4f       	sbci	r21, 0xFF	; 255
    47ce:	be 01       	movw	r22, r28
    47d0:	6f 5f       	subi	r22, 0xFF	; 255
    47d2:	7f 4f       	sbci	r23, 0xFF	; 255
    47d4:	83 81       	ldd	r24, Z+3	; 0x03
    47d6:	94 81       	ldd	r25, Z+4	; 0x04
    47d8:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    47dc:	8a 81       	ldd	r24, Y+2	; 0x02
    47de:	81 11       	cpse	r24, r1
    47e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	ff 91       	pop	r31
    47ee:	ef 91       	pop	r30
    47f0:	bf 91       	pop	r27
    47f2:	af 91       	pop	r26
    47f4:	9f 91       	pop	r25
    47f6:	8f 91       	pop	r24
    47f8:	7f 91       	pop	r23
    47fa:	6f 91       	pop	r22
    47fc:	5f 91       	pop	r21
    47fe:	4f 91       	pop	r20
    4800:	3f 91       	pop	r19
    4802:	2f 91       	pop	r18
    4804:	0f 90       	pop	r0
    4806:	0b be       	out	0x3b, r0	; 59
    4808:	0f 90       	pop	r0
    480a:	0a be       	out	0x3a, r0	; 58
    480c:	0f 90       	pop	r0
    480e:	09 be       	out	0x39, r0	; 57
    4810:	0f 90       	pop	r0
    4812:	08 be       	out	0x38, r0	; 56
    4814:	0f 90       	pop	r0
    4816:	0f be       	out	0x3f, r0	; 63
    4818:	0f 90       	pop	r0
    481a:	1f 90       	pop	r1
    481c:	18 95       	reti

0000481e <__vector_58>:
    481e:	1f 92       	push	r1
    4820:	0f 92       	push	r0
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	0f 92       	push	r0
    4826:	11 24       	eor	r1, r1
    4828:	08 b6       	in	r0, 0x38	; 56
    482a:	0f 92       	push	r0
    482c:	18 be       	out	0x38, r1	; 56
    482e:	09 b6       	in	r0, 0x39	; 57
    4830:	0f 92       	push	r0
    4832:	19 be       	out	0x39, r1	; 57
    4834:	0a b6       	in	r0, 0x3a	; 58
    4836:	0f 92       	push	r0
    4838:	1a be       	out	0x3a, r1	; 58
    483a:	0b b6       	in	r0, 0x3b	; 59
    483c:	0f 92       	push	r0
    483e:	1b be       	out	0x3b, r1	; 59
    4840:	2f 93       	push	r18
    4842:	3f 93       	push	r19
    4844:	4f 93       	push	r20
    4846:	5f 93       	push	r21
    4848:	6f 93       	push	r22
    484a:	7f 93       	push	r23
    484c:	8f 93       	push	r24
    484e:	9f 93       	push	r25
    4850:	af 93       	push	r26
    4852:	bf 93       	push	r27
    4854:	ef 93       	push	r30
    4856:	ff 93       	push	r31
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	1f 92       	push	r1
    485e:	1f 92       	push	r1
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
    4864:	e0 91 6a 3f 	lds	r30, 0x3F6A
    4868:	f0 91 6b 3f 	lds	r31, 0x3F6B
    486c:	1a 82       	std	Y+2, r1	; 0x02
    486e:	a0 81       	ld	r26, Z
    4870:	b1 81       	ldd	r27, Z+1	; 0x01
    4872:	8c 91       	ld	r24, X
    4874:	89 83       	std	Y+1, r24	; 0x01
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	ae 01       	movw	r20, r28
    487a:	4e 5f       	subi	r20, 0xFE	; 254
    487c:	5f 4f       	sbci	r21, 0xFF	; 255
    487e:	be 01       	movw	r22, r28
    4880:	6f 5f       	subi	r22, 0xFF	; 255
    4882:	7f 4f       	sbci	r23, 0xFF	; 255
    4884:	83 81       	ldd	r24, Z+3	; 0x03
    4886:	94 81       	ldd	r25, Z+4	; 0x04
    4888:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    488c:	8a 81       	ldd	r24, Y+2	; 0x02
    488e:	81 11       	cpse	r24, r1
    4890:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	ff 91       	pop	r31
    489e:	ef 91       	pop	r30
    48a0:	bf 91       	pop	r27
    48a2:	af 91       	pop	r26
    48a4:	9f 91       	pop	r25
    48a6:	8f 91       	pop	r24
    48a8:	7f 91       	pop	r23
    48aa:	6f 91       	pop	r22
    48ac:	5f 91       	pop	r21
    48ae:	4f 91       	pop	r20
    48b0:	3f 91       	pop	r19
    48b2:	2f 91       	pop	r18
    48b4:	0f 90       	pop	r0
    48b6:	0b be       	out	0x3b, r0	; 59
    48b8:	0f 90       	pop	r0
    48ba:	0a be       	out	0x3a, r0	; 58
    48bc:	0f 90       	pop	r0
    48be:	09 be       	out	0x39, r0	; 57
    48c0:	0f 90       	pop	r0
    48c2:	08 be       	out	0x38, r0	; 56
    48c4:	0f 90       	pop	r0
    48c6:	0f be       	out	0x3f, r0	; 63
    48c8:	0f 90       	pop	r0
    48ca:	1f 90       	pop	r1
    48cc:	18 95       	reti

000048ce <__vector_26>:
 *
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
    48ce:	1f 92       	push	r1
    48d0:	0f 92       	push	r0
    48d2:	0f b6       	in	r0, 0x3f	; 63
    48d4:	0f 92       	push	r0
    48d6:	11 24       	eor	r1, r1
    48d8:	08 b6       	in	r0, 0x38	; 56
    48da:	0f 92       	push	r0
    48dc:	18 be       	out	0x38, r1	; 56
    48de:	09 b6       	in	r0, 0x39	; 57
    48e0:	0f 92       	push	r0
    48e2:	19 be       	out	0x39, r1	; 57
    48e4:	0a b6       	in	r0, 0x3a	; 58
    48e6:	0f 92       	push	r0
    48e8:	1a be       	out	0x3a, r1	; 58
    48ea:	0b b6       	in	r0, 0x3b	; 59
    48ec:	0f 92       	push	r0
    48ee:	1b be       	out	0x3b, r1	; 59
    48f0:	0f 93       	push	r16
    48f2:	1f 93       	push	r17
    48f4:	2f 93       	push	r18
    48f6:	3f 93       	push	r19
    48f8:	4f 93       	push	r20
    48fa:	5f 93       	push	r21
    48fc:	6f 93       	push	r22
    48fe:	7f 93       	push	r23
    4900:	8f 93       	push	r24
    4902:	9f 93       	push	r25
    4904:	af 93       	push	r26
    4906:	bf 93       	push	r27
    4908:	ef 93       	push	r30
    490a:	ff 93       	push	r31
    490c:	cf 93       	push	r28
    490e:	df 93       	push	r29
    4910:	1f 92       	push	r1
    4912:	1f 92       	push	r1
    4914:	cd b7       	in	r28, 0x3d	; 61
    4916:	de b7       	in	r29, 0x3e	; 62
    4918:	00 91 6e 3f 	lds	r16, 0x3F6E
    491c:	10 91 6f 3f 	lds	r17, 0x3F6F
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    4920:	ae 01       	movw	r20, r28
    4922:	4f 5f       	subi	r20, 0xFF	; 255
    4924:	5f 4f       	sbci	r21, 0xFF	; 255
    4926:	be 01       	movw	r22, r28
    4928:	6e 5f       	subi	r22, 0xFE	; 254
    492a:	7f 4f       	sbci	r23, 0xFF	; 255
    492c:	d8 01       	movw	r26, r16
    492e:	15 96       	adiw	r26, 0x05	; 5
    4930:	8d 91       	ld	r24, X+
    4932:	9c 91       	ld	r25, X
    4934:	16 97       	sbiw	r26, 0x06	; 6
    4936:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    493a:	81 30       	cpi	r24, 0x01	; 1
    493c:	31 f4       	brne	.+12     	; 0x494a <__vector_26+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    493e:	d8 01       	movw	r26, r16
    4940:	ed 91       	ld	r30, X+
    4942:	fc 91       	ld	r31, X
    4944:	8a 81       	ldd	r24, Y+2	; 0x02
    4946:	80 83       	st	Z, r24
    4948:	06 c0       	rjmp	.+12     	; 0x4956 <__vector_26+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    494a:	d8 01       	movw	r26, r16
    494c:	ed 91       	ld	r30, X+
    494e:	fc 91       	ld	r31, X
    4950:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4952:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4954:	83 83       	std	Z+3, r24	; 0x03
 *
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
    4956:	0f 90       	pop	r0
    4958:	0f 90       	pop	r0
    495a:	df 91       	pop	r29
    495c:	cf 91       	pop	r28
    495e:	ff 91       	pop	r31
    4960:	ef 91       	pop	r30
    4962:	bf 91       	pop	r27
    4964:	af 91       	pop	r26
    4966:	9f 91       	pop	r25
    4968:	8f 91       	pop	r24
    496a:	7f 91       	pop	r23
    496c:	6f 91       	pop	r22
    496e:	5f 91       	pop	r21
    4970:	4f 91       	pop	r20
    4972:	3f 91       	pop	r19
    4974:	2f 91       	pop	r18
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	0f 90       	pop	r0
    497c:	0b be       	out	0x3b, r0	; 59
    497e:	0f 90       	pop	r0
    4980:	0a be       	out	0x3a, r0	; 58
    4982:	0f 90       	pop	r0
    4984:	09 be       	out	0x39, r0	; 57
    4986:	0f 90       	pop	r0
    4988:	08 be       	out	0x38, r0	; 56
    498a:	0f 90       	pop	r0
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	0f 90       	pop	r0
    4990:	1f 90       	pop	r1
    4992:	18 95       	reti

00004994 <__vector_89>:
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
    4994:	1f 92       	push	r1
    4996:	0f 92       	push	r0
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	0f 92       	push	r0
    499c:	11 24       	eor	r1, r1
    499e:	08 b6       	in	r0, 0x38	; 56
    49a0:	0f 92       	push	r0
    49a2:	18 be       	out	0x38, r1	; 56
    49a4:	09 b6       	in	r0, 0x39	; 57
    49a6:	0f 92       	push	r0
    49a8:	19 be       	out	0x39, r1	; 57
    49aa:	0a b6       	in	r0, 0x3a	; 58
    49ac:	0f 92       	push	r0
    49ae:	1a be       	out	0x3a, r1	; 58
    49b0:	0b b6       	in	r0, 0x3b	; 59
    49b2:	0f 92       	push	r0
    49b4:	1b be       	out	0x3b, r1	; 59
    49b6:	0f 93       	push	r16
    49b8:	1f 93       	push	r17
    49ba:	2f 93       	push	r18
    49bc:	3f 93       	push	r19
    49be:	4f 93       	push	r20
    49c0:	5f 93       	push	r21
    49c2:	6f 93       	push	r22
    49c4:	7f 93       	push	r23
    49c6:	8f 93       	push	r24
    49c8:	9f 93       	push	r25
    49ca:	af 93       	push	r26
    49cc:	bf 93       	push	r27
    49ce:	ef 93       	push	r30
    49d0:	ff 93       	push	r31
    49d2:	cf 93       	push	r28
    49d4:	df 93       	push	r29
    49d6:	1f 92       	push	r1
    49d8:	1f 92       	push	r1
    49da:	cd b7       	in	r28, 0x3d	; 61
    49dc:	de b7       	in	r29, 0x3e	; 62
    49de:	00 91 6c 3f 	lds	r16, 0x3F6C
    49e2:	10 91 6d 3f 	lds	r17, 0x3F6D
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    49e6:	ae 01       	movw	r20, r28
    49e8:	4f 5f       	subi	r20, 0xFF	; 255
    49ea:	5f 4f       	sbci	r21, 0xFF	; 255
    49ec:	be 01       	movw	r22, r28
    49ee:	6e 5f       	subi	r22, 0xFE	; 254
    49f0:	7f 4f       	sbci	r23, 0xFF	; 255
    49f2:	d8 01       	movw	r26, r16
    49f4:	15 96       	adiw	r26, 0x05	; 5
    49f6:	8d 91       	ld	r24, X+
    49f8:	9c 91       	ld	r25, X
    49fa:	16 97       	sbiw	r26, 0x06	; 6
    49fc:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    4a00:	81 30       	cpi	r24, 0x01	; 1
    4a02:	31 f4       	brne	.+12     	; 0x4a10 <__vector_89+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    4a04:	d8 01       	movw	r26, r16
    4a06:	ed 91       	ld	r30, X+
    4a08:	fc 91       	ld	r31, X
    4a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0c:	80 83       	st	Z, r24
    4a0e:	06 c0       	rjmp	.+12     	; 0x4a1c <__vector_89+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    4a10:	d8 01       	movw	r26, r16
    4a12:	ed 91       	ld	r30, X+
    4a14:	fc 91       	ld	r31, X
    4a16:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4a18:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4a1a:	83 83       	std	Z+3, r24	; 0x03
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
    4a1c:	0f 90       	pop	r0
    4a1e:	0f 90       	pop	r0
    4a20:	df 91       	pop	r29
    4a22:	cf 91       	pop	r28
    4a24:	ff 91       	pop	r31
    4a26:	ef 91       	pop	r30
    4a28:	bf 91       	pop	r27
    4a2a:	af 91       	pop	r26
    4a2c:	9f 91       	pop	r25
    4a2e:	8f 91       	pop	r24
    4a30:	7f 91       	pop	r23
    4a32:	6f 91       	pop	r22
    4a34:	5f 91       	pop	r21
    4a36:	4f 91       	pop	r20
    4a38:	3f 91       	pop	r19
    4a3a:	2f 91       	pop	r18
    4a3c:	1f 91       	pop	r17
    4a3e:	0f 91       	pop	r16
    4a40:	0f 90       	pop	r0
    4a42:	0b be       	out	0x3b, r0	; 59
    4a44:	0f 90       	pop	r0
    4a46:	0a be       	out	0x3a, r0	; 58
    4a48:	0f 90       	pop	r0
    4a4a:	09 be       	out	0x39, r0	; 57
    4a4c:	0f 90       	pop	r0
    4a4e:	08 be       	out	0x38, r0	; 56
    4a50:	0f 90       	pop	r0
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	0f 90       	pop	r0
    4a56:	1f 90       	pop	r1
    4a58:	18 95       	reti

00004a5a <__vector_59>:
ISR(USARTE0_DRE_vect){USART_DataRegEmpty(usartBufferE);}
    4a5a:	1f 92       	push	r1
    4a5c:	0f 92       	push	r0
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	0f 92       	push	r0
    4a62:	11 24       	eor	r1, r1
    4a64:	08 b6       	in	r0, 0x38	; 56
    4a66:	0f 92       	push	r0
    4a68:	18 be       	out	0x38, r1	; 56
    4a6a:	09 b6       	in	r0, 0x39	; 57
    4a6c:	0f 92       	push	r0
    4a6e:	19 be       	out	0x39, r1	; 57
    4a70:	0a b6       	in	r0, 0x3a	; 58
    4a72:	0f 92       	push	r0
    4a74:	1a be       	out	0x3a, r1	; 58
    4a76:	0b b6       	in	r0, 0x3b	; 59
    4a78:	0f 92       	push	r0
    4a7a:	1b be       	out	0x3b, r1	; 59
    4a7c:	0f 93       	push	r16
    4a7e:	1f 93       	push	r17
    4a80:	2f 93       	push	r18
    4a82:	3f 93       	push	r19
    4a84:	4f 93       	push	r20
    4a86:	5f 93       	push	r21
    4a88:	6f 93       	push	r22
    4a8a:	7f 93       	push	r23
    4a8c:	8f 93       	push	r24
    4a8e:	9f 93       	push	r25
    4a90:	af 93       	push	r26
    4a92:	bf 93       	push	r27
    4a94:	ef 93       	push	r30
    4a96:	ff 93       	push	r31
    4a98:	cf 93       	push	r28
    4a9a:	df 93       	push	r29
    4a9c:	1f 92       	push	r1
    4a9e:	1f 92       	push	r1
    4aa0:	cd b7       	in	r28, 0x3d	; 61
    4aa2:	de b7       	in	r29, 0x3e	; 62
    4aa4:	00 91 6a 3f 	lds	r16, 0x3F6A
    4aa8:	10 91 6b 3f 	lds	r17, 0x3F6B
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    4aac:	ae 01       	movw	r20, r28
    4aae:	4f 5f       	subi	r20, 0xFF	; 255
    4ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ab2:	be 01       	movw	r22, r28
    4ab4:	6e 5f       	subi	r22, 0xFE	; 254
    4ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ab8:	d8 01       	movw	r26, r16
    4aba:	15 96       	adiw	r26, 0x05	; 5
    4abc:	8d 91       	ld	r24, X+
    4abe:	9c 91       	ld	r25, X
    4ac0:	16 97       	sbiw	r26, 0x06	; 6
    4ac2:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    4ac6:	81 30       	cpi	r24, 0x01	; 1
    4ac8:	31 f4       	brne	.+12     	; 0x4ad6 <__vector_59+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    4aca:	d8 01       	movw	r26, r16
    4acc:	ed 91       	ld	r30, X+
    4ace:	fc 91       	ld	r31, X
    4ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad2:	80 83       	st	Z, r24
    4ad4:	06 c0       	rjmp	.+12     	; 0x4ae2 <__vector_59+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    4ad6:	d8 01       	movw	r26, r16
    4ad8:	ed 91       	ld	r30, X+
    4ada:	fc 91       	ld	r31, X
    4adc:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4ade:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4ae0:	83 83       	std	Z+3, r24	; 0x03
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
ISR(USARTE0_DRE_vect){USART_DataRegEmpty(usartBufferE);}
    4ae2:	0f 90       	pop	r0
    4ae4:	0f 90       	pop	r0
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	ff 91       	pop	r31
    4aec:	ef 91       	pop	r30
    4aee:	bf 91       	pop	r27
    4af0:	af 91       	pop	r26
    4af2:	9f 91       	pop	r25
    4af4:	8f 91       	pop	r24
    4af6:	7f 91       	pop	r23
    4af8:	6f 91       	pop	r22
    4afa:	5f 91       	pop	r21
    4afc:	4f 91       	pop	r20
    4afe:	3f 91       	pop	r19
    4b00:	2f 91       	pop	r18
    4b02:	1f 91       	pop	r17
    4b04:	0f 91       	pop	r16
    4b06:	0f 90       	pop	r0
    4b08:	0b be       	out	0x3b, r0	; 59
    4b0a:	0f 90       	pop	r0
    4b0c:	0a be       	out	0x3a, r0	; 58
    4b0e:	0f 90       	pop	r0
    4b10:	09 be       	out	0x39, r0	; 57
    4b12:	0f 90       	pop	r0
    4b14:	08 be       	out	0x38, r0	; 56
    4b16:	0f 90       	pop	r0
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	0f 90       	pop	r0
    4b1c:	1f 90       	pop	r1
    4b1e:	18 95       	reti

00004b20 <boardInit>:
	
	// prepare i/o
	ioport_init();
	
	// clock init & enable system clock to all peripheral modules
	sysclk_init();
    4b20:	c3 d0       	rcall	.+390    	; 0x4ca8 <sysclk_init>
	sysclk_enable_module(SYSCLK_PORT_GEN, 0xff);
    4b22:	6f ef       	ldi	r22, 0xFF	; 255
    4b24:	80 e0       	ldi	r24, 0x00	; 0
    4b26:	e7 d0       	rcall	.+462    	; 0x4cf6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_A, 0xff);
    4b28:	6f ef       	ldi	r22, 0xFF	; 255
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	e4 d0       	rcall	.+456    	; 0x4cf6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_B, 0xff);
    4b2e:	6f ef       	ldi	r22, 0xFF	; 255
    4b30:	82 e0       	ldi	r24, 0x02	; 2
    4b32:	e1 d0       	rcall	.+450    	; 0x4cf6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, 0xff);
    4b34:	6f ef       	ldi	r22, 0xFF	; 255
    4b36:	83 e0       	ldi	r24, 0x03	; 3
    4b38:	de d0       	rcall	.+444    	; 0x4cf6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, 0xff);
    4b3a:	6f ef       	ldi	r22, 0xFF	; 255
    4b3c:	84 e0       	ldi	r24, 0x04	; 4
    4b3e:	db d0       	rcall	.+438    	; 0x4cf6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E, 0xff);
    4b40:	6f ef       	ldi	r22, 0xFF	; 255
    4b42:	85 e0       	ldi	r24, 0x05	; 5
    4b44:	d8 d0       	rcall	.+432    	; 0x4cf6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, 0xff);
    4b46:	6f ef       	ldi	r22, 0xFF	; 255
    4b48:	86 e0       	ldi	r24, 0x06	; 6
    4b4a:	d5 d0       	rcall	.+426    	; 0x4cf6 <sysclk_enable_module>
	/* -------------------------------------------------------------------- */
	/*	Timer for RTC														*/
	/* -------------------------------------------------------------------- */
	
	// select the clock source and pre-scaler by 8
	TC1_ConfigClockSource(&TCC1, TC_CLKSEL_DIV64_gc);
    4b4c:	65 e0       	ldi	r22, 0x05	; 5
    4b4e:	80 e4       	ldi	r24, 0x40	; 64
    4b50:	98 e0       	ldi	r25, 0x08	; 8
    4b52:	6a db       	rcall	.-2348   	; 0x4228 <TC1_ConfigClockSource>
	
	TC1_SetOverflowIntLevel(&TCC1, TC_OVFINTLVL_LO_gc);
    4b54:	61 e0       	ldi	r22, 0x01	; 1
    4b56:	80 e4       	ldi	r24, 0x40	; 64
    4b58:	98 e0       	ldi	r25, 0x08	; 8
    4b5a:	72 db       	rcall	.-2332   	; 0x4240 <TC1_SetOverflowIntLevel>
	
	TC_SetPeriod(&TCC1, 499);
    4b5c:	83 ef       	ldi	r24, 0xF3	; 243
    4b5e:	91 e0       	ldi	r25, 0x01	; 1
    4b60:	e0 e4       	ldi	r30, 0x40	; 64
    4b62:	f8 e0       	ldi	r31, 0x08	; 8
    4b64:	86 a3       	std	Z+38, r24	; 0x26
    4b66:	97 a3       	std	Z+39, r25	; 0x27
	
	milisecondsTimer = 0;
    4b68:	10 92 74 3f 	sts	0x3F74, r1
    4b6c:	10 92 75 3f 	sts	0x3F75, r1
    4b70:	10 92 76 3f 	sts	0x3F76, r1
    4b74:	10 92 77 3f 	sts	0x3F77, r1
	secondsTimer = 0;
    4b78:	10 92 78 3f 	sts	0x3F78, r1
    4b7c:	10 92 79 3f 	sts	0x3F79, r1
    4b80:	10 92 7a 3f 	sts	0x3F7A, r1
    4b84:	10 92 7b 3f 	sts	0x3F7B, r1
	hoursTimer = 0;
    4b88:	10 92 70 3f 	sts	0x3F70, r1
    4b8c:	10 92 71 3f 	sts	0x3F71, r1
    4b90:	10 92 72 3f 	sts	0x3F72, r1
    4b94:	10 92 73 3f 	sts	0x3F73, r1
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4b98:	e0 e0       	ldi	r30, 0x00	; 0
    4b9a:	f6 e0       	ldi	r31, 0x06	; 6
    4b9c:	91 e0       	ldi	r25, 0x01	; 1
    4b9e:	91 83       	std	Z+1, r25	; 0x01
    4ba0:	80 e1       	ldi	r24, 0x10	; 16
    4ba2:	81 83       	std	Z+1, r24	; 0x01
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4ba4:	96 83       	std	Z+6, r25	; 0x06
    4ba6:	86 83       	std	Z+6, r24	; 0x06
    4ba8:	08 95       	ret

00004baa <__vector_20>:
}

/* -------------------------------------------------------------------- */
/*	Interrupt for timing the RTC										*/
/* -------------------------------------------------------------------- */
ISR(TCC1_OVF_vect) {
    4baa:	1f 92       	push	r1
    4bac:	0f 92       	push	r0
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	0f 92       	push	r0
    4bb2:	11 24       	eor	r1, r1
    4bb4:	08 b6       	in	r0, 0x38	; 56
    4bb6:	0f 92       	push	r0
    4bb8:	18 be       	out	0x38, r1	; 56
    4bba:	09 b6       	in	r0, 0x39	; 57
    4bbc:	0f 92       	push	r0
    4bbe:	19 be       	out	0x39, r1	; 57
    4bc0:	2f 93       	push	r18
    4bc2:	4f 93       	push	r20
    4bc4:	5f 93       	push	r21
    4bc6:	6f 93       	push	r22
    4bc8:	7f 93       	push	r23
    4bca:	8f 93       	push	r24
    4bcc:	9f 93       	push	r25
    4bce:	af 93       	push	r26
    4bd0:	bf 93       	push	r27
	
	// shut down the output PPM pulse

	if (milisecondsTimer++ == 1000) {
    4bd2:	80 91 74 3f 	lds	r24, 0x3F74
    4bd6:	90 91 75 3f 	lds	r25, 0x3F75
    4bda:	a0 91 76 3f 	lds	r26, 0x3F76
    4bde:	b0 91 77 3f 	lds	r27, 0x3F77
    4be2:	ac 01       	movw	r20, r24
    4be4:	bd 01       	movw	r22, r26
    4be6:	4f 5f       	subi	r20, 0xFF	; 255
    4be8:	5f 4f       	sbci	r21, 0xFF	; 255
    4bea:	6f 4f       	sbci	r22, 0xFF	; 255
    4bec:	7f 4f       	sbci	r23, 0xFF	; 255
    4bee:	40 93 74 3f 	sts	0x3F74, r20
    4bf2:	50 93 75 3f 	sts	0x3F75, r21
    4bf6:	60 93 76 3f 	sts	0x3F76, r22
    4bfa:	70 93 77 3f 	sts	0x3F77, r23
    4bfe:	88 3e       	cpi	r24, 0xE8	; 232
    4c00:	93 40       	sbci	r25, 0x03	; 3
    4c02:	a1 05       	cpc	r26, r1
    4c04:	b1 05       	cpc	r27, r1
    4c06:	f1 f5       	brne	.+124    	; 0x4c84 <__vector_20+0xda>
		
		milisecondsTimer = 0;
    4c08:	10 92 74 3f 	sts	0x3F74, r1
    4c0c:	10 92 75 3f 	sts	0x3F75, r1
    4c10:	10 92 76 3f 	sts	0x3F76, r1
    4c14:	10 92 77 3f 	sts	0x3F77, r1
		
		if (secondsTimer++ == 3600) {
    4c18:	80 91 78 3f 	lds	r24, 0x3F78
    4c1c:	90 91 79 3f 	lds	r25, 0x3F79
    4c20:	a0 91 7a 3f 	lds	r26, 0x3F7A
    4c24:	b0 91 7b 3f 	lds	r27, 0x3F7B
    4c28:	ac 01       	movw	r20, r24
    4c2a:	bd 01       	movw	r22, r26
    4c2c:	4f 5f       	subi	r20, 0xFF	; 255
    4c2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c30:	6f 4f       	sbci	r22, 0xFF	; 255
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	40 93 78 3f 	sts	0x3F78, r20
    4c38:	50 93 79 3f 	sts	0x3F79, r21
    4c3c:	60 93 7a 3f 	sts	0x3F7A, r22
    4c40:	70 93 7b 3f 	sts	0x3F7B, r23
    4c44:	80 31       	cpi	r24, 0x10	; 16
    4c46:	9e 40       	sbci	r25, 0x0E	; 14
    4c48:	a1 05       	cpc	r26, r1
    4c4a:	b1 05       	cpc	r27, r1
    4c4c:	d9 f4       	brne	.+54     	; 0x4c84 <__vector_20+0xda>
			
			secondsTimer = 0;
    4c4e:	10 92 78 3f 	sts	0x3F78, r1
    4c52:	10 92 79 3f 	sts	0x3F79, r1
    4c56:	10 92 7a 3f 	sts	0x3F7A, r1
    4c5a:	10 92 7b 3f 	sts	0x3F7B, r1
			hoursTimer++;
    4c5e:	80 91 70 3f 	lds	r24, 0x3F70
    4c62:	90 91 71 3f 	lds	r25, 0x3F71
    4c66:	a0 91 72 3f 	lds	r26, 0x3F72
    4c6a:	b0 91 73 3f 	lds	r27, 0x3F73
    4c6e:	01 96       	adiw	r24, 0x01	; 1
    4c70:	a1 1d       	adc	r26, r1
    4c72:	b1 1d       	adc	r27, r1
    4c74:	80 93 70 3f 	sts	0x3F70, r24
    4c78:	90 93 71 3f 	sts	0x3F71, r25
    4c7c:	a0 93 72 3f 	sts	0x3F72, r26
    4c80:	b0 93 73 3f 	sts	0x3F73, r27
		}
	}
    4c84:	bf 91       	pop	r27
    4c86:	af 91       	pop	r26
    4c88:	9f 91       	pop	r25
    4c8a:	8f 91       	pop	r24
    4c8c:	7f 91       	pop	r23
    4c8e:	6f 91       	pop	r22
    4c90:	5f 91       	pop	r21
    4c92:	4f 91       	pop	r20
    4c94:	2f 91       	pop	r18
    4c96:	0f 90       	pop	r0
    4c98:	09 be       	out	0x39, r0	; 57
    4c9a:	0f 90       	pop	r0
    4c9c:	08 be       	out	0x38, r0	; 56
    4c9e:	0f 90       	pop	r0
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	0f 90       	pop	r0
    4ca4:	1f 90       	pop	r1
    4ca6:	18 95       	reti

00004ca8 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    4ca8:	8f ef       	ldi	r24, 0xFF	; 255
    4caa:	80 93 70 00 	sts	0x0070, r24
    4cae:	80 93 71 00 	sts	0x0071, r24
    4cb2:	80 93 72 00 	sts	0x0072, r24
    4cb6:	80 93 73 00 	sts	0x0073, r24
    4cba:	80 93 74 00 	sts	0x0074, r24
    4cbe:	80 93 75 00 	sts	0x0075, r24
    4cc2:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4cc6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4cc8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    4cca:	e0 e5       	ldi	r30, 0x50	; 80
    4ccc:	f0 e0       	ldi	r31, 0x00	; 0
    4cce:	90 81       	ld	r25, Z
    4cd0:	92 60       	ori	r25, 0x02	; 2
    4cd2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4cd4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    4cd6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    4cd8:	81 ff       	sbrs	r24, 1
    4cda:	fd cf       	rjmp	.-6      	; 0x4cd6 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    4cdc:	61 e0       	ldi	r22, 0x01	; 1
    4cde:	80 e4       	ldi	r24, 0x40	; 64
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	15 d0       	rcall	.+42     	; 0x4d0e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4ce4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4ce6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    4ce8:	e0 e5       	ldi	r30, 0x50	; 80
    4cea:	f0 e0       	ldi	r31, 0x00	; 0
    4cec:	90 81       	ld	r25, Z
    4cee:	9e 7f       	andi	r25, 0xFE	; 254
    4cf0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4cf2:	8f bf       	out	0x3f, r24	; 63
    4cf4:	08 95       	ret

00004cf6 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4cf6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    4cf8:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    4cfa:	e8 2f       	mov	r30, r24
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	e0 59       	subi	r30, 0x90	; 144
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	60 95       	com	r22
    4d04:	80 81       	ld	r24, Z
    4d06:	68 23       	and	r22, r24
    4d08:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d0a:	9f bf       	out	0x3f, r25	; 63
    4d0c:	08 95       	ret

00004d0e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4d0e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4d10:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4d12:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4d14:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    4d16:	60 83       	st	Z, r22
	ret                             // Return to caller
    4d18:	08 95       	ret

00004d1a <vfprintf>:
    4d1a:	2f 92       	push	r2
    4d1c:	3f 92       	push	r3
    4d1e:	4f 92       	push	r4
    4d20:	5f 92       	push	r5
    4d22:	6f 92       	push	r6
    4d24:	7f 92       	push	r7
    4d26:	8f 92       	push	r8
    4d28:	9f 92       	push	r9
    4d2a:	af 92       	push	r10
    4d2c:	bf 92       	push	r11
    4d2e:	cf 92       	push	r12
    4d30:	df 92       	push	r13
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	63 97       	sbiw	r28, 0x13	; 19
    4d44:	cd bf       	out	0x3d, r28	; 61
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	7c 01       	movw	r14, r24
    4d4a:	1b 01       	movw	r2, r22
    4d4c:	6a 01       	movw	r12, r20
    4d4e:	fc 01       	movw	r30, r24
    4d50:	16 82       	std	Z+6, r1	; 0x06
    4d52:	17 82       	std	Z+7, r1	; 0x07
    4d54:	83 81       	ldd	r24, Z+3	; 0x03
    4d56:	81 ff       	sbrs	r24, 1
    4d58:	49 c3       	rjmp	.+1682   	; 0x53ec <vfprintf+0x6d2>
    4d5a:	be 01       	movw	r22, r28
    4d5c:	6f 5f       	subi	r22, 0xFF	; 255
    4d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d60:	4b 01       	movw	r8, r22
    4d62:	f7 01       	movw	r30, r14
    4d64:	93 81       	ldd	r25, Z+3	; 0x03
    4d66:	f1 01       	movw	r30, r2
    4d68:	93 fd       	sbrc	r25, 3
    4d6a:	85 91       	lpm	r24, Z+
    4d6c:	93 ff       	sbrs	r25, 3
    4d6e:	81 91       	ld	r24, Z+
    4d70:	1f 01       	movw	r2, r30
    4d72:	88 23       	and	r24, r24
    4d74:	09 f4       	brne	.+2      	; 0x4d78 <vfprintf+0x5e>
    4d76:	36 c3       	rjmp	.+1644   	; 0x53e4 <vfprintf+0x6ca>
    4d78:	85 32       	cpi	r24, 0x25	; 37
    4d7a:	39 f4       	brne	.+14     	; 0x4d8a <vfprintf+0x70>
    4d7c:	93 fd       	sbrc	r25, 3
    4d7e:	85 91       	lpm	r24, Z+
    4d80:	93 ff       	sbrs	r25, 3
    4d82:	81 91       	ld	r24, Z+
    4d84:	1f 01       	movw	r2, r30
    4d86:	85 32       	cpi	r24, 0x25	; 37
    4d88:	31 f4       	brne	.+12     	; 0x4d96 <vfprintf+0x7c>
    4d8a:	b7 01       	movw	r22, r14
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	36 d5       	rcall	.+2668   	; 0x57fc <fputc>
    4d90:	56 01       	movw	r10, r12
    4d92:	65 01       	movw	r12, r10
    4d94:	e6 cf       	rjmp	.-52     	; 0x4d62 <vfprintf+0x48>
    4d96:	10 e0       	ldi	r17, 0x00	; 0
    4d98:	51 2c       	mov	r5, r1
    4d9a:	20 e0       	ldi	r18, 0x00	; 0
    4d9c:	20 32       	cpi	r18, 0x20	; 32
    4d9e:	a0 f4       	brcc	.+40     	; 0x4dc8 <vfprintf+0xae>
    4da0:	8b 32       	cpi	r24, 0x2B	; 43
    4da2:	69 f0       	breq	.+26     	; 0x4dbe <vfprintf+0xa4>
    4da4:	30 f4       	brcc	.+12     	; 0x4db2 <vfprintf+0x98>
    4da6:	80 32       	cpi	r24, 0x20	; 32
    4da8:	59 f0       	breq	.+22     	; 0x4dc0 <vfprintf+0xa6>
    4daa:	83 32       	cpi	r24, 0x23	; 35
    4dac:	69 f4       	brne	.+26     	; 0x4dc8 <vfprintf+0xae>
    4dae:	20 61       	ori	r18, 0x10	; 16
    4db0:	2c c0       	rjmp	.+88     	; 0x4e0a <vfprintf+0xf0>
    4db2:	8d 32       	cpi	r24, 0x2D	; 45
    4db4:	39 f0       	breq	.+14     	; 0x4dc4 <vfprintf+0xaa>
    4db6:	80 33       	cpi	r24, 0x30	; 48
    4db8:	39 f4       	brne	.+14     	; 0x4dc8 <vfprintf+0xae>
    4dba:	21 60       	ori	r18, 0x01	; 1
    4dbc:	26 c0       	rjmp	.+76     	; 0x4e0a <vfprintf+0xf0>
    4dbe:	22 60       	ori	r18, 0x02	; 2
    4dc0:	24 60       	ori	r18, 0x04	; 4
    4dc2:	23 c0       	rjmp	.+70     	; 0x4e0a <vfprintf+0xf0>
    4dc4:	28 60       	ori	r18, 0x08	; 8
    4dc6:	21 c0       	rjmp	.+66     	; 0x4e0a <vfprintf+0xf0>
    4dc8:	27 fd       	sbrc	r18, 7
    4dca:	27 c0       	rjmp	.+78     	; 0x4e1a <vfprintf+0x100>
    4dcc:	30 ed       	ldi	r19, 0xD0	; 208
    4dce:	38 0f       	add	r19, r24
    4dd0:	3a 30       	cpi	r19, 0x0A	; 10
    4dd2:	78 f4       	brcc	.+30     	; 0x4df2 <vfprintf+0xd8>
    4dd4:	26 ff       	sbrs	r18, 6
    4dd6:	06 c0       	rjmp	.+12     	; 0x4de4 <vfprintf+0xca>
    4dd8:	fa e0       	ldi	r31, 0x0A	; 10
    4dda:	1f 9f       	mul	r17, r31
    4ddc:	30 0d       	add	r19, r0
    4dde:	11 24       	eor	r1, r1
    4de0:	13 2f       	mov	r17, r19
    4de2:	13 c0       	rjmp	.+38     	; 0x4e0a <vfprintf+0xf0>
    4de4:	6a e0       	ldi	r22, 0x0A	; 10
    4de6:	56 9e       	mul	r5, r22
    4de8:	30 0d       	add	r19, r0
    4dea:	11 24       	eor	r1, r1
    4dec:	53 2e       	mov	r5, r19
    4dee:	20 62       	ori	r18, 0x20	; 32
    4df0:	0c c0       	rjmp	.+24     	; 0x4e0a <vfprintf+0xf0>
    4df2:	8e 32       	cpi	r24, 0x2E	; 46
    4df4:	21 f4       	brne	.+8      	; 0x4dfe <vfprintf+0xe4>
    4df6:	26 fd       	sbrc	r18, 6
    4df8:	f5 c2       	rjmp	.+1514   	; 0x53e4 <vfprintf+0x6ca>
    4dfa:	20 64       	ori	r18, 0x40	; 64
    4dfc:	06 c0       	rjmp	.+12     	; 0x4e0a <vfprintf+0xf0>
    4dfe:	8c 36       	cpi	r24, 0x6C	; 108
    4e00:	11 f4       	brne	.+4      	; 0x4e06 <vfprintf+0xec>
    4e02:	20 68       	ori	r18, 0x80	; 128
    4e04:	02 c0       	rjmp	.+4      	; 0x4e0a <vfprintf+0xf0>
    4e06:	88 36       	cpi	r24, 0x68	; 104
    4e08:	41 f4       	brne	.+16     	; 0x4e1a <vfprintf+0x100>
    4e0a:	f1 01       	movw	r30, r2
    4e0c:	93 fd       	sbrc	r25, 3
    4e0e:	85 91       	lpm	r24, Z+
    4e10:	93 ff       	sbrs	r25, 3
    4e12:	81 91       	ld	r24, Z+
    4e14:	1f 01       	movw	r2, r30
    4e16:	81 11       	cpse	r24, r1
    4e18:	c1 cf       	rjmp	.-126    	; 0x4d9c <vfprintf+0x82>
    4e1a:	9b eb       	ldi	r25, 0xBB	; 187
    4e1c:	98 0f       	add	r25, r24
    4e1e:	93 30       	cpi	r25, 0x03	; 3
    4e20:	18 f4       	brcc	.+6      	; 0x4e28 <vfprintf+0x10e>
    4e22:	20 61       	ori	r18, 0x10	; 16
    4e24:	80 5e       	subi	r24, 0xE0	; 224
    4e26:	06 c0       	rjmp	.+12     	; 0x4e34 <vfprintf+0x11a>
    4e28:	9b e9       	ldi	r25, 0x9B	; 155
    4e2a:	98 0f       	add	r25, r24
    4e2c:	93 30       	cpi	r25, 0x03	; 3
    4e2e:	08 f0       	brcs	.+2      	; 0x4e32 <vfprintf+0x118>
    4e30:	9a c1       	rjmp	.+820    	; 0x5166 <vfprintf+0x44c>
    4e32:	2f 7e       	andi	r18, 0xEF	; 239
    4e34:	26 ff       	sbrs	r18, 6
    4e36:	16 e0       	ldi	r17, 0x06	; 6
    4e38:	2f 73       	andi	r18, 0x3F	; 63
    4e3a:	72 2e       	mov	r7, r18
    4e3c:	85 36       	cpi	r24, 0x65	; 101
    4e3e:	21 f4       	brne	.+8      	; 0x4e48 <vfprintf+0x12e>
    4e40:	f2 2f       	mov	r31, r18
    4e42:	f0 64       	ori	r31, 0x40	; 64
    4e44:	7f 2e       	mov	r7, r31
    4e46:	08 c0       	rjmp	.+16     	; 0x4e58 <vfprintf+0x13e>
    4e48:	86 36       	cpi	r24, 0x66	; 102
    4e4a:	21 f4       	brne	.+8      	; 0x4e54 <vfprintf+0x13a>
    4e4c:	62 2f       	mov	r22, r18
    4e4e:	60 68       	ori	r22, 0x80	; 128
    4e50:	76 2e       	mov	r7, r22
    4e52:	02 c0       	rjmp	.+4      	; 0x4e58 <vfprintf+0x13e>
    4e54:	11 11       	cpse	r17, r1
    4e56:	11 50       	subi	r17, 0x01	; 1
    4e58:	77 fe       	sbrs	r7, 7
    4e5a:	07 c0       	rjmp	.+14     	; 0x4e6a <vfprintf+0x150>
    4e5c:	1c 33       	cpi	r17, 0x3C	; 60
    4e5e:	48 f4       	brcc	.+18     	; 0x4e72 <vfprintf+0x158>
    4e60:	44 24       	eor	r4, r4
    4e62:	43 94       	inc	r4
    4e64:	41 0e       	add	r4, r17
    4e66:	27 e0       	ldi	r18, 0x07	; 7
    4e68:	0b c0       	rjmp	.+22     	; 0x4e80 <vfprintf+0x166>
    4e6a:	18 30       	cpi	r17, 0x08	; 8
    4e6c:	30 f4       	brcc	.+12     	; 0x4e7a <vfprintf+0x160>
    4e6e:	21 2f       	mov	r18, r17
    4e70:	06 c0       	rjmp	.+12     	; 0x4e7e <vfprintf+0x164>
    4e72:	27 e0       	ldi	r18, 0x07	; 7
    4e74:	4c e3       	ldi	r20, 0x3C	; 60
    4e76:	44 2e       	mov	r4, r20
    4e78:	03 c0       	rjmp	.+6      	; 0x4e80 <vfprintf+0x166>
    4e7a:	27 e0       	ldi	r18, 0x07	; 7
    4e7c:	17 e0       	ldi	r17, 0x07	; 7
    4e7e:	41 2c       	mov	r4, r1
    4e80:	56 01       	movw	r10, r12
    4e82:	74 e0       	ldi	r23, 0x04	; 4
    4e84:	a7 0e       	add	r10, r23
    4e86:	b1 1c       	adc	r11, r1
    4e88:	f6 01       	movw	r30, r12
    4e8a:	60 81       	ld	r22, Z
    4e8c:	71 81       	ldd	r23, Z+1	; 0x01
    4e8e:	82 81       	ldd	r24, Z+2	; 0x02
    4e90:	93 81       	ldd	r25, Z+3	; 0x03
    4e92:	04 2d       	mov	r16, r4
    4e94:	a4 01       	movw	r20, r8
    4e96:	55 d3       	rcall	.+1706   	; 0x5542 <__ftoa_engine>
    4e98:	6c 01       	movw	r12, r24
    4e9a:	09 81       	ldd	r16, Y+1	; 0x01
    4e9c:	00 ff       	sbrs	r16, 0
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <vfprintf+0x18a>
    4ea0:	03 ff       	sbrs	r16, 3
    4ea2:	06 c0       	rjmp	.+12     	; 0x4eb0 <vfprintf+0x196>
    4ea4:	71 fc       	sbrc	r7, 1
    4ea6:	07 c0       	rjmp	.+14     	; 0x4eb6 <vfprintf+0x19c>
    4ea8:	72 fc       	sbrc	r7, 2
    4eaa:	08 c0       	rjmp	.+16     	; 0x4ebc <vfprintf+0x1a2>
    4eac:	61 2c       	mov	r6, r1
    4eae:	08 c0       	rjmp	.+16     	; 0x4ec0 <vfprintf+0x1a6>
    4eb0:	3d e2       	ldi	r19, 0x2D	; 45
    4eb2:	63 2e       	mov	r6, r19
    4eb4:	05 c0       	rjmp	.+10     	; 0x4ec0 <vfprintf+0x1a6>
    4eb6:	2b e2       	ldi	r18, 0x2B	; 43
    4eb8:	62 2e       	mov	r6, r18
    4eba:	02 c0       	rjmp	.+4      	; 0x4ec0 <vfprintf+0x1a6>
    4ebc:	90 e2       	ldi	r25, 0x20	; 32
    4ebe:	69 2e       	mov	r6, r25
    4ec0:	80 2f       	mov	r24, r16
    4ec2:	8c 70       	andi	r24, 0x0C	; 12
    4ec4:	81 f1       	breq	.+96     	; 0x4f26 <vfprintf+0x20c>
    4ec6:	66 20       	and	r6, r6
    4ec8:	11 f0       	breq	.+4      	; 0x4ece <vfprintf+0x1b4>
    4eca:	84 e0       	ldi	r24, 0x04	; 4
    4ecc:	01 c0       	rjmp	.+2      	; 0x4ed0 <vfprintf+0x1b6>
    4ece:	83 e0       	ldi	r24, 0x03	; 3
    4ed0:	85 15       	cp	r24, r5
    4ed2:	10 f0       	brcs	.+4      	; 0x4ed8 <vfprintf+0x1be>
    4ed4:	51 2c       	mov	r5, r1
    4ed6:	0a c0       	rjmp	.+20     	; 0x4eec <vfprintf+0x1d2>
    4ed8:	58 1a       	sub	r5, r24
    4eda:	73 fc       	sbrc	r7, 3
    4edc:	07 c0       	rjmp	.+14     	; 0x4eec <vfprintf+0x1d2>
    4ede:	b7 01       	movw	r22, r14
    4ee0:	80 e2       	ldi	r24, 0x20	; 32
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	8b d4       	rcall	.+2326   	; 0x57fc <fputc>
    4ee6:	5a 94       	dec	r5
    4ee8:	d1 f7       	brne	.-12     	; 0x4ede <vfprintf+0x1c4>
    4eea:	f4 cf       	rjmp	.-24     	; 0x4ed4 <vfprintf+0x1ba>
    4eec:	66 20       	and	r6, r6
    4eee:	21 f0       	breq	.+8      	; 0x4ef8 <vfprintf+0x1de>
    4ef0:	b7 01       	movw	r22, r14
    4ef2:	86 2d       	mov	r24, r6
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	82 d4       	rcall	.+2308   	; 0x57fc <fputc>
    4ef8:	03 fd       	sbrc	r16, 3
    4efa:	03 c0       	rjmp	.+6      	; 0x4f02 <vfprintf+0x1e8>
    4efc:	0e e0       	ldi	r16, 0x0E	; 14
    4efe:	16 e0       	ldi	r17, 0x06	; 6
    4f00:	02 c0       	rjmp	.+4      	; 0x4f06 <vfprintf+0x1ec>
    4f02:	0a e0       	ldi	r16, 0x0A	; 10
    4f04:	16 e0       	ldi	r17, 0x06	; 6
    4f06:	f7 2d       	mov	r31, r7
    4f08:	f0 71       	andi	r31, 0x10	; 16
    4f0a:	7f 2e       	mov	r7, r31
    4f0c:	f8 01       	movw	r30, r16
    4f0e:	84 91       	lpm	r24, Z
    4f10:	88 23       	and	r24, r24
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <vfprintf+0x1fc>
    4f14:	5e c2       	rjmp	.+1212   	; 0x53d2 <vfprintf+0x6b8>
    4f16:	71 10       	cpse	r7, r1
    4f18:	80 52       	subi	r24, 0x20	; 32
    4f1a:	b7 01       	movw	r22, r14
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	6e d4       	rcall	.+2268   	; 0x57fc <fputc>
    4f20:	0f 5f       	subi	r16, 0xFF	; 255
    4f22:	1f 4f       	sbci	r17, 0xFF	; 255
    4f24:	f3 cf       	rjmp	.-26     	; 0x4f0c <vfprintf+0x1f2>
    4f26:	77 fe       	sbrs	r7, 7
    4f28:	0f c0       	rjmp	.+30     	; 0x4f48 <vfprintf+0x22e>
    4f2a:	4c 0c       	add	r4, r12
    4f2c:	04 ff       	sbrs	r16, 4
    4f2e:	04 c0       	rjmp	.+8      	; 0x4f38 <vfprintf+0x21e>
    4f30:	8a 81       	ldd	r24, Y+2	; 0x02
    4f32:	81 33       	cpi	r24, 0x31	; 49
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <vfprintf+0x21e>
    4f36:	4a 94       	dec	r4
    4f38:	14 14       	cp	r1, r4
    4f3a:	74 f5       	brge	.+92     	; 0x4f98 <vfprintf+0x27e>
    4f3c:	f8 e0       	ldi	r31, 0x08	; 8
    4f3e:	f4 15       	cp	r31, r4
    4f40:	78 f5       	brcc	.+94     	; 0x4fa0 <vfprintf+0x286>
    4f42:	88 e0       	ldi	r24, 0x08	; 8
    4f44:	48 2e       	mov	r4, r24
    4f46:	2c c0       	rjmp	.+88     	; 0x4fa0 <vfprintf+0x286>
    4f48:	76 fc       	sbrc	r7, 6
    4f4a:	2a c0       	rjmp	.+84     	; 0x4fa0 <vfprintf+0x286>
    4f4c:	81 2f       	mov	r24, r17
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	8c 15       	cp	r24, r12
    4f52:	9d 05       	cpc	r25, r13
    4f54:	9c f0       	brlt	.+38     	; 0x4f7c <vfprintf+0x262>
    4f56:	6c ef       	ldi	r22, 0xFC	; 252
    4f58:	c6 16       	cp	r12, r22
    4f5a:	6f ef       	ldi	r22, 0xFF	; 255
    4f5c:	d6 06       	cpc	r13, r22
    4f5e:	74 f0       	brlt	.+28     	; 0x4f7c <vfprintf+0x262>
    4f60:	77 2d       	mov	r23, r7
    4f62:	70 68       	ori	r23, 0x80	; 128
    4f64:	77 2e       	mov	r7, r23
    4f66:	0a c0       	rjmp	.+20     	; 0x4f7c <vfprintf+0x262>
    4f68:	e2 e0       	ldi	r30, 0x02	; 2
    4f6a:	f0 e0       	ldi	r31, 0x00	; 0
    4f6c:	ec 0f       	add	r30, r28
    4f6e:	fd 1f       	adc	r31, r29
    4f70:	e1 0f       	add	r30, r17
    4f72:	f1 1d       	adc	r31, r1
    4f74:	80 81       	ld	r24, Z
    4f76:	80 33       	cpi	r24, 0x30	; 48
    4f78:	19 f4       	brne	.+6      	; 0x4f80 <vfprintf+0x266>
    4f7a:	11 50       	subi	r17, 0x01	; 1
    4f7c:	11 11       	cpse	r17, r1
    4f7e:	f4 cf       	rjmp	.-24     	; 0x4f68 <vfprintf+0x24e>
    4f80:	77 fe       	sbrs	r7, 7
    4f82:	0e c0       	rjmp	.+28     	; 0x4fa0 <vfprintf+0x286>
    4f84:	44 24       	eor	r4, r4
    4f86:	43 94       	inc	r4
    4f88:	41 0e       	add	r4, r17
    4f8a:	81 2f       	mov	r24, r17
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	c8 16       	cp	r12, r24
    4f90:	d9 06       	cpc	r13, r25
    4f92:	2c f4       	brge	.+10     	; 0x4f9e <vfprintf+0x284>
    4f94:	1c 19       	sub	r17, r12
    4f96:	04 c0       	rjmp	.+8      	; 0x4fa0 <vfprintf+0x286>
    4f98:	44 24       	eor	r4, r4
    4f9a:	43 94       	inc	r4
    4f9c:	01 c0       	rjmp	.+2      	; 0x4fa0 <vfprintf+0x286>
    4f9e:	10 e0       	ldi	r17, 0x00	; 0
    4fa0:	77 fe       	sbrs	r7, 7
    4fa2:	07 c0       	rjmp	.+14     	; 0x4fb2 <vfprintf+0x298>
    4fa4:	1c 14       	cp	r1, r12
    4fa6:	1d 04       	cpc	r1, r13
    4fa8:	3c f4       	brge	.+14     	; 0x4fb8 <vfprintf+0x29e>
    4faa:	96 01       	movw	r18, r12
    4fac:	2f 5f       	subi	r18, 0xFF	; 255
    4fae:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb0:	05 c0       	rjmp	.+10     	; 0x4fbc <vfprintf+0x2a2>
    4fb2:	25 e0       	ldi	r18, 0x05	; 5
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	02 c0       	rjmp	.+4      	; 0x4fbc <vfprintf+0x2a2>
    4fb8:	21 e0       	ldi	r18, 0x01	; 1
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	66 20       	and	r6, r6
    4fbe:	11 f0       	breq	.+4      	; 0x4fc4 <vfprintf+0x2aa>
    4fc0:	2f 5f       	subi	r18, 0xFF	; 255
    4fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fc4:	11 23       	and	r17, r17
    4fc6:	31 f0       	breq	.+12     	; 0x4fd4 <vfprintf+0x2ba>
    4fc8:	41 2f       	mov	r20, r17
    4fca:	50 e0       	ldi	r21, 0x00	; 0
    4fcc:	4f 5f       	subi	r20, 0xFF	; 255
    4fce:	5f 4f       	sbci	r21, 0xFF	; 255
    4fd0:	24 0f       	add	r18, r20
    4fd2:	35 1f       	adc	r19, r21
    4fd4:	45 2d       	mov	r20, r5
    4fd6:	50 e0       	ldi	r21, 0x00	; 0
    4fd8:	24 17       	cp	r18, r20
    4fda:	35 07       	cpc	r19, r21
    4fdc:	14 f4       	brge	.+4      	; 0x4fe2 <vfprintf+0x2c8>
    4fde:	52 1a       	sub	r5, r18
    4fe0:	01 c0       	rjmp	.+2      	; 0x4fe4 <vfprintf+0x2ca>
    4fe2:	51 2c       	mov	r5, r1
    4fe4:	87 2d       	mov	r24, r7
    4fe6:	89 70       	andi	r24, 0x09	; 9
    4fe8:	41 f4       	brne	.+16     	; 0x4ffa <vfprintf+0x2e0>
    4fea:	55 20       	and	r5, r5
    4fec:	31 f0       	breq	.+12     	; 0x4ffa <vfprintf+0x2e0>
    4fee:	b7 01       	movw	r22, r14
    4ff0:	80 e2       	ldi	r24, 0x20	; 32
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	03 d4       	rcall	.+2054   	; 0x57fc <fputc>
    4ff6:	5a 94       	dec	r5
    4ff8:	f8 cf       	rjmp	.-16     	; 0x4fea <vfprintf+0x2d0>
    4ffa:	66 20       	and	r6, r6
    4ffc:	21 f0       	breq	.+8      	; 0x5006 <vfprintf+0x2ec>
    4ffe:	b7 01       	movw	r22, r14
    5000:	86 2d       	mov	r24, r6
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	fb d3       	rcall	.+2038   	; 0x57fc <fputc>
    5006:	73 fc       	sbrc	r7, 3
    5008:	08 c0       	rjmp	.+16     	; 0x501a <vfprintf+0x300>
    500a:	55 20       	and	r5, r5
    500c:	31 f0       	breq	.+12     	; 0x501a <vfprintf+0x300>
    500e:	b7 01       	movw	r22, r14
    5010:	80 e3       	ldi	r24, 0x30	; 48
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	f3 d3       	rcall	.+2022   	; 0x57fc <fputc>
    5016:	5a 94       	dec	r5
    5018:	f8 cf       	rjmp	.-16     	; 0x500a <vfprintf+0x2f0>
    501a:	77 fe       	sbrs	r7, 7
    501c:	5d c0       	rjmp	.+186    	; 0x50d8 <vfprintf+0x3be>
    501e:	9c 2d       	mov	r25, r12
    5020:	8d 2d       	mov	r24, r13
    5022:	d7 fe       	sbrs	r13, 7
    5024:	02 c0       	rjmp	.+4      	; 0x502a <vfprintf+0x310>
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	80 e0       	ldi	r24, 0x00	; 0
    502a:	69 2e       	mov	r6, r25
    502c:	78 2e       	mov	r7, r24
    502e:	40 e0       	ldi	r20, 0x00	; 0
    5030:	50 e0       	ldi	r21, 0x00	; 0
    5032:	c6 01       	movw	r24, r12
    5034:	84 19       	sub	r24, r4
    5036:	91 09       	sbc	r25, r1
    5038:	8c 87       	std	Y+12, r24	; 0x0c
    503a:	9d 87       	std	Y+13, r25	; 0x0d
    503c:	96 01       	movw	r18, r12
    503e:	26 19       	sub	r18, r6
    5040:	37 09       	sbc	r19, r7
    5042:	28 0d       	add	r18, r8
    5044:	39 1d       	adc	r19, r9
    5046:	81 2f       	mov	r24, r17
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	ee 27       	eor	r30, r30
    504c:	ff 27       	eor	r31, r31
    504e:	e8 1b       	sub	r30, r24
    5050:	f9 0b       	sbc	r31, r25
    5052:	ee 87       	std	Y+14, r30	; 0x0e
    5054:	ff 87       	std	Y+15, r31	; 0x0f
    5056:	ff ef       	ldi	r31, 0xFF	; 255
    5058:	6f 16       	cp	r6, r31
    505a:	7f 06       	cpc	r7, r31
    505c:	61 f4       	brne	.+24     	; 0x5076 <vfprintf+0x35c>
    505e:	b7 01       	movw	r22, r14
    5060:	8e e2       	ldi	r24, 0x2E	; 46
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	2b 8b       	std	Y+19, r18	; 0x13
    5066:	3a 8b       	std	Y+18, r19	; 0x12
    5068:	48 8b       	std	Y+16, r20	; 0x10
    506a:	59 8b       	std	Y+17, r21	; 0x11
    506c:	c7 d3       	rcall	.+1934   	; 0x57fc <fputc>
    506e:	59 89       	ldd	r21, Y+17	; 0x11
    5070:	48 89       	ldd	r20, Y+16	; 0x10
    5072:	3a 89       	ldd	r19, Y+18	; 0x12
    5074:	2b 89       	ldd	r18, Y+19	; 0x13
    5076:	c6 14       	cp	r12, r6
    5078:	d7 04       	cpc	r13, r7
    507a:	54 f0       	brlt	.+20     	; 0x5090 <vfprintf+0x376>
    507c:	6c 85       	ldd	r22, Y+12	; 0x0c
    507e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5080:	66 15       	cp	r22, r6
    5082:	77 05       	cpc	r23, r7
    5084:	2c f4       	brge	.+10     	; 0x5090 <vfprintf+0x376>
    5086:	f9 01       	movw	r30, r18
    5088:	e4 0f       	add	r30, r20
    508a:	f5 1f       	adc	r31, r21
    508c:	81 81       	ldd	r24, Z+1	; 0x01
    508e:	01 c0       	rjmp	.+2      	; 0x5092 <vfprintf+0x378>
    5090:	80 e3       	ldi	r24, 0x30	; 48
    5092:	71 e0       	ldi	r23, 0x01	; 1
    5094:	67 1a       	sub	r6, r23
    5096:	71 08       	sbc	r7, r1
    5098:	4f 5f       	subi	r20, 0xFF	; 255
    509a:	5f 4f       	sbci	r21, 0xFF	; 255
    509c:	ee 85       	ldd	r30, Y+14	; 0x0e
    509e:	ff 85       	ldd	r31, Y+15	; 0x0f
    50a0:	6e 16       	cp	r6, r30
    50a2:	7f 06       	cpc	r7, r31
    50a4:	64 f0       	brlt	.+24     	; 0x50be <vfprintf+0x3a4>
    50a6:	b7 01       	movw	r22, r14
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	2b 8b       	std	Y+19, r18	; 0x13
    50ac:	3a 8b       	std	Y+18, r19	; 0x12
    50ae:	48 8b       	std	Y+16, r20	; 0x10
    50b0:	59 8b       	std	Y+17, r21	; 0x11
    50b2:	a4 d3       	rcall	.+1864   	; 0x57fc <fputc>
    50b4:	2b 89       	ldd	r18, Y+19	; 0x13
    50b6:	3a 89       	ldd	r19, Y+18	; 0x12
    50b8:	48 89       	ldd	r20, Y+16	; 0x10
    50ba:	59 89       	ldd	r21, Y+17	; 0x11
    50bc:	cc cf       	rjmp	.-104    	; 0x5056 <vfprintf+0x33c>
    50be:	6c 14       	cp	r6, r12
    50c0:	7d 04       	cpc	r7, r13
    50c2:	39 f4       	brne	.+14     	; 0x50d2 <vfprintf+0x3b8>
    50c4:	9a 81       	ldd	r25, Y+2	; 0x02
    50c6:	96 33       	cpi	r25, 0x36	; 54
    50c8:	18 f4       	brcc	.+6      	; 0x50d0 <vfprintf+0x3b6>
    50ca:	95 33       	cpi	r25, 0x35	; 53
    50cc:	11 f4       	brne	.+4      	; 0x50d2 <vfprintf+0x3b8>
    50ce:	04 ff       	sbrs	r16, 4
    50d0:	81 e3       	ldi	r24, 0x31	; 49
    50d2:	b7 01       	movw	r22, r14
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	45 c0       	rjmp	.+138    	; 0x5162 <vfprintf+0x448>
    50d8:	8a 81       	ldd	r24, Y+2	; 0x02
    50da:	81 33       	cpi	r24, 0x31	; 49
    50dc:	09 f0       	breq	.+2      	; 0x50e0 <vfprintf+0x3c6>
    50de:	0f 7e       	andi	r16, 0xEF	; 239
    50e0:	b7 01       	movw	r22, r14
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	8b d3       	rcall	.+1814   	; 0x57fc <fputc>
    50e6:	11 11       	cpse	r17, r1
    50e8:	05 c0       	rjmp	.+10     	; 0x50f4 <vfprintf+0x3da>
    50ea:	74 fe       	sbrs	r7, 4
    50ec:	16 c0       	rjmp	.+44     	; 0x511a <vfprintf+0x400>
    50ee:	85 e4       	ldi	r24, 0x45	; 69
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	15 c0       	rjmp	.+42     	; 0x511e <vfprintf+0x404>
    50f4:	b7 01       	movw	r22, r14
    50f6:	8e e2       	ldi	r24, 0x2E	; 46
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	80 d3       	rcall	.+1792   	; 0x57fc <fputc>
    50fc:	82 e0       	ldi	r24, 0x02	; 2
    50fe:	66 24       	eor	r6, r6
    5100:	63 94       	inc	r6
    5102:	68 0e       	add	r6, r24
    5104:	f4 01       	movw	r30, r8
    5106:	e8 0f       	add	r30, r24
    5108:	f1 1d       	adc	r31, r1
    510a:	80 81       	ld	r24, Z
    510c:	b7 01       	movw	r22, r14
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	75 d3       	rcall	.+1770   	; 0x57fc <fputc>
    5112:	11 50       	subi	r17, 0x01	; 1
    5114:	51 f3       	breq	.-44     	; 0x50ea <vfprintf+0x3d0>
    5116:	86 2d       	mov	r24, r6
    5118:	f2 cf       	rjmp	.-28     	; 0x50fe <vfprintf+0x3e4>
    511a:	85 e6       	ldi	r24, 0x65	; 101
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	b7 01       	movw	r22, r14
    5120:	6d d3       	rcall	.+1754   	; 0x57fc <fputc>
    5122:	d7 fc       	sbrc	r13, 7
    5124:	05 c0       	rjmp	.+10     	; 0x5130 <vfprintf+0x416>
    5126:	c1 14       	cp	r12, r1
    5128:	d1 04       	cpc	r13, r1
    512a:	39 f4       	brne	.+14     	; 0x513a <vfprintf+0x420>
    512c:	04 ff       	sbrs	r16, 4
    512e:	05 c0       	rjmp	.+10     	; 0x513a <vfprintf+0x420>
    5130:	d1 94       	neg	r13
    5132:	c1 94       	neg	r12
    5134:	d1 08       	sbc	r13, r1
    5136:	8d e2       	ldi	r24, 0x2D	; 45
    5138:	01 c0       	rjmp	.+2      	; 0x513c <vfprintf+0x422>
    513a:	8b e2       	ldi	r24, 0x2B	; 43
    513c:	b7 01       	movw	r22, r14
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	5d d3       	rcall	.+1722   	; 0x57fc <fputc>
    5142:	80 e3       	ldi	r24, 0x30	; 48
    5144:	6a e0       	ldi	r22, 0x0A	; 10
    5146:	c6 16       	cp	r12, r22
    5148:	d1 04       	cpc	r13, r1
    514a:	2c f0       	brlt	.+10     	; 0x5156 <vfprintf+0x43c>
    514c:	8f 5f       	subi	r24, 0xFF	; 255
    514e:	fa e0       	ldi	r31, 0x0A	; 10
    5150:	cf 1a       	sub	r12, r31
    5152:	d1 08       	sbc	r13, r1
    5154:	f7 cf       	rjmp	.-18     	; 0x5144 <vfprintf+0x42a>
    5156:	b7 01       	movw	r22, r14
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	50 d3       	rcall	.+1696   	; 0x57fc <fputc>
    515c:	b7 01       	movw	r22, r14
    515e:	c6 01       	movw	r24, r12
    5160:	c0 96       	adiw	r24, 0x30	; 48
    5162:	4c d3       	rcall	.+1688   	; 0x57fc <fputc>
    5164:	36 c1       	rjmp	.+620    	; 0x53d2 <vfprintf+0x6b8>
    5166:	83 36       	cpi	r24, 0x63	; 99
    5168:	31 f0       	breq	.+12     	; 0x5176 <vfprintf+0x45c>
    516a:	83 37       	cpi	r24, 0x73	; 115
    516c:	79 f0       	breq	.+30     	; 0x518c <vfprintf+0x472>
    516e:	83 35       	cpi	r24, 0x53	; 83
    5170:	09 f0       	breq	.+2      	; 0x5174 <vfprintf+0x45a>
    5172:	54 c0       	rjmp	.+168    	; 0x521c <vfprintf+0x502>
    5174:	20 c0       	rjmp	.+64     	; 0x51b6 <vfprintf+0x49c>
    5176:	56 01       	movw	r10, r12
    5178:	72 e0       	ldi	r23, 0x02	; 2
    517a:	a7 0e       	add	r10, r23
    517c:	b1 1c       	adc	r11, r1
    517e:	f6 01       	movw	r30, r12
    5180:	80 81       	ld	r24, Z
    5182:	89 83       	std	Y+1, r24	; 0x01
    5184:	01 e0       	ldi	r16, 0x01	; 1
    5186:	10 e0       	ldi	r17, 0x00	; 0
    5188:	64 01       	movw	r12, r8
    518a:	13 c0       	rjmp	.+38     	; 0x51b2 <vfprintf+0x498>
    518c:	56 01       	movw	r10, r12
    518e:	f2 e0       	ldi	r31, 0x02	; 2
    5190:	af 0e       	add	r10, r31
    5192:	b1 1c       	adc	r11, r1
    5194:	f6 01       	movw	r30, r12
    5196:	c0 80       	ld	r12, Z
    5198:	d1 80       	ldd	r13, Z+1	; 0x01
    519a:	26 ff       	sbrs	r18, 6
    519c:	03 c0       	rjmp	.+6      	; 0x51a4 <vfprintf+0x48a>
    519e:	61 2f       	mov	r22, r17
    51a0:	70 e0       	ldi	r23, 0x00	; 0
    51a2:	02 c0       	rjmp	.+4      	; 0x51a8 <vfprintf+0x48e>
    51a4:	6f ef       	ldi	r22, 0xFF	; 255
    51a6:	7f ef       	ldi	r23, 0xFF	; 255
    51a8:	c6 01       	movw	r24, r12
    51aa:	2b 8b       	std	Y+19, r18	; 0x13
    51ac:	f9 d2       	rcall	.+1522   	; 0x57a0 <strnlen>
    51ae:	8c 01       	movw	r16, r24
    51b0:	2b 89       	ldd	r18, Y+19	; 0x13
    51b2:	2f 77       	andi	r18, 0x7F	; 127
    51b4:	14 c0       	rjmp	.+40     	; 0x51de <vfprintf+0x4c4>
    51b6:	56 01       	movw	r10, r12
    51b8:	f2 e0       	ldi	r31, 0x02	; 2
    51ba:	af 0e       	add	r10, r31
    51bc:	b1 1c       	adc	r11, r1
    51be:	f6 01       	movw	r30, r12
    51c0:	c0 80       	ld	r12, Z
    51c2:	d1 80       	ldd	r13, Z+1	; 0x01
    51c4:	26 ff       	sbrs	r18, 6
    51c6:	03 c0       	rjmp	.+6      	; 0x51ce <vfprintf+0x4b4>
    51c8:	61 2f       	mov	r22, r17
    51ca:	70 e0       	ldi	r23, 0x00	; 0
    51cc:	02 c0       	rjmp	.+4      	; 0x51d2 <vfprintf+0x4b8>
    51ce:	6f ef       	ldi	r22, 0xFF	; 255
    51d0:	7f ef       	ldi	r23, 0xFF	; 255
    51d2:	c6 01       	movw	r24, r12
    51d4:	2b 8b       	std	Y+19, r18	; 0x13
    51d6:	8d d2       	rcall	.+1306   	; 0x56f2 <strnlen_P>
    51d8:	8c 01       	movw	r16, r24
    51da:	2b 89       	ldd	r18, Y+19	; 0x13
    51dc:	20 68       	ori	r18, 0x80	; 128
    51de:	72 2e       	mov	r7, r18
    51e0:	23 fd       	sbrc	r18, 3
    51e2:	18 c0       	rjmp	.+48     	; 0x5214 <vfprintf+0x4fa>
    51e4:	85 2d       	mov	r24, r5
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	08 17       	cp	r16, r24
    51ea:	19 07       	cpc	r17, r25
    51ec:	98 f4       	brcc	.+38     	; 0x5214 <vfprintf+0x4fa>
    51ee:	b7 01       	movw	r22, r14
    51f0:	80 e2       	ldi	r24, 0x20	; 32
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	03 d3       	rcall	.+1542   	; 0x57fc <fputc>
    51f6:	5a 94       	dec	r5
    51f8:	f5 cf       	rjmp	.-22     	; 0x51e4 <vfprintf+0x4ca>
    51fa:	f6 01       	movw	r30, r12
    51fc:	77 fc       	sbrc	r7, 7
    51fe:	85 91       	lpm	r24, Z+
    5200:	77 fe       	sbrs	r7, 7
    5202:	81 91       	ld	r24, Z+
    5204:	6f 01       	movw	r12, r30
    5206:	b7 01       	movw	r22, r14
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	f8 d2       	rcall	.+1520   	; 0x57fc <fputc>
    520c:	51 10       	cpse	r5, r1
    520e:	5a 94       	dec	r5
    5210:	01 50       	subi	r16, 0x01	; 1
    5212:	11 09       	sbc	r17, r1
    5214:	01 15       	cp	r16, r1
    5216:	11 05       	cpc	r17, r1
    5218:	81 f7       	brne	.-32     	; 0x51fa <vfprintf+0x4e0>
    521a:	db c0       	rjmp	.+438    	; 0x53d2 <vfprintf+0x6b8>
    521c:	84 36       	cpi	r24, 0x64	; 100
    521e:	11 f0       	breq	.+4      	; 0x5224 <vfprintf+0x50a>
    5220:	89 36       	cpi	r24, 0x69	; 105
    5222:	49 f5       	brne	.+82     	; 0x5276 <vfprintf+0x55c>
    5224:	56 01       	movw	r10, r12
    5226:	27 ff       	sbrs	r18, 7
    5228:	09 c0       	rjmp	.+18     	; 0x523c <vfprintf+0x522>
    522a:	f4 e0       	ldi	r31, 0x04	; 4
    522c:	af 0e       	add	r10, r31
    522e:	b1 1c       	adc	r11, r1
    5230:	f6 01       	movw	r30, r12
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	82 81       	ldd	r24, Z+2	; 0x02
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	0a c0       	rjmp	.+20     	; 0x5250 <vfprintf+0x536>
    523c:	f2 e0       	ldi	r31, 0x02	; 2
    523e:	af 0e       	add	r10, r31
    5240:	b1 1c       	adc	r11, r1
    5242:	f6 01       	movw	r30, r12
    5244:	60 81       	ld	r22, Z
    5246:	71 81       	ldd	r23, Z+1	; 0x01
    5248:	88 27       	eor	r24, r24
    524a:	77 fd       	sbrc	r23, 7
    524c:	80 95       	com	r24
    524e:	98 2f       	mov	r25, r24
    5250:	02 2f       	mov	r16, r18
    5252:	0f 76       	andi	r16, 0x6F	; 111
    5254:	97 ff       	sbrs	r25, 7
    5256:	08 c0       	rjmp	.+16     	; 0x5268 <vfprintf+0x54e>
    5258:	90 95       	com	r25
    525a:	80 95       	com	r24
    525c:	70 95       	com	r23
    525e:	61 95       	neg	r22
    5260:	7f 4f       	sbci	r23, 0xFF	; 255
    5262:	8f 4f       	sbci	r24, 0xFF	; 255
    5264:	9f 4f       	sbci	r25, 0xFF	; 255
    5266:	00 68       	ori	r16, 0x80	; 128
    5268:	2a e0       	ldi	r18, 0x0A	; 10
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	a4 01       	movw	r20, r8
    526e:	20 d3       	rcall	.+1600   	; 0x58b0 <__ultoa_invert>
    5270:	c8 2e       	mov	r12, r24
    5272:	c8 18       	sub	r12, r8
    5274:	3d c0       	rjmp	.+122    	; 0x52f0 <vfprintf+0x5d6>
    5276:	02 2f       	mov	r16, r18
    5278:	85 37       	cpi	r24, 0x75	; 117
    527a:	21 f4       	brne	.+8      	; 0x5284 <vfprintf+0x56a>
    527c:	0f 7e       	andi	r16, 0xEF	; 239
    527e:	2a e0       	ldi	r18, 0x0A	; 10
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	1d c0       	rjmp	.+58     	; 0x52be <vfprintf+0x5a4>
    5284:	09 7f       	andi	r16, 0xF9	; 249
    5286:	8f 36       	cpi	r24, 0x6F	; 111
    5288:	91 f0       	breq	.+36     	; 0x52ae <vfprintf+0x594>
    528a:	18 f4       	brcc	.+6      	; 0x5292 <vfprintf+0x578>
    528c:	88 35       	cpi	r24, 0x58	; 88
    528e:	59 f0       	breq	.+22     	; 0x52a6 <vfprintf+0x58c>
    5290:	a9 c0       	rjmp	.+338    	; 0x53e4 <vfprintf+0x6ca>
    5292:	80 37       	cpi	r24, 0x70	; 112
    5294:	19 f0       	breq	.+6      	; 0x529c <vfprintf+0x582>
    5296:	88 37       	cpi	r24, 0x78	; 120
    5298:	11 f0       	breq	.+4      	; 0x529e <vfprintf+0x584>
    529a:	a4 c0       	rjmp	.+328    	; 0x53e4 <vfprintf+0x6ca>
    529c:	00 61       	ori	r16, 0x10	; 16
    529e:	04 ff       	sbrs	r16, 4
    52a0:	09 c0       	rjmp	.+18     	; 0x52b4 <vfprintf+0x59a>
    52a2:	04 60       	ori	r16, 0x04	; 4
    52a4:	07 c0       	rjmp	.+14     	; 0x52b4 <vfprintf+0x59a>
    52a6:	24 ff       	sbrs	r18, 4
    52a8:	08 c0       	rjmp	.+16     	; 0x52ba <vfprintf+0x5a0>
    52aa:	06 60       	ori	r16, 0x06	; 6
    52ac:	06 c0       	rjmp	.+12     	; 0x52ba <vfprintf+0x5a0>
    52ae:	28 e0       	ldi	r18, 0x08	; 8
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	05 c0       	rjmp	.+10     	; 0x52be <vfprintf+0x5a4>
    52b4:	20 e1       	ldi	r18, 0x10	; 16
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	02 c0       	rjmp	.+4      	; 0x52be <vfprintf+0x5a4>
    52ba:	20 e1       	ldi	r18, 0x10	; 16
    52bc:	32 e0       	ldi	r19, 0x02	; 2
    52be:	56 01       	movw	r10, r12
    52c0:	07 ff       	sbrs	r16, 7
    52c2:	09 c0       	rjmp	.+18     	; 0x52d6 <vfprintf+0x5bc>
    52c4:	f4 e0       	ldi	r31, 0x04	; 4
    52c6:	af 0e       	add	r10, r31
    52c8:	b1 1c       	adc	r11, r1
    52ca:	f6 01       	movw	r30, r12
    52cc:	60 81       	ld	r22, Z
    52ce:	71 81       	ldd	r23, Z+1	; 0x01
    52d0:	82 81       	ldd	r24, Z+2	; 0x02
    52d2:	93 81       	ldd	r25, Z+3	; 0x03
    52d4:	08 c0       	rjmp	.+16     	; 0x52e6 <vfprintf+0x5cc>
    52d6:	f2 e0       	ldi	r31, 0x02	; 2
    52d8:	af 0e       	add	r10, r31
    52da:	b1 1c       	adc	r11, r1
    52dc:	f6 01       	movw	r30, r12
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	a4 01       	movw	r20, r8
    52e8:	e3 d2       	rcall	.+1478   	; 0x58b0 <__ultoa_invert>
    52ea:	c8 2e       	mov	r12, r24
    52ec:	c8 18       	sub	r12, r8
    52ee:	0f 77       	andi	r16, 0x7F	; 127
    52f0:	06 ff       	sbrs	r16, 6
    52f2:	0b c0       	rjmp	.+22     	; 0x530a <vfprintf+0x5f0>
    52f4:	20 2f       	mov	r18, r16
    52f6:	2e 7f       	andi	r18, 0xFE	; 254
    52f8:	c1 16       	cp	r12, r17
    52fa:	50 f4       	brcc	.+20     	; 0x5310 <vfprintf+0x5f6>
    52fc:	04 ff       	sbrs	r16, 4
    52fe:	0a c0       	rjmp	.+20     	; 0x5314 <vfprintf+0x5fa>
    5300:	02 fd       	sbrc	r16, 2
    5302:	08 c0       	rjmp	.+16     	; 0x5314 <vfprintf+0x5fa>
    5304:	20 2f       	mov	r18, r16
    5306:	2e 7e       	andi	r18, 0xEE	; 238
    5308:	05 c0       	rjmp	.+10     	; 0x5314 <vfprintf+0x5fa>
    530a:	dc 2c       	mov	r13, r12
    530c:	20 2f       	mov	r18, r16
    530e:	03 c0       	rjmp	.+6      	; 0x5316 <vfprintf+0x5fc>
    5310:	dc 2c       	mov	r13, r12
    5312:	01 c0       	rjmp	.+2      	; 0x5316 <vfprintf+0x5fc>
    5314:	d1 2e       	mov	r13, r17
    5316:	24 ff       	sbrs	r18, 4
    5318:	0d c0       	rjmp	.+26     	; 0x5334 <vfprintf+0x61a>
    531a:	fe 01       	movw	r30, r28
    531c:	ec 0d       	add	r30, r12
    531e:	f1 1d       	adc	r31, r1
    5320:	80 81       	ld	r24, Z
    5322:	80 33       	cpi	r24, 0x30	; 48
    5324:	11 f4       	brne	.+4      	; 0x532a <vfprintf+0x610>
    5326:	29 7e       	andi	r18, 0xE9	; 233
    5328:	09 c0       	rjmp	.+18     	; 0x533c <vfprintf+0x622>
    532a:	22 ff       	sbrs	r18, 2
    532c:	06 c0       	rjmp	.+12     	; 0x533a <vfprintf+0x620>
    532e:	d3 94       	inc	r13
    5330:	d3 94       	inc	r13
    5332:	04 c0       	rjmp	.+8      	; 0x533c <vfprintf+0x622>
    5334:	82 2f       	mov	r24, r18
    5336:	86 78       	andi	r24, 0x86	; 134
    5338:	09 f0       	breq	.+2      	; 0x533c <vfprintf+0x622>
    533a:	d3 94       	inc	r13
    533c:	23 fd       	sbrc	r18, 3
    533e:	12 c0       	rjmp	.+36     	; 0x5364 <vfprintf+0x64a>
    5340:	20 ff       	sbrs	r18, 0
    5342:	06 c0       	rjmp	.+12     	; 0x5350 <vfprintf+0x636>
    5344:	1c 2d       	mov	r17, r12
    5346:	d5 14       	cp	r13, r5
    5348:	18 f4       	brcc	.+6      	; 0x5350 <vfprintf+0x636>
    534a:	15 0d       	add	r17, r5
    534c:	1d 19       	sub	r17, r13
    534e:	d5 2c       	mov	r13, r5
    5350:	d5 14       	cp	r13, r5
    5352:	60 f4       	brcc	.+24     	; 0x536c <vfprintf+0x652>
    5354:	b7 01       	movw	r22, r14
    5356:	80 e2       	ldi	r24, 0x20	; 32
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	2b 8b       	std	Y+19, r18	; 0x13
    535c:	4f d2       	rcall	.+1182   	; 0x57fc <fputc>
    535e:	d3 94       	inc	r13
    5360:	2b 89       	ldd	r18, Y+19	; 0x13
    5362:	f6 cf       	rjmp	.-20     	; 0x5350 <vfprintf+0x636>
    5364:	d5 14       	cp	r13, r5
    5366:	10 f4       	brcc	.+4      	; 0x536c <vfprintf+0x652>
    5368:	5d 18       	sub	r5, r13
    536a:	01 c0       	rjmp	.+2      	; 0x536e <vfprintf+0x654>
    536c:	51 2c       	mov	r5, r1
    536e:	24 ff       	sbrs	r18, 4
    5370:	11 c0       	rjmp	.+34     	; 0x5394 <vfprintf+0x67a>
    5372:	b7 01       	movw	r22, r14
    5374:	80 e3       	ldi	r24, 0x30	; 48
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	2b 8b       	std	Y+19, r18	; 0x13
    537a:	40 d2       	rcall	.+1152   	; 0x57fc <fputc>
    537c:	2b 89       	ldd	r18, Y+19	; 0x13
    537e:	22 ff       	sbrs	r18, 2
    5380:	16 c0       	rjmp	.+44     	; 0x53ae <vfprintf+0x694>
    5382:	21 ff       	sbrs	r18, 1
    5384:	03 c0       	rjmp	.+6      	; 0x538c <vfprintf+0x672>
    5386:	88 e5       	ldi	r24, 0x58	; 88
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	02 c0       	rjmp	.+4      	; 0x5390 <vfprintf+0x676>
    538c:	88 e7       	ldi	r24, 0x78	; 120
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	b7 01       	movw	r22, r14
    5392:	0c c0       	rjmp	.+24     	; 0x53ac <vfprintf+0x692>
    5394:	82 2f       	mov	r24, r18
    5396:	86 78       	andi	r24, 0x86	; 134
    5398:	51 f0       	breq	.+20     	; 0x53ae <vfprintf+0x694>
    539a:	21 fd       	sbrc	r18, 1
    539c:	02 c0       	rjmp	.+4      	; 0x53a2 <vfprintf+0x688>
    539e:	80 e2       	ldi	r24, 0x20	; 32
    53a0:	01 c0       	rjmp	.+2      	; 0x53a4 <vfprintf+0x68a>
    53a2:	8b e2       	ldi	r24, 0x2B	; 43
    53a4:	27 fd       	sbrc	r18, 7
    53a6:	8d e2       	ldi	r24, 0x2D	; 45
    53a8:	b7 01       	movw	r22, r14
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	27 d2       	rcall	.+1102   	; 0x57fc <fputc>
    53ae:	c1 16       	cp	r12, r17
    53b0:	30 f4       	brcc	.+12     	; 0x53be <vfprintf+0x6a4>
    53b2:	b7 01       	movw	r22, r14
    53b4:	80 e3       	ldi	r24, 0x30	; 48
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	21 d2       	rcall	.+1090   	; 0x57fc <fputc>
    53ba:	11 50       	subi	r17, 0x01	; 1
    53bc:	f8 cf       	rjmp	.-16     	; 0x53ae <vfprintf+0x694>
    53be:	ca 94       	dec	r12
    53c0:	f4 01       	movw	r30, r8
    53c2:	ec 0d       	add	r30, r12
    53c4:	f1 1d       	adc	r31, r1
    53c6:	80 81       	ld	r24, Z
    53c8:	b7 01       	movw	r22, r14
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	17 d2       	rcall	.+1070   	; 0x57fc <fputc>
    53ce:	c1 10       	cpse	r12, r1
    53d0:	f6 cf       	rjmp	.-20     	; 0x53be <vfprintf+0x6a4>
    53d2:	55 20       	and	r5, r5
    53d4:	09 f4       	brne	.+2      	; 0x53d8 <vfprintf+0x6be>
    53d6:	dd cc       	rjmp	.-1606   	; 0x4d92 <vfprintf+0x78>
    53d8:	b7 01       	movw	r22, r14
    53da:	80 e2       	ldi	r24, 0x20	; 32
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	0e d2       	rcall	.+1052   	; 0x57fc <fputc>
    53e0:	5a 94       	dec	r5
    53e2:	f7 cf       	rjmp	.-18     	; 0x53d2 <vfprintf+0x6b8>
    53e4:	f7 01       	movw	r30, r14
    53e6:	86 81       	ldd	r24, Z+6	; 0x06
    53e8:	97 81       	ldd	r25, Z+7	; 0x07
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <vfprintf+0x6d6>
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	9f ef       	ldi	r25, 0xFF	; 255
    53f0:	63 96       	adiw	r28, 0x13	; 19
    53f2:	cd bf       	out	0x3d, r28	; 61
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	1f 91       	pop	r17
    53fc:	0f 91       	pop	r16
    53fe:	ff 90       	pop	r15
    5400:	ef 90       	pop	r14
    5402:	df 90       	pop	r13
    5404:	cf 90       	pop	r12
    5406:	bf 90       	pop	r11
    5408:	af 90       	pop	r10
    540a:	9f 90       	pop	r9
    540c:	8f 90       	pop	r8
    540e:	7f 90       	pop	r7
    5410:	6f 90       	pop	r6
    5412:	5f 90       	pop	r5
    5414:	4f 90       	pop	r4
    5416:	3f 90       	pop	r3
    5418:	2f 90       	pop	r2
    541a:	08 95       	ret

0000541c <__divmodhi4>:
    541c:	97 fb       	bst	r25, 7
    541e:	07 2e       	mov	r0, r23
    5420:	16 f4       	brtc	.+4      	; 0x5426 <__divmodhi4+0xa>
    5422:	00 94       	com	r0
    5424:	06 d0       	rcall	.+12     	; 0x5432 <__divmodhi4_neg1>
    5426:	77 fd       	sbrc	r23, 7
    5428:	08 d0       	rcall	.+16     	; 0x543a <__divmodhi4_neg2>
    542a:	20 d0       	rcall	.+64     	; 0x546c <__udivmodhi4>
    542c:	07 fc       	sbrc	r0, 7
    542e:	05 d0       	rcall	.+10     	; 0x543a <__divmodhi4_neg2>
    5430:	3e f4       	brtc	.+14     	; 0x5440 <__divmodhi4_exit>

00005432 <__divmodhi4_neg1>:
    5432:	90 95       	com	r25
    5434:	81 95       	neg	r24
    5436:	9f 4f       	sbci	r25, 0xFF	; 255
    5438:	08 95       	ret

0000543a <__divmodhi4_neg2>:
    543a:	70 95       	com	r23
    543c:	61 95       	neg	r22
    543e:	7f 4f       	sbci	r23, 0xFF	; 255

00005440 <__divmodhi4_exit>:
    5440:	08 95       	ret

00005442 <__tablejump2__>:
    5442:	ee 0f       	add	r30, r30
    5444:	ff 1f       	adc	r31, r31

00005446 <__tablejump__>:
    5446:	05 90       	lpm	r0, Z+
    5448:	f4 91       	lpm	r31, Z
    544a:	e0 2d       	mov	r30, r0
    544c:	19 94       	eijmp

0000544e <__umulhisi3>:
    544e:	a2 9f       	mul	r26, r18
    5450:	b0 01       	movw	r22, r0
    5452:	b3 9f       	mul	r27, r19
    5454:	c0 01       	movw	r24, r0
    5456:	a3 9f       	mul	r26, r19
    5458:	70 0d       	add	r23, r0
    545a:	81 1d       	adc	r24, r1
    545c:	11 24       	eor	r1, r1
    545e:	91 1d       	adc	r25, r1
    5460:	b2 9f       	mul	r27, r18
    5462:	70 0d       	add	r23, r0
    5464:	81 1d       	adc	r24, r1
    5466:	11 24       	eor	r1, r1
    5468:	91 1d       	adc	r25, r1
    546a:	08 95       	ret

0000546c <__udivmodhi4>:
    546c:	aa 1b       	sub	r26, r26
    546e:	bb 1b       	sub	r27, r27
    5470:	51 e1       	ldi	r21, 0x11	; 17
    5472:	07 c0       	rjmp	.+14     	; 0x5482 <__udivmodhi4_ep>

00005474 <__udivmodhi4_loop>:
    5474:	aa 1f       	adc	r26, r26
    5476:	bb 1f       	adc	r27, r27
    5478:	a6 17       	cp	r26, r22
    547a:	b7 07       	cpc	r27, r23
    547c:	10 f0       	brcs	.+4      	; 0x5482 <__udivmodhi4_ep>
    547e:	a6 1b       	sub	r26, r22
    5480:	b7 0b       	sbc	r27, r23

00005482 <__udivmodhi4_ep>:
    5482:	88 1f       	adc	r24, r24
    5484:	99 1f       	adc	r25, r25
    5486:	5a 95       	dec	r21
    5488:	a9 f7       	brne	.-22     	; 0x5474 <__udivmodhi4_loop>
    548a:	80 95       	com	r24
    548c:	90 95       	com	r25
    548e:	bc 01       	movw	r22, r24
    5490:	cd 01       	movw	r24, r26
    5492:	08 95       	ret

00005494 <do_rand>:
    5494:	8f 92       	push	r8
    5496:	9f 92       	push	r9
    5498:	af 92       	push	r10
    549a:	bf 92       	push	r11
    549c:	cf 92       	push	r12
    549e:	df 92       	push	r13
    54a0:	ef 92       	push	r14
    54a2:	ff 92       	push	r15
    54a4:	cf 93       	push	r28
    54a6:	df 93       	push	r29
    54a8:	ec 01       	movw	r28, r24
    54aa:	68 81       	ld	r22, Y
    54ac:	79 81       	ldd	r23, Y+1	; 0x01
    54ae:	8a 81       	ldd	r24, Y+2	; 0x02
    54b0:	9b 81       	ldd	r25, Y+3	; 0x03
    54b2:	61 15       	cp	r22, r1
    54b4:	71 05       	cpc	r23, r1
    54b6:	81 05       	cpc	r24, r1
    54b8:	91 05       	cpc	r25, r1
    54ba:	21 f4       	brne	.+8      	; 0x54c4 <do_rand+0x30>
    54bc:	64 e2       	ldi	r22, 0x24	; 36
    54be:	79 ed       	ldi	r23, 0xD9	; 217
    54c0:	8b e5       	ldi	r24, 0x5B	; 91
    54c2:	97 e0       	ldi	r25, 0x07	; 7
    54c4:	2d e1       	ldi	r18, 0x1D	; 29
    54c6:	33 ef       	ldi	r19, 0xF3	; 243
    54c8:	41 e0       	ldi	r20, 0x01	; 1
    54ca:	50 e0       	ldi	r21, 0x00	; 0
    54cc:	5f d2       	rcall	.+1214   	; 0x598c <__divmodsi4>
    54ce:	49 01       	movw	r8, r18
    54d0:	5a 01       	movw	r10, r20
    54d2:	9b 01       	movw	r18, r22
    54d4:	ac 01       	movw	r20, r24
    54d6:	a7 ea       	ldi	r26, 0xA7	; 167
    54d8:	b1 e4       	ldi	r27, 0x41	; 65
    54da:	74 d2       	rcall	.+1256   	; 0x59c4 <__muluhisi3>
    54dc:	6b 01       	movw	r12, r22
    54de:	7c 01       	movw	r14, r24
    54e0:	ac ee       	ldi	r26, 0xEC	; 236
    54e2:	b4 ef       	ldi	r27, 0xF4	; 244
    54e4:	a5 01       	movw	r20, r10
    54e6:	94 01       	movw	r18, r8
    54e8:	79 d2       	rcall	.+1266   	; 0x59dc <__mulohisi3>
    54ea:	c6 0e       	add	r12, r22
    54ec:	d7 1e       	adc	r13, r23
    54ee:	e8 1e       	adc	r14, r24
    54f0:	f9 1e       	adc	r15, r25
    54f2:	f7 fe       	sbrs	r15, 7
    54f4:	06 c0       	rjmp	.+12     	; 0x5502 <do_rand+0x6e>
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	c8 1a       	sub	r12, r24
    54fa:	d1 08       	sbc	r13, r1
    54fc:	e1 08       	sbc	r14, r1
    54fe:	80 e8       	ldi	r24, 0x80	; 128
    5500:	f8 0a       	sbc	r15, r24
    5502:	c8 82       	st	Y, r12
    5504:	d9 82       	std	Y+1, r13	; 0x01
    5506:	ea 82       	std	Y+2, r14	; 0x02
    5508:	fb 82       	std	Y+3, r15	; 0x03
    550a:	c6 01       	movw	r24, r12
    550c:	9f 77       	andi	r25, 0x7F	; 127
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	ff 90       	pop	r15
    5514:	ef 90       	pop	r14
    5516:	df 90       	pop	r13
    5518:	cf 90       	pop	r12
    551a:	bf 90       	pop	r11
    551c:	af 90       	pop	r10
    551e:	9f 90       	pop	r9
    5520:	8f 90       	pop	r8
    5522:	08 95       	ret

00005524 <rand_r>:
    5524:	b7 cf       	rjmp	.-146    	; 0x5494 <do_rand>

00005526 <rand>:
    5526:	80 e0       	ldi	r24, 0x00	; 0
    5528:	90 e2       	ldi	r25, 0x20	; 32
    552a:	b4 cf       	rjmp	.-152    	; 0x5494 <do_rand>

0000552c <srand>:
    552c:	a0 e0       	ldi	r26, 0x00	; 0
    552e:	b0 e0       	ldi	r27, 0x00	; 0
    5530:	80 93 00 20 	sts	0x2000, r24
    5534:	90 93 01 20 	sts	0x2001, r25
    5538:	a0 93 02 20 	sts	0x2002, r26
    553c:	b0 93 03 20 	sts	0x2003, r27
    5540:	08 95       	ret

00005542 <__ftoa_engine>:
    5542:	28 30       	cpi	r18, 0x08	; 8
    5544:	08 f0       	brcs	.+2      	; 0x5548 <__ftoa_engine+0x6>
    5546:	27 e0       	ldi	r18, 0x07	; 7
    5548:	33 27       	eor	r19, r19
    554a:	da 01       	movw	r26, r20
    554c:	99 0f       	add	r25, r25
    554e:	31 1d       	adc	r19, r1
    5550:	87 fd       	sbrc	r24, 7
    5552:	91 60       	ori	r25, 0x01	; 1
    5554:	00 96       	adiw	r24, 0x00	; 0
    5556:	61 05       	cpc	r22, r1
    5558:	71 05       	cpc	r23, r1
    555a:	39 f4       	brne	.+14     	; 0x556a <__ftoa_engine+0x28>
    555c:	32 60       	ori	r19, 0x02	; 2
    555e:	2e 5f       	subi	r18, 0xFE	; 254
    5560:	3d 93       	st	X+, r19
    5562:	30 e3       	ldi	r19, 0x30	; 48
    5564:	2a 95       	dec	r18
    5566:	e1 f7       	brne	.-8      	; 0x5560 <__ftoa_engine+0x1e>
    5568:	08 95       	ret
    556a:	9f 3f       	cpi	r25, 0xFF	; 255
    556c:	30 f0       	brcs	.+12     	; 0x557a <__ftoa_engine+0x38>
    556e:	80 38       	cpi	r24, 0x80	; 128
    5570:	71 05       	cpc	r23, r1
    5572:	61 05       	cpc	r22, r1
    5574:	09 f0       	breq	.+2      	; 0x5578 <__ftoa_engine+0x36>
    5576:	3c 5f       	subi	r19, 0xFC	; 252
    5578:	3c 5f       	subi	r19, 0xFC	; 252
    557a:	3d 93       	st	X+, r19
    557c:	91 30       	cpi	r25, 0x01	; 1
    557e:	08 f0       	brcs	.+2      	; 0x5582 <__ftoa_engine+0x40>
    5580:	80 68       	ori	r24, 0x80	; 128
    5582:	91 1d       	adc	r25, r1
    5584:	df 93       	push	r29
    5586:	cf 93       	push	r28
    5588:	1f 93       	push	r17
    558a:	0f 93       	push	r16
    558c:	ff 92       	push	r15
    558e:	ef 92       	push	r14
    5590:	19 2f       	mov	r17, r25
    5592:	98 7f       	andi	r25, 0xF8	; 248
    5594:	96 95       	lsr	r25
    5596:	e9 2f       	mov	r30, r25
    5598:	96 95       	lsr	r25
    559a:	96 95       	lsr	r25
    559c:	e9 0f       	add	r30, r25
    559e:	ff 27       	eor	r31, r31
    55a0:	e4 59       	subi	r30, 0x94	; 148
    55a2:	f9 4f       	sbci	r31, 0xF9	; 249
    55a4:	99 27       	eor	r25, r25
    55a6:	33 27       	eor	r19, r19
    55a8:	ee 24       	eor	r14, r14
    55aa:	ff 24       	eor	r15, r15
    55ac:	a7 01       	movw	r20, r14
    55ae:	e7 01       	movw	r28, r14
    55b0:	05 90       	lpm	r0, Z+
    55b2:	08 94       	sec
    55b4:	07 94       	ror	r0
    55b6:	28 f4       	brcc	.+10     	; 0x55c2 <__ftoa_engine+0x80>
    55b8:	36 0f       	add	r19, r22
    55ba:	e7 1e       	adc	r14, r23
    55bc:	f8 1e       	adc	r15, r24
    55be:	49 1f       	adc	r20, r25
    55c0:	51 1d       	adc	r21, r1
    55c2:	66 0f       	add	r22, r22
    55c4:	77 1f       	adc	r23, r23
    55c6:	88 1f       	adc	r24, r24
    55c8:	99 1f       	adc	r25, r25
    55ca:	06 94       	lsr	r0
    55cc:	a1 f7       	brne	.-24     	; 0x55b6 <__ftoa_engine+0x74>
    55ce:	05 90       	lpm	r0, Z+
    55d0:	07 94       	ror	r0
    55d2:	28 f4       	brcc	.+10     	; 0x55de <__ftoa_engine+0x9c>
    55d4:	e7 0e       	add	r14, r23
    55d6:	f8 1e       	adc	r15, r24
    55d8:	49 1f       	adc	r20, r25
    55da:	56 1f       	adc	r21, r22
    55dc:	c1 1d       	adc	r28, r1
    55de:	77 0f       	add	r23, r23
    55e0:	88 1f       	adc	r24, r24
    55e2:	99 1f       	adc	r25, r25
    55e4:	66 1f       	adc	r22, r22
    55e6:	06 94       	lsr	r0
    55e8:	a1 f7       	brne	.-24     	; 0x55d2 <__ftoa_engine+0x90>
    55ea:	05 90       	lpm	r0, Z+
    55ec:	07 94       	ror	r0
    55ee:	28 f4       	brcc	.+10     	; 0x55fa <__ftoa_engine+0xb8>
    55f0:	f8 0e       	add	r15, r24
    55f2:	49 1f       	adc	r20, r25
    55f4:	56 1f       	adc	r21, r22
    55f6:	c7 1f       	adc	r28, r23
    55f8:	d1 1d       	adc	r29, r1
    55fa:	88 0f       	add	r24, r24
    55fc:	99 1f       	adc	r25, r25
    55fe:	66 1f       	adc	r22, r22
    5600:	77 1f       	adc	r23, r23
    5602:	06 94       	lsr	r0
    5604:	a1 f7       	brne	.-24     	; 0x55ee <__ftoa_engine+0xac>
    5606:	05 90       	lpm	r0, Z+
    5608:	07 94       	ror	r0
    560a:	20 f4       	brcc	.+8      	; 0x5614 <__ftoa_engine+0xd2>
    560c:	49 0f       	add	r20, r25
    560e:	56 1f       	adc	r21, r22
    5610:	c7 1f       	adc	r28, r23
    5612:	d8 1f       	adc	r29, r24
    5614:	99 0f       	add	r25, r25
    5616:	66 1f       	adc	r22, r22
    5618:	77 1f       	adc	r23, r23
    561a:	88 1f       	adc	r24, r24
    561c:	06 94       	lsr	r0
    561e:	a9 f7       	brne	.-22     	; 0x560a <__ftoa_engine+0xc8>
    5620:	84 91       	lpm	r24, Z
    5622:	10 95       	com	r17
    5624:	17 70       	andi	r17, 0x07	; 7
    5626:	41 f0       	breq	.+16     	; 0x5638 <__ftoa_engine+0xf6>
    5628:	d6 95       	lsr	r29
    562a:	c7 95       	ror	r28
    562c:	57 95       	ror	r21
    562e:	47 95       	ror	r20
    5630:	f7 94       	ror	r15
    5632:	e7 94       	ror	r14
    5634:	1a 95       	dec	r17
    5636:	c1 f7       	brne	.-16     	; 0x5628 <__ftoa_engine+0xe6>
    5638:	e2 e1       	ldi	r30, 0x12	; 18
    563a:	f6 e0       	ldi	r31, 0x06	; 6
    563c:	68 94       	set
    563e:	15 90       	lpm	r1, Z+
    5640:	15 91       	lpm	r17, Z+
    5642:	35 91       	lpm	r19, Z+
    5644:	65 91       	lpm	r22, Z+
    5646:	95 91       	lpm	r25, Z+
    5648:	05 90       	lpm	r0, Z+
    564a:	7f e2       	ldi	r23, 0x2F	; 47
    564c:	73 95       	inc	r23
    564e:	e1 18       	sub	r14, r1
    5650:	f1 0a       	sbc	r15, r17
    5652:	43 0b       	sbc	r20, r19
    5654:	56 0b       	sbc	r21, r22
    5656:	c9 0b       	sbc	r28, r25
    5658:	d0 09       	sbc	r29, r0
    565a:	c0 f7       	brcc	.-16     	; 0x564c <__ftoa_engine+0x10a>
    565c:	e1 0c       	add	r14, r1
    565e:	f1 1e       	adc	r15, r17
    5660:	43 1f       	adc	r20, r19
    5662:	56 1f       	adc	r21, r22
    5664:	c9 1f       	adc	r28, r25
    5666:	d0 1d       	adc	r29, r0
    5668:	7e f4       	brtc	.+30     	; 0x5688 <__ftoa_engine+0x146>
    566a:	70 33       	cpi	r23, 0x30	; 48
    566c:	11 f4       	brne	.+4      	; 0x5672 <__ftoa_engine+0x130>
    566e:	8a 95       	dec	r24
    5670:	e6 cf       	rjmp	.-52     	; 0x563e <__ftoa_engine+0xfc>
    5672:	e8 94       	clt
    5674:	01 50       	subi	r16, 0x01	; 1
    5676:	30 f0       	brcs	.+12     	; 0x5684 <__ftoa_engine+0x142>
    5678:	08 0f       	add	r16, r24
    567a:	0a f4       	brpl	.+2      	; 0x567e <__ftoa_engine+0x13c>
    567c:	00 27       	eor	r16, r16
    567e:	02 17       	cp	r16, r18
    5680:	08 f4       	brcc	.+2      	; 0x5684 <__ftoa_engine+0x142>
    5682:	20 2f       	mov	r18, r16
    5684:	23 95       	inc	r18
    5686:	02 2f       	mov	r16, r18
    5688:	7a 33       	cpi	r23, 0x3A	; 58
    568a:	28 f0       	brcs	.+10     	; 0x5696 <__ftoa_engine+0x154>
    568c:	79 e3       	ldi	r23, 0x39	; 57
    568e:	7d 93       	st	X+, r23
    5690:	2a 95       	dec	r18
    5692:	e9 f7       	brne	.-6      	; 0x568e <__ftoa_engine+0x14c>
    5694:	10 c0       	rjmp	.+32     	; 0x56b6 <__ftoa_engine+0x174>
    5696:	7d 93       	st	X+, r23
    5698:	2a 95       	dec	r18
    569a:	89 f6       	brne	.-94     	; 0x563e <__ftoa_engine+0xfc>
    569c:	06 94       	lsr	r0
    569e:	97 95       	ror	r25
    56a0:	67 95       	ror	r22
    56a2:	37 95       	ror	r19
    56a4:	17 95       	ror	r17
    56a6:	17 94       	ror	r1
    56a8:	e1 18       	sub	r14, r1
    56aa:	f1 0a       	sbc	r15, r17
    56ac:	43 0b       	sbc	r20, r19
    56ae:	56 0b       	sbc	r21, r22
    56b0:	c9 0b       	sbc	r28, r25
    56b2:	d0 09       	sbc	r29, r0
    56b4:	98 f0       	brcs	.+38     	; 0x56dc <__ftoa_engine+0x19a>
    56b6:	23 95       	inc	r18
    56b8:	7e 91       	ld	r23, -X
    56ba:	73 95       	inc	r23
    56bc:	7a 33       	cpi	r23, 0x3A	; 58
    56be:	08 f0       	brcs	.+2      	; 0x56c2 <__ftoa_engine+0x180>
    56c0:	70 e3       	ldi	r23, 0x30	; 48
    56c2:	7c 93       	st	X, r23
    56c4:	20 13       	cpse	r18, r16
    56c6:	b8 f7       	brcc	.-18     	; 0x56b6 <__ftoa_engine+0x174>
    56c8:	7e 91       	ld	r23, -X
    56ca:	70 61       	ori	r23, 0x10	; 16
    56cc:	7d 93       	st	X+, r23
    56ce:	30 f0       	brcs	.+12     	; 0x56dc <__ftoa_engine+0x19a>
    56d0:	83 95       	inc	r24
    56d2:	71 e3       	ldi	r23, 0x31	; 49
    56d4:	7d 93       	st	X+, r23
    56d6:	70 e3       	ldi	r23, 0x30	; 48
    56d8:	2a 95       	dec	r18
    56da:	e1 f7       	brne	.-8      	; 0x56d4 <__ftoa_engine+0x192>
    56dc:	11 24       	eor	r1, r1
    56de:	ef 90       	pop	r14
    56e0:	ff 90       	pop	r15
    56e2:	0f 91       	pop	r16
    56e4:	1f 91       	pop	r17
    56e6:	cf 91       	pop	r28
    56e8:	df 91       	pop	r29
    56ea:	99 27       	eor	r25, r25
    56ec:	87 fd       	sbrc	r24, 7
    56ee:	90 95       	com	r25
    56f0:	08 95       	ret

000056f2 <strnlen_P>:
    56f2:	fc 01       	movw	r30, r24
    56f4:	05 90       	lpm	r0, Z+
    56f6:	61 50       	subi	r22, 0x01	; 1
    56f8:	70 40       	sbci	r23, 0x00	; 0
    56fa:	01 10       	cpse	r0, r1
    56fc:	d8 f7       	brcc	.-10     	; 0x56f4 <strnlen_P+0x2>
    56fe:	80 95       	com	r24
    5700:	90 95       	com	r25
    5702:	8e 0f       	add	r24, r30
    5704:	9f 1f       	adc	r25, r31
    5706:	08 95       	ret

00005708 <memcmp>:
    5708:	fb 01       	movw	r30, r22
    570a:	dc 01       	movw	r26, r24
    570c:	04 c0       	rjmp	.+8      	; 0x5716 <memcmp+0xe>
    570e:	8d 91       	ld	r24, X+
    5710:	01 90       	ld	r0, Z+
    5712:	80 19       	sub	r24, r0
    5714:	21 f4       	brne	.+8      	; 0x571e <memcmp+0x16>
    5716:	41 50       	subi	r20, 0x01	; 1
    5718:	50 40       	sbci	r21, 0x00	; 0
    571a:	c8 f7       	brcc	.-14     	; 0x570e <memcmp+0x6>
    571c:	88 1b       	sub	r24, r24
    571e:	99 0b       	sbc	r25, r25
    5720:	08 95       	ret

00005722 <memcpy>:
    5722:	fb 01       	movw	r30, r22
    5724:	dc 01       	movw	r26, r24
    5726:	02 c0       	rjmp	.+4      	; 0x572c <memcpy+0xa>
    5728:	01 90       	ld	r0, Z+
    572a:	0d 92       	st	X+, r0
    572c:	41 50       	subi	r20, 0x01	; 1
    572e:	50 40       	sbci	r21, 0x00	; 0
    5730:	d8 f7       	brcc	.-10     	; 0x5728 <memcpy+0x6>
    5732:	08 95       	ret

00005734 <memset>:
    5734:	dc 01       	movw	r26, r24
    5736:	01 c0       	rjmp	.+2      	; 0x573a <memset+0x6>
    5738:	6d 93       	st	X+, r22
    573a:	41 50       	subi	r20, 0x01	; 1
    573c:	50 40       	sbci	r21, 0x00	; 0
    573e:	e0 f7       	brcc	.-8      	; 0x5738 <memset+0x4>
    5740:	08 95       	ret

00005742 <strcat>:
    5742:	fb 01       	movw	r30, r22
    5744:	dc 01       	movw	r26, r24
    5746:	0d 90       	ld	r0, X+
    5748:	00 20       	and	r0, r0
    574a:	e9 f7       	brne	.-6      	; 0x5746 <strcat+0x4>
    574c:	11 97       	sbiw	r26, 0x01	; 1
    574e:	01 90       	ld	r0, Z+
    5750:	0d 92       	st	X+, r0
    5752:	00 20       	and	r0, r0
    5754:	e1 f7       	brne	.-8      	; 0x574e <strcat+0xc>
    5756:	08 95       	ret

00005758 <strcpy>:
    5758:	fb 01       	movw	r30, r22
    575a:	dc 01       	movw	r26, r24
    575c:	01 90       	ld	r0, Z+
    575e:	0d 92       	st	X+, r0
    5760:	00 20       	and	r0, r0
    5762:	e1 f7       	brne	.-8      	; 0x575c <strcpy+0x4>
    5764:	08 95       	ret

00005766 <strncmp>:
    5766:	fb 01       	movw	r30, r22
    5768:	dc 01       	movw	r26, r24
    576a:	41 50       	subi	r20, 0x01	; 1
    576c:	50 40       	sbci	r21, 0x00	; 0
    576e:	30 f0       	brcs	.+12     	; 0x577c <strncmp+0x16>
    5770:	8d 91       	ld	r24, X+
    5772:	01 90       	ld	r0, Z+
    5774:	80 19       	sub	r24, r0
    5776:	19 f4       	brne	.+6      	; 0x577e <strncmp+0x18>
    5778:	00 20       	and	r0, r0
    577a:	b9 f7       	brne	.-18     	; 0x576a <strncmp+0x4>
    577c:	88 1b       	sub	r24, r24
    577e:	99 0b       	sbc	r25, r25
    5780:	08 95       	ret

00005782 <strncpy>:
    5782:	fb 01       	movw	r30, r22
    5784:	dc 01       	movw	r26, r24
    5786:	41 50       	subi	r20, 0x01	; 1
    5788:	50 40       	sbci	r21, 0x00	; 0
    578a:	48 f0       	brcs	.+18     	; 0x579e <strncpy+0x1c>
    578c:	01 90       	ld	r0, Z+
    578e:	0d 92       	st	X+, r0
    5790:	00 20       	and	r0, r0
    5792:	c9 f7       	brne	.-14     	; 0x5786 <strncpy+0x4>
    5794:	01 c0       	rjmp	.+2      	; 0x5798 <strncpy+0x16>
    5796:	1d 92       	st	X+, r1
    5798:	41 50       	subi	r20, 0x01	; 1
    579a:	50 40       	sbci	r21, 0x00	; 0
    579c:	e0 f7       	brcc	.-8      	; 0x5796 <strncpy+0x14>
    579e:	08 95       	ret

000057a0 <strnlen>:
    57a0:	fc 01       	movw	r30, r24
    57a2:	61 50       	subi	r22, 0x01	; 1
    57a4:	70 40       	sbci	r23, 0x00	; 0
    57a6:	01 90       	ld	r0, Z+
    57a8:	01 10       	cpse	r0, r1
    57aa:	d8 f7       	brcc	.-10     	; 0x57a2 <strnlen+0x2>
    57ac:	80 95       	com	r24
    57ae:	90 95       	com	r25
    57b0:	8e 0f       	add	r24, r30
    57b2:	9f 1f       	adc	r25, r31
    57b4:	08 95       	ret

000057b6 <__itoa_ncheck>:
    57b6:	bb 27       	eor	r27, r27
    57b8:	4a 30       	cpi	r20, 0x0A	; 10
    57ba:	31 f4       	brne	.+12     	; 0x57c8 <__itoa_ncheck+0x12>
    57bc:	99 23       	and	r25, r25
    57be:	22 f4       	brpl	.+8      	; 0x57c8 <__itoa_ncheck+0x12>
    57c0:	bd e2       	ldi	r27, 0x2D	; 45
    57c2:	90 95       	com	r25
    57c4:	81 95       	neg	r24
    57c6:	9f 4f       	sbci	r25, 0xFF	; 255
    57c8:	01 c0       	rjmp	.+2      	; 0x57cc <__utoa_common>

000057ca <__utoa_ncheck>:
    57ca:	bb 27       	eor	r27, r27

000057cc <__utoa_common>:
    57cc:	fb 01       	movw	r30, r22
    57ce:	55 27       	eor	r21, r21
    57d0:	aa 27       	eor	r26, r26
    57d2:	88 0f       	add	r24, r24
    57d4:	99 1f       	adc	r25, r25
    57d6:	aa 1f       	adc	r26, r26
    57d8:	a4 17       	cp	r26, r20
    57da:	10 f0       	brcs	.+4      	; 0x57e0 <__utoa_common+0x14>
    57dc:	a4 1b       	sub	r26, r20
    57de:	83 95       	inc	r24
    57e0:	50 51       	subi	r21, 0x10	; 16
    57e2:	b9 f7       	brne	.-18     	; 0x57d2 <__utoa_common+0x6>
    57e4:	a0 5d       	subi	r26, 0xD0	; 208
    57e6:	aa 33       	cpi	r26, 0x3A	; 58
    57e8:	08 f0       	brcs	.+2      	; 0x57ec <__utoa_common+0x20>
    57ea:	a9 5d       	subi	r26, 0xD9	; 217
    57ec:	a1 93       	st	Z+, r26
    57ee:	00 97       	sbiw	r24, 0x00	; 0
    57f0:	79 f7       	brne	.-34     	; 0x57d0 <__utoa_common+0x4>
    57f2:	b1 11       	cpse	r27, r1
    57f4:	b1 93       	st	Z+, r27
    57f6:	11 92       	st	Z+, r1
    57f8:	cb 01       	movw	r24, r22
    57fa:	b8 c0       	rjmp	.+368    	; 0x596c <strrev>

000057fc <fputc>:
    57fc:	0f 93       	push	r16
    57fe:	1f 93       	push	r17
    5800:	cf 93       	push	r28
    5802:	df 93       	push	r29
    5804:	18 2f       	mov	r17, r24
    5806:	09 2f       	mov	r16, r25
    5808:	eb 01       	movw	r28, r22
    580a:	8b 81       	ldd	r24, Y+3	; 0x03
    580c:	81 fd       	sbrc	r24, 1
    580e:	03 c0       	rjmp	.+6      	; 0x5816 <fputc+0x1a>
    5810:	8f ef       	ldi	r24, 0xFF	; 255
    5812:	9f ef       	ldi	r25, 0xFF	; 255
    5814:	20 c0       	rjmp	.+64     	; 0x5856 <fputc+0x5a>
    5816:	82 ff       	sbrs	r24, 2
    5818:	10 c0       	rjmp	.+32     	; 0x583a <fputc+0x3e>
    581a:	4e 81       	ldd	r20, Y+6	; 0x06
    581c:	5f 81       	ldd	r21, Y+7	; 0x07
    581e:	2c 81       	ldd	r18, Y+4	; 0x04
    5820:	3d 81       	ldd	r19, Y+5	; 0x05
    5822:	42 17       	cp	r20, r18
    5824:	53 07       	cpc	r21, r19
    5826:	7c f4       	brge	.+30     	; 0x5846 <fputc+0x4a>
    5828:	e8 81       	ld	r30, Y
    582a:	f9 81       	ldd	r31, Y+1	; 0x01
    582c:	9f 01       	movw	r18, r30
    582e:	2f 5f       	subi	r18, 0xFF	; 255
    5830:	3f 4f       	sbci	r19, 0xFF	; 255
    5832:	28 83       	st	Y, r18
    5834:	39 83       	std	Y+1, r19	; 0x01
    5836:	10 83       	st	Z, r17
    5838:	06 c0       	rjmp	.+12     	; 0x5846 <fputc+0x4a>
    583a:	e8 85       	ldd	r30, Y+8	; 0x08
    583c:	f9 85       	ldd	r31, Y+9	; 0x09
    583e:	81 2f       	mov	r24, r17
    5840:	19 95       	eicall
    5842:	89 2b       	or	r24, r25
    5844:	29 f7       	brne	.-54     	; 0x5810 <fputc+0x14>
    5846:	2e 81       	ldd	r18, Y+6	; 0x06
    5848:	3f 81       	ldd	r19, Y+7	; 0x07
    584a:	2f 5f       	subi	r18, 0xFF	; 255
    584c:	3f 4f       	sbci	r19, 0xFF	; 255
    584e:	2e 83       	std	Y+6, r18	; 0x06
    5850:	3f 83       	std	Y+7, r19	; 0x07
    5852:	81 2f       	mov	r24, r17
    5854:	90 2f       	mov	r25, r16
    5856:	df 91       	pop	r29
    5858:	cf 91       	pop	r28
    585a:	1f 91       	pop	r17
    585c:	0f 91       	pop	r16
    585e:	08 95       	ret

00005860 <sprintf>:
    5860:	0f 93       	push	r16
    5862:	1f 93       	push	r17
    5864:	cf 93       	push	r28
    5866:	df 93       	push	r29
    5868:	cd b7       	in	r28, 0x3d	; 61
    586a:	de b7       	in	r29, 0x3e	; 62
    586c:	2e 97       	sbiw	r28, 0x0e	; 14
    586e:	cd bf       	out	0x3d, r28	; 61
    5870:	de bf       	out	0x3e, r29	; 62
    5872:	0e 89       	ldd	r16, Y+22	; 0x16
    5874:	1f 89       	ldd	r17, Y+23	; 0x17
    5876:	86 e0       	ldi	r24, 0x06	; 6
    5878:	8c 83       	std	Y+4, r24	; 0x04
    587a:	09 83       	std	Y+1, r16	; 0x01
    587c:	1a 83       	std	Y+2, r17	; 0x02
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	9f e7       	ldi	r25, 0x7F	; 127
    5882:	8d 83       	std	Y+5, r24	; 0x05
    5884:	9e 83       	std	Y+6, r25	; 0x06
    5886:	ae 01       	movw	r20, r28
    5888:	46 5e       	subi	r20, 0xE6	; 230
    588a:	5f 4f       	sbci	r21, 0xFF	; 255
    588c:	68 8d       	ldd	r22, Y+24	; 0x18
    588e:	79 8d       	ldd	r23, Y+25	; 0x19
    5890:	ce 01       	movw	r24, r28
    5892:	01 96       	adiw	r24, 0x01	; 1
    5894:	42 da       	rcall	.-2940   	; 0x4d1a <vfprintf>
    5896:	ef 81       	ldd	r30, Y+7	; 0x07
    5898:	f8 85       	ldd	r31, Y+8	; 0x08
    589a:	e0 0f       	add	r30, r16
    589c:	f1 1f       	adc	r31, r17
    589e:	10 82       	st	Z, r1
    58a0:	2e 96       	adiw	r28, 0x0e	; 14
    58a2:	cd bf       	out	0x3d, r28	; 61
    58a4:	de bf       	out	0x3e, r29	; 62
    58a6:	df 91       	pop	r29
    58a8:	cf 91       	pop	r28
    58aa:	1f 91       	pop	r17
    58ac:	0f 91       	pop	r16
    58ae:	08 95       	ret

000058b0 <__ultoa_invert>:
    58b0:	fa 01       	movw	r30, r20
    58b2:	aa 27       	eor	r26, r26
    58b4:	28 30       	cpi	r18, 0x08	; 8
    58b6:	51 f1       	breq	.+84     	; 0x590c <__ultoa_invert+0x5c>
    58b8:	20 31       	cpi	r18, 0x10	; 16
    58ba:	81 f1       	breq	.+96     	; 0x591c <__ultoa_invert+0x6c>
    58bc:	e8 94       	clt
    58be:	6f 93       	push	r22
    58c0:	6e 7f       	andi	r22, 0xFE	; 254
    58c2:	6e 5f       	subi	r22, 0xFE	; 254
    58c4:	7f 4f       	sbci	r23, 0xFF	; 255
    58c6:	8f 4f       	sbci	r24, 0xFF	; 255
    58c8:	9f 4f       	sbci	r25, 0xFF	; 255
    58ca:	af 4f       	sbci	r26, 0xFF	; 255
    58cc:	b1 e0       	ldi	r27, 0x01	; 1
    58ce:	3e d0       	rcall	.+124    	; 0x594c <__ultoa_invert+0x9c>
    58d0:	b4 e0       	ldi	r27, 0x04	; 4
    58d2:	3c d0       	rcall	.+120    	; 0x594c <__ultoa_invert+0x9c>
    58d4:	67 0f       	add	r22, r23
    58d6:	78 1f       	adc	r23, r24
    58d8:	89 1f       	adc	r24, r25
    58da:	9a 1f       	adc	r25, r26
    58dc:	a1 1d       	adc	r26, r1
    58de:	68 0f       	add	r22, r24
    58e0:	79 1f       	adc	r23, r25
    58e2:	8a 1f       	adc	r24, r26
    58e4:	91 1d       	adc	r25, r1
    58e6:	a1 1d       	adc	r26, r1
    58e8:	6a 0f       	add	r22, r26
    58ea:	71 1d       	adc	r23, r1
    58ec:	81 1d       	adc	r24, r1
    58ee:	91 1d       	adc	r25, r1
    58f0:	a1 1d       	adc	r26, r1
    58f2:	20 d0       	rcall	.+64     	; 0x5934 <__ultoa_invert+0x84>
    58f4:	09 f4       	brne	.+2      	; 0x58f8 <__ultoa_invert+0x48>
    58f6:	68 94       	set
    58f8:	3f 91       	pop	r19
    58fa:	2a e0       	ldi	r18, 0x0A	; 10
    58fc:	26 9f       	mul	r18, r22
    58fe:	11 24       	eor	r1, r1
    5900:	30 19       	sub	r19, r0
    5902:	30 5d       	subi	r19, 0xD0	; 208
    5904:	31 93       	st	Z+, r19
    5906:	de f6       	brtc	.-74     	; 0x58be <__ultoa_invert+0xe>
    5908:	cf 01       	movw	r24, r30
    590a:	08 95       	ret
    590c:	46 2f       	mov	r20, r22
    590e:	47 70       	andi	r20, 0x07	; 7
    5910:	40 5d       	subi	r20, 0xD0	; 208
    5912:	41 93       	st	Z+, r20
    5914:	b3 e0       	ldi	r27, 0x03	; 3
    5916:	0f d0       	rcall	.+30     	; 0x5936 <__ultoa_invert+0x86>
    5918:	c9 f7       	brne	.-14     	; 0x590c <__ultoa_invert+0x5c>
    591a:	f6 cf       	rjmp	.-20     	; 0x5908 <__ultoa_invert+0x58>
    591c:	46 2f       	mov	r20, r22
    591e:	4f 70       	andi	r20, 0x0F	; 15
    5920:	40 5d       	subi	r20, 0xD0	; 208
    5922:	4a 33       	cpi	r20, 0x3A	; 58
    5924:	18 f0       	brcs	.+6      	; 0x592c <__ultoa_invert+0x7c>
    5926:	49 5d       	subi	r20, 0xD9	; 217
    5928:	31 fd       	sbrc	r19, 1
    592a:	40 52       	subi	r20, 0x20	; 32
    592c:	41 93       	st	Z+, r20
    592e:	02 d0       	rcall	.+4      	; 0x5934 <__ultoa_invert+0x84>
    5930:	a9 f7       	brne	.-22     	; 0x591c <__ultoa_invert+0x6c>
    5932:	ea cf       	rjmp	.-44     	; 0x5908 <__ultoa_invert+0x58>
    5934:	b4 e0       	ldi	r27, 0x04	; 4
    5936:	a6 95       	lsr	r26
    5938:	97 95       	ror	r25
    593a:	87 95       	ror	r24
    593c:	77 95       	ror	r23
    593e:	67 95       	ror	r22
    5940:	ba 95       	dec	r27
    5942:	c9 f7       	brne	.-14     	; 0x5936 <__ultoa_invert+0x86>
    5944:	00 97       	sbiw	r24, 0x00	; 0
    5946:	61 05       	cpc	r22, r1
    5948:	71 05       	cpc	r23, r1
    594a:	08 95       	ret
    594c:	9b 01       	movw	r18, r22
    594e:	ac 01       	movw	r20, r24
    5950:	0a 2e       	mov	r0, r26
    5952:	06 94       	lsr	r0
    5954:	57 95       	ror	r21
    5956:	47 95       	ror	r20
    5958:	37 95       	ror	r19
    595a:	27 95       	ror	r18
    595c:	ba 95       	dec	r27
    595e:	c9 f7       	brne	.-14     	; 0x5952 <__ultoa_invert+0xa2>
    5960:	62 0f       	add	r22, r18
    5962:	73 1f       	adc	r23, r19
    5964:	84 1f       	adc	r24, r20
    5966:	95 1f       	adc	r25, r21
    5968:	a0 1d       	adc	r26, r0
    596a:	08 95       	ret

0000596c <strrev>:
    596c:	dc 01       	movw	r26, r24
    596e:	fc 01       	movw	r30, r24
    5970:	67 2f       	mov	r22, r23
    5972:	71 91       	ld	r23, Z+
    5974:	77 23       	and	r23, r23
    5976:	e1 f7       	brne	.-8      	; 0x5970 <strrev+0x4>
    5978:	32 97       	sbiw	r30, 0x02	; 2
    597a:	04 c0       	rjmp	.+8      	; 0x5984 <strrev+0x18>
    597c:	7c 91       	ld	r23, X
    597e:	6d 93       	st	X+, r22
    5980:	70 83       	st	Z, r23
    5982:	62 91       	ld	r22, -Z
    5984:	ae 17       	cp	r26, r30
    5986:	bf 07       	cpc	r27, r31
    5988:	c8 f3       	brcs	.-14     	; 0x597c <strrev+0x10>
    598a:	08 95       	ret

0000598c <__divmodsi4>:
    598c:	05 2e       	mov	r0, r21
    598e:	97 fb       	bst	r25, 7
    5990:	16 f4       	brtc	.+4      	; 0x5996 <__divmodsi4+0xa>
    5992:	00 94       	com	r0
    5994:	0f d0       	rcall	.+30     	; 0x59b4 <__negsi2>
    5996:	57 fd       	sbrc	r21, 7
    5998:	05 d0       	rcall	.+10     	; 0x59a4 <__divmodsi4_neg2>
    599a:	24 d0       	rcall	.+72     	; 0x59e4 <__udivmodsi4>
    599c:	07 fc       	sbrc	r0, 7
    599e:	02 d0       	rcall	.+4      	; 0x59a4 <__divmodsi4_neg2>
    59a0:	46 f4       	brtc	.+16     	; 0x59b2 <__divmodsi4_exit>
    59a2:	08 c0       	rjmp	.+16     	; 0x59b4 <__negsi2>

000059a4 <__divmodsi4_neg2>:
    59a4:	50 95       	com	r21
    59a6:	40 95       	com	r20
    59a8:	30 95       	com	r19
    59aa:	21 95       	neg	r18
    59ac:	3f 4f       	sbci	r19, 0xFF	; 255
    59ae:	4f 4f       	sbci	r20, 0xFF	; 255
    59b0:	5f 4f       	sbci	r21, 0xFF	; 255

000059b2 <__divmodsi4_exit>:
    59b2:	08 95       	ret

000059b4 <__negsi2>:
    59b4:	90 95       	com	r25
    59b6:	80 95       	com	r24
    59b8:	70 95       	com	r23
    59ba:	61 95       	neg	r22
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	8f 4f       	sbci	r24, 0xFF	; 255
    59c0:	9f 4f       	sbci	r25, 0xFF	; 255
    59c2:	08 95       	ret

000059c4 <__muluhisi3>:
    59c4:	44 dd       	rcall	.-1400   	; 0x544e <__umulhisi3>
    59c6:	a5 9f       	mul	r26, r21
    59c8:	90 0d       	add	r25, r0
    59ca:	b4 9f       	mul	r27, r20
    59cc:	90 0d       	add	r25, r0
    59ce:	a4 9f       	mul	r26, r20
    59d0:	80 0d       	add	r24, r0
    59d2:	91 1d       	adc	r25, r1
    59d4:	11 24       	eor	r1, r1
    59d6:	08 95       	ret

000059d8 <__mulshisi3>:
    59d8:	b7 ff       	sbrs	r27, 7
    59da:	f4 cf       	rjmp	.-24     	; 0x59c4 <__muluhisi3>

000059dc <__mulohisi3>:
    59dc:	f3 df       	rcall	.-26     	; 0x59c4 <__muluhisi3>
    59de:	82 1b       	sub	r24, r18
    59e0:	93 0b       	sbc	r25, r19
    59e2:	08 95       	ret

000059e4 <__udivmodsi4>:
    59e4:	a1 e2       	ldi	r26, 0x21	; 33
    59e6:	1a 2e       	mov	r1, r26
    59e8:	aa 1b       	sub	r26, r26
    59ea:	bb 1b       	sub	r27, r27
    59ec:	fd 01       	movw	r30, r26
    59ee:	0d c0       	rjmp	.+26     	; 0x5a0a <__udivmodsi4_ep>

000059f0 <__udivmodsi4_loop>:
    59f0:	aa 1f       	adc	r26, r26
    59f2:	bb 1f       	adc	r27, r27
    59f4:	ee 1f       	adc	r30, r30
    59f6:	ff 1f       	adc	r31, r31
    59f8:	a2 17       	cp	r26, r18
    59fa:	b3 07       	cpc	r27, r19
    59fc:	e4 07       	cpc	r30, r20
    59fe:	f5 07       	cpc	r31, r21
    5a00:	20 f0       	brcs	.+8      	; 0x5a0a <__udivmodsi4_ep>
    5a02:	a2 1b       	sub	r26, r18
    5a04:	b3 0b       	sbc	r27, r19
    5a06:	e4 0b       	sbc	r30, r20
    5a08:	f5 0b       	sbc	r31, r21

00005a0a <__udivmodsi4_ep>:
    5a0a:	66 1f       	adc	r22, r22
    5a0c:	77 1f       	adc	r23, r23
    5a0e:	88 1f       	adc	r24, r24
    5a10:	99 1f       	adc	r25, r25
    5a12:	1a 94       	dec	r1
    5a14:	69 f7       	brne	.-38     	; 0x59f0 <__udivmodsi4_loop>
    5a16:	60 95       	com	r22
    5a18:	70 95       	com	r23
    5a1a:	80 95       	com	r24
    5a1c:	90 95       	com	r25
    5a1e:	9b 01       	movw	r18, r22
    5a20:	ac 01       	movw	r20, r24
    5a22:	bd 01       	movw	r22, r26
    5a24:	cf 01       	movw	r24, r30
    5a26:	08 95       	ret

00005a28 <_exit>:
    5a28:	f8 94       	cli

00005a2a <__stop_program>:
    5a2a:	ff cf       	rjmp	.-2      	; 0x5a2a <__stop_program>
