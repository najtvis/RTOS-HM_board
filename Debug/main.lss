
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00802000  00005ad2  00005b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001e7a  00802116  00802116  00005c7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005c7c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000f18  00000000  00000000  00005cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00016d5d  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005825  00000000  00000000  0001d94d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00009a0f  00000000  00000000  00023172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000030a0  00000000  00000000  0002cb84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005bee  00000000  00000000  0002fc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000deb2  00000000  00000000  00035812  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cc8  00000000  00000000  000436c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c3       	rjmp	.+1802   	; 0x70c <__ctors_end>
       2:	00 00       	nop
       4:	a9 c3       	rjmp	.+1874   	; 0x758 <__bad_interrupt>
       6:	00 00       	nop
       8:	a7 c3       	rjmp	.+1870   	; 0x758 <__bad_interrupt>
       a:	00 00       	nop
       c:	a5 c3       	rjmp	.+1866   	; 0x758 <__bad_interrupt>
       e:	00 00       	nop
      10:	a3 c3       	rjmp	.+1862   	; 0x758 <__bad_interrupt>
      12:	00 00       	nop
      14:	a1 c3       	rjmp	.+1858   	; 0x758 <__bad_interrupt>
      16:	00 00       	nop
      18:	9f c3       	rjmp	.+1854   	; 0x758 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9d c3       	rjmp	.+1850   	; 0x758 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9b c3       	rjmp	.+1846   	; 0x758 <__bad_interrupt>
      22:	00 00       	nop
      24:	99 c3       	rjmp	.+1842   	; 0x758 <__bad_interrupt>
      26:	00 00       	nop
      28:	97 c3       	rjmp	.+1838   	; 0x758 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	95 c3       	rjmp	.+1834   	; 0x758 <__bad_interrupt>
      2e:	00 00       	nop
      30:	93 c3       	rjmp	.+1830   	; 0x758 <__bad_interrupt>
      32:	00 00       	nop
      34:	91 c3       	rjmp	.+1826   	; 0x758 <__bad_interrupt>
      36:	00 00       	nop
      38:	13 c6       	rjmp	.+3110   	; 0xc60 <__vector_14>
      3a:	00 00       	nop
      3c:	8d c3       	rjmp	.+1818   	; 0x758 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8b c3       	rjmp	.+1814   	; 0x758 <__bad_interrupt>
      42:	00 00       	nop
      44:	89 c3       	rjmp	.+1810   	; 0x758 <__bad_interrupt>
      46:	00 00       	nop
      48:	87 c3       	rjmp	.+1806   	; 0x758 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	85 c3       	rjmp	.+1802   	; 0x758 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__vector_20>
      54:	81 c3       	rjmp	.+1794   	; 0x758 <__bad_interrupt>
      56:	00 00       	nop
      58:	7f c3       	rjmp	.+1790   	; 0x758 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7d c3       	rjmp	.+1786   	; 0x758 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7b c3       	rjmp	.+1782   	; 0x758 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__vector_25>
      68:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__vector_26>
      6c:	75 c3       	rjmp	.+1770   	; 0x758 <__bad_interrupt>
      6e:	00 00       	nop
      70:	73 c3       	rjmp	.+1766   	; 0x758 <__bad_interrupt>
      72:	00 00       	nop
      74:	71 c3       	rjmp	.+1762   	; 0x758 <__bad_interrupt>
      76:	00 00       	nop
      78:	6f c3       	rjmp	.+1758   	; 0x758 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6d c3       	rjmp	.+1754   	; 0x758 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6b c3       	rjmp	.+1750   	; 0x758 <__bad_interrupt>
      82:	00 00       	nop
      84:	69 c3       	rjmp	.+1746   	; 0x758 <__bad_interrupt>
      86:	00 00       	nop
      88:	67 c3       	rjmp	.+1742   	; 0x758 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	65 c3       	rjmp	.+1738   	; 0x758 <__bad_interrupt>
      8e:	00 00       	nop
      90:	63 c3       	rjmp	.+1734   	; 0x758 <__bad_interrupt>
      92:	00 00       	nop
      94:	61 c3       	rjmp	.+1730   	; 0x758 <__bad_interrupt>
      96:	00 00       	nop
      98:	5f c3       	rjmp	.+1726   	; 0x758 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5d c3       	rjmp	.+1722   	; 0x758 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5b c3       	rjmp	.+1718   	; 0x758 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	59 c3       	rjmp	.+1714   	; 0x758 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	57 c3       	rjmp	.+1710   	; 0x758 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	55 c3       	rjmp	.+1706   	; 0x758 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	53 c3       	rjmp	.+1702   	; 0x758 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6a c4       	rjmp	.+2260   	; 0x98a <__vector_45>
      b6:	00 00       	nop
      b8:	33 c4       	rjmp	.+2150   	; 0x920 <__vector_46>
      ba:	00 00       	nop
      bc:	4d c3       	rjmp	.+1690   	; 0x758 <__bad_interrupt>
      be:	00 00       	nop
      c0:	4b c3       	rjmp	.+1686   	; 0x758 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	49 c3       	rjmp	.+1682   	; 0x758 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	47 c3       	rjmp	.+1678   	; 0x758 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	45 c3       	rjmp	.+1674   	; 0x758 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	43 c3       	rjmp	.+1670   	; 0x758 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	41 c3       	rjmp	.+1666   	; 0x758 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3f c3       	rjmp	.+1662   	; 0x758 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3d c3       	rjmp	.+1658   	; 0x758 <__bad_interrupt>
      de:	00 00       	nop
      e0:	3b c3       	rjmp	.+1654   	; 0x758 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	39 c3       	rjmp	.+1650   	; 0x758 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <__vector_58>
      ec:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__vector_59>
      f0:	33 c3       	rjmp	.+1638   	; 0x758 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	31 c3       	rjmp	.+1634   	; 0x758 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	2f c3       	rjmp	.+1630   	; 0x758 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2d c3       	rjmp	.+1626   	; 0x758 <__bad_interrupt>
      fe:	00 00       	nop
     100:	2b c3       	rjmp	.+1622   	; 0x758 <__bad_interrupt>
     102:	00 00       	nop
     104:	29 c3       	rjmp	.+1618   	; 0x758 <__bad_interrupt>
     106:	00 00       	nop
     108:	27 c3       	rjmp	.+1614   	; 0x758 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	25 c3       	rjmp	.+1610   	; 0x758 <__bad_interrupt>
     10e:	00 00       	nop
     110:	23 c3       	rjmp	.+1606   	; 0x758 <__bad_interrupt>
     112:	00 00       	nop
     114:	21 c3       	rjmp	.+1602   	; 0x758 <__bad_interrupt>
     116:	00 00       	nop
     118:	1f c3       	rjmp	.+1598   	; 0x758 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1d c3       	rjmp	.+1594   	; 0x758 <__bad_interrupt>
     11e:	00 00       	nop
     120:	1b c3       	rjmp	.+1590   	; 0x758 <__bad_interrupt>
     122:	00 00       	nop
     124:	19 c3       	rjmp	.+1586   	; 0x758 <__bad_interrupt>
     126:	00 00       	nop
     128:	17 c3       	rjmp	.+1582   	; 0x758 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	15 c3       	rjmp	.+1578   	; 0x758 <__bad_interrupt>
     12e:	00 00       	nop
     130:	13 c3       	rjmp	.+1574   	; 0x758 <__bad_interrupt>
     132:	00 00       	nop
     134:	11 c3       	rjmp	.+1570   	; 0x758 <__bad_interrupt>
     136:	00 00       	nop
     138:	0f c3       	rjmp	.+1566   	; 0x758 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0d c3       	rjmp	.+1562   	; 0x758 <__bad_interrupt>
     13e:	00 00       	nop
     140:	0b c3       	rjmp	.+1558   	; 0x758 <__bad_interrupt>
     142:	00 00       	nop
     144:	09 c3       	rjmp	.+1554   	; 0x758 <__bad_interrupt>
     146:	00 00       	nop
     148:	07 c3       	rjmp	.+1550   	; 0x758 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	05 c3       	rjmp	.+1546   	; 0x758 <__bad_interrupt>
     14e:	00 00       	nop
     150:	03 c3       	rjmp	.+1542   	; 0x758 <__bad_interrupt>
     152:	00 00       	nop
     154:	01 c3       	rjmp	.+1538   	; 0x758 <__bad_interrupt>
     156:	00 00       	nop
     158:	ff c2       	rjmp	.+1534   	; 0x758 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	fd c2       	rjmp	.+1530   	; 0x758 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 0d 24 	jmp	0x481a	; 0x481a <__vector_88>
     164:	0c 94 20 25 	jmp	0x4a40	; 0x4a40 <__vector_89>
     168:	f7 c2       	rjmp	.+1518   	; 0x758 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	f5 c2       	rjmp	.+1514   	; 0x758 <__bad_interrupt>
     16e:	00 00       	nop
     170:	f3 c2       	rjmp	.+1510   	; 0x758 <__bad_interrupt>
     172:	00 00       	nop
     174:	f1 c2       	rjmp	.+1506   	; 0x758 <__bad_interrupt>
     176:	00 00       	nop
     178:	ef c2       	rjmp	.+1502   	; 0x758 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ed c2       	rjmp	.+1498   	; 0x758 <__bad_interrupt>
     17e:	00 00       	nop
     180:	eb c2       	rjmp	.+1494   	; 0x758 <__bad_interrupt>
     182:	00 00       	nop
     184:	e9 c2       	rjmp	.+1490   	; 0x758 <__bad_interrupt>
     186:	00 00       	nop
     188:	e7 c2       	rjmp	.+1486   	; 0x758 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e5 c2       	rjmp	.+1482   	; 0x758 <__bad_interrupt>
     18e:	00 00       	nop
     190:	e3 c2       	rjmp	.+1478   	; 0x758 <__bad_interrupt>
     192:	00 00       	nop
     194:	e1 c2       	rjmp	.+1474   	; 0x758 <__bad_interrupt>
     196:	00 00       	nop
     198:	df c2       	rjmp	.+1470   	; 0x758 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	dd c2       	rjmp	.+1466   	; 0x758 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	db c2       	rjmp	.+1462   	; 0x758 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d9 c2       	rjmp	.+1458   	; 0x758 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d7 c2       	rjmp	.+1454   	; 0x758 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d5 c2       	rjmp	.+1450   	; 0x758 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	d3 c2       	rjmp	.+1446   	; 0x758 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d1 c2       	rjmp	.+1442   	; 0x758 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	cf c2       	rjmp	.+1438   	; 0x758 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	cd c2       	rjmp	.+1434   	; 0x758 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	cb c2       	rjmp	.+1430   	; 0x758 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c9 c2       	rjmp	.+1426   	; 0x758 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c7 c2       	rjmp	.+1422   	; 0x758 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c5 c2       	rjmp	.+1418   	; 0x758 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	c3 c2       	rjmp	.+1414   	; 0x758 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c1 c2       	rjmp	.+1410   	; 0x758 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	bf c2       	rjmp	.+1406   	; 0x758 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	bd c2       	rjmp	.+1402   	; 0x758 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	bb c2       	rjmp	.+1398   	; 0x758 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b9 c2       	rjmp	.+1394   	; 0x758 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b7 c2       	rjmp	.+1390   	; 0x758 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	b5 c2       	rjmp	.+1386   	; 0x758 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	b3 c2       	rjmp	.+1382   	; 0x758 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	b1 c2       	rjmp	.+1378   	; 0x758 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	af c2       	rjmp	.+1374   	; 0x758 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	cf 1d       	adc	r28, r15
     1fe:	5e 1e       	adc	r5, r30
     200:	d9 1d       	adc	r29, r9
     202:	1d 1e       	adc	r1, r29
     204:	29 1e       	adc	r2, r25
     206:	3d 1e       	adc	r3, r29
     208:	4e 1e       	adc	r4, r30

0000020a <__trampolines_end>:
     20a:	00 00       	nop
     20c:	00 00       	nop
     20e:	03 83       	std	Z+3, r16	; 0x03
     210:	6b f2       	brvs	.-102    	; 0x1ac <__SREG__+0x16d>
     212:	f7 70       	andi	r31, 0x07	; 7
     214:	3b e1       	ldi	r19, 0x1B	; 27
     216:	f4 f3       	brlt	.-4      	; 0x214 <__trampolines_end+0xa>
     218:	50 13       	cpse	r21, r16
     21a:	1f 97       	sbiw	r26, 0x0f	; 15
     21c:	9a c7       	rjmp	.+3892   	; 0x1152 <xQueueCreateMutex+0x10>
     21e:	1c 14       	cp	r1, r12
     220:	f1 35       	cpi	r31, 0x51	; 81
     222:	e8 e7       	ldi	r30, 0x78	; 120
     224:	a1 26       	eor	r10, r17
     226:	eb 64       	ori	r30, 0x4B	; 75
     228:	ca d4       	rcall	.+2452   	; 0xbbe <vPortYield+0xe>
     22a:	cf 58       	subi	r28, 0x8F	; 143
     22c:	d9 8a       	std	Y+17, r13	; 0x11
     22e:	cc db       	rcall	.-2152   	; 0xfffff9c8 <__eeprom_end+0xff7ef9c8>
     230:	b2 78       	andi	r27, 0x82	; 130
     232:	38 28       	or	r3, r8
     234:	e2 6b       	ori	r30, 0xB2	; 178
     236:	3b ab       	std	Y+51, r19	; 0x33
     238:	89 99       	sbic	0x11, 1	; 17
     23a:	d0 cf       	rjmp	.-96     	; 0x1dc <__SREG__+0x19d>
     23c:	43 4d       	sbci	r20, 0xD3	; 211
     23e:	d3 4c       	sbci	r29, 0xC3	; 195
     240:	28 bf       	out	0x38, r18	; 56
     242:	27 bf       	out	0x37, r18	; 55
     244:	78 ac       	ldd	r7, Y+56	; 0x38
     246:	24 3c       	cpi	r18, 0xC4	; 196
     248:	13 5e       	subi	r17, 0xE3	; 227
     24a:	6f c7       	rjmp	.+3806   	; 0x112a <xQueueGenericSend+0xf8>
     24c:	5e 10       	cpse	r5, r14
     24e:	6c 44       	sbci	r22, 0x4C	; 76
     250:	35 e2       	ldi	r19, 0x25	; 37
     252:	98 b7       	in	r25, 0x38	; 56
     254:	65 f1       	brhs	.+88     	; 0x2ae <__trampolines_end+0xa4>
     256:	9b 34       	cpi	r25, 0x4B	; 75
     258:	0e 03       	fmul	r16, r22
     25a:	70 50       	subi	r23, 0x00	; 0
     25c:	c4 d7       	rcall	.+3976   	; 0x11e6 <xQueueGenericReceive>
     25e:	73 d3       	rcall	.+1766   	; 0x946 <__vector_46+0x26>
     260:	af 25       	eor	r26, r15
     262:	87 20       	and	r8, r7
     264:	ff 36       	cpi	r31, 0x6F	; 111
     266:	84 a3       	std	Z+36, r24	; 0x24
     268:	94 c4       	rjmp	.+2344   	; 0xb92 <xPortStartScheduler+0x66>
     26a:	a0 9f       	mul	r26, r16
     26c:	87 9a       	sbi	0x10, 7	; 16
     26e:	a3 1c       	adc	r10, r3
     270:	ec 68       	ori	r30, 0x8C	; 140
     272:	57 ef       	ldi	r21, 0xF7	; 247
     274:	bc 7b       	andi	r27, 0xBC	; 188
     276:	54 6c       	ori	r21, 0xC4	; 196
     278:	d7 89       	ldd	r29, Z+23	; 0x17
     27a:	bf 08       	sbc	r11, r15
     27c:	1d 5d       	subi	r17, 0xDD	; 221
     27e:	bc 8b       	std	Y+20, r27	; 0x14
     280:	76 af       	std	Z+62, r23	; 0x3e
     282:	48 78       	andi	r20, 0x88	; 136
     284:	26 bc       	out	0x26, r2	; 38
     286:	4b fb       	.word	0xfb4b	; ????
     288:	4d 4e       	sbci	r20, 0xED	; 237
     28a:	de 8e       	std	Y+30, r13	; 0x1e
     28c:	bd 20       	and	r11, r13
     28e:	dd 0d       	add	r29, r13
     290:	d6 d2       	rcall	.+1452   	; 0x83e <TWI_CSP_SlaveProcessData+0x4>
     292:	29 fe       	.word	0xfe29	; ????
     294:	86 c1       	rjmp	.+780    	; 0x5a2 <__trampolines_end+0x398>
     296:	2a 7d       	andi	r18, 0xDA	; 218
     298:	ed 33       	cpi	r30, 0x3D	; 61
     29a:	c1 19       	sub	r28, r1
     29c:	27 e7       	ldi	r18, 0x77	; 119
     29e:	c2 9a       	sbi	0x18, 2	; 24
     2a0:	4c 15       	cp	r20, r12
     2a2:	36 69       	ori	r19, 0x96	; 150
     2a4:	1c 06       	cpc	r1, r28
     2a6:	35 ea       	ldi	r19, 0xA5	; 165
     2a8:	77 f4       	brid	.+28     	; 0x2c6 <__trampolines_end+0xbc>
     2aa:	11 d6       	rcall	.+3106   	; 0xece <prvCopyDataToQueue+0x88>
     2ac:	64 aa       	std	Z+52, r6	; 0x34
     2ae:	12 55       	subi	r17, 0x52	; 82
     2b0:	0f 58       	subi	r16, 0x8F	; 143
     2b2:	e6 a6       	std	Z+46, r14	; 0x2e
     2b4:	5f 4b       	sbci	r21, 0xBF	; 191
     2b6:	e5 25       	eor	r30, r5
     2b8:	34 b9       	out	0x04, r19	; 4
     2ba:	0e 41       	sbci	r16, 0x1E	; 30
     2bc:	fe 6d       	ori	r31, 0xDE	; 222
     2be:	0d c2       	rjmp	.+1050   	; 0x6da <__c.2159+0xcc>
     2c0:	95 9f       	mul	r25, r21
     2c2:	f9 31       	cpi	r31, 0x19	; 25
     2c4:	c5 8c       	ldd	r12, Z+29	; 0x1d
     2c6:	fa b2       	in	r15, 0x1a	; 26
     2c8:	ae 7e       	andi	r26, 0xEE	; 238
     2ca:	b1 49       	sbci	r27, 0x91	; 145
     2cc:	e3 30       	cpi	r30, 0x03	; 3
     2ce:	b2 ca       	rjmp	.-2716   	; 0xfffff834 <__eeprom_end+0xff7ef834>
     2d0:	88 c2       	rjmp	.+1296   	; 0x7e2 <cspTask+0x88>
     2d2:	46 39       	cpi	r20, 0x96	; 150
     2d4:	d8 d1       	rcall	.+944    	; 0x686 <__c.2159+0x78>
     2d6:	45 ba       	out	0x15, r4	; 21
     2d8:	b3 23       	and	r27, r19
     2da:	ae de       	rcall	.-676    	; 0x38 <__RAMPD__>
     2dc:	79 f7       	brne	.-34     	; 0x2bc <__trampolines_end+0xb2>
     2de:	ad 5d       	subi	r26, 0xDD	; 221
     2e0:	12 05       	cpc	r17, r2
     2e2:	59 ae       	std	Y+57, r5	; 0x39
     2e4:	42 16       	cp	r4, r18
     2e6:	5a 2d       	mov	r21, r10
     2e8:	29 e4       	ldi	r18, 0x49	; 73
     2ea:	7e 11       	cpse	r23, r14
     2ec:	3a ba       	out	0x1a, r3	; 26
     2ee:	7d 92       	st	X+, r7
     2f0:	51 48       	sbci	r21, 0x81	; 129
     2f2:	89 61       	ori	r24, 0x19	; 25
     2f4:	01 5b       	subi	r16, 0xB1	; 177
     2f6:	8a e2       	ldi	r24, 0x2A	; 42
     2f8:	6a a9       	ldd	r22, Y+50	; 0x32
     2fa:	61 86       	std	Z+9, r6	; 0x09
     2fc:	a0 7d       	andi	r26, 0xD0	; 208
     2fe:	62 05       	cpc	r22, r2
     300:	cb 8f       	std	Y+27, r28	; 0x1b
     302:	96 f6       	brtc	.-92     	; 0x2a8 <__trampolines_end+0x9e>
     304:	9b 9c       	mul	r9, r11
     306:	95 75       	andi	r25, 0x55	; 85
     308:	f0 6e       	ori	r31, 0xE0	; 224
     30a:	bc 1d       	adc	r27, r12
     30c:	7b 41       	sbci	r23, 0x1B	; 27
     30e:	bf 9e       	mul	r11, r31
     310:	10 b3       	in	r17, 0x10	; 16
     312:	4b 6d       	ori	r20, 0xDB	; 219
     314:	40 a0       	ldd	r4, Z+32	; 0x20
     316:	48 ee       	ldi	r20, 0xE8	; 232
     318:	2b 52       	subi	r18, 0x2B	; 43
     31a:	a3 8a       	std	Z+19, r10	; 0x13
     31c:	e1 86       	std	Z+9, r14	; 0x09
     31e:	a0 09       	sbc	r26, r0
     320:	8a 74       	andi	r24, 0x4A	; 74
     322:	54 fa       	bst	r5, 4
     324:	da 67       	ori	r29, 0x7A	; 122
     326:	57 79       	andi	r21, 0x97	; 151
     328:	b1 95       	neg	r27
     32a:	73 45       	sbci	r23, 0x53	; 83
     32c:	a2 cb       	rjmp	.-2236   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     32e:	70 c6       	rjmp	.+3296   	; 0x1010 <xQueueCreate+0x76>
     330:	c9 39       	cpi	r28, 0x99	; 153
     332:	84 35       	cpi	r24, 0x54	; 84
     334:	99 2a       	or	r9, r25
     336:	87 b6       	in	r8, 0x37	; 55
     338:	f2 d8       	rcall	.-3612   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
     33a:	6c d2       	rcall	.+1240   	; 0x814 <cspTask+0xba>
     33c:	38 0c       	add	r3, r8
     33e:	6f 51       	subi	r22, 0x1F	; 31
     340:	53 fe       	sbrs	r5, 3
     342:	9b a2       	std	Y+35, r9	; 0x23
     344:	03 ed       	ldi	r16, 0xD3	; 211
     346:	98 21       	and	r25, r8
     348:	68 1f       	adc	r22, r24
     34a:	d3 da       	rcall	.-2650   	; 0xfffff8f2 <__eeprom_end+0xff7ef8f2>
     34c:	25 51       	subi	r18, 0x15	; 21
     34e:	d0 59       	subi	r29, 0x90	; 144
     350:	4e a3       	std	Y+38, r20	; 0x26
     352:	24 aa       	std	Z+52, r2	; 0x34
     354:	1e b0       	in	r1, 0x0e	; 14
     356:	27 29       	or	r18, r7
     358:	75 42       	sbci	r23, 0x25	; 37
     35a:	cc 4d       	sbci	r28, 0xDC	; 220
     35c:	bf 96       	adiw	r30, 0x2f	; 47
     35e:	cf ce       	rjmp	.-610    	; 0xfe <__SREG__+0xbf>
     360:	d4 64       	ori	r29, 0x44	; 68
     362:	3b 3d       	cpi	r19, 0xDB	; 219
     364:	84 77       	andi	r24, 0x74	; 116
     366:	38 be       	out	0x38, r3	; 56
     368:	ef 85       	ldd	r30, Y+15	; 0x0f
     36a:	1c 82       	std	Y+4, r1	; 0x04
     36c:	fc db       	rcall	.-2056   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     36e:	1f 01       	movw	r2, r30
     370:	97 29       	or	r25, r7
     372:	eb f2       	brvs	.-70     	; 0x32e <__trampolines_end+0x124>
     374:	c7 3a       	cpi	r28, 0xA7	; 167
     376:	e8 71       	andi	r30, 0x18	; 24
     378:	ac c8       	rjmp	.-3752   	; 0xfffff4d2 <__eeprom_end+0xff7ef4d2>
     37a:	03 15       	cp	r16, r3
     37c:	66 1c       	adc	r6, r6
     37e:	00 96       	adiw	r24, 0x00	; 0
     380:	0d ee       	ldi	r16, 0xED	; 237
     382:	f4 65       	ori	r31, 0x54	; 84
     384:	5d fd       	.word	0xfd5d	; ????
     386:	f7 e6       	ldi	r31, 0x67	; 103
     388:	36 0f       	add	r19, r22
     38a:	62 93       	st	-Z, r22
     38c:	c6 61       	ori	r28, 0x16	; 22
     38e:	61 10       	cpse	r6, r1
     390:	ad 93       	st	X+, r26	; undefined
     392:	95 e3       	ldi	r25, 0x35	; 53
     394:	fd 80       	ldd	r15, Y+5	; 0x05
     396:	96 60       	ori	r25, 0x06	; 6
     398:	96 72       	andi	r25, 0x26	; 38
     39a:	7d 04       	cpc	r7, r13
     39c:	5c a6       	std	Y+44, r5	; 0x2c
     39e:	7e 87       	std	Y+14, r23	; 0x0e
     3a0:	37 54       	subi	r19, 0x47	; 71
     3a2:	8a 74       	andi	r24, 0x4A	; 74
     3a4:	67 47       	sbci	r22, 0x77	; 119
     3a6:	89 f7       	brne	.-30     	; 0x38a <__trampolines_end+0x180>
     3a8:	0c b5       	in	r16, 0x2c	; 44
     3aa:	ad cb       	rjmp	.-2214   	; 0xfffffb06 <__eeprom_end+0xff7efb06>
     3ac:	1f eb       	ldi	r17, 0xBF	; 191
     3ae:	ae 48       	sbci	r26, 0x8E	; 142
     3b0:	74 19       	sub	r23, r4
     3b2:	5a bb       	out	0x1a, r21	; 26
     3b4:	24 0a       	sbc	r2, r20
     3b6:	59 38       	cpi	r21, 0x89	; 137
     3b8:	4f f8       	.word	0xf84f	; ????
     3ba:	b2 5c       	subi	r27, 0xC2	; 194
     3bc:	85 2c       	mov	r8, r5
     3be:	b1 df       	rcall	.-158    	; 0x322 <__trampolines_end+0x118>
     3c0:	ee de       	rcall	.-548    	; 0x19e <__SREG__+0x15f>
     3c2:	45 2c       	mov	r4, r5
     3c4:	be cd       	rjmp	.-1156   	; 0xffffff42 <__eeprom_end+0xff7eff42>
     3c6:	46 af       	std	Z+62, r20	; 0x3e
     3c8:	d5 3f       	cpi	r29, 0xF5	; 245
     3ca:	0d 54       	subi	r16, 0x4D	; 77
     3cc:	98 71       	andi	r25, 0x18	; 24
     3ce:	0e d7       	rcall	.+3612   	; 0x11ec <xQueueGenericReceive+0x6>
     3d0:	f3 83       	std	Z+3, r31	; 0x03
     3d2:	fa 24       	eor	r15, r10
     3d4:	a3 90       	.word	0x90a3	; ????
     3d6:	f9 a7       	std	Y+41, r31	; 0x29
     3d8:	c8 62       	ori	r28, 0x28	; 40
     3da:	12 c3       	rjmp	.+1572   	; 0xa00 <pvPortMalloc+0xc>
     3dc:	02 b6       	in	r0, 0x32	; 50
     3de:	11 40       	sbci	r17, 0x01	; 1
     3e0:	69 44       	sbci	r22, 0x49	; 73
     3e2:	e5 b3       	in	r30, 0x15	; 21
     3e4:	39 57       	subi	r19, 0x79	; 121
     3e6:	e6 30       	cpi	r30, 0x06	; 6
     3e8:	52 a5       	ldd	r21, Z+42	; 0x2a
     3ea:	c2 0c       	add	r12, r2
     3ec:	41 fb       	bst	r20, 1
     3ee:	c1 8f       	std	Z+25, r28	; 0x19
     3f0:	2a 09       	sbc	r18, r10
     3f2:	35 7c       	andi	r19, 0xC5	; 197
     3f4:	7a 1a       	sub	r7, r26
     3f6:	36 ff       	sbrs	r19, 6
     3f8:	11 e8       	ldi	r17, 0x81	; 129
     3fa:	dd 9b       	sbis	0x1b, 5	; 27
     3fc:	db 3c       	cpi	r29, 0xCB	; 203
     3fe:	de 18       	sub	r13, r14
     400:	b0 ce       	rjmp	.-672    	; 0x162 <__SREG__+0x123>
     402:	2a eb       	ldi	r18, 0xBA	; 186
     404:	e0 dd       	rcall	.-1088   	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     406:	29 68       	ori	r18, 0x89	; 137
     408:	8b 2f       	mov	r24, r27
     40a:	78 3b       	cpi	r23, 0xB8	; 184
     40c:	f6 82       	std	Z+6, r15	; 0x06
     40e:	7b b8       	out	0x0b, r7	; 11
     410:	9d 70       	andi	r25, 0x0D	; 13
     412:	8f 4b       	sbci	r24, 0xBF	; 191
     414:	cd 63       	ori	r28, 0x3D	; 61
     416:	8c c8       	rjmp	.-3816   	; 0xfffff530 <__eeprom_end+0xff7ef530>
     418:	a6 91       	elpm	r26, Z
     41a:	67 ac       	ldd	r6, Z+63	; 0x3f
     41c:	6c 45       	sbci	r22, 0x5C	; 92
     41e:	64 2f       	mov	r22, r20
     420:	07 b7       	in	r16, 0x37	; 55
     422:	90 dc       	rcall	.-1760   	; 0xfffffd44 <__eeprom_end+0xff7efd44>
     424:	57 a4       	ldd	r5, Z+47	; 0x2f
     426:	93 5f       	subi	r25, 0xF3	; 243
     428:	3c 56       	subi	r19, 0x6C	; 108
     42a:	b7 63       	ori	r27, 0x37	; 55
     42c:	2f 08       	sbc	r2, r15
     42e:	b4 e0       	ldi	r27, 0x04	; 4
     430:	44 fa       	bst	r4, 4
     432:	40 13       	cpse	r20, r16
     434:	14 e9       	ldi	r17, 0x94	; 148
     436:	43 90       	.word	0x9043	; ????
     438:	7f 1b       	sub	r23, r31
     43a:	a8 f4       	brcc	.+42     	; 0x466 <__trampolines_end+0x25c>
     43c:	b5 cf       	rjmp	.-150    	; 0x3a8 <__trampolines_end+0x19e>
     43e:	ab 77       	andi	r26, 0x7B	; 123
     440:	de 3d       	cpi	r29, 0xDE	; 222
     442:	5f 84       	ldd	r5, Y+15	; 0x0f
     444:	8e 2e       	mov	r8, r30
     446:	5c 07       	cpc	r21, r28
     448:	e5 dc       	rcall	.-1590   	; 0xfffffe14 <__eeprom_end+0xff7efe14>
     44a:	17 fc       	sbrc	r1, 7
     44c:	a8 92       	.word	0x92a8	; ????
     44e:	14 7f       	andi	r17, 0xF4	; 244
     450:	c3 60       	ori	r28, 0x03	; 3
     452:	e0 8c       	ldd	r14, Z+24	; 0x18
     454:	93 73       	andi	r25, 0x33	; 51
     456:	e3 0f       	add	r30, r19
     458:	f8 81       	ld	r31, Y
     45a:	08 6b       	ori	r16, 0xB8	; 184
     45c:	32 55       	subi	r19, 0x52	; 82
     45e:	0b e8       	ldi	r16, 0x8B	; 139
     460:	59 a7       	std	Y+41, r21	; 0x29
     462:	ff 1b       	sub	r31, r31
     464:	09 b4       	in	r0, 0x29	; 41
     466:	fc 98       	cbi	0x1f, 4	; 31
     468:	62 46       	sbci	r22, 0x62	; 98
     46a:	d8 a4       	ldd	r13, Y+40	; 0x28
     46c:	71 18       	sub	r7, r1
     46e:	db 27       	eor	r29, r27
     470:	1a ea       	ldi	r17, 0xAA	; 170
     472:	2f d4       	rcall	.+2142   	; 0xcd2 <__vector_14+0x72>
     474:	4a f9       	.word	0xf94a	; ????
     476:	2c 57       	subi	r18, 0x7C	; 124
     478:	21 0b       	sbc	r18, r17
     47a:	c7 33       	cpi	r28, 0x37	; 55
     47c:	eb df       	rcall	.-42     	; 0x454 <__trampolines_end+0x24a>
     47e:	c4 b0       	in	r12, 0x04	; 4
     480:	80 2d       	mov	r24, r0
     482:	30 43       	sbci	r19, 0x30	; 48
     484:	d0 3e       	cpi	r29, 0xE0	; 224
     486:	33 c0       	rjmp	.+102    	; 0x4ee <__trampolines_end+0x2e4>
     488:	bb cc       	rjmp	.-1674   	; 0xfffffe00 <__eeprom_end+0xff7efe00>
     48a:	a6 b5       	in	r26, 0x26	; 38
     48c:	4b a2       	std	Y+35, r4	; 0x23
     48e:	a5 36       	cpi	r26, 0x65	; 101
     490:	20 50       	subi	r18, 0x00	; 0
     492:	51 c5       	rjmp	.+2722   	; 0xf36 <prvUnlockQueue+0x24>
     494:	70 43       	sbci	r23, 0x30	; 48
     496:	52 46       	sbci	r21, 0x62	; 98
     498:	1b b1       	in	r17, 0x0b	; 11
     49a:	b9 22       	and	r11, r25
     49c:	d1 65       	ori	r29, 0x51	; 81
     49e:	ba a1       	ldd	r27, Y+34	; 0x22
     4a0:	ba 97       	sbiw	r30, 0x2a	; 42
     4a2:	4e 52       	subi	r20, 0x2E	; 46
     4a4:	ea 84       	ldd	r14, Y+10	; 0x0a
     4a6:	4d d1       	rcall	.+666    	; 0x742 <__do_clear_bss+0x2>
     4a8:	81 76       	andi	r24, 0x61	; 97
     4aa:	69 ed       	ldi	r22, 0xD9	; 217
     4ac:	92 28       	or	r9, r2
     4ae:	6a 6e       	ori	r22, 0xEA	; 234
     4b0:	f9 da       	rcall	.-2574   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     4b2:	9e 9d       	mul	r25, r14
     4b4:	a9 c9       	rjmp	.-3246   	; 0xfffff808 <__eeprom_end+0xff7ef808>
     4b6:	9d 1e       	adc	r9, r29
     4b8:	c2 3b       	cpi	r28, 0xB2	; 178
     4ba:	76 7a       	andi	r23, 0xA6	; 166
     4bc:	08 ef       	ldi	r16, 0xF8	; 248
     4be:	75 f9       	bld	r23, 5
     4c0:	63 1d       	adc	r22, r3
     4c2:	81 0a       	sbc	r8, r17
     4c4:	33 0e       	add	r3, r19
     4c6:	82 89       	ldd	r24, Z+18	; 0x12
     4c8:	58 fc       	.word	0xfc58	; ????
     4ca:	c9 72       	andi	r28, 0x29	; 41
     4cc:	15 b2       	in	r1, 0x15	; 21
     4ce:	ca f1       	brmi	.+114    	; 0x542 <__trampolines_end+0x338>
     4d0:	7e 40       	sbci	r23, 0x0E	; 14
     4d2:	3e 02       	muls	r19, r30
     4d4:	2e 53       	subi	r18, 0x3E	; 62
     4d6:	3d 81       	ldd	r19, Y+5	; 0x05
     4d8:	45 a1       	ldd	r20, Z+37	; 0x25
     4da:	d6 e5       	ldi	r29, 0x56	; 86
     4dc:	8f 75       	andi	r24, 0x5F	; 95
     4de:	d5 66       	ori	r29, 0x65	; 101
     4e0:	e4 87       	std	Z+12, r30	; 0x0c
     4e2:	21 95       	neg	r18
     4e4:	b4 94       	.word	0x94b4	; ????
     4e6:	22 16       	cp	r2, r18
     4e8:	df 66       	ori	r29, 0x6F	; 111
     4ea:	06 2a       	or	r0, r22
     4ec:	cc 38       	cpi	r28, 0x8C	; 140
     4ee:	05 a9       	ldd	r16, Z+53	; 0x35
     4f0:	a7 ca       	rjmp	.-2738   	; 0xfffffa40 <__eeprom_end+0xff7efa40>
     4f2:	f1 5a       	subi	r31, 0xA1	; 161
     4f4:	f7 d9       	rcall	.-3090   	; 0xfffff8e4 <__eeprom_end+0xff7ef8e4>
     4f6:	f2 d9       	rcall	.-3100   	; 0xfffff8dc <__eeprom_end+0xff7ef8dc>
     4f8:	9c 2b       	or	r25, r28
     4fa:	19 bd       	out	0x29, r17	; 41
     4fc:	56 ff       	sbrs	r21, 6
     4fe:	1a 3e       	cpi	r17, 0xEA	; 234
     500:	3d 0d       	add	r19, r13
     502:	ee cd       	rjmp	.-1060   	; 0xe0 <__SREG__+0xa1>
     504:	6d 1e       	adc	r6, r29
     506:	ed 4e       	sbci	r30, 0xED	; 237
     508:	06 ec       	ldi	r16, 0xC6	; 198
     50a:	c4 26       	eor	r12, r20
     50c:	8d c3       	rjmp	.+1818   	; 0xc28 <vPortYield+0x78>
     50e:	c7 a5       	ldd	r28, Z+47	; 0x2f
     510:	e6 31       	cpi	r30, 0x16	; 22
     512:	33 56       	subi	r19, 0x63	; 99
     514:	b6 22       	and	r11, r22
     516:	30 d5       	rcall	.+2656   	; 0xf78 <prvUnlockQueue+0x66>
     518:	dd d0       	rcall	.+442    	; 0x6d4 <__c.2159+0xc6>
     51a:	db b1       	in	r29, 0x0b	; 11
     51c:	17 04       	cpc	r1, r7
     51e:	d8 32       	cpi	r29, 0x28	; 40
     520:	7c f6       	brge	.-98     	; 0x4c0 <__trampolines_end+0x2b6>
     522:	2c c1       	rjmp	.+600    	; 0x77c <cspTask+0x22>
     524:	2c e5       	ldi	r18, 0x5C	; 92
     526:	2f 42       	sbci	r18, 0x2F	; 47
     528:	47 17       	cp	r20, r23
     52a:	0b 7e       	andi	r16, 0xEB	; 235
     52c:	54 49       	sbci	r21, 0x94	; 148
     52e:	08 fd       	.word	0xfd08	; ????
     530:	3f bb       	out	0x1f, r19	; 31
     532:	fc 0e       	add	r15, r28
     534:	6f a8       	ldd	r6, Y+55	; 0x37
     536:	ff 8d       	ldd	r31, Y+31	; 0x1f
     538:	04 5a       	subi	r16, 0xA4	; 164
     53a:	14 e9       	ldi	r17, 0x94	; 148
     53c:	ce 8e       	std	Y+30, r12	; 0x1e
     53e:	17 6a       	ori	r17, 0xA7	; 167
     540:	a5 7c       	andi	r26, 0xC5	; 197
     542:	e3 99       	sbic	0x1c, 3	; 28
     544:	f5 6f       	ori	r31, 0xF5	; 245
     546:	e0 1a       	sub	r14, r16
     548:	9e 9d       	mul	r25, r14
     54a:	ab e1       	ldi	r26, 0x1B	; 27
     54c:	d3 d3       	rcall	.+1958   	; 0xcf4 <__vector_14+0x94>
     54e:	a8 62       	ori	r26, 0x28	; 40
     550:	b8 21       	and	r27, r8
     552:	5c 91       	ld	r21, X
     554:	e8 32       	cpi	r30, 0x28	; 40
     556:	5f 12       	cpse	r5, r31
     558:	83 c0       	rjmp	.+262    	; 0x660 <__c.2159+0x52>
     55a:	b4 76       	andi	r27, 0x64	; 100
     55c:	49 14       	cp	r4, r9
     55e:	b7 f5       	brid	.+108    	; 0x5cc <__trampolines_end+0x3c2>
     560:	22 e6       	ldi	r18, 0x62	; 98
     562:	43 06       	cpc	r4, r19
     564:	72 f5       	brpl	.+92     	; 0x5c2 <__trampolines_end+0x3b8>
     566:	40 85       	ldd	r20, Z+8	; 0x08
     568:	19 07       	cpc	r17, r25
     56a:	64 b9       	out	0x04, r22	; 4
     56c:	0a 59       	subi	r16, 0x9A	; 154
     56e:	67 3a       	cpi	r22, 0xA7	; 167
     570:	61 ab       	std	Z+49, r22	; 0x31
     572:	93 c9       	rjmp	.-3290   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
     574:	31 b8       	out	0x01, r3	; 1
     576:	90 4a       	sbci	r25, 0xA0	; 160
     578:	5a 4a       	sbci	r21, 0xAA	; 170
     57a:	7b 2e       	mov	r7, r27
     57c:	90 9e       	mul	r9, r16
     57e:	78 ad       	ldd	r23, Y+56	; 0x38
     580:	fb 6c       	ori	r31, 0xCB	; 203
     582:	8c 5e       	subi	r24, 0xEC	; 236
     584:	ab 7f       	andi	r26, 0xFB	; 251
     586:	8f dd       	rcall	.-1250   	; 0xa6 <__SREG__+0x67>
     588:	c0 8d       	ldd	r28, Z+24	; 0x18
     58a:	1a a8       	ldd	r1, Y+50	; 0x32
     58c:	30 e3       	ldi	r19, 0x30	; 48
     58e:	19 2b       	or	r17, r25
     590:	5b 11       	cpse	r21, r11
     592:	ed d8       	rcall	.-3622   	; 0xfffff76e <__eeprom_end+0xff7ef76e>
     594:	0b 02       	muls	r16, r27
     596:	ee 5b       	subi	r30, 0xBE	; 190
     598:	60 f0       	brcs	.+24     	; 0x5b2 <__trampolines_end+0x3a8>
     59a:	05 3f       	cpi	r16, 0xF5	; 245
     59c:	aa 24       	eor	r10, r10
     59e:	06 bc       	out	0x26, r0	; 38
     5a0:	c1 d6       	rcall	.+3458   	; 0x1324 <xQueueGenericReceive+0x13e>
     5a2:	f2 4f       	sbci	r31, 0xF2	; 242
     5a4:	91 c5       	rjmp	.+2850   	; 0x10c8 <xQueueGenericSend+0x96>
     5a6:	f1 cc       	rjmp	.-1566   	; 0xffffff8a <__eeprom_end+0xff7eff8a>
     5a8:	fa 37       	cpi	r31, 0x7A	; 122
     5aa:	d5 f0       	brhs	.+52     	; 0x5e0 <__trampolines_end+0x3d6>
     5ac:	e9 69       	ori	r30, 0x99	; 153
     5ae:	d6 73       	andi	r29, 0x36	; 54
     5b0:	82 9b       	sbis	0x10, 2	; 16
     5b2:	22 80       	ldd	r2, Z+2	; 0x02
     5b4:	d2 88       	ldd	r13, Z+18	; 0x12
     5b6:	21 03       	mulsu	r18, r17
     5b8:	b9 7a       	andi	r27, 0xA9	; 169
     5ba:	ca 67       	ori	r28, 0x7A	; 122
     5bc:	73 ae       	std	Z+59, r7	; 0x3b
     5be:	c9 e4       	ldi	r28, 0x49	; 73
     5c0:	18 5c       	subi	r17, 0xC8	; 200
     5c2:	3d 17       	cp	r19, r29
     5c4:	48 4f       	sbci	r20, 0xF8	; 248
     5c6:	3e 94 23 bd 	call	0xd7a46	; 0xd7a46 <__data_load_end+0xd1e5e>
     5ca:	75 6f       	ori	r23, 0xF5	; 245
     5cc:	6e f3       	brts	.-38     	; 0x5a8 <__trampolines_end+0x39e>
     5ce:	76 ec       	ldi	r23, 0xC6	; 198
     5d0:	05 01       	movw	r0, r10
     5d2:	82 1f       	adc	r24, r18
     5d4:	55 12       	cpse	r5, r21
     5d6:	81 9c       	mul	r8, r1
     5d8:	3e e0       	ldi	r19, 0x0E	; 14
     5da:	6a f8       	.word	0xf86a	; ????
     5dc:	f4 34       	cpi	r31, 0x44	; 68
     5de:	69 7b       	andi	r22, 0xB9	; 185
     5e0:	9f c6       	rjmp	.+3390   	; 0x1320 <xQueueGenericReceive+0x13a>
     5e2:	9d 88       	ldd	r9, Y+21	; 0x15
     5e4:	cf d5       	rcall	.+2974   	; 0x1184 <xQueueCreateMutex+0x42>
     5e6:	9e 0b       	sbc	r25, r30
     5e8:	a4 27       	eor	r26, r20
     5ea:	ba 37       	cpi	r27, 0x7A	; 122
     5ec:	b7 79       	andi	r27, 0x97	; 151
     5ee:	b9 b4       	in	r11, 0x29	; 41
     5f0:	dc 8b       	std	Y+20, r29	; 0x14
     5f2:	4d 47       	sbci	r20, 0x7D	; 125
     5f4:	8c 98       	cbi	0x11, 4	; 17
     5f6:	4e c4       	rjmp	.+2204   	; 0xe94 <prvCopyDataToQueue+0x4e>
     5f8:	e7 6a       	ori	r30, 0xA7	; 167
     5fa:	a5 a0       	ldd	r10, Z+37	; 0x25
     5fc:	2d be       	out	0x3d, r2	; 61
     5fe:	a6 23       	and	r26, r22
     600:	46 4c       	sbci	r20, 0xC6	; 198
     602:	52 d0       	rcall	.+164    	; 0x6a8 <__c.2159+0x9a>
     604:	16 5f       	subi	r17, 0xF6	; 246
     606:	51 53       	subi	r21, 0x31	; 49
     608:	7d ad       	ldd	r23, Y+61	; 0x3d

0000060a <__c.2161>:
     60a:	6e 61 6e 00                                         nan.

0000060e <__c.2159>:
     60e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     61e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     62e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     63e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     64e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     65e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     66e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     67e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     68e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     69e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     6ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     6be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     6ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     6de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     6ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000070c <__ctors_end>:
     70c:	11 24       	eor	r1, r1
     70e:	1f be       	out	0x3f, r1	; 63
     710:	cf ef       	ldi	r28, 0xFF	; 255
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df e3       	ldi	r29, 0x3F	; 63
     716:	de bf       	out	0x3e, r29	; 62
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	0c bf       	out	0x3c, r16	; 60
     71c:	18 be       	out	0x38, r1	; 56
     71e:	19 be       	out	0x39, r1	; 57
     720:	1a be       	out	0x3a, r1	; 58
     722:	1b be       	out	0x3b, r1	; 59

00000724 <__do_copy_data>:
     724:	11 e2       	ldi	r17, 0x21	; 33
     726:	a0 e0       	ldi	r26, 0x00	; 0
     728:	b0 e2       	ldi	r27, 0x20	; 32
     72a:	e2 ed       	ldi	r30, 0xD2	; 210
     72c:	fa e5       	ldi	r31, 0x5A	; 90
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	0b bf       	out	0x3b, r16	; 59
     732:	02 c0       	rjmp	.+4      	; 0x738 <__do_copy_data+0x14>
     734:	07 90       	elpm	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	a6 31       	cpi	r26, 0x16	; 22
     73a:	b1 07       	cpc	r27, r17
     73c:	d9 f7       	brne	.-10     	; 0x734 <__do_copy_data+0x10>
     73e:	1b be       	out	0x3b, r1	; 59

00000740 <__do_clear_bss>:
     740:	2f e3       	ldi	r18, 0x3F	; 63
     742:	a6 e1       	ldi	r26, 0x16	; 22
     744:	b1 e2       	ldi	r27, 0x21	; 33
     746:	01 c0       	rjmp	.+2      	; 0x74a <.do_clear_bss_start>

00000748 <.do_clear_bss_loop>:
     748:	1d 92       	st	X+, r1

0000074a <.do_clear_bss_start>:
     74a:	a0 39       	cpi	r26, 0x90	; 144
     74c:	b2 07       	cpc	r27, r18
     74e:	e1 f7       	brne	.-8      	; 0x748 <.do_clear_bss_loop>
     750:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <main>
     754:	0c 94 67 2d 	jmp	0x5ace	; 0x5ace <_exit>

00000758 <__bad_interrupt>:
     758:	53 cc       	rjmp	.-1882   	; 0x0 <__vectors>

0000075a <cspTask>:
/*	Task that handles CSP incoming packets								*/
/* -------------------------------------------------------------------- */
void cspTask(void *p) {
	
	/* Create socket without any socket options */
	csp_socket_t * sock = csp_socket(CSP_SO_NONE);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	cb 01       	movw	r24, r22
     760:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <csp_socket>
     764:	7c 01       	movw	r14, r24

	/* Bind all ports to socket */
	csp_bind(sock, CSP_ANY);
     766:	60 e2       	ldi	r22, 0x20	; 32
     768:	0e 94 49 19 	call	0x3292	; 0x3292 <csp_bind>

	/* Create 10 connections backlog queue */
	csp_listen(sock, 10);
     76c:	6a e0       	ldi	r22, 0x0A	; 10
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	c7 01       	movw	r24, r14
     772:	0e 94 2e 19 	call	0x325c	; 0x325c <csp_listen>

	/* Pointer to current connection and packet */
	csp_conn_t * conn;
	csp_packet_t * packet;
	
	xCSPEventQueue = xQueueCreate(10, (portBASE_TYPE) sizeof(xCSPStackEvent_t));
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	0f d4       	rcall	.+2078   	; 0xf9a <xQueueCreate>
     77c:	80 93 cf 3e 	sts	0x3ECF, r24
     780:	90 93 d0 3e 	sts	0x3ED0, r25
					
				/* if Port 16 packet received */
				// Free Heap space in Human readable form
				case 16:
				
					newEvent->eEventType = freeHeapEvent;
     784:	cc 24       	eor	r12, r12
     786:	c3 94       	inc	r12
				
				/* if Port 17 packet received */
				// Return info status message
				case 17:
				
					newEvent->eEventType = housKeepingEvent;
     788:	68 94       	set
     78a:	dd 24       	eor	r13, r13
     78c:	d1 f8       	bld	r13, 1

	/* Process incoming connections */
	while (1) {
		
		/* Wait for connection, 10000 ms timeout */
		if ((conn = csp_accept(sock, 10000)) == NULL)
     78e:	40 e1       	ldi	r20, 0x10	; 16
     790:	57 e2       	ldi	r21, 0x27	; 39
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	c7 01       	movw	r24, r14
     798:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <csp_accept>
     79c:	8c 01       	movw	r16, r24
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	b1 f3       	breq	.-20     	; 0x78e <cspTask+0x34>
     7a2:	3c c0       	rjmp	.+120    	; 0x81c <cspTask+0xc2>
		continue;

		/* Read packets. Timout is 1000 ms */
		while ((packet = csp_read(conn, 10)) != NULL) {
			switch (csp_conn_dport(conn)) {
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <csp_conn_dport>
     7aa:	80 31       	cpi	r24, 0x10	; 16
     7ac:	91 05       	cpc	r25, r1
     7ae:	a1 f0       	breq	.+40     	; 0x7d8 <cspTask+0x7e>
     7b0:	81 31       	cpi	r24, 0x11	; 17
     7b2:	91 05       	cpc	r25, r1
     7b4:	01 f1       	breq	.+64     	; 0x7f6 <cspTask+0x9c>
     7b6:	0f 97       	sbiw	r24, 0x0f	; 15
     7b8:	69 f5       	brne	.+90     	; 0x814 <cspTask+0xba>
				
				/* if Port 15 packet received */
				// Echo back the incoming packet
				case 15:
				
					newEvent->eEventType = echoBackEvent;
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	fb 01       	movw	r30, r22
     7c0:	10 82       	st	Z, r1
					newEvent->pvData = packet;
     7c2:	c1 83       	std	Z+1, r28	; 0x01
     7c4:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	4a e0       	ldi	r20, 0x0A	; 10
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	80 91 cf 3e 	lds	r24, 0x3ECF
     7d0:	90 91 d0 3e 	lds	r25, 0x3ED0
     7d4:	2e d4       	rcall	.+2140   	; 0x1032 <xQueueGenericSend>
					
				break;
     7d6:	22 c0       	rjmp	.+68     	; 0x81c <cspTask+0xc2>
					
				/* if Port 16 packet received */
				// Free Heap space in Human readable form
				case 16:
				
					newEvent->eEventType = freeHeapEvent;
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	fb 01       	movw	r30, r22
     7de:	c0 82       	st	Z, r12
					newEvent->pvData = packet;
     7e0:	c1 83       	std	Z+1, r28	; 0x01
     7e2:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);	
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	4a e0       	ldi	r20, 0x0A	; 10
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 91 cf 3e 	lds	r24, 0x3ECF
     7ee:	90 91 d0 3e 	lds	r25, 0x3ED0
     7f2:	1f d4       	rcall	.+2110   	; 0x1032 <xQueueGenericSend>
					
				break;	
     7f4:	13 c0       	rjmp	.+38     	; 0x81c <cspTask+0xc2>
				
				/* if Port 17 packet received */
				// Return info status message
				case 17:
				
					newEvent->eEventType = housKeepingEvent;
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	fb 01       	movw	r30, r22
     7fc:	d0 82       	st	Z, r13
					newEvent->pvData = packet;
     7fe:	c1 83       	std	Z+1, r28	; 0x01
     800:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	80 91 cf 3e 	lds	r24, 0x3ECF
     80c:	90 91 d0 3e 	lds	r25, 0x3ED0
     810:	10 d4       	rcall	.+2080   	; 0x1032 <xQueueGenericSend>
				
				break;		
     812:	04 c0       	rjmp	.+8      	; 0x81c <cspTask+0xc2>
				
				/* Process packet here */
				default:
				
				/* Let the service handler reply pings, buffer use, etc. */
				csp_service_handler(conn, packet);
     814:	be 01       	movw	r22, r28
     816:	c8 01       	movw	r24, r16
     818:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <csp_service_handler>
		/* Wait for connection, 10000 ms timeout */
		if ((conn = csp_accept(sock, 10000)) == NULL)
		continue;

		/* Read packets. Timout is 1000 ms */
		while ((packet = csp_read(conn, 10)) != NULL) {
     81c:	4a e0       	ldi	r20, 0x0A	; 10
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	c8 01       	movw	r24, r16
     826:	0e 94 90 17 	call	0x2f20	; 0x2f20 <csp_read>
     82a:	ec 01       	movw	r28, r24
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	09 f0       	breq	.+2      	; 0x832 <cspTask+0xd8>
     830:	b9 cf       	rjmp	.-142    	; 0x7a4 <cspTask+0x4a>
				break;
			}
		}

		/* Close current connection, and handle next */
		csp_close(conn);
     832:	c8 01       	movw	r24, r16
     834:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <csp_close>
     838:	aa cf       	rjmp	.-172    	; 0x78e <cspTask+0x34>

0000083a <TWI_CSP_SlaveProcessData>:
TWI_Slave_t twi_csp_slave;			/*!< TWI slave module. */
i2c_callback_t callbackFunction;

// this function processes received data on the I2C Slave line
// It is call by the I2C driver
void TWI_CSP_SlaveProcessData(void) {
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	ca 50       	subi	r28, 0x0A	; 10
     844:	d1 40       	sbci	r29, 0x01	; 1
     846:	cd bf       	out	0x3d, r28	; 61
     848:	de bf       	out	0x3e, r29	; 62
	
	if (twi_csp_slave.result == TWIS_RESULT_OK) {
     84a:	80 91 21 3f 	lds	r24, 0x3F21
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	49 f5       	brne	.+82     	; 0x8a4 <TWI_CSP_SlaveProcessData+0x6a>
		
		i2c_frame_t newFrame;
		
		if (twi_csp_slave.bytesReceived > 0) {
     852:	80 91 1e 3f 	lds	r24, 0x3F1E
     856:	88 23       	and	r24, r24
     858:	e1 f0       	breq	.+56     	; 0x892 <TWI_CSP_SlaveProcessData+0x58>
			
			// set the data len
			newFrame.len = twi_csp_slave.bytesReceived;
     85a:	ee e1       	ldi	r30, 0x1E	; 30
     85c:	ff e3       	ldi	r31, 0x3F	; 63
     85e:	80 81       	ld	r24, Z
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	89 87       	std	Y+9, r24	; 0x09
     864:	9a 87       	std	Y+10, r25	; 0x0a
			
			// copy the data
			int i;
			for (i = 0; i < twi_csp_slave.bytesReceived; i++) {
     866:	80 81       	ld	r24, Z
     868:	88 23       	and	r24, r24
     86a:	99 f0       	breq	.+38     	; 0x892 <TWI_CSP_SlaveProcessData+0x58>
     86c:	fe 01       	movw	r30, r28
     86e:	3b 96       	adiw	r30, 0x0b	; 11
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	4e e1       	ldi	r20, 0x1E	; 30
     876:	5f e3       	ldi	r21, 0x3F	; 63
				
				newFrame.data[i] = twi_csp_slave.receivedData[i];
     878:	dc 01       	movw	r26, r24
     87a:	af 52       	subi	r26, 0x2F	; 47
     87c:	b1 4c       	sbci	r27, 0xC1	; 193
     87e:	14 96       	adiw	r26, 0x04	; 4
     880:	2c 91       	ld	r18, X
     882:	21 93       	st	Z+, r18
			// set the data len
			newFrame.len = twi_csp_slave.bytesReceived;
			
			// copy the data
			int i;
			for (i = 0; i < twi_csp_slave.bytesReceived; i++) {
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	da 01       	movw	r26, r20
     888:	2c 91       	ld	r18, X
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	9c f3       	brlt	.-26     	; 0x878 <TWI_CSP_SlaveProcessData+0x3e>
				
				newFrame.data[i] = twi_csp_slave.receivedData[i];
			}
		}
		
		callbackFunction(&newFrame, false);
     892:	e0 91 75 3f 	lds	r30, 0x3F75
     896:	f0 91 76 3f 	lds	r31, 0x3F76
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	19 95       	eicall
		
	}
}
     8a4:	c6 5f       	subi	r28, 0xF6	; 246
     8a6:	de 4f       	sbci	r29, 0xFE	; 254
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <i2c_init>:

// Initialize the i2c interface for CSP
int i2c_init(int handle, int mode, uint8_t addr, uint16_t speed, int queue_len_tx, int queue_len_rx, i2c_callback_t callback) {
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	cf 93       	push	r28
     8b8:	c4 2f       	mov	r28, r20
	
	// Initialize TWI master for CSP
	TWI_MasterInit(&twi_csp_master, &CSP_I2C_INTERFACE, TWI_MASTER_INTLVL_LO_gc, speed);
     8ba:	40 e4       	ldi	r20, 0x40	; 64
     8bc:	60 ea       	ldi	r22, 0xA0	; 160
     8be:	74 e0       	ldi	r23, 0x04	; 4
     8c0:	83 e2       	ldi	r24, 0x23	; 35
     8c2:	9f e3       	ldi	r25, 0x3F	; 63
     8c4:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <TWI_MasterInit>
			
	// Initialize TWI slave for CSP
	TWI_SlaveInitializeDriver(&twi_csp_slave, &CSP_I2C_INTERFACE, TWI_CSP_SlaveProcessData);
     8c8:	4d e1       	ldi	r20, 0x1D	; 29
     8ca:	54 e0       	ldi	r21, 0x04	; 4
     8cc:	60 ea       	ldi	r22, 0xA0	; 160
     8ce:	74 e0       	ldi	r23, 0x04	; 4
     8d0:	81 ed       	ldi	r24, 0xD1	; 209
     8d2:	9e e3       	ldi	r25, 0x3E	; 62
     8d4:	0e 94 a2 22 	call	0x4544	; 0x4544 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twi_csp_slave, addr, TWI_SLAVE_INTLVL_LO_gc);
     8d8:	40 e4       	ldi	r20, 0x40	; 64
     8da:	6c 2f       	mov	r22, r28
     8dc:	81 ed       	ldi	r24, 0xD1	; 209
     8de:	9e e3       	ldi	r25, 0x3E	; 62
     8e0:	0e 94 b3 22 	call	0x4566	; 0x4566 <TWI_SlaveInitializeModule>
	
	callbackFunction = callback;
     8e4:	c0 92 75 3f 	sts	0x3F75, r12
     8e8:	d0 92 76 3f 	sts	0x3F76, r13
	
	return E_NO_ERR;
}
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	cf 91       	pop	r28
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <i2c_send>:
 * @param timeout Ticks to wait
 * @return Error code
 */
int i2c_send(int handle, i2c_frame_t * frame, uint16_t timeout) {
		
	if (TWI_MasterWrite(&twi_csp_master, frame->dest, (uint8_t *) frame->data, frame->len)) {
     8f8:	ab 01       	movw	r20, r22
     8fa:	46 5f       	subi	r20, 0xF6	; 246
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	fb 01       	movw	r30, r22
     900:	20 85       	ldd	r18, Z+8	; 0x08
     902:	66 81       	ldd	r22, Z+6	; 0x06
     904:	83 e2       	ldi	r24, 0x23	; 35
     906:	9f e3       	ldi	r25, 0x3F	; 63
     908:	0e 94 ed 21 	call	0x43da	; 0x43da <TWI_MasterWrite>
     90c:	88 23       	and	r24, r24
     90e:	19 f0       	breq	.+6      	; 0x916 <i2c_send+0x1e>
		
		return E_NO_ERR;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	08 95       	ret
	} else {
		
		return 1;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     91a:	08 95       	ret

0000091c <clock_get_time>:

/* User functions required */
void clock_get_time(csp_timestamp_t * time) {
     91c:	08 95       	ret

0000091e <clock_set_time>:
	
	
}

extern void clock_set_time(csp_timestamp_t * time) {
     91e:	08 95       	ret

00000920 <__vector_46>:
	
}

/*! CSP Master Interrupt vector. */
ISR(CSP_I2C_TWIM)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	08 b6       	in	r0, 0x38	; 56
     92c:	0f 92       	push	r0
     92e:	18 be       	out	0x38, r1	; 56
     930:	09 b6       	in	r0, 0x39	; 57
     932:	0f 92       	push	r0
     934:	19 be       	out	0x39, r1	; 57
     936:	0b b6       	in	r0, 0x3b	; 59
     938:	0f 92       	push	r0
     93a:	1b be       	out	0x3b, r1	; 59
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twi_csp_master);
     954:	83 e2       	ldi	r24, 0x23	; 35
     956:	9f e3       	ldi	r25, 0x3F	; 63
     958:	0e 94 89 22 	call	0x4512	; 0x4512 <TWI_MasterInterruptHandler>
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	09 be       	out	0x39, r0	; 57
     97c:	0f 90       	pop	r0
     97e:	08 be       	out	0x38, r0	; 56
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_45>:

/*! CPS Slave Interrupt vector. */
ISR(CSP_I2C_TWIS)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	08 b6       	in	r0, 0x38	; 56
     996:	0f 92       	push	r0
     998:	18 be       	out	0x38, r1	; 56
     99a:	09 b6       	in	r0, 0x39	; 57
     99c:	0f 92       	push	r0
     99e:	19 be       	out	0x39, r1	; 57
     9a0:	0b b6       	in	r0, 0x3b	; 59
     9a2:	0f 92       	push	r0
     9a4:	1b be       	out	0x3b, r1	; 59
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twi_csp_slave);
     9be:	81 ed       	ldi	r24, 0xD1	; 209
     9c0:	9e e3       	ldi	r25, 0x3E	; 62
     9c2:	0e 94 82 23 	call	0x4704	; 0x4704 <TWI_SlaveInterruptHandler>
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0b be       	out	0x3b, r0	; 59
     9e2:	0f 90       	pop	r0
     9e4:	09 be       	out	0x39, r0	; 57
     9e6:	0f 90       	pop	r0
     9e8:	08 be       	out	0x38, r0	; 56
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	dd d6       	rcall	.+3514   	; 0x17b6 <vTaskSuspendAll>
     9fc:	40 91 16 21 	lds	r20, 0x2116
     a00:	50 91 17 21 	lds	r21, 0x2117
     a04:	9e 01       	movw	r18, r28
     a06:	24 0f       	add	r18, r20
     a08:	35 1f       	adc	r19, r21
     a0a:	28 35       	cpi	r18, 0x58	; 88
     a0c:	8b e1       	ldi	r24, 0x1B	; 27
     a0e:	38 07       	cpc	r19, r24
     a10:	58 f4       	brcc	.+22     	; 0xa28 <pvPortMalloc+0x34>
     a12:	42 17       	cp	r20, r18
     a14:	53 07       	cpc	r21, r19
     a16:	58 f4       	brcc	.+22     	; 0xa2e <pvPortMalloc+0x3a>
     a18:	ea 01       	movw	r28, r20
     a1a:	c8 5e       	subi	r28, 0xE8	; 232
     a1c:	de 4d       	sbci	r29, 0xDE	; 222
     a1e:	20 93 16 21 	sts	0x2116, r18
     a22:	30 93 17 21 	sts	0x2117, r19
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <pvPortMalloc+0x3e>
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <pvPortMalloc+0x3e>
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	95 d7       	rcall	.+3882   	; 0x195e <xTaskResumeAll>
     a34:	ce 01       	movw	r24, r28
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <vPortFree>:
     a3c:	08 95       	ret

00000a3e <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     a3e:	20 91 16 21 	lds	r18, 0x2116
     a42:	30 91 17 21 	lds	r19, 0x2117
}
     a46:	88 e5       	ldi	r24, 0x58	; 88
     a48:	9b e1       	ldi	r25, 0x1B	; 27
     a4a:	82 1b       	sub	r24, r18
     a4c:	93 0b       	sbc	r25, r19
     a4e:	08 95       	ret

00000a50 <pxPortInitialiseStack>:
    /* Should not get here. */
    return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler(void) {
     a50:	31 e1       	ldi	r19, 0x11	; 17
     a52:	fc 01       	movw	r30, r24
     a54:	30 83       	st	Z, r19
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	22 e2       	ldi	r18, 0x22	; 34
     a5a:	20 83       	st	Z, r18
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	a3 e3       	ldi	r26, 0x33	; 51
     a60:	a0 83       	st	Z, r26
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	60 83       	st	Z, r22
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	70 83       	st	Z, r23
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	10 82       	st	Z, r1
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	10 82       	st	Z, r1
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	60 e8       	ldi	r22, 0x80	; 128
     a76:	60 83       	st	Z, r22
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	10 82       	st	Z, r1
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	62 e0       	ldi	r22, 0x02	; 2
     a80:	60 83       	st	Z, r22
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	60 83       	st	Z, r22
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	60 83       	st	Z, r22
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	65 e0       	ldi	r22, 0x05	; 5
     a92:	60 83       	st	Z, r22
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	66 e0       	ldi	r22, 0x06	; 6
     a98:	60 83       	st	Z, r22
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	60 83       	st	Z, r22
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	68 e0       	ldi	r22, 0x08	; 8
     aa4:	60 83       	st	Z, r22
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	69 e0       	ldi	r22, 0x09	; 9
     aaa:	60 83       	st	Z, r22
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	60 e1       	ldi	r22, 0x10	; 16
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	30 83       	st	Z, r19
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	32 e1       	ldi	r19, 0x12	; 18
     aba:	30 83       	st	Z, r19
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	33 e1       	ldi	r19, 0x13	; 19
     ac0:	30 83       	st	Z, r19
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	34 e1       	ldi	r19, 0x14	; 20
     ac6:	30 83       	st	Z, r19
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	35 e1       	ldi	r19, 0x15	; 21
     acc:	30 83       	st	Z, r19
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	36 e1       	ldi	r19, 0x16	; 22
     ad2:	30 83       	st	Z, r19
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	37 e1       	ldi	r19, 0x17	; 23
     ad8:	30 83       	st	Z, r19
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	38 e1       	ldi	r19, 0x18	; 24
     ade:	30 83       	st	Z, r19
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	39 e1       	ldi	r19, 0x19	; 25
     ae4:	30 83       	st	Z, r19
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	30 e2       	ldi	r19, 0x20	; 32
     aea:	30 83       	st	Z, r19
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	31 e2       	ldi	r19, 0x21	; 33
     af0:	30 83       	st	Z, r19
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	20 83       	st	Z, r18
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	23 e2       	ldi	r18, 0x23	; 35
     afa:	20 83       	st	Z, r18
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	40 83       	st	Z, r20
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	50 83       	st	Z, r21
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	26 e2       	ldi	r18, 0x26	; 38
     b08:	20 83       	st	Z, r18
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	27 e2       	ldi	r18, 0x27	; 39
     b0e:	20 83       	st	Z, r18
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	28 e2       	ldi	r18, 0x28	; 40
     b14:	20 83       	st	Z, r18
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	29 e2       	ldi	r18, 0x29	; 41
     b1a:	20 83       	st	Z, r18
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	20 e3       	ldi	r18, 0x30	; 48
     b20:	20 83       	st	Z, r18
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	21 e3       	ldi	r18, 0x31	; 49
     b26:	20 83       	st	Z, r18
     b28:	87 97       	sbiw	r24, 0x27	; 39
     b2a:	08 95       	ret

00000b2c <xPortStartScheduler>:
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	98 e0       	ldi	r25, 0x08	; 8
     b32:	0e 94 70 21 	call	0x42e0	; 0x42e0 <TC0_ConfigClockSource>
     b36:	85 e5       	ldi	r24, 0x55	; 85
     b38:	90 e4       	ldi	r25, 0x40	; 64
     b3a:	e0 e0       	ldi	r30, 0x00	; 0
     b3c:	f8 e0       	ldi	r31, 0x08	; 8
     b3e:	86 a3       	std	Z+38, r24	; 0x26
     b40:	97 a3       	std	Z+39, r25	; 0x27
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	98 e0       	ldi	r25, 0x08	; 8
     b48:	0e 94 76 21 	call	0x42ec	; 0x42ec <TC0_SetOverflowIntLevel>
     b4c:	e0 ea       	ldi	r30, 0xA0	; 160
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	82 83       	std	Z+2, r24	; 0x02
     b56:	a0 91 e3 3c 	lds	r26, 0x3CE3
     b5a:	b0 91 e4 3c 	lds	r27, 0x3CE4
     b5e:	cd 91       	ld	r28, X+
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	dd 91       	ld	r29, X+
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	cf 90       	pop	r12
     b8e:	bf 90       	pop	r11
     b90:	af 90       	pop	r10
     b92:	9f 90       	pop	r9
     b94:	8f 90       	pop	r8
     b96:	7f 90       	pop	r7
     b98:	6f 90       	pop	r6
     b9a:	5f 90       	pop	r5
     b9c:	4f 90       	pop	r4
     b9e:	3f 90       	pop	r3
     ba0:	2f 90       	pop	r2
     ba2:	1f 90       	pop	r1
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	08 95       	ret
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	08 95       	ret

00000bb0 <vPortYield>:
 * Manual context switch.  The first thing we do is save the registers so we
 * can use a naked attribute.
 */
void vPortYield(void) __attribute__ ( ( naked ) );
void vPortYield(void) {
    portSAVE_CONTEXT();
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	0f 92       	push	r0
     bb8:	1f 92       	push	r1
     bba:	11 24       	eor	r1, r1
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
     bf8:	a0 91 e3 3c 	lds	r26, 0x3CE3
     bfc:	b0 91 e4 3c 	lds	r27, 0x3CE4
     c00:	0d b6       	in	r0, 0x3d	; 61
     c02:	0d 92       	st	X+, r0
     c04:	0e b6       	in	r0, 0x3e	; 62
     c06:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c08:	a2 d7       	rcall	.+3908   	; 0x1b4e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c0a:	a0 91 e3 3c 	lds	r26, 0x3CE3
     c0e:	b0 91 e4 3c 	lds	r27, 0x3CE4
     c12:	cd 91       	ld	r28, X+
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	dd 91       	ld	r29, X+
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	8f 90       	pop	r8
     c4a:	7f 90       	pop	r7
     c4c:	6f 90       	pop	r6
     c4e:	5f 90       	pop	r5
     c50:	4f 90       	pop	r4
     c52:	3f 90       	pop	r3
     c54:	2f 90       	pop	r2
     c56:	1f 90       	pop	r1
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0

    asm volatile ( "ret" );
     c5e:	08 95       	ret

00000c60 <__vector_14>:
     * Context switch function used by the tick.  This must be identical to
     * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
     * difference from vPortYield() is the tick count is incremented as the
     * call comes from the tick ISR.
     */
    portSAVE_CONTEXT();
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	0f 92       	push	r0
     c68:	1f 92       	push	r1
     c6a:	11 24       	eor	r1, r1
     c6c:	2f 92       	push	r2
     c6e:	3f 92       	push	r3
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
     ca8:	a0 91 e3 3c 	lds	r26, 0x3CE3
     cac:	b0 91 e4 3c 	lds	r27, 0x3CE4
     cb0:	0d b6       	in	r0, 0x3d	; 61
     cb2:	0d 92       	st	X+, r0
     cb4:	0e b6       	in	r0, 0x3e	; 62
     cb6:	0d 92       	st	X+, r0
    vTaskIncrementTick();
     cb8:	91 d5       	rcall	.+2850   	; 0x17dc <vTaskIncrementTick>
    vTaskSwitchContext();
     cba:	49 d7       	rcall	.+3730   	; 0x1b4e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     cbc:	a0 91 e3 3c 	lds	r26, 0x3CE3
     cc0:	b0 91 e4 3c 	lds	r27, 0x3CE4
     cc4:	cd 91       	ld	r28, X+
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	dd 91       	ld	r29, X+
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	5f 90       	pop	r5
     d02:	4f 90       	pop	r4
     d04:	3f 90       	pop	r3
     d06:	2f 90       	pop	r2
     d08:	1f 90       	pop	r1
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
    asm volatile ( "reti" );
     d10:	18 95       	reti

00000d12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     d12:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     d14:	03 96       	adiw	r24, 0x03	; 3
     d16:	81 83       	std	Z+1, r24	; 0x01
     d18:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d1a:	2f ef       	ldi	r18, 0xFF	; 255
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	23 83       	std	Z+3, r18	; 0x03
     d20:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     d22:	85 83       	std	Z+5, r24	; 0x05
     d24:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     d26:	87 83       	std	Z+7, r24	; 0x07
     d28:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     d2a:	10 82       	st	Z, r1
     d2c:	08 95       	ret

00000d2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d2e:	fc 01       	movw	r30, r24
     d30:	10 86       	std	Z+8, r1	; 0x08
     d32:	11 86       	std	Z+9, r1	; 0x09
     d34:	08 95       	ret

00000d36 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	fc 01       	movw	r30, r24
     d3c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d3e:	21 81       	ldd	r18, Z+1	; 0x01
     d40:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     d42:	e9 01       	movw	r28, r18
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	12 96       	adiw	r26, 0x02	; 2
     d4a:	8d 93       	st	X+, r24
     d4c:	9c 93       	st	X, r25
     d4e:	13 97       	sbiw	r26, 0x03	; 3
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	92 81       	ldd	r25, Z+2	; 0x02
     d54:	14 96       	adiw	r26, 0x04	; 4
     d56:	8d 93       	st	X+, r24
     d58:	9c 93       	st	X, r25
     d5a:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	ec 01       	movw	r28, r24
     d62:	6c 83       	std	Y+4, r22	; 0x04
     d64:	7d 83       	std	Y+5, r23	; 0x05
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     d66:	e9 01       	movw	r28, r18
     d68:	6a 83       	std	Y+2, r22	; 0x02
     d6a:	7b 83       	std	Y+3, r23	; 0x03
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     d6c:	61 83       	std	Z+1, r22	; 0x01
     d6e:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d70:	18 96       	adiw	r26, 0x08	; 8
     d72:	ed 93       	st	X+, r30
     d74:	fc 93       	st	X, r31
     d76:	19 97       	sbiw	r26, 0x09	; 9

	( pxList->uxNumberOfItems )++;
     d78:	80 81       	ld	r24, Z
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 83       	st	Z, r24
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     d8a:	48 81       	ld	r20, Y
     d8c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d8e:	4f 3f       	cpi	r20, 0xFF	; 255
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	52 07       	cpc	r21, r18
     d94:	31 f4       	brne	.+12     	; 0xda2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d96:	dc 01       	movw	r26, r24
     d98:	17 96       	adiw	r26, 0x07	; 7
     d9a:	ed 91       	ld	r30, X+
     d9c:	fc 91       	ld	r31, X
     d9e:	18 97       	sbiw	r26, 0x08	; 8
     da0:	17 c0       	rjmp	.+46     	; 0xdd0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     da2:	fc 01       	movw	r30, r24
     da4:	33 96       	adiw	r30, 0x03	; 3
     da6:	dc 01       	movw	r26, r24
     da8:	15 96       	adiw	r26, 0x05	; 5
     daa:	2d 91       	ld	r18, X+
     dac:	3c 91       	ld	r19, X
     dae:	16 97       	sbiw	r26, 0x06	; 6
     db0:	d9 01       	movw	r26, r18
     db2:	2d 91       	ld	r18, X+
     db4:	3c 91       	ld	r19, X
     db6:	42 17       	cp	r20, r18
     db8:	53 07       	cpc	r21, r19
     dba:	50 f0       	brcs	.+20     	; 0xdd0 <vListInsert+0x4c>
     dbc:	02 80       	ldd	r0, Z+2	; 0x02
     dbe:	f3 81       	ldd	r31, Z+3	; 0x03
     dc0:	e0 2d       	mov	r30, r0
     dc2:	a2 81       	ldd	r26, Z+2	; 0x02
     dc4:	b3 81       	ldd	r27, Z+3	; 0x03
     dc6:	2d 91       	ld	r18, X+
     dc8:	3c 91       	ld	r19, X
     dca:	42 17       	cp	r20, r18
     dcc:	53 07       	cpc	r21, r19
     dce:	b0 f7       	brcc	.-20     	; 0xdbc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dd0:	a2 81       	ldd	r26, Z+2	; 0x02
     dd2:	b3 81       	ldd	r27, Z+3	; 0x03
     dd4:	aa 83       	std	Y+2, r26	; 0x02
     dd6:	bb 83       	std	Y+3, r27	; 0x03
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	cd 93       	st	X+, r28
     ddc:	dc 93       	st	X, r29
     dde:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxIterator;
     de0:	ec 83       	std	Y+4, r30	; 0x04
     de2:	fd 83       	std	Y+5, r31	; 0x05
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     de4:	c2 83       	std	Z+2, r28	; 0x02
     de6:	d3 83       	std	Z+3, r29	; 0x03

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     de8:	88 87       	std	Y+8, r24	; 0x08
     dea:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     dec:	fc 01       	movw	r30, r24
     dee:	20 81       	ld	r18, Z
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	20 83       	st	Z, r18
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     dfa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	14 96       	adiw	r26, 0x04	; 4
     e06:	8d 93       	st	X+, r24
     e08:	9c 93       	st	X, r25
     e0a:	15 97       	sbiw	r26, 0x05	; 5
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e0c:	a4 81       	ldd	r26, Z+4	; 0x04
     e0e:	b5 81       	ldd	r27, Z+5	; 0x05
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	8d 93       	st	X+, r24
     e18:	9c 93       	st	X, r25
     e1a:	13 97       	sbiw	r26, 0x03	; 3
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     e1c:	a0 85       	ldd	r26, Z+8	; 0x08
     e1e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	8d 91       	ld	r24, X+
     e24:	9c 91       	ld	r25, X
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	8e 17       	cp	r24, r30
     e2a:	9f 07       	cpc	r25, r31
     e2c:	31 f4       	brne	.+12     	; 0xe3a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	8d 93       	st	X+, r24
     e36:	9c 93       	st	X, r25
     e38:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
     e3a:	10 86       	std	Z+8, r1	; 0x08
     e3c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     e3e:	8c 91       	ld	r24, X
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	8c 93       	st	X, r24
     e44:	08 95       	ret

00000e46 <prvCopyDataToQueue>:

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );

	return xReturn;
}
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e4e:	81 11       	cpse	r24, r1
     e50:	0b c0       	rjmp	.+22     	; 0xe68 <prvCopyDataToQueue+0x22>
     e52:	88 81       	ld	r24, Y
     e54:	99 81       	ldd	r25, Y+1	; 0x01
     e56:	89 2b       	or	r24, r25
     e58:	e1 f5       	brne	.+120    	; 0xed2 <prvCopyDataToQueue+0x8c>
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <vTaskPriorityDisinherit>
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	1b 82       	std	Y+3, r1	; 0x03
     e66:	35 c0       	rjmp	.+106    	; 0xed2 <prvCopyDataToQueue+0x8c>
     e68:	41 11       	cpse	r20, r1
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <prvCopyDataToQueue+0x54>
     e6c:	48 2f       	mov	r20, r24
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <memcpy>
     e78:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	82 0f       	add	r24, r18
     e80:	91 1d       	adc	r25, r1
     e82:	8c 83       	std	Y+4, r24	; 0x04
     e84:	9d 83       	std	Y+5, r25	; 0x05
     e86:	2a 81       	ldd	r18, Y+2	; 0x02
     e88:	3b 81       	ldd	r19, Y+3	; 0x03
     e8a:	82 17       	cp	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	08 f1       	brcs	.+66     	; 0xed2 <prvCopyDataToQueue+0x8c>
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	8c 83       	std	Y+4, r24	; 0x04
     e96:	9d 83       	std	Y+5, r25	; 0x05
     e98:	1c c0       	rjmp	.+56     	; 0xed2 <prvCopyDataToQueue+0x8c>
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <memcpy>
     ea6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	31 95       	neg	r19
     eac:	21 95       	neg	r18
     eae:	31 09       	sbc	r19, r1
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	8e 83       	std	Y+6, r24	; 0x06
     eba:	9f 83       	std	Y+7, r25	; 0x07
     ebc:	48 81       	ld	r20, Y
     ebe:	59 81       	ldd	r21, Y+1	; 0x01
     ec0:	84 17       	cp	r24, r20
     ec2:	95 07       	cpc	r25, r21
     ec4:	30 f4       	brcc	.+12     	; 0xed2 <prvCopyDataToQueue+0x8c>
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	28 0f       	add	r18, r24
     ecc:	39 1f       	adc	r19, r25
     ece:	2e 83       	std	Y+6, r18	; 0x06
     ed0:	3f 83       	std	Y+7, r19	; 0x07
     ed2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8a 8f       	std	Y+26, r24	; 0x1a
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <prvCopyDataFromQueue>:
     ede:	fc 01       	movw	r30, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	a0 81       	ld	r26, Z
     ee4:	b1 81       	ldd	r27, Z+1	; 0x01
     ee6:	10 97       	sbiw	r26, 0x00	; 0
     ee8:	99 f0       	breq	.+38     	; 0xf10 <prvCopyDataFromQueue+0x32>
     eea:	44 8d       	ldd	r20, Z+28	; 0x1c
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	26 81       	ldd	r18, Z+6	; 0x06
     ef0:	37 81       	ldd	r19, Z+7	; 0x07
     ef2:	24 0f       	add	r18, r20
     ef4:	35 1f       	adc	r19, r21
     ef6:	26 83       	std	Z+6, r18	; 0x06
     ef8:	37 83       	std	Z+7, r19	; 0x07
     efa:	62 81       	ldd	r22, Z+2	; 0x02
     efc:	73 81       	ldd	r23, Z+3	; 0x03
     efe:	26 17       	cp	r18, r22
     f00:	37 07       	cpc	r19, r23
     f02:	10 f0       	brcs	.+4      	; 0xf08 <prvCopyDataFromQueue+0x2a>
     f04:	a6 83       	std	Z+6, r26	; 0x06
     f06:	b7 83       	std	Z+7, r27	; 0x07
     f08:	66 81       	ldd	r22, Z+6	; 0x06
     f0a:	77 81       	ldd	r23, Z+7	; 0x07
     f0c:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <memcpy>
     f10:	08 95       	ret

00000f12 <prvUnlockQueue>:
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	0f 92       	push	r0
     f22:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f24:	18 16       	cp	r1, r24
     f26:	9c f4       	brge	.+38     	; 0xf4e <prvUnlockQueue+0x3c>
     f28:	89 89       	ldd	r24, Y+17	; 0x11
     f2a:	88 23       	and	r24, r24
     f2c:	81 f0       	breq	.+32     	; 0xf4e <prvUnlockQueue+0x3c>
     f2e:	8e 01       	movw	r16, r28
     f30:	0f 5e       	subi	r16, 0xEF	; 239
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <prvUnlockQueue+0x2a>
     f36:	89 89       	ldd	r24, Y+17	; 0x11
     f38:	88 23       	and	r24, r24
     f3a:	49 f0       	breq	.+18     	; 0xf4e <prvUnlockQueue+0x3c>
     f3c:	c8 01       	movw	r24, r16
     f3e:	f7 d6       	rcall	.+3566   	; 0x1d2e <xTaskRemoveFromEventList>
     f40:	81 11       	cpse	r24, r1
     f42:	81 d7       	rcall	.+3842   	; 0x1e46 <vTaskMissedYield>
     f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	8e 8f       	std	Y+30, r24	; 0x1e
     f4a:	18 16       	cp	r1, r24
     f4c:	a4 f3       	brlt	.-24     	; 0xf36 <prvUnlockQueue+0x24>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	8e 8f       	std	Y+30, r24	; 0x1e
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5e:	18 16       	cp	r1, r24
     f60:	9c f4       	brge	.+38     	; 0xf88 <prvUnlockQueue+0x76>
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	88 23       	and	r24, r24
     f66:	81 f0       	breq	.+32     	; 0xf88 <prvUnlockQueue+0x76>
     f68:	8e 01       	movw	r16, r28
     f6a:	08 5f       	subi	r16, 0xF8	; 248
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <prvUnlockQueue+0x64>
     f70:	88 85       	ldd	r24, Y+8	; 0x08
     f72:	88 23       	and	r24, r24
     f74:	49 f0       	breq	.+18     	; 0xf88 <prvUnlockQueue+0x76>
     f76:	c8 01       	movw	r24, r16
     f78:	da d6       	rcall	.+3508   	; 0x1d2e <xTaskRemoveFromEventList>
     f7a:	81 11       	cpse	r24, r1
     f7c:	64 d7       	rcall	.+3784   	; 0x1e46 <vTaskMissedYield>
     f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f80:	81 50       	subi	r24, 0x01	; 1
     f82:	8d 8f       	std	Y+29, r24	; 0x1d
     f84:	18 16       	cp	r1, r24
     f86:	a4 f3       	brlt	.-24     	; 0xf70 <prvUnlockQueue+0x5e>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	8d 8f       	std	Y+29, r24	; 0x1d
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <xQueueCreate>:
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	d8 2e       	mov	r13, r24
     fac:	c6 2e       	mov	r12, r22
     fae:	88 23       	and	r24, r24
     fb0:	a1 f1       	breq	.+104    	; 0x101a <xQueueCreate+0x80>
     fb2:	8f e1       	ldi	r24, 0x1F	; 31
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	1e dd       	rcall	.-1476   	; 0x9f4 <pvPortMalloc>
     fb8:	ec 01       	movw	r28, r24
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	81 f1       	breq	.+96     	; 0x101e <xQueueCreate+0x84>
     fbe:	ec 2c       	mov	r14, r12
     fc0:	f1 2c       	mov	r15, r1
     fc2:	de 9c       	mul	r13, r14
     fc4:	80 01       	movw	r16, r0
     fc6:	df 9c       	mul	r13, r15
     fc8:	10 0d       	add	r17, r0
     fca:	11 24       	eor	r1, r1
     fcc:	c8 01       	movw	r24, r16
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	11 dd       	rcall	.-1502   	; 0x9f4 <pvPortMalloc>
     fd2:	88 83       	st	Y, r24
     fd4:	99 83       	std	Y+1, r25	; 0x01
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d9 f0       	breq	.+54     	; 0x1010 <xQueueCreate+0x76>
     fda:	ac 01       	movw	r20, r24
     fdc:	40 0f       	add	r20, r16
     fde:	51 1f       	adc	r21, r17
     fe0:	4a 83       	std	Y+2, r20	; 0x02
     fe2:	5b 83       	std	Y+3, r21	; 0x03
     fe4:	1a 8e       	std	Y+26, r1	; 0x1a
     fe6:	8c 83       	std	Y+4, r24	; 0x04
     fe8:	9d 83       	std	Y+5, r25	; 0x05
     fea:	0e 19       	sub	r16, r14
     fec:	1f 09       	sbc	r17, r15
     fee:	9c 01       	movw	r18, r24
     ff0:	20 0f       	add	r18, r16
     ff2:	31 1f       	adc	r19, r17
     ff4:	2e 83       	std	Y+6, r18	; 0x06
     ff6:	3f 83       	std	Y+7, r19	; 0x07
     ff8:	db 8e       	std	Y+27, r13	; 0x1b
     ffa:	cc 8e       	std	Y+28, r12	; 0x1c
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
    1002:	ce 01       	movw	r24, r28
    1004:	08 96       	adiw	r24, 0x08	; 8
    1006:	85 de       	rcall	.-758    	; 0xd12 <vListInitialise>
    1008:	ce 01       	movw	r24, r28
    100a:	41 96       	adiw	r24, 0x11	; 17
    100c:	82 de       	rcall	.-764    	; 0xd12 <vListInitialise>
    100e:	07 c0       	rjmp	.+14     	; 0x101e <xQueueCreate+0x84>
    1010:	ce 01       	movw	r24, r28
    1012:	14 dd       	rcall	.-1496   	; 0xa3c <vPortFree>
    1014:	c0 e0       	ldi	r28, 0x00	; 0
    1016:	d0 e0       	ldi	r29, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <xQueueCreate+0x84>
    101a:	c0 e0       	ldi	r28, 0x00	; 0
    101c:	d0 e0       	ldi	r29, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <xQueueGenericSend>:
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	25 97       	sbiw	r28, 0x05	; 5
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	8c 01       	movw	r16, r24
    1052:	6b 01       	movw	r12, r22
    1054:	4c 83       	std	Y+4, r20	; 0x04
    1056:	5d 83       	std	Y+5, r21	; 0x05
    1058:	a2 2e       	mov	r10, r18
    105a:	b1 2c       	mov	r11, r1
    105c:	7c 01       	movw	r14, r24
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	e8 0e       	add	r14, r24
    1062:	f1 1c       	adc	r15, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	f8 01       	movw	r30, r16
    106c:	92 8d       	ldd	r25, Z+26	; 0x1a
    106e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1070:	98 17       	cp	r25, r24
    1072:	90 f4       	brcc	.+36     	; 0x1098 <xQueueGenericSend+0x66>
    1074:	4a 2d       	mov	r20, r10
    1076:	b6 01       	movw	r22, r12
    1078:	c8 01       	movw	r24, r16
    107a:	e5 de       	rcall	.-566    	; 0xe46 <prvCopyDataToQueue>
    107c:	f8 01       	movw	r30, r16
    107e:	81 89       	ldd	r24, Z+17	; 0x11
    1080:	88 23       	and	r24, r24
    1082:	31 f0       	breq	.+12     	; 0x1090 <xQueueGenericSend+0x5e>
    1084:	c8 01       	movw	r24, r16
    1086:	41 96       	adiw	r24, 0x11	; 17
    1088:	52 d6       	rcall	.+3236   	; 0x1d2e <xTaskRemoveFromEventList>
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f4       	brne	.+2      	; 0x1090 <xQueueGenericSend+0x5e>
    108e:	90 dd       	rcall	.-1248   	; 0xbb0 <vPortYield>
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	47 c0       	rjmp	.+142    	; 0x1126 <xQueueGenericSend+0xf4>
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	ef 2b       	or	r30, r31
    109e:	21 f4       	brne	.+8      	; 0x10a8 <xQueueGenericSend+0x76>
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <xQueueGenericSend+0xf4>
    10a8:	b1 10       	cpse	r11, r1
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <xQueueGenericSend+0x84>
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	81 d6       	rcall	.+3330   	; 0x1db4 <vTaskSetTimeOutState>
    10b2:	bb 24       	eor	r11, r11
    10b4:	b3 94       	inc	r11
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	7d d3       	rcall	.+1786   	; 0x17b6 <vTaskSuspendAll>
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	0f 92       	push	r0
    10c2:	f8 01       	movw	r30, r16
    10c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    10c6:	8f 3f       	cpi	r24, 0xFF	; 255
    10c8:	09 f4       	brne	.+2      	; 0x10cc <xQueueGenericSend+0x9a>
    10ca:	15 8e       	std	Z+29, r1	; 0x1d
    10cc:	f8 01       	movw	r30, r16
    10ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    10d0:	8f 3f       	cpi	r24, 0xFF	; 255
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <xQueueGenericSend+0xa4>
    10d4:	16 8e       	std	Z+30, r1	; 0x1e
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	be 01       	movw	r22, r28
    10dc:	6c 5f       	subi	r22, 0xFC	; 252
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	72 d6       	rcall	.+3300   	; 0x1dca <xTaskCheckForTimeOut>
    10e6:	81 11       	cpse	r24, r1
    10e8:	1a c0       	rjmp	.+52     	; 0x111e <xQueueGenericSend+0xec>
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	0f 92       	push	r0
    10f0:	f8 01       	movw	r30, r16
    10f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	f8 01       	movw	r30, r16
    10fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    10fc:	98 13       	cpse	r25, r24
    10fe:	0b c0       	rjmp	.+22     	; 0x1116 <xQueueGenericSend+0xe4>
    1100:	6c 81       	ldd	r22, Y+4	; 0x04
    1102:	7d 81       	ldd	r23, Y+5	; 0x05
    1104:	c7 01       	movw	r24, r14
    1106:	d1 d5       	rcall	.+2978   	; 0x1caa <vTaskPlaceOnEventList>
    1108:	c8 01       	movw	r24, r16
    110a:	03 df       	rcall	.-506    	; 0xf12 <prvUnlockQueue>
    110c:	28 d4       	rcall	.+2128   	; 0x195e <xTaskResumeAll>
    110e:	81 11       	cpse	r24, r1
    1110:	a9 cf       	rjmp	.-174    	; 0x1064 <xQueueGenericSend+0x32>
    1112:	4e dd       	rcall	.-1380   	; 0xbb0 <vPortYield>
    1114:	a7 cf       	rjmp	.-178    	; 0x1064 <xQueueGenericSend+0x32>
    1116:	c8 01       	movw	r24, r16
    1118:	fc de       	rcall	.-520    	; 0xf12 <prvUnlockQueue>
    111a:	21 d4       	rcall	.+2114   	; 0x195e <xTaskResumeAll>
    111c:	a3 cf       	rjmp	.-186    	; 0x1064 <xQueueGenericSend+0x32>
    111e:	c8 01       	movw	r24, r16
    1120:	f8 de       	rcall	.-528    	; 0xf12 <prvUnlockQueue>
    1122:	1d d4       	rcall	.+2106   	; 0x195e <xTaskResumeAll>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	25 96       	adiw	r28, 0x05	; 5
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret

00001142 <xQueueCreateMutex>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	8f e1       	ldi	r24, 0x1F	; 31
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	54 dc       	rcall	.-1880   	; 0x9f4 <pvPortMalloc>
    114c:	ec 01       	movw	r28, r24
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	e1 f0       	breq	.+56     	; 0x118a <xQueueCreateMutex+0x48>
    1152:	1a 82       	std	Y+2, r1	; 0x02
    1154:	1b 82       	std	Y+3, r1	; 0x03
    1156:	18 82       	st	Y, r1
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	1c 82       	std	Y+4, r1	; 0x04
    115c:	1d 82       	std	Y+5, r1	; 0x05
    115e:	1e 82       	std	Y+6, r1	; 0x06
    1160:	1f 82       	std	Y+7, r1	; 0x07
    1162:	1a 8e       	std	Y+26, r1	; 0x1a
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	8b 8f       	std	Y+27, r24	; 0x1b
    1168:	1c 8e       	std	Y+28, r1	; 0x1c
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	8d 8f       	std	Y+29, r24	; 0x1d
    116e:	8e 8f       	std	Y+30, r24	; 0x1e
    1170:	ce 01       	movw	r24, r28
    1172:	08 96       	adiw	r24, 0x08	; 8
    1174:	ce dd       	rcall	.-1124   	; 0xd12 <vListInitialise>
    1176:	ce 01       	movw	r24, r28
    1178:	41 96       	adiw	r24, 0x11	; 17
    117a:	cb dd       	rcall	.-1130   	; 0xd12 <vListInitialise>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	54 df       	rcall	.-344    	; 0x1032 <xQueueGenericSend>
    118a:	ce 01       	movw	r24, r28
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <xQueueGenericSendFromISR>:
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
    119c:	8a 01       	movw	r16, r20
    119e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a2:	98 17       	cp	r25, r24
    11a4:	b0 f4       	brcc	.+44     	; 0x11d2 <xQueueGenericSendFromISR+0x40>
    11a6:	42 2f       	mov	r20, r18
    11a8:	ce 01       	movw	r24, r28
    11aa:	4d de       	rcall	.-870    	; 0xe46 <prvCopyDataToQueue>
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	8f 3f       	cpi	r24, 0xFF	; 255
    11b0:	61 f4       	brne	.+24     	; 0x11ca <xQueueGenericSendFromISR+0x38>
    11b2:	89 89       	ldd	r24, Y+17	; 0x11
    11b4:	88 23       	and	r24, r24
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <xQueueGenericSendFromISR+0x44>
    11b8:	ce 01       	movw	r24, r28
    11ba:	41 96       	adiw	r24, 0x11	; 17
    11bc:	b8 d5       	rcall	.+2928   	; 0x1d2e <xTaskRemoveFromEventList>
    11be:	88 23       	and	r24, r24
    11c0:	61 f0       	breq	.+24     	; 0x11da <xQueueGenericSendFromISR+0x48>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	f8 01       	movw	r30, r16
    11c6:	80 83       	st	Z, r24
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	8e 8f       	std	Y+30, r24	; 0x1e
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <xQueueGenericReceive>:
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	25 97       	sbiw	r28, 0x05	; 5
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	8c 01       	movw	r16, r24
    1206:	6b 01       	movw	r12, r22
    1208:	4c 83       	std	Y+4, r20	; 0x04
    120a:	5d 83       	std	Y+5, r21	; 0x05
    120c:	b2 2e       	mov	r11, r18
    120e:	a1 2c       	mov	r10, r1
    1210:	7c 01       	movw	r14, r24
    1212:	81 e1       	ldi	r24, 0x11	; 17
    1214:	e8 0e       	add	r14, r24
    1216:	f1 1c       	adc	r15, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	f8 01       	movw	r30, r16
    1220:	82 8d       	ldd	r24, Z+26	; 0x1a
    1222:	88 23       	and	r24, r24
    1224:	69 f1       	breq	.+90     	; 0x1280 <xQueueGenericReceive+0x9a>
    1226:	e6 80       	ldd	r14, Z+6	; 0x06
    1228:	f7 80       	ldd	r15, Z+7	; 0x07
    122a:	b6 01       	movw	r22, r12
    122c:	c8 01       	movw	r24, r16
    122e:	57 de       	rcall	.-850    	; 0xede <prvCopyDataFromQueue>
    1230:	b1 10       	cpse	r11, r1
    1232:	17 c0       	rjmp	.+46     	; 0x1262 <xQueueGenericReceive+0x7c>
    1234:	f8 01       	movw	r30, r16
    1236:	82 8d       	ldd	r24, Z+26	; 0x1a
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	82 8f       	std	Z+26, r24	; 0x1a
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	89 2b       	or	r24, r25
    1242:	21 f4       	brne	.+8      	; 0x124c <xQueueGenericReceive+0x66>
    1244:	04 d6       	rcall	.+3080   	; 0x1e4e <xTaskGetCurrentTaskHandle>
    1246:	f8 01       	movw	r30, r16
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	93 83       	std	Z+3, r25	; 0x03
    124c:	f8 01       	movw	r30, r16
    124e:	80 85       	ldd	r24, Z+8	; 0x08
    1250:	88 23       	and	r24, r24
    1252:	91 f0       	breq	.+36     	; 0x1278 <xQueueGenericReceive+0x92>
    1254:	c8 01       	movw	r24, r16
    1256:	08 96       	adiw	r24, 0x08	; 8
    1258:	6a d5       	rcall	.+2772   	; 0x1d2e <xTaskRemoveFromEventList>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	69 f4       	brne	.+26     	; 0x1278 <xQueueGenericReceive+0x92>
    125e:	a8 dc       	rcall	.-1712   	; 0xbb0 <vPortYield>
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <xQueueGenericReceive+0x92>
    1262:	f8 01       	movw	r30, r16
    1264:	e6 82       	std	Z+6, r14	; 0x06
    1266:	f7 82       	std	Z+7, r15	; 0x07
    1268:	81 89       	ldd	r24, Z+17	; 0x11
    126a:	88 23       	and	r24, r24
    126c:	29 f0       	breq	.+10     	; 0x1278 <xQueueGenericReceive+0x92>
    126e:	c8 01       	movw	r24, r16
    1270:	41 96       	adiw	r24, 0x11	; 17
    1272:	5d d5       	rcall	.+2746   	; 0x1d2e <xTaskRemoveFromEventList>
    1274:	81 11       	cpse	r24, r1
    1276:	9c dc       	rcall	.-1736   	; 0xbb0 <vPortYield>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	53 c0       	rjmp	.+166    	; 0x1326 <xQueueGenericReceive+0x140>
    1280:	4c 81       	ldd	r20, Y+4	; 0x04
    1282:	5d 81       	ldd	r21, Y+5	; 0x05
    1284:	45 2b       	or	r20, r21
    1286:	21 f4       	brne	.+8      	; 0x1290 <xQueueGenericReceive+0xaa>
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	4b c0       	rjmp	.+150    	; 0x1326 <xQueueGenericReceive+0x140>
    1290:	a1 10       	cpse	r10, r1
    1292:	05 c0       	rjmp	.+10     	; 0x129e <xQueueGenericReceive+0xb8>
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	8d d5       	rcall	.+2842   	; 0x1db4 <vTaskSetTimeOutState>
    129a:	aa 24       	eor	r10, r10
    129c:	a3 94       	inc	r10
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	89 d2       	rcall	.+1298   	; 0x17b6 <vTaskSuspendAll>
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	0f 92       	push	r0
    12aa:	f8 01       	movw	r30, r16
    12ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <xQueueGenericReceive+0xce>
    12b2:	15 8e       	std	Z+29, r1	; 0x1d
    12b4:	f8 01       	movw	r30, r16
    12b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	09 f4       	brne	.+2      	; 0x12be <xQueueGenericReceive+0xd8>
    12bc:	16 8e       	std	Z+30, r1	; 0x1e
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	be 01       	movw	r22, r28
    12c4:	6c 5f       	subi	r22, 0xFC	; 252
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	7e d5       	rcall	.+2812   	; 0x1dca <xTaskCheckForTimeOut>
    12ce:	81 11       	cpse	r24, r1
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <xQueueGenericReceive+0x138>
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	f8 01       	movw	r30, r16
    12da:	82 8d       	ldd	r24, Z+26	; 0x1a
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	81 11       	cpse	r24, r1
    12e2:	19 c0       	rjmp	.+50     	; 0x1316 <xQueueGenericReceive+0x130>
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	89 2b       	or	r24, r25
    12ec:	49 f4       	brne	.+18     	; 0x1300 <xQueueGenericReceive+0x11a>
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	0f 92       	push	r0
    12f4:	f8 01       	movw	r30, r16
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	bc d5       	rcall	.+2936   	; 0x1e74 <vTaskPriorityInherit>
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	6c 81       	ldd	r22, Y+4	; 0x04
    1302:	7d 81       	ldd	r23, Y+5	; 0x05
    1304:	c7 01       	movw	r24, r14
    1306:	d1 d4       	rcall	.+2466   	; 0x1caa <vTaskPlaceOnEventList>
    1308:	c8 01       	movw	r24, r16
    130a:	03 de       	rcall	.-1018   	; 0xf12 <prvUnlockQueue>
    130c:	28 d3       	rcall	.+1616   	; 0x195e <xTaskResumeAll>
    130e:	81 11       	cpse	r24, r1
    1310:	83 cf       	rjmp	.-250    	; 0x1218 <xQueueGenericReceive+0x32>
    1312:	4e dc       	rcall	.-1892   	; 0xbb0 <vPortYield>
    1314:	81 cf       	rjmp	.-254    	; 0x1218 <xQueueGenericReceive+0x32>
    1316:	c8 01       	movw	r24, r16
    1318:	fc dd       	rcall	.-1032   	; 0xf12 <prvUnlockQueue>
    131a:	21 d3       	rcall	.+1602   	; 0x195e <xTaskResumeAll>
    131c:	7d cf       	rjmp	.-262    	; 0x1218 <xQueueGenericReceive+0x32>
    131e:	c8 01       	movw	r24, r16
    1320:	f8 dd       	rcall	.-1040   	; 0xf12 <prvUnlockQueue>
    1322:	1d d3       	rcall	.+1594   	; 0x195e <xTaskResumeAll>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	25 96       	adiw	r28, 0x05	; 5
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	08 95       	ret

00001342 <xQueueReceiveFromISR>:
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
    134c:	8a 01       	movw	r16, r20
    134e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1350:	88 23       	and	r24, r24
    1352:	c1 f0       	breq	.+48     	; 0x1384 <xQueueReceiveFromISR+0x42>
    1354:	ce 01       	movw	r24, r28
    1356:	c3 dd       	rcall	.-1146   	; 0xede <prvCopyDataFromQueue>
    1358:	8a 8d       	ldd	r24, Y+26	; 0x1a
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	8a 8f       	std	Y+26, r24	; 0x1a
    135e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	61 f4       	brne	.+24     	; 0x137c <xQueueReceiveFromISR+0x3a>
    1364:	88 85       	ldd	r24, Y+8	; 0x08
    1366:	88 23       	and	r24, r24
    1368:	79 f0       	breq	.+30     	; 0x1388 <xQueueReceiveFromISR+0x46>
    136a:	ce 01       	movw	r24, r28
    136c:	08 96       	adiw	r24, 0x08	; 8
    136e:	df d4       	rcall	.+2494   	; 0x1d2e <xTaskRemoveFromEventList>
    1370:	88 23       	and	r24, r24
    1372:	61 f0       	breq	.+24     	; 0x138c <xQueueReceiveFromISR+0x4a>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	f8 01       	movw	r30, r16
    1378:	80 83       	st	Z, r24
    137a:	09 c0       	rjmp	.+18     	; 0x138e <xQueueReceiveFromISR+0x4c>
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8d 8f       	std	Y+29, r24	; 0x1d
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	05 c0       	rjmp	.+10     	; 0x138e <xQueueReceiveFromISR+0x4c>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	03 c0       	rjmp	.+6      	; 0x138e <xQueueReceiveFromISR+0x4c>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	01 c0       	rjmp	.+2      	; 0x138e <xQueueReceiveFromISR+0x4c>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <uxQueueMessagesWaiting>:
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	0f 92       	push	r0
    139e:	fc 01       	movw	r30, r24
    13a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	08 95       	ret

000013a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	0f 92       	push	r0
    13b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	09 f4       	brne	.+2      	; 0x13bc <vQueueWaitForMessageRestricted+0x14>
    13ba:	1d 8e       	std	Y+29, r1	; 0x1d
    13bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <vQueueWaitForMessageRestricted+0x1c>
    13c2:	1e 8e       	std	Y+30, r1	; 0x1e
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
    13c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13ca:	81 11       	cpse	r24, r1
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <vQueueWaitForMessageRestricted+0x2c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13ce:	ce 01       	movw	r24, r28
    13d0:	41 96       	adiw	r24, 0x11	; 17
    13d2:	93 d4       	rcall	.+2342   	; 0x1cfa <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
    13d4:	ce 01       	movw	r24, r28
    13d6:	9d dd       	rcall	.-1222   	; 0xf12 <prvUnlockQueue>
	}
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <prvIdleTask>:
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    13de:	ca ed       	ldi	r28, 0xDA	; 218
    13e0:	dc e3       	ldi	r29, 0x3C	; 60
    13e2:	88 81       	ld	r24, Y
    13e4:	82 30       	cpi	r24, 0x02	; 2
    13e6:	e8 f3       	brcs	.-6      	; 0x13e2 <prvIdleTask+0x4>
    13e8:	e3 db       	rcall	.-2106   	; 0xbb0 <vPortYield>
    13ea:	fb cf       	rjmp	.-10     	; 0x13e2 <prvIdleTask+0x4>

000013ec <prvAddCurrentTaskToDelayedList>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	e0 91 e3 3c 	lds	r30, 0x3CE3
    13f6:	f0 91 e4 3c 	lds	r31, 0x3CE4
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	93 83       	std	Z+3, r25	; 0x03
    13fe:	80 91 af 3c 	lds	r24, 0x3CAF
    1402:	90 91 b0 3c 	lds	r25, 0x3CB0
    1406:	c8 17       	cp	r28, r24
    1408:	d9 07       	cpc	r29, r25
    140a:	60 f4       	brcc	.+24     	; 0x1424 <prvAddCurrentTaskToDelayedList+0x38>
    140c:	60 91 e3 3c 	lds	r22, 0x3CE3
    1410:	70 91 e4 3c 	lds	r23, 0x3CE4
    1414:	80 91 c4 3c 	lds	r24, 0x3CC4
    1418:	90 91 c5 3c 	lds	r25, 0x3CC5
    141c:	6e 5f       	subi	r22, 0xFE	; 254
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	b1 dc       	rcall	.-1694   	; 0xd84 <vListInsert>
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <prvAddCurrentTaskToDelayedList+0x64>
    1424:	60 91 e3 3c 	lds	r22, 0x3CE3
    1428:	70 91 e4 3c 	lds	r23, 0x3CE4
    142c:	80 91 c6 3c 	lds	r24, 0x3CC6
    1430:	90 91 c7 3c 	lds	r25, 0x3CC7
    1434:	6e 5f       	subi	r22, 0xFE	; 254
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	a5 dc       	rcall	.-1718   	; 0xd84 <vListInsert>
    143a:	80 91 05 20 	lds	r24, 0x2005
    143e:	90 91 06 20 	lds	r25, 0x2006
    1442:	c8 17       	cp	r28, r24
    1444:	d9 07       	cpc	r29, r25
    1446:	20 f4       	brcc	.+8      	; 0x1450 <prvAddCurrentTaskToDelayedList+0x64>
    1448:	c0 93 05 20 	sts	0x2005, r28
    144c:	d0 93 06 20 	sts	0x2006, r29
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <prvListTaskWithinSingleList>:
    1456:	3f 92       	push	r3
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	5c 01       	movw	r10, r24
    147a:	4b 01       	movw	r8, r22
    147c:	34 2e       	mov	r3, r20
    147e:	db 01       	movw	r26, r22
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	12 97       	sbiw	r26, 0x02	; 2
    1488:	02 80       	ldd	r0, Z+2	; 0x02
    148a:	f3 81       	ldd	r31, Z+3	; 0x03
    148c:	e0 2d       	mov	r30, r0
    148e:	11 96       	adiw	r26, 0x01	; 1
    1490:	ed 93       	st	X+, r30
    1492:	fc 93       	st	X, r31
    1494:	12 97       	sbiw	r26, 0x02	; 2
    1496:	7b 01       	movw	r14, r22
    1498:	b3 e0       	ldi	r27, 0x03	; 3
    149a:	eb 0e       	add	r14, r27
    149c:	f1 1c       	adc	r15, r1
    149e:	ee 15       	cp	r30, r14
    14a0:	ff 05       	cpc	r31, r15
    14a2:	29 f4       	brne	.+10     	; 0x14ae <prvListTaskWithinSingleList+0x58>
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	fb 01       	movw	r30, r22
    14aa:	81 83       	std	Z+1, r24	; 0x01
    14ac:	92 83       	std	Z+2, r25	; 0x02
    14ae:	d4 01       	movw	r26, r8
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	c6 80       	ldd	r12, Z+6	; 0x06
    14ba:	d7 80       	ldd	r13, Z+7	; 0x07
    14bc:	43 2c       	mov	r4, r3
    14be:	55 24       	eor	r5, r5
    14c0:	47 fc       	sbrc	r4, 7
    14c2:	50 94       	com	r5
    14c4:	0f 2e       	mov	r0, r31
    14c6:	ff e6       	ldi	r31, 0x6F	; 111
    14c8:	6f 2e       	mov	r6, r31
    14ca:	f0 e2       	ldi	r31, 0x20	; 32
    14cc:	7f 2e       	mov	r7, r31
    14ce:	f0 2d       	mov	r31, r0
    14d0:	00 e7       	ldi	r16, 0x70	; 112
    14d2:	1c e3       	ldi	r17, 0x3C	; 60
    14d4:	d4 01       	movw	r26, r8
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	8d 93       	st	X+, r24
    14e6:	9c 93       	st	X, r25
    14e8:	12 97       	sbiw	r26, 0x02	; 2
    14ea:	e8 16       	cp	r14, r24
    14ec:	f9 06       	cpc	r15, r25
    14ee:	39 f4       	brne	.+14     	; 0x14fe <prvListTaskWithinSingleList+0xa8>
    14f0:	f7 01       	movw	r30, r14
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	8d 93       	st	X+, r24
    14fa:	9c 93       	st	X, r25
    14fc:	12 97       	sbiw	r26, 0x02	; 2
    14fe:	d4 01       	movw	r26, r8
    1500:	11 96       	adiw	r26, 0x01	; 1
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	12 97       	sbiw	r26, 0x02	; 2
    1508:	c6 81       	ldd	r28, Z+6	; 0x06
    150a:	d7 81       	ldd	r29, Z+7	; 0x07
    150c:	ef 89       	ldd	r30, Y+23	; 0x17
    150e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1510:	80 81       	ld	r24, Z
    1512:	85 3a       	cpi	r24, 0xA5	; 165
    1514:	41 f4       	brne	.+16     	; 0x1526 <prvListTaskWithinSingleList+0xd0>
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	21 91       	ld	r18, Z+
    1520:	25 3a       	cpi	r18, 0xA5	; 165
    1522:	e1 f3       	breq	.-8      	; 0x151c <prvListTaskWithinSingleList+0xc6>
    1524:	02 c0       	rjmp	.+4      	; 0x152a <prvListTaskWithinSingleList+0xd4>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	39 a1       	ldd	r19, Y+33	; 0x21
    152c:	2e 89       	ldd	r18, Y+22	; 0x16
    152e:	1f 92       	push	r1
    1530:	3f 93       	push	r19
    1532:	9f 93       	push	r25
    1534:	8f 93       	push	r24
    1536:	1f 92       	push	r1
    1538:	2f 93       	push	r18
    153a:	5f 92       	push	r5
    153c:	3f 92       	push	r3
    153e:	ce 01       	movw	r24, r28
    1540:	49 96       	adiw	r24, 0x19	; 25
    1542:	9f 93       	push	r25
    1544:	8f 93       	push	r24
    1546:	7f 92       	push	r7
    1548:	6f 92       	push	r6
    154a:	1f 93       	push	r17
    154c:	0f 93       	push	r16
    154e:	0e 94 83 2c 	call	0x5906	; 0x5906 <sprintf>
    1552:	b8 01       	movw	r22, r16
    1554:	c5 01       	movw	r24, r10
    1556:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <strcat>
    155a:	ed b7       	in	r30, 0x3d	; 61
    155c:	fe b7       	in	r31, 0x3e	; 62
    155e:	3e 96       	adiw	r30, 0x0e	; 14
    1560:	ed bf       	out	0x3d, r30	; 61
    1562:	fe bf       	out	0x3e, r31	; 62
    1564:	cc 15       	cp	r28, r12
    1566:	dd 05       	cpc	r29, r13
    1568:	09 f0       	breq	.+2      	; 0x156c <prvListTaskWithinSingleList+0x116>
    156a:	b4 cf       	rjmp	.-152    	; 0x14d4 <prvListTaskWithinSingleList+0x7e>
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	4f 90       	pop	r4
    158c:	3f 90       	pop	r3
    158e:	08 95       	ret

00001590 <xTaskGenericCreate>:
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	4c 01       	movw	r8, r24
    15b0:	3b 01       	movw	r6, r22
    15b2:	5a 01       	movw	r10, r20
    15b4:	29 01       	movw	r4, r18
    15b6:	83 e2       	ldi	r24, 0x23	; 35
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	1c da       	rcall	.-3016   	; 0x9f4 <pvPortMalloc>
    15bc:	ec 01       	movw	r28, r24
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <xTaskGenericCreate+0x34>
    15c2:	9f c0       	rjmp	.+318    	; 0x1702 <xTaskGenericCreate+0x172>
    15c4:	c1 14       	cp	r12, r1
    15c6:	d1 04       	cpc	r13, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <xTaskGenericCreate+0x3c>
    15ca:	97 c0       	rjmp	.+302    	; 0x16fa <xTaskGenericCreate+0x16a>
    15cc:	c5 01       	movw	r24, r10
    15ce:	12 da       	rcall	.-3036   	; 0x9f4 <pvPortMalloc>
    15d0:	8f 8b       	std	Y+23, r24	; 0x17
    15d2:	98 8f       	std	Y+24, r25	; 0x18
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	19 f4       	brne	.+6      	; 0x15de <xTaskGenericCreate+0x4e>
    15d8:	ce 01       	movw	r24, r28
    15da:	30 da       	rcall	.-2976   	; 0xa3c <vPortFree>
    15dc:	92 c0       	rjmp	.+292    	; 0x1702 <xTaskGenericCreate+0x172>
    15de:	a5 01       	movw	r20, r10
    15e0:	65 ea       	ldi	r22, 0xA5	; 165
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 ed 2b 	call	0x57da	; 0x57da <memset>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	a8 1a       	sub	r10, r24
    15ec:	b1 08       	sbc	r11, r1
    15ee:	8f 89       	ldd	r24, Y+23	; 0x17
    15f0:	98 8d       	ldd	r25, Y+24	; 0x18
    15f2:	a8 0e       	add	r10, r24
    15f4:	b9 1e       	adc	r11, r25
    15f6:	48 e0       	ldi	r20, 0x08	; 8
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	b3 01       	movw	r22, r6
    15fc:	ce 01       	movw	r24, r28
    15fe:	49 96       	adiw	r24, 0x19	; 25
    1600:	0e 94 14 2c 	call	0x5828	; 0x5828 <strncpy>
    1604:	18 a2       	std	Y+32, r1	; 0x20
    1606:	1e 8a       	std	Y+22, r1	; 0x16
    1608:	1a a2       	std	Y+34, r1	; 0x22
    160a:	6e 01       	movw	r12, r28
    160c:	e2 e0       	ldi	r30, 0x02	; 2
    160e:	ce 0e       	add	r12, r30
    1610:	d1 1c       	adc	r13, r1
    1612:	c6 01       	movw	r24, r12
    1614:	8c db       	rcall	.-2280   	; 0xd2e <vListInitialiseItem>
    1616:	ce 01       	movw	r24, r28
    1618:	0c 96       	adiw	r24, 0x0c	; 12
    161a:	89 db       	rcall	.-2286   	; 0xd2e <vListInitialiseItem>
    161c:	c8 87       	std	Y+8, r28	; 0x08
    161e:	d9 87       	std	Y+9, r29	; 0x09
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	8c 87       	std	Y+12, r24	; 0x0c
    1626:	9d 87       	std	Y+13, r25	; 0x0d
    1628:	ca 8b       	std	Y+18, r28	; 0x12
    162a:	db 8b       	std	Y+19, r29	; 0x13
    162c:	a2 01       	movw	r20, r4
    162e:	b4 01       	movw	r22, r8
    1630:	c5 01       	movw	r24, r10
    1632:	0e da       	rcall	.-3044   	; 0xa50 <pxPortInitialiseStack>
    1634:	88 83       	st	Y, r24
    1636:	99 83       	std	Y+1, r25	; 0x01
    1638:	e1 14       	cp	r14, r1
    163a:	f1 04       	cpc	r15, r1
    163c:	19 f0       	breq	.+6      	; 0x1644 <xTaskGenericCreate+0xb4>
    163e:	f7 01       	movw	r30, r14
    1640:	c0 83       	st	Z, r28
    1642:	d1 83       	std	Z+1, r29	; 0x01
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	0f 92       	push	r0
    164a:	80 91 b1 3c 	lds	r24, 0x3CB1
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	80 93 b1 3c 	sts	0x3CB1, r24
    1654:	80 91 e3 3c 	lds	r24, 0x3CE3
    1658:	90 91 e4 3c 	lds	r25, 0x3CE4
    165c:	89 2b       	or	r24, r25
    165e:	49 f4       	brne	.+18     	; 0x1672 <xTaskGenericCreate+0xe2>
    1660:	c0 93 e3 3c 	sts	0x3CE3, r28
    1664:	d0 93 e4 3c 	sts	0x3CE4, r29
    1668:	80 91 b1 3c 	lds	r24, 0x3CB1
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	81 f4       	brne	.+32     	; 0x1690 <xTaskGenericCreate+0x100>
    1670:	4a c0       	rjmp	.+148    	; 0x1706 <xTaskGenericCreate+0x176>
    1672:	80 91 ac 3c 	lds	r24, 0x3CAC
    1676:	81 11       	cpse	r24, r1
    1678:	0b c0       	rjmp	.+22     	; 0x1690 <xTaskGenericCreate+0x100>
    167a:	e0 91 e3 3c 	lds	r30, 0x3CE3
    167e:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1682:	86 89       	ldd	r24, Z+22	; 0x16
    1684:	08 17       	cp	r16, r24
    1686:	20 f0       	brcs	.+8      	; 0x1690 <xTaskGenericCreate+0x100>
    1688:	c0 93 e3 3c 	sts	0x3CE3, r28
    168c:	d0 93 e4 3c 	sts	0x3CE4, r29
    1690:	8e 89       	ldd	r24, Y+22	; 0x16
    1692:	90 91 ae 3c 	lds	r25, 0x3CAE
    1696:	98 17       	cp	r25, r24
    1698:	10 f4       	brcc	.+4      	; 0x169e <xTaskGenericCreate+0x10e>
    169a:	80 93 ae 3c 	sts	0x3CAE, r24
    169e:	90 91 a7 3c 	lds	r25, 0x3CA7
    16a2:	99 a3       	std	Y+33, r25	; 0x21
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	90 93 a7 3c 	sts	0x3CA7, r25
    16aa:	90 91 ad 3c 	lds	r25, 0x3CAD
    16ae:	98 17       	cp	r25, r24
    16b0:	10 f4       	brcc	.+4      	; 0x16b6 <xTaskGenericCreate+0x126>
    16b2:	80 93 ad 3c 	sts	0x3CAD, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	b6 01       	movw	r22, r12
    16cc:	86 52       	subi	r24, 0x26	; 38
    16ce:	93 4c       	sbci	r25, 0xC3	; 195
    16d0:	32 db       	rcall	.-2460   	; 0xd36 <vListInsertEnd>
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	80 91 ac 3c 	lds	r24, 0x3CAC
    16da:	88 23       	and	r24, r24
    16dc:	51 f0       	breq	.+20     	; 0x16f2 <xTaskGenericCreate+0x162>
    16de:	e0 91 e3 3c 	lds	r30, 0x3CE3
    16e2:	f0 91 e4 3c 	lds	r31, 0x3CE4
    16e6:	86 89       	ldd	r24, Z+22	; 0x16
    16e8:	80 17       	cp	r24, r16
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <xTaskGenericCreate+0x166>
    16ec:	61 da       	rcall	.-2878   	; 0xbb0 <vPortYield>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	26 c0       	rjmp	.+76     	; 0x173e <xTaskGenericCreate+0x1ae>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	24 c0       	rjmp	.+72     	; 0x173e <xTaskGenericCreate+0x1ae>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	22 c0       	rjmp	.+68     	; 0x173e <xTaskGenericCreate+0x1ae>
    16fa:	cf 8a       	std	Y+23, r12	; 0x17
    16fc:	d8 8e       	std	Y+24, r13	; 0x18
    16fe:	c6 01       	movw	r24, r12
    1700:	6e cf       	rjmp	.-292    	; 0x15de <xTaskGenericCreate+0x4e>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	1c c0       	rjmp	.+56     	; 0x173e <xTaskGenericCreate+0x1ae>
    1706:	8a ed       	ldi	r24, 0xDA	; 218
    1708:	9c e3       	ldi	r25, 0x3C	; 60
    170a:	03 db       	rcall	.-2554   	; 0xd12 <vListInitialise>
    170c:	81 ed       	ldi	r24, 0xD1	; 209
    170e:	9c e3       	ldi	r25, 0x3C	; 60
    1710:	00 db       	rcall	.-2560   	; 0xd12 <vListInitialise>
    1712:	88 ec       	ldi	r24, 0xC8	; 200
    1714:	9c e3       	ldi	r25, 0x3C	; 60
    1716:	fd da       	rcall	.-2566   	; 0xd12 <vListInitialise>
    1718:	8b eb       	ldi	r24, 0xBB	; 187
    171a:	9c e3       	ldi	r25, 0x3C	; 60
    171c:	fa da       	rcall	.-2572   	; 0xd12 <vListInitialise>
    171e:	82 eb       	ldi	r24, 0xB2	; 178
    1720:	9c e3       	ldi	r25, 0x3C	; 60
    1722:	f7 da       	rcall	.-2578   	; 0xd12 <vListInitialise>
    1724:	81 ed       	ldi	r24, 0xD1	; 209
    1726:	9c e3       	ldi	r25, 0x3C	; 60
    1728:	80 93 c6 3c 	sts	0x3CC6, r24
    172c:	90 93 c7 3c 	sts	0x3CC7, r25
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	9c e3       	ldi	r25, 0x3C	; 60
    1734:	80 93 c4 3c 	sts	0x3CC4, r24
    1738:	90 93 c5 3c 	sts	0x3CC5, r25
    173c:	a9 cf       	rjmp	.-174    	; 0x1690 <xTaskGenericCreate+0x100>
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	bf 90       	pop	r11
    174e:	af 90       	pop	r10
    1750:	9f 90       	pop	r9
    1752:	8f 90       	pop	r8
    1754:	7f 90       	pop	r7
    1756:	6f 90       	pop	r6
    1758:	5f 90       	pop	r5
    175a:	4f 90       	pop	r4
    175c:	08 95       	ret

0000175e <vTaskStartScheduler>:
    175e:	af 92       	push	r10
    1760:	bf 92       	push	r11
    1762:	cf 92       	push	r12
    1764:	df 92       	push	r13
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	0f 93       	push	r16
    176c:	a1 2c       	mov	r10, r1
    176e:	b1 2c       	mov	r11, r1
    1770:	c1 2c       	mov	r12, r1
    1772:	d1 2c       	mov	r13, r1
    1774:	e1 2c       	mov	r14, r1
    1776:	f1 2c       	mov	r15, r1
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e4       	ldi	r20, 0x40	; 64
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	61 e8       	ldi	r22, 0x81	; 129
    1784:	70 e2       	ldi	r23, 0x20	; 32
    1786:	8f ee       	ldi	r24, 0xEF	; 239
    1788:	99 e0       	ldi	r25, 0x09	; 9
    178a:	02 df       	rcall	.-508    	; 0x1590 <xTaskGenericCreate>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	59 f4       	brne	.+22     	; 0x17a6 <vTaskStartScheduler+0x48>
    1790:	52 d4       	rcall	.+2212   	; 0x2036 <xTimerCreateTimerTask>
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	41 f4       	brne	.+16     	; 0x17a6 <vTaskStartScheduler+0x48>
    1796:	f8 94       	cli
    1798:	80 93 ac 3c 	sts	0x3CAC, r24
    179c:	10 92 af 3c 	sts	0x3CAF, r1
    17a0:	10 92 b0 3c 	sts	0x3CB0, r1
    17a4:	c3 d9       	rcall	.-3194   	; 0xb2c <xPortStartScheduler>
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	08 95       	ret

000017b6 <vTaskSuspendAll>:
    17b6:	80 91 ab 3c 	lds	r24, 0x3CAB
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 ab 3c 	sts	0x3CAB, r24
    17c0:	08 95       	ret

000017c2 <xTaskGetTickCount>:
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	0f 92       	push	r0
    17c8:	80 91 af 3c 	lds	r24, 0x3CAF
    17cc:	90 91 b0 3c 	lds	r25, 0x3CB0
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	08 95       	ret

000017d6 <uxTaskGetNumberOfTasks>:
    17d6:	80 91 b1 3c 	lds	r24, 0x3CB1
    17da:	08 95       	ret

000017dc <vTaskIncrementTick>:
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	80 91 ab 3c 	lds	r24, 0x3CAB
    17e8:	81 11       	cpse	r24, r1
    17ea:	af c0       	rjmp	.+350    	; 0x194a <vTaskIncrementTick+0x16e>
    17ec:	80 91 af 3c 	lds	r24, 0x3CAF
    17f0:	90 91 b0 3c 	lds	r25, 0x3CB0
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	80 93 af 3c 	sts	0x3CAF, r24
    17fa:	90 93 b0 3c 	sts	0x3CB0, r25
    17fe:	80 91 af 3c 	lds	r24, 0x3CAF
    1802:	90 91 b0 3c 	lds	r25, 0x3CB0
    1806:	89 2b       	or	r24, r25
    1808:	99 f5       	brne	.+102    	; 0x1870 <vTaskIncrementTick+0x94>
    180a:	80 91 c6 3c 	lds	r24, 0x3CC6
    180e:	90 91 c7 3c 	lds	r25, 0x3CC7
    1812:	20 91 c4 3c 	lds	r18, 0x3CC4
    1816:	30 91 c5 3c 	lds	r19, 0x3CC5
    181a:	20 93 c6 3c 	sts	0x3CC6, r18
    181e:	30 93 c7 3c 	sts	0x3CC7, r19
    1822:	80 93 c4 3c 	sts	0x3CC4, r24
    1826:	90 93 c5 3c 	sts	0x3CC5, r25
    182a:	80 91 a8 3c 	lds	r24, 0x3CA8
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	80 93 a8 3c 	sts	0x3CA8, r24
    1834:	e0 91 c6 3c 	lds	r30, 0x3CC6
    1838:	f0 91 c7 3c 	lds	r31, 0x3CC7
    183c:	80 81       	ld	r24, Z
    183e:	81 11       	cpse	r24, r1
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <vTaskIncrementTick+0x74>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	80 93 05 20 	sts	0x2005, r24
    184a:	90 93 06 20 	sts	0x2006, r25
    184e:	10 c0       	rjmp	.+32     	; 0x1870 <vTaskIncrementTick+0x94>
    1850:	e0 91 c6 3c 	lds	r30, 0x3CC6
    1854:	f0 91 c7 3c 	lds	r31, 0x3CC7
    1858:	05 80       	ldd	r0, Z+5	; 0x05
    185a:	f6 81       	ldd	r31, Z+6	; 0x06
    185c:	e0 2d       	mov	r30, r0
    185e:	06 80       	ldd	r0, Z+6	; 0x06
    1860:	f7 81       	ldd	r31, Z+7	; 0x07
    1862:	e0 2d       	mov	r30, r0
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	80 93 05 20 	sts	0x2005, r24
    186c:	90 93 06 20 	sts	0x2006, r25
    1870:	20 91 af 3c 	lds	r18, 0x3CAF
    1874:	30 91 b0 3c 	lds	r19, 0x3CB0
    1878:	80 91 05 20 	lds	r24, 0x2005
    187c:	90 91 06 20 	lds	r25, 0x2006
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	08 f4       	brcc	.+2      	; 0x1888 <vTaskIncrementTick+0xac>
    1886:	66 c0       	rjmp	.+204    	; 0x1954 <vTaskIncrementTick+0x178>
    1888:	e0 91 c6 3c 	lds	r30, 0x3CC6
    188c:	f0 91 c7 3c 	lds	r31, 0x3CC7
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	99 f0       	breq	.+38     	; 0x18bc <vTaskIncrementTick+0xe0>
    1896:	e0 91 c6 3c 	lds	r30, 0x3CC6
    189a:	f0 91 c7 3c 	lds	r31, 0x3CC7
    189e:	05 80       	ldd	r0, Z+5	; 0x05
    18a0:	f6 81       	ldd	r31, Z+6	; 0x06
    18a2:	e0 2d       	mov	r30, r0
    18a4:	c6 81       	ldd	r28, Z+6	; 0x06
    18a6:	d7 81       	ldd	r29, Z+7	; 0x07
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	20 91 af 3c 	lds	r18, 0x3CAF
    18b0:	30 91 b0 3c 	lds	r19, 0x3CB0
    18b4:	28 17       	cp	r18, r24
    18b6:	39 07       	cpc	r19, r25
    18b8:	f8 f4       	brcc	.+62     	; 0x18f8 <vTaskIncrementTick+0x11c>
    18ba:	19 c0       	rjmp	.+50     	; 0x18ee <vTaskIncrementTick+0x112>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	80 93 05 20 	sts	0x2005, r24
    18c4:	90 93 06 20 	sts	0x2006, r25
    18c8:	45 c0       	rjmp	.+138    	; 0x1954 <vTaskIncrementTick+0x178>
    18ca:	e0 91 c6 3c 	lds	r30, 0x3CC6
    18ce:	f0 91 c7 3c 	lds	r31, 0x3CC7
    18d2:	05 80       	ldd	r0, Z+5	; 0x05
    18d4:	f6 81       	ldd	r31, Z+6	; 0x06
    18d6:	e0 2d       	mov	r30, r0
    18d8:	c6 81       	ldd	r28, Z+6	; 0x06
    18da:	d7 81       	ldd	r29, Z+7	; 0x07
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	20 91 af 3c 	lds	r18, 0x3CAF
    18e4:	30 91 b0 3c 	lds	r19, 0x3CB0
    18e8:	28 17       	cp	r18, r24
    18ea:	39 07       	cpc	r19, r25
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <vTaskIncrementTick+0x11c>
    18ee:	80 93 05 20 	sts	0x2005, r24
    18f2:	90 93 06 20 	sts	0x2006, r25
    18f6:	2e c0       	rjmp	.+92     	; 0x1954 <vTaskIncrementTick+0x178>
    18f8:	8e 01       	movw	r16, r28
    18fa:	0e 5f       	subi	r16, 0xFE	; 254
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	c8 01       	movw	r24, r16
    1900:	7c da       	rcall	.-2824   	; 0xdfa <vListRemove>
    1902:	8c 89       	ldd	r24, Y+20	; 0x14
    1904:	9d 89       	ldd	r25, Y+21	; 0x15
    1906:	89 2b       	or	r24, r25
    1908:	19 f0       	breq	.+6      	; 0x1910 <vTaskIncrementTick+0x134>
    190a:	ce 01       	movw	r24, r28
    190c:	0c 96       	adiw	r24, 0x0c	; 12
    190e:	75 da       	rcall	.-2838   	; 0xdfa <vListRemove>
    1910:	8e 89       	ldd	r24, Y+22	; 0x16
    1912:	90 91 ad 3c 	lds	r25, 0x3CAD
    1916:	98 17       	cp	r25, r24
    1918:	10 f4       	brcc	.+4      	; 0x191e <vTaskIncrementTick+0x142>
    191a:	80 93 ad 3c 	sts	0x3CAD, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	b8 01       	movw	r22, r16
    1934:	86 52       	subi	r24, 0x26	; 38
    1936:	93 4c       	sbci	r25, 0xC3	; 195
    1938:	fe d9       	rcall	.-3076   	; 0xd36 <vListInsertEnd>
    193a:	e0 91 c6 3c 	lds	r30, 0x3CC6
    193e:	f0 91 c7 3c 	lds	r31, 0x3CC7
    1942:	80 81       	ld	r24, Z
    1944:	81 11       	cpse	r24, r1
    1946:	c1 cf       	rjmp	.-126    	; 0x18ca <vTaskIncrementTick+0xee>
    1948:	b9 cf       	rjmp	.-142    	; 0x18bc <vTaskIncrementTick+0xe0>
    194a:	80 91 aa 3c 	lds	r24, 0x3CAA
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	80 93 aa 3c 	sts	0x3CAA, r24
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <xTaskResumeAll>:
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	80 91 ab 3c 	lds	r24, 0x3CAB
    197a:	81 50       	subi	r24, 0x01	; 1
    197c:	80 93 ab 3c 	sts	0x3CAB, r24
    1980:	80 91 ab 3c 	lds	r24, 0x3CAB
    1984:	81 11       	cpse	r24, r1
    1986:	62 c0       	rjmp	.+196    	; 0x1a4c <xTaskResumeAll+0xee>
    1988:	80 91 b1 3c 	lds	r24, 0x3CB1
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <xTaskResumeAll+0x34>
    1990:	5f c0       	rjmp	.+190    	; 0x1a50 <xTaskResumeAll+0xf2>
    1992:	b1 2c       	mov	r11, r1
    1994:	0f 2e       	mov	r0, r31
    1996:	fb eb       	ldi	r31, 0xBB	; 187
    1998:	ef 2e       	mov	r14, r31
    199a:	fc e3       	ldi	r31, 0x3C	; 60
    199c:	ff 2e       	mov	r15, r31
    199e:	f0 2d       	mov	r31, r0
    19a0:	0f 2e       	mov	r0, r31
    19a2:	f0 ec       	ldi	r31, 0xC0	; 192
    19a4:	cf 2e       	mov	r12, r31
    19a6:	fc e3       	ldi	r31, 0x3C	; 60
    19a8:	df 2e       	mov	r13, r31
    19aa:	f0 2d       	mov	r31, r0
    19ac:	2c c0       	rjmp	.+88     	; 0x1a06 <xTaskResumeAll+0xa8>
    19ae:	d6 01       	movw	r26, r12
    19b0:	ed 91       	ld	r30, X+
    19b2:	fc 91       	ld	r31, X
    19b4:	c6 81       	ldd	r28, Z+6	; 0x06
    19b6:	d7 81       	ldd	r29, Z+7	; 0x07
    19b8:	ce 01       	movw	r24, r28
    19ba:	0c 96       	adiw	r24, 0x0c	; 12
    19bc:	1e da       	rcall	.-3012   	; 0xdfa <vListRemove>
    19be:	8e 01       	movw	r16, r28
    19c0:	0e 5f       	subi	r16, 0xFE	; 254
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	c8 01       	movw	r24, r16
    19c6:	19 da       	rcall	.-3022   	; 0xdfa <vListRemove>
    19c8:	8e 89       	ldd	r24, Y+22	; 0x16
    19ca:	90 91 ad 3c 	lds	r25, 0x3CAD
    19ce:	98 17       	cp	r25, r24
    19d0:	10 f4       	brcc	.+4      	; 0x19d6 <xTaskResumeAll+0x78>
    19d2:	80 93 ad 3c 	sts	0x3CAD, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 01       	movw	r18, r24
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	b8 01       	movw	r22, r16
    19ec:	86 52       	subi	r24, 0x26	; 38
    19ee:	93 4c       	sbci	r25, 0xC3	; 195
    19f0:	a2 d9       	rcall	.-3260   	; 0xd36 <vListInsertEnd>
    19f2:	e0 91 e3 3c 	lds	r30, 0x3CE3
    19f6:	f0 91 e4 3c 	lds	r31, 0x3CE4
    19fa:	9e 89       	ldd	r25, Y+22	; 0x16
    19fc:	86 89       	ldd	r24, Z+22	; 0x16
    19fe:	98 17       	cp	r25, r24
    1a00:	10 f0       	brcs	.+4      	; 0x1a06 <xTaskResumeAll+0xa8>
    1a02:	bb 24       	eor	r11, r11
    1a04:	b3 94       	inc	r11
    1a06:	f7 01       	movw	r30, r14
    1a08:	80 81       	ld	r24, Z
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	d0 cf       	rjmp	.-96     	; 0x19ae <xTaskResumeAll+0x50>
    1a0e:	80 91 aa 3c 	lds	r24, 0x3CAA
    1a12:	88 23       	and	r24, r24
    1a14:	79 f0       	breq	.+30     	; 0x1a34 <xTaskResumeAll+0xd6>
    1a16:	80 91 aa 3c 	lds	r24, 0x3CAA
    1a1a:	88 23       	and	r24, r24
    1a1c:	91 f0       	breq	.+36     	; 0x1a42 <xTaskResumeAll+0xe4>
    1a1e:	de de       	rcall	.-580    	; 0x17dc <vTaskIncrementTick>
    1a20:	80 91 aa 3c 	lds	r24, 0x3CAA
    1a24:	81 50       	subi	r24, 0x01	; 1
    1a26:	80 93 aa 3c 	sts	0x3CAA, r24
    1a2a:	80 91 aa 3c 	lds	r24, 0x3CAA
    1a2e:	81 11       	cpse	r24, r1
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <xTaskResumeAll+0xc0>
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <xTaskResumeAll+0xe4>
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	bf 16       	cp	r11, r31
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <xTaskResumeAll+0xe4>
    1a3a:	80 91 a9 3c 	lds	r24, 0x3CA9
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	49 f4       	brne	.+18     	; 0x1a54 <xTaskResumeAll+0xf6>
    1a42:	10 92 a9 3c 	sts	0x3CA9, r1
    1a46:	b4 d8       	rcall	.-3736   	; 0xbb0 <vPortYield>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <xTaskResumeAll+0xf8>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <xTaskResumeAll+0xf8>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <xTaskResumeAll+0xf8>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	08 95       	ret

00001a6e <vTaskDelay>:
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	ec 01       	movw	r28, r24
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	91 f0       	breq	.+36     	; 0x1a9c <vTaskDelay+0x2e>
    1a78:	9e de       	rcall	.-708    	; 0x17b6 <vTaskSuspendAll>
    1a7a:	80 91 af 3c 	lds	r24, 0x3CAF
    1a7e:	90 91 b0 3c 	lds	r25, 0x3CB0
    1a82:	c8 0f       	add	r28, r24
    1a84:	d9 1f       	adc	r29, r25
    1a86:	80 91 e3 3c 	lds	r24, 0x3CE3
    1a8a:	90 91 e4 3c 	lds	r25, 0x3CE4
    1a8e:	02 96       	adiw	r24, 0x02	; 2
    1a90:	b4 d9       	rcall	.-3224   	; 0xdfa <vListRemove>
    1a92:	ce 01       	movw	r24, r28
    1a94:	ab dc       	rcall	.-1706   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1a96:	63 df       	rcall	.-314    	; 0x195e <xTaskResumeAll>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <vTaskDelay+0x30>
    1a9c:	89 d8       	rcall	.-3822   	; 0xbb0 <vPortYield>
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	08 95       	ret

00001aa4 <vTaskList>:
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	84 de       	rcall	.-760    	; 0x17b6 <vTaskSuspendAll>
    1aae:	18 82       	st	Y, r1
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	00 20       	and	r0, r0
    1ab6:	e9 f7       	brne	.-6      	; 0x1ab2 <vTaskList+0xe>
    1ab8:	31 97       	sbiw	r30, 0x01	; 1
    1aba:	2d e0       	ldi	r18, 0x0D	; 13
    1abc:	3a e0       	ldi	r19, 0x0A	; 10
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	20 83       	st	Z, r18
    1ac2:	31 83       	std	Z+1, r19	; 0x01
    1ac4:	42 83       	std	Z+2, r20	; 0x02
    1ac6:	10 91 ae 3c 	lds	r17, 0x3CAE
    1aca:	1f 5f       	subi	r17, 0xFF	; 255
    1acc:	11 50       	subi	r17, 0x01	; 1
    1ace:	21 2f       	mov	r18, r17
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	e6 52       	subi	r30, 0x26	; 38
    1ae6:	f3 4c       	sbci	r31, 0xC3	; 195
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <vTaskList+0x52>
    1aee:	bf 01       	movw	r22, r30
    1af0:	42 e5       	ldi	r20, 0x52	; 82
    1af2:	ce 01       	movw	r24, r28
    1af4:	b0 dc       	rcall	.-1696   	; 0x1456 <prvListTaskWithinSingleList>
    1af6:	11 11       	cpse	r17, r1
    1af8:	e9 cf       	rjmp	.-46     	; 0x1acc <vTaskList+0x28>
    1afa:	e0 91 c6 3c 	lds	r30, 0x3CC6
    1afe:	f0 91 c7 3c 	lds	r31, 0x3CC7
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <vTaskList+0x72>
    1b08:	60 91 c6 3c 	lds	r22, 0x3CC6
    1b0c:	70 91 c7 3c 	lds	r23, 0x3CC7
    1b10:	42 e4       	ldi	r20, 0x42	; 66
    1b12:	ce 01       	movw	r24, r28
    1b14:	a0 dc       	rcall	.-1728   	; 0x1456 <prvListTaskWithinSingleList>
    1b16:	e0 91 c4 3c 	lds	r30, 0x3CC4
    1b1a:	f0 91 c5 3c 	lds	r31, 0x3CC5
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 23       	and	r24, r24
    1b22:	39 f0       	breq	.+14     	; 0x1b32 <vTaskList+0x8e>
    1b24:	60 91 c4 3c 	lds	r22, 0x3CC4
    1b28:	70 91 c5 3c 	lds	r23, 0x3CC5
    1b2c:	42 e4       	ldi	r20, 0x42	; 66
    1b2e:	ce 01       	movw	r24, r28
    1b30:	92 dc       	rcall	.-1756   	; 0x1456 <prvListTaskWithinSingleList>
    1b32:	80 91 b2 3c 	lds	r24, 0x3CB2
    1b36:	88 23       	and	r24, r24
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <vTaskList+0xa0>
    1b3a:	43 e5       	ldi	r20, 0x53	; 83
    1b3c:	62 eb       	ldi	r22, 0xB2	; 178
    1b3e:	7c e3       	ldi	r23, 0x3C	; 60
    1b40:	ce 01       	movw	r24, r28
    1b42:	89 dc       	rcall	.-1774   	; 0x1456 <prvListTaskWithinSingleList>
    1b44:	0c df       	rcall	.-488    	; 0x195e <xTaskResumeAll>
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	08 95       	ret

00001b4e <vTaskSwitchContext>:
    1b4e:	80 91 ab 3c 	lds	r24, 0x3CAB
    1b52:	81 11       	cpse	r24, r1
    1b54:	13 c0       	rjmp	.+38     	; 0x1b7c <vTaskSwitchContext+0x2e>
    1b56:	80 91 ad 3c 	lds	r24, 0x3CAD
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	ee 0f       	add	r30, r30
    1b64:	ff 1f       	adc	r31, r31
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	8e 0f       	add	r24, r30
    1b6c:	9f 1f       	adc	r25, r31
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e6 52       	subi	r30, 0x26	; 38
    1b72:	f3 4c       	sbci	r31, 0xC3	; 195
    1b74:	80 81       	ld	r24, Z
    1b76:	88 23       	and	r24, r24
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <vTaskSwitchContext+0x36>
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <vTaskSwitchContext+0x64>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	80 93 a9 3c 	sts	0x3CA9, r24
    1b82:	08 95       	ret
    1b84:	80 91 ad 3c 	lds	r24, 0x3CAD
    1b88:	81 50       	subi	r24, 0x01	; 1
    1b8a:	80 93 ad 3c 	sts	0x3CAD, r24
    1b8e:	80 91 ad 3c 	lds	r24, 0x3CAD
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	fc 01       	movw	r30, r24
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	8e 0f       	add	r24, r30
    1ba4:	9f 1f       	adc	r25, r31
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e6 52       	subi	r30, 0x26	; 38
    1baa:	f3 4c       	sbci	r31, 0xC3	; 195
    1bac:	80 81       	ld	r24, Z
    1bae:	88 23       	and	r24, r24
    1bb0:	49 f3       	breq	.-46     	; 0x1b84 <vTaskSwitchContext+0x36>
    1bb2:	e0 91 ad 3c 	lds	r30, 0x3CAD
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	cf 01       	movw	r24, r30
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	e8 0f       	add	r30, r24
    1bc8:	f9 1f       	adc	r31, r25
    1bca:	e6 52       	subi	r30, 0x26	; 38
    1bcc:	f3 4c       	sbci	r31, 0xC3	; 195
    1bce:	a1 81       	ldd	r26, Z+1	; 0x01
    1bd0:	b2 81       	ldd	r27, Z+2	; 0x02
    1bd2:	12 96       	adiw	r26, 0x02	; 2
    1bd4:	0d 90       	ld	r0, X+
    1bd6:	bc 91       	ld	r27, X
    1bd8:	a0 2d       	mov	r26, r0
    1bda:	a1 83       	std	Z+1, r26	; 0x01
    1bdc:	b2 83       	std	Z+2, r27	; 0x02
    1bde:	cf 01       	movw	r24, r30
    1be0:	03 96       	adiw	r24, 0x03	; 3
    1be2:	a8 17       	cp	r26, r24
    1be4:	b9 07       	cpc	r27, r25
    1be6:	31 f4       	brne	.+12     	; 0x1bf4 <vTaskSwitchContext+0xa6>
    1be8:	12 96       	adiw	r26, 0x02	; 2
    1bea:	8d 91       	ld	r24, X+
    1bec:	9c 91       	ld	r25, X
    1bee:	13 97       	sbiw	r26, 0x03	; 3
    1bf0:	81 83       	std	Z+1, r24	; 0x01
    1bf2:	92 83       	std	Z+2, r25	; 0x02
    1bf4:	01 80       	ldd	r0, Z+1	; 0x01
    1bf6:	f2 81       	ldd	r31, Z+2	; 0x02
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	86 81       	ldd	r24, Z+6	; 0x06
    1bfc:	97 81       	ldd	r25, Z+7	; 0x07
    1bfe:	80 93 e3 3c 	sts	0x3CE3, r24
    1c02:	90 93 e4 3c 	sts	0x3CE4, r25
    1c06:	80 91 a2 3c 	lds	r24, 0x3CA2
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <vTaskSwitchContext+0xc2>
    1c0e:	4c c0       	rjmp	.+152    	; 0x1ca8 <vTaskSwitchContext+0x15a>
    1c10:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1c14:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1c18:	91 a1       	ldd	r25, Z+33	; 0x21
    1c1a:	80 91 04 20 	lds	r24, 0x2004
    1c1e:	98 17       	cp	r25, r24
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <vTaskSwitchContext+0xd6>
    1c22:	42 c0       	rjmp	.+132    	; 0x1ca8 <vTaskSwitchContext+0x15a>
    1c24:	80 91 a5 3c 	lds	r24, 0x3CA5
    1c28:	90 91 a6 3c 	lds	r25, 0x3CA6
    1c2c:	08 96       	adiw	r24, 0x08	; 8
    1c2e:	20 91 a3 3c 	lds	r18, 0x3CA3
    1c32:	30 91 a4 3c 	lds	r19, 0x3CA4
    1c36:	82 17       	cp	r24, r18
    1c38:	93 07       	cpc	r25, r19
    1c3a:	a0 f5       	brcc	.+104    	; 0x1ca4 <vTaskSwitchContext+0x156>
    1c3c:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1c40:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1c44:	81 a1       	ldd	r24, Z+33	; 0x21
    1c46:	80 93 04 20 	sts	0x2004, r24
    1c4a:	e0 91 a5 3c 	lds	r30, 0x3CA5
    1c4e:	f0 91 a6 3c 	lds	r31, 0x3CA6
    1c52:	40 91 af 3c 	lds	r20, 0x3CAF
    1c56:	50 91 b0 3c 	lds	r21, 0x3CB0
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	40 83       	st	Z, r20
    1c60:	51 83       	std	Z+1, r21	; 0x01
    1c62:	62 83       	std	Z+2, r22	; 0x02
    1c64:	73 83       	std	Z+3, r23	; 0x03
    1c66:	20 91 a5 3c 	lds	r18, 0x3CA5
    1c6a:	30 91 a6 3c 	lds	r19, 0x3CA6
    1c6e:	2c 5f       	subi	r18, 0xFC	; 252
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	20 93 a5 3c 	sts	0x3CA5, r18
    1c76:	30 93 a6 3c 	sts	0x3CA6, r19
    1c7a:	e0 91 a5 3c 	lds	r30, 0x3CA5
    1c7e:	f0 91 a6 3c 	lds	r31, 0x3CA6
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e0       	ldi	r26, 0x00	; 0
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	80 83       	st	Z, r24
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	b3 83       	std	Z+3, r27	; 0x03
    1c90:	80 91 a5 3c 	lds	r24, 0x3CA5
    1c94:	90 91 a6 3c 	lds	r25, 0x3CA6
    1c98:	04 96       	adiw	r24, 0x04	; 4
    1c9a:	80 93 a5 3c 	sts	0x3CA5, r24
    1c9e:	90 93 a6 3c 	sts	0x3CA6, r25
    1ca2:	08 95       	ret
    1ca4:	10 92 a2 3c 	sts	0x3CA2, r1
    1ca8:	08 95       	ret

00001caa <vTaskPlaceOnEventList>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	eb 01       	movw	r28, r22
    1cb0:	60 91 e3 3c 	lds	r22, 0x3CE3
    1cb4:	70 91 e4 3c 	lds	r23, 0x3CE4
    1cb8:	64 5f       	subi	r22, 0xF4	; 244
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	63 d8       	rcall	.-3898   	; 0xd84 <vListInsert>
    1cbe:	80 91 e3 3c 	lds	r24, 0x3CE3
    1cc2:	90 91 e4 3c 	lds	r25, 0x3CE4
    1cc6:	02 96       	adiw	r24, 0x02	; 2
    1cc8:	98 d8       	rcall	.-3792   	; 0xdfa <vListRemove>
    1cca:	cf 3f       	cpi	r28, 0xFF	; 255
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	d8 07       	cpc	r29, r24
    1cd0:	51 f4       	brne	.+20     	; 0x1ce6 <vTaskPlaceOnEventList+0x3c>
    1cd2:	60 91 e3 3c 	lds	r22, 0x3CE3
    1cd6:	70 91 e4 3c 	lds	r23, 0x3CE4
    1cda:	6e 5f       	subi	r22, 0xFE	; 254
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	82 eb       	ldi	r24, 0xB2	; 178
    1ce0:	9c e3       	ldi	r25, 0x3C	; 60
    1ce2:	29 d8       	rcall	.-4014   	; 0xd36 <vListInsertEnd>
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <vTaskPlaceOnEventList+0x4a>
    1ce6:	80 91 af 3c 	lds	r24, 0x3CAF
    1cea:	90 91 b0 3c 	lds	r25, 0x3CB0
    1cee:	8c 0f       	add	r24, r28
    1cf0:	9d 1f       	adc	r25, r29
    1cf2:	7c db       	rcall	.-2312   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <vTaskPlaceOnEventListRestricted>:
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	eb 01       	movw	r28, r22
    1d00:	60 91 e3 3c 	lds	r22, 0x3CE3
    1d04:	70 91 e4 3c 	lds	r23, 0x3CE4
    1d08:	64 5f       	subi	r22, 0xF4	; 244
    1d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0c:	14 d8       	rcall	.-4056   	; 0xd36 <vListInsertEnd>
    1d0e:	80 91 e3 3c 	lds	r24, 0x3CE3
    1d12:	90 91 e4 3c 	lds	r25, 0x3CE4
    1d16:	02 96       	adiw	r24, 0x02	; 2
    1d18:	70 d8       	rcall	.-3872   	; 0xdfa <vListRemove>
    1d1a:	80 91 af 3c 	lds	r24, 0x3CAF
    1d1e:	90 91 b0 3c 	lds	r25, 0x3CB0
    1d22:	8c 0f       	add	r24, r28
    1d24:	9d 1f       	adc	r25, r29
    1d26:	62 db       	rcall	.-2364   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <xTaskRemoveFromEventList>:
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	dc 01       	movw	r26, r24
    1d38:	15 96       	adiw	r26, 0x05	; 5
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
    1d3e:	16 97       	sbiw	r26, 0x06	; 6
    1d40:	c6 81       	ldd	r28, Z+6	; 0x06
    1d42:	d7 81       	ldd	r29, Z+7	; 0x07
    1d44:	8e 01       	movw	r16, r28
    1d46:	04 5f       	subi	r16, 0xF4	; 244
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	56 d8       	rcall	.-3924   	; 0xdfa <vListRemove>
    1d4e:	80 91 ab 3c 	lds	r24, 0x3CAB
    1d52:	81 11       	cpse	r24, r1
    1d54:	1b c0       	rjmp	.+54     	; 0x1d8c <xTaskRemoveFromEventList+0x5e>
    1d56:	0a 50       	subi	r16, 0x0A	; 10
    1d58:	11 09       	sbc	r17, r1
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	4e d8       	rcall	.-3940   	; 0xdfa <vListRemove>
    1d5e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d60:	90 91 ad 3c 	lds	r25, 0x3CAD
    1d64:	98 17       	cp	r25, r24
    1d66:	10 f4       	brcc	.+4      	; 0x1d6c <xTaskRemoveFromEventList+0x3e>
    1d68:	80 93 ad 3c 	sts	0x3CAD, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 01       	movw	r18, r24
    1d70:	22 0f       	add	r18, r18
    1d72:	33 1f       	adc	r19, r19
    1d74:	22 0f       	add	r18, r18
    1d76:	33 1f       	adc	r19, r19
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	82 0f       	add	r24, r18
    1d7e:	93 1f       	adc	r25, r19
    1d80:	b8 01       	movw	r22, r16
    1d82:	86 52       	subi	r24, 0x26	; 38
    1d84:	93 4c       	sbci	r25, 0xC3	; 195
    1d86:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <xTaskRemoveFromEventList+0x68>
    1d8c:	b8 01       	movw	r22, r16
    1d8e:	8b eb       	ldi	r24, 0xBB	; 187
    1d90:	9c e3       	ldi	r25, 0x3C	; 60
    1d92:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1d96:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1d9a:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	2e 89       	ldd	r18, Y+22	; 0x16
    1da2:	96 89       	ldd	r25, Z+22	; 0x16
    1da4:	29 17       	cp	r18, r25
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <xTaskRemoveFromEventList+0x7c>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <vTaskSetTimeOutState>:
    1db4:	20 91 a8 3c 	lds	r18, 0x3CA8
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
    1dbc:	20 91 af 3c 	lds	r18, 0x3CAF
    1dc0:	30 91 b0 3c 	lds	r19, 0x3CB0
    1dc4:	21 83       	std	Z+1, r18	; 0x01
    1dc6:	32 83       	std	Z+2, r19	; 0x02
    1dc8:	08 95       	ret

00001dca <xTaskCheckForTimeOut>:
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	0f 92       	push	r0
    1dd0:	db 01       	movw	r26, r22
    1dd2:	2d 91       	ld	r18, X+
    1dd4:	3c 91       	ld	r19, X
    1dd6:	2f 3f       	cpi	r18, 0xFF	; 255
    1dd8:	bf ef       	ldi	r27, 0xFF	; 255
    1dda:	3b 07       	cpc	r19, r27
    1ddc:	61 f1       	breq	.+88     	; 0x1e36 <xTaskCheckForTimeOut+0x6c>
    1dde:	40 91 a8 3c 	lds	r20, 0x3CA8
    1de2:	fc 01       	movw	r30, r24
    1de4:	50 81       	ld	r21, Z
    1de6:	54 17       	cp	r21, r20
    1de8:	51 f0       	breq	.+20     	; 0x1dfe <xTaskCheckForTimeOut+0x34>
    1dea:	40 91 af 3c 	lds	r20, 0x3CAF
    1dee:	50 91 b0 3c 	lds	r21, 0x3CB0
    1df2:	01 80       	ldd	r0, Z+1	; 0x01
    1df4:	f2 81       	ldd	r31, Z+2	; 0x02
    1df6:	e0 2d       	mov	r30, r0
    1df8:	4e 17       	cp	r20, r30
    1dfa:	5f 07       	cpc	r21, r31
    1dfc:	f0 f4       	brcc	.+60     	; 0x1e3a <xTaskCheckForTimeOut+0x70>
    1dfe:	e0 91 af 3c 	lds	r30, 0x3CAF
    1e02:	f0 91 b0 3c 	lds	r31, 0x3CB0
    1e06:	dc 01       	movw	r26, r24
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	4d 91       	ld	r20, X+
    1e0c:	5c 91       	ld	r21, X
    1e0e:	12 97       	sbiw	r26, 0x02	; 2
    1e10:	e4 1b       	sub	r30, r20
    1e12:	f5 0b       	sbc	r31, r21
    1e14:	e2 17       	cp	r30, r18
    1e16:	f3 07       	cpc	r31, r19
    1e18:	90 f4       	brcc	.+36     	; 0x1e3e <xTaskCheckForTimeOut+0x74>
    1e1a:	e0 91 af 3c 	lds	r30, 0x3CAF
    1e1e:	f0 91 b0 3c 	lds	r31, 0x3CB0
    1e22:	4e 1b       	sub	r20, r30
    1e24:	5f 0b       	sbc	r21, r31
    1e26:	24 0f       	add	r18, r20
    1e28:	35 1f       	adc	r19, r21
    1e2a:	fb 01       	movw	r30, r22
    1e2c:	20 83       	st	Z, r18
    1e2e:	31 83       	std	Z+1, r19	; 0x01
    1e30:	c1 df       	rcall	.-126    	; 0x1db4 <vTaskSetTimeOutState>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <xTaskCheckForTimeOut+0x76>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <xTaskCheckForTimeOut+0x76>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <xTaskCheckForTimeOut+0x76>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	08 95       	ret

00001e46 <vTaskMissedYield>:
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 93 a9 3c 	sts	0x3CA9, r24
    1e4c:	08 95       	ret

00001e4e <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1e4e:	80 91 e3 3c 	lds	r24, 0x3CE3
    1e52:	90 91 e4 3c 	lds	r25, 0x3CE4

		return xReturn;
	}
    1e56:	08 95       	ret

00001e58 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e58:	80 91 ac 3c 	lds	r24, 0x3CAC
    1e5c:	88 23       	and	r24, r24
    1e5e:	31 f0       	breq	.+12     	; 0x1e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e60:	80 91 ab 3c 	lds	r24, 0x3CAB
    1e64:	81 11       	cpse	r24, r1
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	08 95       	ret
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e70:	82 e0       	ldi	r24, 0x02	; 2
			}
		}

		return xReturn;
	}
    1e72:	08 95       	ret

00001e74 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1e7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e80:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1e84:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1e88:	96 89       	ldd	r25, Z+22	; 0x16
    1e8a:	89 17       	cp	r24, r25
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <vTaskPriorityInherit+0x1c>
    1e8e:	44 c0       	rjmp	.+136    	; 0x1f18 <vTaskPriorityInherit+0xa4>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1e90:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1e94:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1e98:	96 89       	ldd	r25, Z+22	; 0x16
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	29 1b       	sub	r18, r25
    1ea0:	31 09       	sbc	r19, r1
    1ea2:	2c 87       	std	Y+12, r18	; 0x0c
    1ea4:	3d 87       	std	Y+13, r19	; 0x0d

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	86 52       	subi	r24, 0x26	; 38
    1ebc:	93 4c       	sbci	r25, 0xC3	; 195
    1ebe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ec0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ec2:	28 17       	cp	r18, r24
    1ec4:	39 07       	cpc	r19, r25
    1ec6:	11 f5       	brne	.+68     	; 0x1f0c <vTaskPriorityInherit+0x98>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    1ec8:	8e 01       	movw	r16, r28
    1eca:	0e 5f       	subi	r16, 0xFE	; 254
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	c8 01       	movw	r24, r16
    1ed0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1ed4:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1ed8:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1edc:	86 89       	ldd	r24, Z+22	; 0x16
    1ede:	8e 8b       	std	Y+22, r24	; 0x16
				prvAddTaskToReadyQueue( pxTCB );
    1ee0:	90 91 ad 3c 	lds	r25, 0x3CAD
    1ee4:	98 17       	cp	r25, r24
    1ee6:	10 f4       	brcc	.+4      	; 0x1eec <vTaskPriorityInherit+0x78>
    1ee8:	80 93 ad 3c 	sts	0x3CAD, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9c 01       	movw	r18, r24
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	b8 01       	movw	r22, r16
    1f02:	86 52       	subi	r24, 0x26	; 38
    1f04:	93 4c       	sbci	r25, 0xC3	; 195
    1f06:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <vTaskPriorityInherit+0xa4>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1f0c:	e0 91 e3 3c 	lds	r30, 0x3CE3
    1f10:	f0 91 e4 3c 	lds	r31, 0x3CE4
    1f14:	86 89       	ldd	r24, Z+22	; 0x16
    1f16:	8e 8b       	std	Y+22, r24	; 0x16
			}
		}
	}
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	39 f1       	breq	.+78     	; 0x1f7e <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1f30:	9e 89       	ldd	r25, Y+22	; 0x16
    1f32:	8a a1       	ldd	r24, Y+34	; 0x22
    1f34:	98 17       	cp	r25, r24
    1f36:	19 f1       	breq	.+70     	; 0x1f7e <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    1f38:	8e 01       	movw	r16, r28
    1f3a:	0e 5f       	subi	r16, 0xFE	; 254
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	c8 01       	movw	r24, r16
    1f40:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1f44:	8a a1       	ldd	r24, Y+34	; 0x22
    1f46:	8e 8b       	std	Y+22, r24	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1f48:	21 e0       	ldi	r18, 0x01	; 1
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	28 1b       	sub	r18, r24
    1f4e:	31 09       	sbc	r19, r1
    1f50:	2c 87       	std	Y+12, r18	; 0x0c
    1f52:	3d 87       	std	Y+13, r19	; 0x0d
				prvAddTaskToReadyQueue( pxTCB );
    1f54:	90 91 ad 3c 	lds	r25, 0x3CAD
    1f58:	98 17       	cp	r25, r24
    1f5a:	10 f4       	brcc	.+4      	; 0x1f60 <vTaskPriorityDisinherit+0x3e>
    1f5c:	80 93 ad 3c 	sts	0x3CAD, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 01       	movw	r18, r24
    1f64:	22 0f       	add	r18, r18
    1f66:	33 1f       	adc	r19, r19
    1f68:	22 0f       	add	r18, r18
    1f6a:	33 1f       	adc	r19, r19
    1f6c:	22 0f       	add	r18, r18
    1f6e:	33 1f       	adc	r19, r19
    1f70:	82 0f       	add	r24, r18
    1f72:	93 1f       	adc	r25, r19
    1f74:	b8 01       	movw	r22, r16
    1f76:	86 52       	subi	r24, 0x26	; 38
    1f78:	93 4c       	sbci	r25, 0xC3	; 195
    1f7a:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
			}
		}
	}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	08 95       	ret

00001f88 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
    1f88:	fc 01       	movw	r30, r24
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1f8a:	62 83       	std	Z+2, r22	; 0x02
    1f8c:	73 83       	std	Z+3, r23	; 0x03
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1f8e:	80 87       	std	Z+8, r24	; 0x08
    1f90:	91 87       	std	Z+9, r25	; 0x09
	
	if( xNextExpiryTime <= xTimeNow )
    1f92:	46 17       	cp	r20, r22
    1f94:	57 07       	cpc	r21, r23
    1f96:	90 f0       	brcs	.+36     	; 0x1fbc <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    1f98:	42 1b       	sub	r20, r18
    1f9a:	53 0b       	sbc	r21, r19
    1f9c:	84 85       	ldd	r24, Z+12	; 0x0c
    1f9e:	95 85       	ldd	r25, Z+13	; 0x0d
    1fa0:	48 17       	cp	r20, r24
    1fa2:	59 07       	cpc	r21, r25
    1fa4:	e0 f4       	brcc	.+56     	; 0x1fde <prvInsertTimerInActiveList+0x56>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1fa6:	bf 01       	movw	r22, r30
    1fa8:	6e 5f       	subi	r22, 0xFE	; 254
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	80 91 e9 3c 	lds	r24, 0x3CE9
    1fb0:	90 91 ea 3c 	lds	r25, 0x3CEA
    1fb4:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	08 95       	ret
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1fbc:	42 17       	cp	r20, r18
    1fbe:	53 07       	cpc	r21, r19
    1fc0:	18 f4       	brcc	.+6      	; 0x1fc8 <prvInsertTimerInActiveList+0x40>
    1fc2:	62 17       	cp	r22, r18
    1fc4:	73 07       	cpc	r23, r19
    1fc6:	68 f4       	brcc	.+26     	; 0x1fe2 <prvInsertTimerInActiveList+0x5a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1fc8:	bf 01       	movw	r22, r30
    1fca:	6e 5f       	subi	r22, 0xFE	; 254
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	80 91 eb 3c 	lds	r24, 0x3CEB
    1fd2:	90 91 ec 3c 	lds	r25, 0x3CEC
    1fd6:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	08 95       	ret
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	08 95       	ret
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    1fe4:	08 95       	ret

00001fe6 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	0f 92       	push	r0
	{
		if( xTimerQueue == NULL )
    1fec:	80 91 e7 3c 	lds	r24, 0x3CE7
    1ff0:	90 91 e8 3c 	lds	r25, 0x3CE8
    1ff4:	89 2b       	or	r24, r25
    1ff6:	e1 f4       	brne	.+56     	; 0x2030 <prvCheckForValidListAndQueue+0x4a>
		{
			vListInitialise( &xActiveTimerList1 );
    1ff8:	86 ef       	ldi	r24, 0xF6	; 246
    1ffa:	9c e3       	ldi	r25, 0x3C	; 60
    1ffc:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    2000:	8d ee       	ldi	r24, 0xED	; 237
    2002:	9c e3       	ldi	r25, 0x3C	; 60
    2004:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    2008:	86 ef       	ldi	r24, 0xF6	; 246
    200a:	9c e3       	ldi	r25, 0x3C	; 60
    200c:	80 93 eb 3c 	sts	0x3CEB, r24
    2010:	90 93 ec 3c 	sts	0x3CEC, r25
			pxOverflowTimerList = &xActiveTimerList2;
    2014:	8d ee       	ldi	r24, 0xED	; 237
    2016:	9c e3       	ldi	r25, 0x3C	; 60
    2018:	80 93 e9 3c 	sts	0x3CE9, r24
    201c:	90 93 ea 3c 	sts	0x3CEA, r25
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
    2020:	65 e0       	ldi	r22, 0x05	; 5
    2022:	80 e1       	ldi	r24, 0x10	; 16
    2024:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueCreate>
    2028:	80 93 e7 3c 	sts	0x3CE7, r24
    202c:	90 93 e8 3c 	sts	0x3CE8, r25
		}
	}
	taskEXIT_CRITICAL();
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	08 95       	ret

00002036 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	0f 93       	push	r16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2044:	d0 df       	rcall	.-96     	; 0x1fe6 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    2046:	80 91 e7 3c 	lds	r24, 0x3CE7
    204a:	90 91 e8 3c 	lds	r25, 0x3CE8
    204e:	89 2b       	or	r24, r25
    2050:	89 f0       	breq	.+34     	; 0x2074 <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
    2052:	a1 2c       	mov	r10, r1
    2054:	b1 2c       	mov	r11, r1
    2056:	c1 2c       	mov	r12, r1
    2058:	d1 2c       	mov	r13, r1
    205a:	e1 2c       	mov	r14, r1
    205c:	f1 2c       	mov	r15, r1
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e4       	ldi	r20, 0x40	; 64
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	66 e8       	ldi	r22, 0x86	; 134
    206a:	70 e2       	ldi	r23, 0x20	; 32
    206c:	8e e2       	ldi	r24, 0x2E	; 46
    206e:	91 e1       	ldi	r25, 0x11	; 17
    2070:	8f da       	rcall	.-2786   	; 0x1590 <xTaskGenericCreate>
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <xTimerCreateTimerTask+0x40>

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
portBASE_TYPE xReturn = pdFAIL;
    2074:	80 e0       	ldi	r24, 0x00	; 0
		#endif
	}

	configASSERT( xReturn );
	return xReturn;
}
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	bf 90       	pop	r11
    2082:	af 90       	pop	r10
    2084:	08 95       	ret

00002086 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
    2086:	9f 92       	push	r9
    2088:	af 92       	push	r10
    208a:	bf 92       	push	r11
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	5c 01       	movw	r10, r24
    209e:	7b 01       	movw	r14, r22
    20a0:	94 2e       	mov	r9, r20
    20a2:	69 01       	movw	r12, r18
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
    20a4:	61 15       	cp	r22, r1
    20a6:	71 05       	cpc	r23, r1
    20a8:	b1 f0       	breq	.+44     	; 0x20d6 <xTimerCreate+0x50>
		pxNewTimer = NULL;
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
    20aa:	83 e1       	ldi	r24, 0x13	; 19
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pvPortMalloc>
    20b2:	ec 01       	movw	r28, r24
		if( pxNewTimer != NULL )
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	89 f0       	breq	.+34     	; 0x20da <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    20b8:	96 df       	rcall	.-212    	; 0x1fe6 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    20ba:	a8 82       	st	Y, r10
    20bc:	b9 82       	std	Y+1, r11	; 0x01
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    20be:	ec 86       	std	Y+12, r14	; 0x0c
    20c0:	fd 86       	std	Y+13, r15	; 0x0d
			pxNewTimer->uxAutoReload = uxAutoReload;
    20c2:	9e 86       	std	Y+14, r9	; 0x0e
			pxNewTimer->pvTimerID = pvTimerID;
    20c4:	cf 86       	std	Y+15, r12	; 0x0f
    20c6:	d8 8a       	std	Y+16, r13	; 0x10
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    20c8:	09 8b       	std	Y+17, r16	; 0x11
    20ca:	1a 8b       	std	Y+18, r17	; 0x12
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    20cc:	ce 01       	movw	r24, r28
    20ce:	02 96       	adiw	r24, 0x02	; 2
    20d0:	0e 94 97 06 	call	0xd2e	; 0xd2e <vListInitialiseItem>
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <xTimerCreate+0x54>
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
	{
		pxNewTimer = NULL;
    20d6:	c0 e0       	ldi	r28, 0x00	; 0
    20d8:	d0 e0       	ldi	r29, 0x00	; 0
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
}
    20da:	ce 01       	movw	r24, r28
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	df 90       	pop	r13
    20ea:	cf 90       	pop	r12
    20ec:	bf 90       	pop	r11
    20ee:	af 90       	pop	r10
    20f0:	9f 90       	pop	r9
    20f2:	08 95       	ret

000020f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	25 97       	sbiw	r28, 0x05	; 5
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	d9 01       	movw	r26, r18
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2108:	e0 91 e7 3c 	lds	r30, 0x3CE7
    210c:	f0 91 e8 3c 	lds	r31, 0x3CE8
    2110:	30 97       	sbiw	r30, 0x00	; 0
    2112:	59 f1       	breq	.+86     	; 0x216a <xTimerGenericCommand+0x76>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2114:	69 83       	std	Y+1, r22	; 0x01
		xMessage.xMessageValue = xOptionalValue;
    2116:	4a 83       	std	Y+2, r20	; 0x02
    2118:	5b 83       	std	Y+3, r21	; 0x03
		xMessage.pxTimer = ( xTIMER * ) xTimer;
    211a:	8c 83       	std	Y+4, r24	; 0x04
    211c:	9d 83       	std	Y+5, r25	; 0x05

		if( pxHigherPriorityTaskWoken == NULL )
    211e:	10 97       	sbiw	r26, 0x00	; 0
    2120:	e1 f4       	brne	.+56     	; 0x215a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2122:	9a de       	rcall	.-716    	; 0x1e58 <xTaskGetSchedulerState>
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	61 f4       	brne	.+24     	; 0x2140 <xTimerGenericCommand+0x4c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	a8 01       	movw	r20, r16
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	80 91 e7 3c 	lds	r24, 0x3CE7
    2136:	90 91 e8 3c 	lds	r25, 0x3CE8
    213a:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    213e:	16 c0       	rjmp	.+44     	; 0x216c <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	be 01       	movw	r22, r28
    2148:	6f 5f       	subi	r22, 0xFF	; 255
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	80 91 e7 3c 	lds	r24, 0x3CE7
    2150:	90 91 e8 3c 	lds	r25, 0x3CE8
    2154:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2158:	09 c0       	rjmp	.+18     	; 0x216c <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	ad 01       	movw	r20, r26
    215e:	be 01       	movw	r22, r28
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	cf 01       	movw	r24, r30
    2166:	15 d8       	rcall	.-4054   	; 0x1192 <xQueueGenericSendFromISR>
    2168:	01 c0       	rjmp	.+2      	; 0x216c <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
    216a:	80 e0       	ldi	r24, 0x00	; 0
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
}
    216c:	25 96       	adiw	r28, 0x05	; 5
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
    217c:	af 92       	push	r10
    217e:	bf 92       	push	r11
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	5c 01       	movw	r10, r24
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
    2192:	17 db       	rcall	.-2514   	; 0x17c2 <xTaskGetTickCount>
    2194:	6c 01       	movw	r12, r24
	
	if( xTimeNow < xLastTime )
    2196:	80 91 e5 3c 	lds	r24, 0x3CE5
    219a:	90 91 e6 3c 	lds	r25, 0x3CE6
    219e:	c8 16       	cp	r12, r24
    21a0:	d9 06       	cpc	r13, r25
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <prvSampleTimeNow+0x2a>
    21a4:	49 c0       	rjmp	.+146    	; 0x2238 <prvSampleTimeNow+0xbc>
    21a6:	31 c0       	rjmp	.+98     	; 0x220a <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    21a8:	a5 81       	ldd	r26, Z+5	; 0x05
    21aa:	b6 81       	ldd	r27, Z+6	; 0x06
    21ac:	ed 90       	ld	r14, X+
    21ae:	fc 90       	ld	r15, X

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    21b0:	05 80       	ldd	r0, Z+5	; 0x05
    21b2:	f6 81       	ldd	r31, Z+6	; 0x06
    21b4:	e0 2d       	mov	r30, r0
    21b6:	c6 81       	ldd	r28, Z+6	; 0x06
    21b8:	d7 81       	ldd	r29, Z+7	; 0x07
		vListRemove( &( pxTimer->xTimerListItem ) );
    21ba:	8e 01       	movw	r16, r28
    21bc:	0e 5f       	subi	r16, 0xFE	; 254
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	c8 01       	movw	r24, r16
    21c2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    21c6:	e9 89       	ldd	r30, Y+17	; 0x11
    21c8:	fa 89       	ldd	r31, Y+18	; 0x12
    21ca:	ce 01       	movw	r24, r28
    21cc:	19 95       	eicall

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    21ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	d9 f4       	brne	.+54     	; 0x220a <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    21d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    21d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    21d8:	8e 0d       	add	r24, r14
    21da:	9f 1d       	adc	r25, r15
			if( xReloadTime > xNextExpireTime )
    21dc:	e8 16       	cp	r14, r24
    21de:	f9 06       	cpc	r15, r25
    21e0:	60 f4       	brcc	.+24     	; 0x21fa <prvSampleTimeNow+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	9b 83       	std	Y+3, r25	; 0x03
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    21e6:	c8 87       	std	Y+8, r28	; 0x08
    21e8:	d9 87       	std	Y+9, r29	; 0x09
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    21ea:	b8 01       	movw	r22, r16
    21ec:	80 91 eb 3c 	lds	r24, 0x3CEB
    21f0:	90 91 ec 3c 	lds	r25, 0x3CEC
    21f4:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
    21f8:	08 c0       	rjmp	.+16     	; 0x220a <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    21fa:	00 e0       	ldi	r16, 0x00	; 0
    21fc:	10 e0       	ldi	r17, 0x00	; 0
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	a7 01       	movw	r20, r14
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	ce 01       	movw	r24, r28
    2208:	75 df       	rcall	.-278    	; 0x20f4 <xTimerGenericCommand>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    220a:	e0 91 eb 3c 	lds	r30, 0x3CEB
    220e:	f0 91 ec 3c 	lds	r31, 0x3CEC
    2212:	80 81       	ld	r24, Z
    2214:	81 11       	cpse	r24, r1
    2216:	c8 cf       	rjmp	.-112    	; 0x21a8 <prvSampleTimeNow+0x2c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    2218:	80 91 e9 3c 	lds	r24, 0x3CE9
    221c:	90 91 ea 3c 	lds	r25, 0x3CEA
    2220:	80 93 eb 3c 	sts	0x3CEB, r24
    2224:	90 93 ec 3c 	sts	0x3CEC, r25
	pxOverflowTimerList = pxTemp;
    2228:	e0 93 e9 3c 	sts	0x3CE9, r30
    222c:	f0 93 ea 3c 	sts	0x3CEA, r31
	xTimeNow = xTaskGetTickCount();
	
	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	f5 01       	movw	r30, r10
    2234:	80 83       	st	Z, r24
    2236:	02 c0       	rjmp	.+4      	; 0x223c <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2238:	f5 01       	movw	r30, r10
    223a:	10 82       	st	Z, r1
	}
	
	xLastTime = xTimeNow;
    223c:	c0 92 e5 3c 	sts	0x3CE5, r12
    2240:	d0 92 e6 3c 	sts	0x3CE6, r13
	
	return xTimeNow;
}
    2244:	c6 01       	movw	r24, r12
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	df 90       	pop	r13
    2254:	cf 90       	pop	r12
    2256:	bf 90       	pop	r11
    2258:	af 90       	pop	r10
    225a:	08 95       	ret

0000225c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	00 d0       	rcall	.+0      	; 0x2262 <prvTimerTask+0x6>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <prvTimerTask+0x8>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2268:	ce 01       	movw	r24, r28
    226a:	01 96       	adiw	r24, 0x01	; 1
    226c:	5c 01       	movw	r10, r24

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    226e:	88 2e       	mov	r8, r24
    2270:	9b 2c       	mov	r9, r11
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2272:	e0 91 eb 3c 	lds	r30, 0x3CEB
    2276:	f0 91 ec 3c 	lds	r31, 0x3CEC
    227a:	80 81       	ld	r24, Z
	if( *pxListWasEmpty == pdFALSE )
    227c:	88 23       	and	r24, r24
    227e:	09 f4       	brne	.+2      	; 0x2282 <prvTimerTask+0x26>
    2280:	b1 c0       	rjmp	.+354    	; 0x23e4 <prvTimerTask+0x188>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2282:	05 80       	ldd	r0, Z+5	; 0x05
    2284:	f6 81       	ldd	r31, Z+6	; 0x06
    2286:	e0 2d       	mov	r30, r0
    2288:	e0 80       	ld	r14, Z
    228a:	f1 80       	ldd	r15, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    228c:	94 da       	rcall	.-2776   	; 0x17b6 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    228e:	c5 01       	movw	r24, r10
    2290:	75 df       	rcall	.-278    	; 0x217c <prvSampleTimeNow>
    2292:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	81 11       	cpse	r24, r1
    2298:	43 c0       	rjmp	.+134    	; 0x2320 <prvTimerTask+0xc4>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    229a:	0e 15       	cp	r16, r14
    229c:	1f 05       	cpc	r17, r15
    229e:	90 f1       	brcs	.+100    	; 0x2304 <prvTimerTask+0xa8>
			{
				xTaskResumeAll();
    22a0:	5e db       	rcall	.-2372   	; 0x195e <xTaskResumeAll>
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    22a2:	e0 91 eb 3c 	lds	r30, 0x3CEB
    22a6:	f0 91 ec 3c 	lds	r31, 0x3CEC
    22aa:	05 80       	ldd	r0, Z+5	; 0x05
    22ac:	f6 81       	ldd	r31, Z+6	; 0x06
    22ae:	e0 2d       	mov	r30, r0
    22b0:	c6 80       	ldd	r12, Z+6	; 0x06
    22b2:	d7 80       	ldd	r13, Z+7	; 0x07
	vListRemove( &( pxTimer->xTimerListItem ) );
    22b4:	c6 01       	movw	r24, r12
    22b6:	02 96       	adiw	r24, 0x02	; 2
    22b8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    22bc:	d6 01       	movw	r26, r12
    22be:	1e 96       	adiw	r26, 0x0e	; 14
    22c0:	8c 91       	ld	r24, X
    22c2:	1e 97       	sbiw	r26, 0x0e	; 14
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	a1 f4       	brne	.+40     	; 0x22f0 <prvTimerTask+0x94>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    22c8:	1c 96       	adiw	r26, 0x0c	; 12
    22ca:	6d 91       	ld	r22, X+
    22cc:	7c 91       	ld	r23, X
    22ce:	1d 97       	sbiw	r26, 0x0d	; 13
    22d0:	6e 0d       	add	r22, r14
    22d2:	7f 1d       	adc	r23, r15
    22d4:	97 01       	movw	r18, r14
    22d6:	a8 01       	movw	r20, r16
    22d8:	c6 01       	movw	r24, r12
    22da:	56 de       	rcall	.-852    	; 0x1f88 <prvInsertTimerInActiveList>
    22dc:	81 30       	cpi	r24, 0x01	; 1
    22de:	41 f4       	brne	.+16     	; 0x22f0 <prvTimerTask+0x94>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    22e0:	00 e0       	ldi	r16, 0x00	; 0
    22e2:	10 e0       	ldi	r17, 0x00	; 0
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	a7 01       	movw	r20, r14
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	c6 01       	movw	r24, r12
    22ee:	02 df       	rcall	.-508    	; 0x20f4 <xTimerGenericCommand>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    22f0:	d6 01       	movw	r26, r12
    22f2:	51 96       	adiw	r26, 0x11	; 17
    22f4:	ed 91       	ld	r30, X+
    22f6:	fc 91       	ld	r31, X
    22f8:	52 97       	sbiw	r26, 0x12	; 18
    22fa:	c6 01       	movw	r24, r12
    22fc:	19 95       	eicall
    22fe:	11 c0       	rjmp	.+34     	; 0x2322 <prvTimerTask+0xc6>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
    2300:	e1 2c       	mov	r14, r1
    2302:	f1 2c       	mov	r15, r1
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    2304:	b7 01       	movw	r22, r14
    2306:	60 1b       	sub	r22, r16
    2308:	71 0b       	sbc	r23, r17
    230a:	80 91 e7 3c 	lds	r24, 0x3CE7
    230e:	90 91 e8 3c 	lds	r25, 0x3CE8
    2312:	4a d8       	rcall	.-3948   	; 0x13a8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    2314:	24 db       	rcall	.-2488   	; 0x195e <xTaskResumeAll>
    2316:	81 11       	cpse	r24, r1
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <prvTimerTask+0xc6>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    231a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <prvTimerTask+0xc6>
				}
			}
		}
		else
		{
			xTaskResumeAll();
    2320:	1e db       	rcall	.-2500   	; 0x195e <xTaskResumeAll>
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2322:	ce 01       	movw	r24, r28
    2324:	06 96       	adiw	r24, 0x06	; 6
    2326:	2a df       	rcall	.-428    	; 0x217c <prvSampleTimeNow>
    2328:	6c 01       	movw	r12, r24
    232a:	4e c0       	rjmp	.+156    	; 0x23c8 <prvTimerTask+0x16c>

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
    232c:	ec 80       	ldd	r14, Y+4	; 0x04
    232e:	fd 80       	ldd	r15, Y+5	; 0x05

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
    2330:	e1 14       	cp	r14, r1
    2332:	f1 04       	cpc	r15, r1
    2334:	59 f0       	breq	.+22     	; 0x234c <prvTimerTask+0xf0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2336:	d7 01       	movw	r26, r14
    2338:	1a 96       	adiw	r26, 0x0a	; 10
    233a:	ed 91       	ld	r30, X+
    233c:	fc 91       	ld	r31, X
    233e:	1b 97       	sbiw	r26, 0x0b	; 11
    2340:	ef 2b       	or	r30, r31
    2342:	21 f0       	breq	.+8      	; 0x234c <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
    2344:	c7 01       	movw	r24, r14
    2346:	02 96       	adiw	r24, 0x02	; 2
    2348:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	49 f1       	breq	.+82     	; 0x23a4 <prvTimerTask+0x148>
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	b1 f1       	breq	.+108    	; 0x23c2 <prvTimerTask+0x166>
    2356:	81 11       	cpse	r24, r1
    2358:	37 c0       	rjmp	.+110    	; 0x23c8 <prvTimerTask+0x16c>
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
    235a:	2a 81       	ldd	r18, Y+2	; 0x02
    235c:	3b 81       	ldd	r19, Y+3	; 0x03
    235e:	f7 01       	movw	r30, r14
    2360:	64 85       	ldd	r22, Z+12	; 0x0c
    2362:	75 85       	ldd	r23, Z+13	; 0x0d
    2364:	62 0f       	add	r22, r18
    2366:	73 1f       	adc	r23, r19
    2368:	a6 01       	movw	r20, r12
    236a:	c7 01       	movw	r24, r14
    236c:	0d de       	rcall	.-998    	; 0x1f88 <prvInsertTimerInActiveList>
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	59 f5       	brne	.+86     	; 0x23c8 <prvTimerTask+0x16c>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    2372:	d7 01       	movw	r26, r14
    2374:	51 96       	adiw	r26, 0x11	; 17
    2376:	ed 91       	ld	r30, X+
    2378:	fc 91       	ld	r31, X
    237a:	52 97       	sbiw	r26, 0x12	; 18
    237c:	c7 01       	movw	r24, r14
    237e:	19 95       	eicall

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    2380:	f7 01       	movw	r30, r14
    2382:	86 85       	ldd	r24, Z+14	; 0x0e
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	01 f5       	brne	.+64     	; 0x23c8 <prvTimerTask+0x16c>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2388:	44 85       	ldd	r20, Z+12	; 0x0c
    238a:	55 85       	ldd	r21, Z+13	; 0x0d
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	48 0f       	add	r20, r24
    2392:	59 1f       	adc	r21, r25
    2394:	00 e0       	ldi	r16, 0x00	; 0
    2396:	10 e0       	ldi	r17, 0x00	; 0
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	c7 01       	movw	r24, r14
    23a0:	a9 de       	rcall	.-686    	; 0x20f4 <xTimerGenericCommand>
    23a2:	12 c0       	rjmp	.+36     	; 0x23c8 <prvTimerTask+0x16c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
    23a4:	2a 81       	ldd	r18, Y+2	; 0x02
    23a6:	3b 81       	ldd	r19, Y+3	; 0x03
    23a8:	d7 01       	movw	r26, r14
    23aa:	1c 96       	adiw	r26, 0x0c	; 12
    23ac:	2d 93       	st	X+, r18
    23ae:	3c 93       	st	X, r19
    23b0:	1d 97       	sbiw	r26, 0x0d	; 13
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    23b2:	b6 01       	movw	r22, r12
    23b4:	62 0f       	add	r22, r18
    23b6:	73 1f       	adc	r23, r19
    23b8:	96 01       	movw	r18, r12
    23ba:	a6 01       	movw	r20, r12
    23bc:	c7 01       	movw	r24, r14
    23be:	e4 dd       	rcall	.-1080   	; 0x1f88 <prvInsertTimerInActiveList>
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <prvTimerTask+0x16c>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
    23c2:	c7 01       	movw	r24, r14
    23c4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <vPortFree>

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	68 2d       	mov	r22, r8
    23d0:	79 2d       	mov	r23, r9
    23d2:	80 91 e7 3c 	lds	r24, 0x3CE7
    23d6:	90 91 e8 3c 	lds	r25, 0x3CE8
    23da:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    23de:	81 11       	cpse	r24, r1
    23e0:	a5 cf       	rjmp	.-182    	; 0x232c <prvTimerTask+0xd0>
    23e2:	47 cf       	rjmp	.-370    	; 0x2272 <prvTimerTask+0x16>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    23e4:	e8 d9       	rcall	.-3120   	; 0x17b6 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    23e6:	c5 01       	movw	r24, r10
    23e8:	c9 de       	rcall	.-622    	; 0x217c <prvSampleTimeNow>
    23ea:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	88 23       	and	r24, r24
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <prvTimerTask+0x198>
    23f2:	86 cf       	rjmp	.-244    	; 0x2300 <prvTimerTask+0xa4>
    23f4:	95 cf       	rjmp	.-214    	; 0x2320 <prvTimerTask+0xc4>

000023f6 <csp_malloc>:

/* FreeRTOS includes */
#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
	return pvPortMalloc(size);
    23f6:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <pvPortMalloc>
}
    23fa:	08 95       	ret

000023fc <csp_free>:

void csp_free(void *ptr) {
	vPortFree(ptr);
    23fc:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <vPortFree>
    2400:	08 95       	ret

00002402 <csp_queue_create>:
	return xQueueReceive(handle, buf, timeout);
}

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
	return xQueueReceiveFromISR(handle, buf, (signed CSP_BASE_TYPE *)task_woken);
}
    2402:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <xQueueCreate>
    2406:	08 95       	ret

00002408 <csp_queue_enqueue>:
    2408:	fb 01       	movw	r30, r22
    240a:	ba 01       	movw	r22, r20
    240c:	a9 01       	movw	r20, r18
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	bf 01       	movw	r22, r30
    2412:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2416:	99 27       	eor	r25, r25
    2418:	87 fd       	sbrc	r24, 7
    241a:	90 95       	com	r25
    241c:	08 95       	ret

0000241e <csp_queue_enqueue_isr>:
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    2424:	99 27       	eor	r25, r25
    2426:	87 fd       	sbrc	r24, 7
    2428:	90 95       	com	r25
    242a:	08 95       	ret

0000242c <csp_queue_dequeue>:
    242c:	fb 01       	movw	r30, r22
    242e:	ba 01       	movw	r22, r20
    2430:	a9 01       	movw	r20, r18
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	bf 01       	movw	r22, r30
    2436:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    243a:	99 27       	eor	r25, r25
    243c:	87 fd       	sbrc	r24, 7
    243e:	90 95       	com	r25
    2440:	08 95       	ret

00002442 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
	return uxQueueMessagesWaiting(handle);
    2442:	0e 94 cc 09 	call	0x1398	; 0x1398 <uxQueueMessagesWaiting>
}
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	08 95       	ret

0000244a <csp_mutex_create>:
	return csp_bin_sem_remove(mutex);
}

int csp_mutex_lock(csp_mutex_t * mutex, uint32_t timeout) {
	return csp_bin_sem_wait(mutex, timeout);
}
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	ec 01       	movw	r28, r24
    2450:	0e 94 a1 08 	call	0x1142	; 0x1142 <xQueueCreateMutex>
    2454:	9c 01       	movw	r18, r24
    2456:	88 83       	st	Y, r24
    2458:	99 83       	std	Y+1, r25	; 0x01
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	23 2b       	or	r18, r19
    2460:	11 f4       	brne	.+4      	; 0x2466 <csp_mutex_create+0x1c>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	08 95       	ret

0000246c <csp_bin_sem_create>:
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ec 01       	movw	r28, r24
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueCreate>
    247a:	88 83       	st	Y, r24
    247c:	99 83       	std	Y+1, r25	; 0x01
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	39 f0       	breq	.+14     	; 0x2490 <csp_bin_sem_create+0x24>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	08 95       	ret

0000249a <csp_bin_sem_wait>:
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	fc 01       	movw	r30, r24
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    24aa:	21 e0       	ldi	r18, 0x01	; 1
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	11 f0       	breq	.+4      	; 0x24b6 <csp_bin_sem_wait+0x1c>
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	c9 01       	movw	r24, r18
    24b8:	08 95       	ret

000024ba <csp_bin_sem_post>:
	}
}

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
	csp_log_lock("Post: %p\r\n", sem);
	if (xSemaphoreGive(*sem) == pdPASS) {
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	fc 01       	movw	r30, r24
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	11 f0       	breq	.+4      	; 0x24da <csp_bin_sem_post+0x20>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
		return CSP_SEMAPHORE_OK;
	} else {
		return CSP_SEMAPHORE_ERROR;
	}
}
    24da:	c9 01       	movw	r24, r18
    24dc:	08 95       	ret

000024de <csp_sys_tasklist>:

#include <csp/arch/csp_system.h>

int csp_sys_tasklist(char * out) {
#if FREERTOS_VERSION < 8
	vTaskList((signed char *) out);
    24de:	e2 da       	rcall	.-2620   	; 0x1aa4 <vTaskList>
#else
	vTaskList(out);
#endif
	return CSP_ERR_NONE;
}
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	08 95       	ret

000024e6 <csp_sys_tasklist_size>:

int csp_sys_tasklist_size(void) {
	return 40 * uxTaskGetNumberOfTasks();
    24e6:	77 d9       	rcall	.-3346   	; 0x17d6 <uxTaskGetNumberOfTasks>
}
    24e8:	28 e2       	ldi	r18, 0x28	; 40
    24ea:	82 9f       	mul	r24, r18
    24ec:	c0 01       	movw	r24, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	08 95       	ret

000024f2 <csp_sys_memfree>:

uint32_t csp_sys_memfree(void) {
    24f2:	4f 92       	push	r4
    24f4:	5f 92       	push	r5
    24f6:	6f 92       	push	r6
    24f8:	7f 92       	push	r7
    24fa:	8f 92       	push	r8
    24fc:	9f 92       	push	r9
    24fe:	af 92       	push	r10
    2500:	bf 92       	push	r11
    2502:	cf 92       	push	r12
    2504:	df 92       	push	r13
    2506:	ef 92       	push	r14
    2508:	ff 92       	push	r15

	uint32_t total = 0, max = UINT32_MAX, size;
	void * pmem;

	/* If size_t is less than 32 bits, start with 10 KiB */
	size = sizeof(uint32_t) > sizeof(size_t) ? 10000 : 1000000;
    250a:	0f 2e       	mov	r0, r31
    250c:	f0 e1       	ldi	r31, 0x10	; 16
    250e:	cf 2e       	mov	r12, r31
    2510:	f7 e2       	ldi	r31, 0x27	; 39
    2512:	df 2e       	mov	r13, r31
    2514:	e1 2c       	mov	r14, r1
    2516:	f1 2c       	mov	r15, r1
    2518:	f0 2d       	mov	r31, r0
	return 40 * uxTaskGetNumberOfTasks();
}

uint32_t csp_sys_memfree(void) {

	uint32_t total = 0, max = UINT32_MAX, size;
    251a:	44 24       	eor	r4, r4
    251c:	4a 94       	dec	r4
    251e:	54 2c       	mov	r5, r4
    2520:	32 01       	movw	r6, r4
    2522:	81 2c       	mov	r8, r1
    2524:	91 2c       	mov	r9, r1
    2526:	54 01       	movw	r10, r8

	/* If size_t is less than 32 bits, start with 10 KiB */
	size = sizeof(uint32_t) > sizeof(size_t) ? 10000 : 1000000;

	while (1) {
		pmem = pvPortMalloc(size + total);
    2528:	c4 01       	movw	r24, r8
    252a:	8c 0d       	add	r24, r12
    252c:	9d 1d       	adc	r25, r13
    252e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pvPortMalloc>
		if (pmem == NULL) {
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	59 f4       	brne	.+22     	; 0x254c <csp_sys_memfree+0x5a>
			max = size + total;
    2536:	26 01       	movw	r4, r12
    2538:	37 01       	movw	r6, r14
    253a:	48 0c       	add	r4, r8
    253c:	59 1c       	adc	r5, r9
    253e:	6a 1c       	adc	r6, r10
    2540:	7b 1c       	adc	r7, r11
			size = size / 2;
    2542:	f6 94       	lsr	r15
    2544:	e7 94       	ror	r14
    2546:	d7 94       	ror	r13
    2548:	c7 94       	ror	r12
    254a:	15 c0       	rjmp	.+42     	; 0x2576 <csp_sys_memfree+0x84>
		} else {
			total += size;
    254c:	8c 0c       	add	r8, r12
    254e:	9d 1c       	adc	r9, r13
    2550:	ae 1c       	adc	r10, r14
    2552:	bf 1c       	adc	r11, r15
			if (total + size >= max)
    2554:	b5 01       	movw	r22, r10
    2556:	a4 01       	movw	r20, r8
    2558:	4c 0d       	add	r20, r12
    255a:	5d 1d       	adc	r21, r13
    255c:	6e 1d       	adc	r22, r14
    255e:	7f 1d       	adc	r23, r15
    2560:	44 15       	cp	r20, r4
    2562:	55 05       	cpc	r21, r5
    2564:	66 05       	cpc	r22, r6
    2566:	77 05       	cpc	r23, r7
    2568:	20 f0       	brcs	.+8      	; 0x2572 <csp_sys_memfree+0x80>
				size = size / 2;
    256a:	f6 94       	lsr	r15
    256c:	e7 94       	ror	r14
    256e:	d7 94       	ror	r13
    2570:	c7 94       	ror	r12
			vPortFree(pmem);
    2572:	0e 94 1e 05 	call	0xa3c	; 0xa3c <vPortFree>
		}
		if (size < 32) break;
    2576:	80 e2       	ldi	r24, 0x20	; 32
    2578:	c8 16       	cp	r12, r24
    257a:	d1 04       	cpc	r13, r1
    257c:	e1 04       	cpc	r14, r1
    257e:	f1 04       	cpc	r15, r1
    2580:	98 f6       	brcc	.-90     	; 0x2528 <csp_sys_memfree+0x36>
	}

	return total;
}
    2582:	c5 01       	movw	r24, r10
    2584:	b4 01       	movw	r22, r8
    2586:	ff 90       	pop	r15
    2588:	ef 90       	pop	r14
    258a:	df 90       	pop	r13
    258c:	cf 90       	pop	r12
    258e:	bf 90       	pop	r11
    2590:	af 90       	pop	r10
    2592:	9f 90       	pop	r9
    2594:	8f 90       	pop	r8
    2596:	7f 90       	pop	r7
    2598:	6f 90       	pop	r6
    259a:	5f 90       	pop	r5
    259c:	4f 90       	pop	r4
    259e:	08 95       	ret

000025a0 <csp_sys_reboot>:

int csp_sys_reboot(void) {

	extern void __attribute__((weak)) cpu_set_reset_cause(unsigned int);
	if (cpu_set_reset_cause)
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	89 2b       	or	r24, r25
    25a6:	21 f0       	breq	.+8      	; 0x25b0 <csp_sys_reboot+0x10>
		cpu_set_reset_cause(1);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
	
	extern void __attribute__((weak)) cpu_reset(void);
	if (cpu_reset) {
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	89 2b       	or	r24, r25
    25b6:	19 f0       	breq	.+6      	; 0x25be <csp_sys_reboot+0x1e>
		cpu_reset();
    25b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    25bc:	ff cf       	rjmp	.-2      	; 0x25bc <csp_sys_reboot+0x1c>
	}
	
	csp_log_error("Failed to reboot\r\n");

	return CSP_ERR_INVAL;
}
    25be:	8e ef       	ldi	r24, 0xFE	; 254
    25c0:	9f ef       	ldi	r25, 0xFF	; 255
    25c2:	08 95       	ret

000025c4 <csp_thread_create>:
/* CSP includes */
#include <csp/csp.h>

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_return_t (* routine)(void *), const signed char * const thread_name, unsigned short stack_depth, void * parameters, unsigned int priority, csp_thread_handle_t * handle) {
    25c4:	af 92       	push	r10
    25c6:	bf 92       	push	r11
    25c8:	cf 92       	push	r12
    25ca:	df 92       	push	r13
    25cc:	ef 92       	push	r14
    25ce:	ff 92       	push	r15
    25d0:	0f 93       	push	r16
#if (FREERTOS_VERSION >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, (char *) thread_name, stack_depth, parameters, priority, handle);
#else
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_depth, parameters, priority, handle);
    25d2:	a1 2c       	mov	r10, r1
    25d4:	b1 2c       	mov	r11, r1
    25d6:	c1 2c       	mov	r12, r1
    25d8:	d1 2c       	mov	r13, r1
    25da:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
#endif
	if (ret != pdTRUE)
    25de:	21 e0       	ldi	r18, 0x01	; 1
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	11 f4       	brne	.+4      	; 0x25ea <csp_thread_create+0x26>
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
		return CSP_ERR_NOMEM;
	return CSP_ERR_NONE;
}
    25ea:	88 27       	eor	r24, r24
    25ec:	99 27       	eor	r25, r25
    25ee:	82 1b       	sub	r24, r18
    25f0:	93 0b       	sbc	r25, r19
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	df 90       	pop	r13
    25fa:	cf 90       	pop	r12
    25fc:	bf 90       	pop	r11
    25fe:	af 90       	pop	r10
    2600:	08 95       	ret

00002602 <csp_get_ms>:
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
}

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
}
    2602:	df d8       	rcall	.-3650   	; 0x17c2 <xTaskGetTickCount>
    2604:	bc 01       	movw	r22, r24
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	08 95       	ret

0000260c <csp_get_s>:

uint32_t csp_get_s(void) {
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
    260c:	da d8       	rcall	.-3660   	; 0x17c2 <xTaskGetTickCount>
    260e:	9c 01       	movw	r18, r24
    2610:	36 95       	lsr	r19
    2612:	27 95       	ror	r18
    2614:	36 95       	lsr	r19
    2616:	27 95       	ror	r18
    2618:	36 95       	lsr	r19
    261a:	27 95       	ror	r18
    261c:	a5 ec       	ldi	r26, 0xC5	; 197
    261e:	b0 e2       	ldi	r27, 0x20	; 32
    2620:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <__umulhisi3>
    2624:	92 95       	swap	r25
    2626:	82 95       	swap	r24
    2628:	8f 70       	andi	r24, 0x0F	; 15
    262a:	89 27       	eor	r24, r25
    262c:	9f 70       	andi	r25, 0x0F	; 15
    262e:	89 27       	eor	r24, r25
    2630:	bc 01       	movw	r22, r24
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
}
    2636:	08 95       	ret

00002638 <csp_buffer_init>:
	if (clone)
		memcpy(clone, packet, size);

	return clone;

}
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	1f 92       	push	r1
    264a:	1f 92       	push	r1
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	80 93 01 3d 	sts	0x3D01, r24
    2654:	90 93 02 3d 	sts	0x3D02, r25
    2658:	60 93 ff 3c 	sts	0x3CFF, r22
    265c:	70 93 00 3d 	sts	0x3D00, r23
    2660:	6b 01       	movw	r12, r22
    2662:	25 e0       	ldi	r18, 0x05	; 5
    2664:	c2 0e       	add	r12, r18
    2666:	d1 1c       	adc	r13, r1
    2668:	e8 94       	clt
    266a:	c0 f8       	bld	r12, 0
    266c:	c8 9e       	mul	r12, r24
    266e:	80 01       	movw	r16, r0
    2670:	c9 9e       	mul	r12, r25
    2672:	10 0d       	add	r17, r0
    2674:	d8 9e       	mul	r13, r24
    2676:	10 0d       	add	r17, r0
    2678:	11 24       	eor	r1, r1
    267a:	c8 01       	movw	r24, r16
    267c:	bc de       	rcall	.-648    	; 0x23f6 <csp_malloc>
    267e:	80 93 03 3d 	sts	0x3D03, r24
    2682:	90 93 04 3d 	sts	0x3D04, r25
    2686:	89 2b       	or	r24, r25
    2688:	09 f4       	brne	.+2      	; 0x268c <csp_buffer_init+0x54>
    268a:	4d c0       	rjmp	.+154    	; 0x2726 <csp_buffer_init+0xee>
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	80 91 01 3d 	lds	r24, 0x3D01
    2694:	90 91 02 3d 	lds	r25, 0x3D02
    2698:	b4 de       	rcall	.-664    	; 0x2402 <csp_queue_create>
    269a:	80 93 05 3d 	sts	0x3D05, r24
    269e:	90 93 06 3d 	sts	0x3D06, r25
    26a2:	89 2b       	or	r24, r25
    26a4:	c1 f1       	breq	.+112    	; 0x2716 <csp_buffer_init+0xde>
    26a6:	a8 01       	movw	r20, r16
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	80 91 03 3d 	lds	r24, 0x3D03
    26b0:	90 91 04 3d 	lds	r25, 0x3D04
    26b4:	0e 94 ed 2b 	call	0x57da	; 0x57da <memset>
    26b8:	80 91 01 3d 	lds	r24, 0x3D01
    26bc:	90 91 02 3d 	lds	r25, 0x3D02
    26c0:	89 2b       	or	r24, r25
    26c2:	a1 f1       	breq	.+104    	; 0x272c <csp_buffer_init+0xf4>
    26c4:	e1 2c       	mov	r14, r1
    26c6:	f1 2c       	mov	r15, r1
    26c8:	00 e0       	ldi	r16, 0x00	; 0
    26ca:	10 e0       	ldi	r17, 0x00	; 0
    26cc:	e0 91 03 3d 	lds	r30, 0x3D03
    26d0:	f0 91 04 3d 	lds	r31, 0x3D04
    26d4:	ee 0d       	add	r30, r14
    26d6:	ff 1d       	adc	r31, r15
    26d8:	e9 83       	std	Y+1, r30	; 0x01
    26da:	fa 83       	std	Y+2, r31	; 0x02
    26dc:	10 82       	st	Z, r1
    26de:	11 82       	std	Z+1, r1	; 0x01
    26e0:	e9 81       	ldd	r30, Y+1	; 0x01
    26e2:	fa 81       	ldd	r31, Y+2	; 0x02
    26e4:	e2 83       	std	Z+2, r30	; 0x02
    26e6:	f3 83       	std	Z+3, r31	; 0x03
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	a9 01       	movw	r20, r18
    26ee:	be 01       	movw	r22, r28
    26f0:	6f 5f       	subi	r22, 0xFF	; 255
    26f2:	7f 4f       	sbci	r23, 0xFF	; 255
    26f4:	80 91 05 3d 	lds	r24, 0x3D05
    26f8:	90 91 06 3d 	lds	r25, 0x3D06
    26fc:	85 de       	rcall	.-758    	; 0x2408 <csp_queue_enqueue>
    26fe:	0f 5f       	subi	r16, 0xFF	; 255
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	ec 0c       	add	r14, r12
    2704:	fd 1c       	adc	r15, r13
    2706:	80 91 01 3d 	lds	r24, 0x3D01
    270a:	90 91 02 3d 	lds	r25, 0x3D02
    270e:	08 17       	cp	r16, r24
    2710:	19 07       	cpc	r17, r25
    2712:	e0 f2       	brcs	.-72     	; 0x26cc <csp_buffer_init+0x94>
    2714:	0e c0       	rjmp	.+28     	; 0x2732 <csp_buffer_init+0xfa>
    2716:	80 91 03 3d 	lds	r24, 0x3D03
    271a:	90 91 04 3d 	lds	r25, 0x3D04
    271e:	6e de       	rcall	.-804    	; 0x23fc <csp_free>
    2720:	8f ef       	ldi	r24, 0xFF	; 255
    2722:	9f ef       	ldi	r25, 0xFF	; 255
    2724:	08 c0       	rjmp	.+16     	; 0x2736 <csp_buffer_init+0xfe>
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	9f ef       	ldi	r25, 0xFF	; 255
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <csp_buffer_init+0xfe>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <csp_buffer_init+0xfe>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	ff 90       	pop	r15
    2744:	ef 90       	pop	r14
    2746:	df 90       	pop	r13
    2748:	cf 90       	pop	r12
    274a:	08 95       	ret

0000274c <csp_buffer_get>:
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	1f 92       	push	r1
    2752:	1f 92       	push	r1
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	19 82       	std	Y+1, r1	; 0x01
    275a:	1a 82       	std	Y+2, r1	; 0x02
    275c:	0e 96       	adiw	r24, 0x0e	; 14
    275e:	20 91 ff 3c 	lds	r18, 0x3CFF
    2762:	30 91 00 3d 	lds	r19, 0x3D00
    2766:	28 17       	cp	r18, r24
    2768:	39 07       	cpc	r19, r25
    276a:	e8 f0       	brcs	.+58     	; 0x27a6 <csp_buffer_get+0x5a>
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	a9 01       	movw	r20, r18
    2772:	be 01       	movw	r22, r28
    2774:	6f 5f       	subi	r22, 0xFF	; 255
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	80 91 05 3d 	lds	r24, 0x3D05
    277c:	90 91 06 3d 	lds	r25, 0x3D06
    2780:	55 de       	rcall	.-854    	; 0x242c <csp_queue_dequeue>
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	30 97       	sbiw	r30, 0x00	; 0
    2788:	89 f0       	breq	.+34     	; 0x27ac <csp_buffer_get+0x60>
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	e8 17       	cp	r30, r24
    2790:	f9 07       	cpc	r31, r25
    2792:	79 f4       	brne	.+30     	; 0x27b2 <csp_buffer_get+0x66>
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	80 83       	st	Z, r24
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	04 96       	adiw	r24, 0x04	; 4
    27a4:	08 c0       	rjmp	.+16     	; 0x27b6 <csp_buffer_get+0x6a>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <csp_buffer_get+0x6a>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <csp_buffer_get+0x6a>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	08 95       	ret

000027c0 <csp_buffer_free_isr>:
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <csp_buffer_free_isr+0x6>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	19 82       	std	Y+1, r1	; 0x01
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	51 f1       	breq	.+84     	; 0x2824 <csp_buffer_free_isr+0x64>
    27d0:	9c 01       	movw	r18, r24
    27d2:	24 50       	subi	r18, 0x04	; 4
    27d4:	31 09       	sbc	r19, r1
    27d6:	2a 83       	std	Y+2, r18	; 0x02
    27d8:	3b 83       	std	Y+3, r19	; 0x03
    27da:	20 fd       	sbrc	r18, 0
    27dc:	23 c0       	rjmp	.+70     	; 0x2824 <csp_buffer_free_isr+0x64>
    27de:	f9 01       	movw	r30, r18
    27e0:	42 81       	ldd	r20, Z+2	; 0x02
    27e2:	53 81       	ldd	r21, Z+3	; 0x03
    27e4:	24 17       	cp	r18, r20
    27e6:	35 07       	cpc	r19, r21
    27e8:	e9 f4       	brne	.+58     	; 0x2824 <csp_buffer_free_isr+0x64>
    27ea:	f9 01       	movw	r30, r18
    27ec:	20 81       	ld	r18, Z
    27ee:	31 81       	ldd	r19, Z+1	; 0x01
    27f0:	21 15       	cp	r18, r1
    27f2:	31 05       	cpc	r19, r1
    27f4:	b9 f0       	breq	.+46     	; 0x2824 <csp_buffer_free_isr+0x64>
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	28 f0       	brcs	.+10     	; 0x2806 <csp_buffer_free_isr+0x46>
    27fc:	21 50       	subi	r18, 0x01	; 1
    27fe:	31 09       	sbc	r19, r1
    2800:	20 83       	st	Z, r18
    2802:	31 83       	std	Z+1, r19	; 0x01
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <csp_buffer_free_isr+0x64>
    2806:	fc 01       	movw	r30, r24
    2808:	34 97       	sbiw	r30, 0x04	; 4
    280a:	10 82       	st	Z, r1
    280c:	11 82       	std	Z+1, r1	; 0x01
    280e:	ae 01       	movw	r20, r28
    2810:	4f 5f       	subi	r20, 0xFF	; 255
    2812:	5f 4f       	sbci	r21, 0xFF	; 255
    2814:	be 01       	movw	r22, r28
    2816:	6e 5f       	subi	r22, 0xFE	; 254
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	80 91 05 3d 	lds	r24, 0x3D05
    281e:	90 91 06 3d 	lds	r25, 0x3D06
    2822:	fd dd       	rcall	.-1030   	; 0x241e <csp_queue_enqueue_isr>
    2824:	23 96       	adiw	r28, 0x03	; 3
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <csp_buffer_free>:
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	1f 92       	push	r1
    2836:	1f 92       	push	r1
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	51 f1       	breq	.+84     	; 0x2894 <csp_buffer_free+0x64>
    2840:	9c 01       	movw	r18, r24
    2842:	24 50       	subi	r18, 0x04	; 4
    2844:	31 09       	sbc	r19, r1
    2846:	29 83       	std	Y+1, r18	; 0x01
    2848:	3a 83       	std	Y+2, r19	; 0x02
    284a:	20 fd       	sbrc	r18, 0
    284c:	23 c0       	rjmp	.+70     	; 0x2894 <csp_buffer_free+0x64>
    284e:	f9 01       	movw	r30, r18
    2850:	42 81       	ldd	r20, Z+2	; 0x02
    2852:	53 81       	ldd	r21, Z+3	; 0x03
    2854:	24 17       	cp	r18, r20
    2856:	35 07       	cpc	r19, r21
    2858:	e9 f4       	brne	.+58     	; 0x2894 <csp_buffer_free+0x64>
    285a:	f9 01       	movw	r30, r18
    285c:	20 81       	ld	r18, Z
    285e:	31 81       	ldd	r19, Z+1	; 0x01
    2860:	21 15       	cp	r18, r1
    2862:	31 05       	cpc	r19, r1
    2864:	b9 f0       	breq	.+46     	; 0x2894 <csp_buffer_free+0x64>
    2866:	22 30       	cpi	r18, 0x02	; 2
    2868:	31 05       	cpc	r19, r1
    286a:	28 f0       	brcs	.+10     	; 0x2876 <csp_buffer_free+0x46>
    286c:	21 50       	subi	r18, 0x01	; 1
    286e:	31 09       	sbc	r19, r1
    2870:	20 83       	st	Z, r18
    2872:	31 83       	std	Z+1, r19	; 0x01
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <csp_buffer_free+0x64>
    2876:	fc 01       	movw	r30, r24
    2878:	34 97       	sbiw	r30, 0x04	; 4
    287a:	10 82       	st	Z, r1
    287c:	11 82       	std	Z+1, r1	; 0x01
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	a9 01       	movw	r20, r18
    2884:	be 01       	movw	r22, r28
    2886:	6f 5f       	subi	r22, 0xFF	; 255
    2888:	7f 4f       	sbci	r23, 0xFF	; 255
    288a:	80 91 05 3d 	lds	r24, 0x3D05
    288e:	90 91 06 3d 	lds	r25, 0x3D06
    2892:	ba dd       	rcall	.-1164   	; 0x2408 <csp_queue_enqueue>
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <csp_buffer_remaining>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
    289e:	80 91 05 3d 	lds	r24, 0x3D05
    28a2:	90 91 06 3d 	lds	r25, 0x3D06
    28a6:	cd cd       	rjmp	.-1126   	; 0x2442 <csp_queue_size>
}
    28a8:	08 95       	ret

000028aa <csp_conn_enqueue_packet>:
#endif

	/* We have a successful connection */
	return conn;

}
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	1f 92       	push	r1
    28b0:	1f 92       	push	r1
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	69 83       	std	Y+1, r22	; 0x01
    28b8:	7a 83       	std	Y+2, r23	; 0x02
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	a9 f0       	breq	.+42     	; 0x28e8 <csp_conn_enqueue_packet+0x3e>
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	a9 01       	movw	r20, r18
    28c4:	be 01       	movw	r22, r28
    28c6:	6f 5f       	subi	r22, 0xFF	; 255
    28c8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ca:	fc 01       	movw	r30, r24
    28cc:	84 85       	ldd	r24, Z+12	; 0x0c
    28ce:	95 85       	ldd	r25, Z+13	; 0x0d
    28d0:	9b dd       	rcall	.-1226   	; 0x2408 <csp_queue_enqueue>
    28d2:	21 e0       	ldi	r18, 0x01	; 1
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	11 f4       	brne	.+4      	; 0x28de <csp_conn_enqueue_packet+0x34>
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	88 27       	eor	r24, r24
    28e0:	99 27       	eor	r25, r25
    28e2:	82 1b       	sub	r24, r18
    28e4:	93 0b       	sbc	r25, r19
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <csp_conn_enqueue_packet+0x42>
    28e8:	8e ef       	ldi	r24, 0xFE	; 254
    28ea:	9f ef       	ldi	r25, 0xFF	; 255
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	08 95       	ret

000028f6 <csp_conn_init>:
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	81 de       	rcall	.-766    	; 0x2602 <csp_get_ms>
    2900:	cb 01       	movw	r24, r22
    2902:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <srand>
    2906:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <rand>
    290a:	8f 71       	andi	r24, 0x1F	; 31
    290c:	90 78       	andi	r25, 0x80	; 128
    290e:	99 23       	and	r25, r25
    2910:	24 f4       	brge	.+8      	; 0x291a <csp_conn_init+0x24>
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	80 6e       	ori	r24, 0xE0	; 224
    2916:	9f 6f       	ori	r25, 0xFF	; 255
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	80 5e       	subi	r24, 0xE0	; 224
    291c:	80 93 0a 3d 	sts	0x3D0A, r24
    2920:	88 e0       	ldi	r24, 0x08	; 8
    2922:	9d e3       	ldi	r25, 0x3D	; 61
    2924:	a3 dd       	rcall	.-1210   	; 0x246c <csp_bin_sem_create>
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	31 f5       	brne	.+76     	; 0x2976 <csp_conn_init+0x80>
    292a:	cf e0       	ldi	r28, 0x0F	; 15
    292c:	dd e3       	ldi	r29, 0x3D	; 61
    292e:	0f ef       	ldi	r16, 0xFF	; 255
    2930:	1d e3       	ldi	r17, 0x3D	; 61
    2932:	04 c0       	rjmp	.+8      	; 0x293c <csp_conn_init+0x46>
    2934:	68 96       	adiw	r28, 0x18	; 24
    2936:	c0 17       	cp	r28, r16
    2938:	d1 07       	cpc	r29, r17
    293a:	79 f0       	breq	.+30     	; 0x295a <csp_conn_init+0x64>
    293c:	62 e0       	ldi	r22, 0x02	; 2
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	8a e0       	ldi	r24, 0x0A	; 10
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	5e dd       	rcall	.-1348   	; 0x2402 <csp_queue_create>
    2946:	8a 87       	std	Y+10, r24	; 0x0a
    2948:	9b 87       	std	Y+11, r25	; 0x0b
    294a:	fe 01       	movw	r30, r28
    294c:	31 97       	sbiw	r30, 0x01	; 1
    294e:	10 82       	st	Z, r1
    2950:	ce 01       	movw	r24, r28
    2952:	7b dd       	rcall	.-1290   	; 0x244a <csp_mutex_create>
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	71 f3       	breq	.-36     	; 0x2934 <csp_conn_init+0x3e>
    2958:	11 c0       	rjmp	.+34     	; 0x297c <csp_conn_init+0x86>
    295a:	8b e0       	ldi	r24, 0x0B	; 11
    295c:	9d e3       	ldi	r25, 0x3D	; 61
    295e:	86 dd       	rcall	.-1268   	; 0x246c <csp_bin_sem_create>
    2960:	21 e0       	ldi	r18, 0x01	; 1
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	11 f4       	brne	.+4      	; 0x296c <csp_conn_init+0x76>
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	88 27       	eor	r24, r24
    296e:	99 27       	eor	r25, r25
    2970:	82 1b       	sub	r24, r18
    2972:	93 0b       	sbc	r25, r19
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <csp_conn_init+0x8a>
    2976:	8f ef       	ldi	r24, 0xFF	; 255
    2978:	9f ef       	ldi	r25, 0xFF	; 255
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <csp_conn_init+0x8a>
    297c:	8f ef       	ldi	r24, 0xFF	; 255
    297e:	9f ef       	ldi	r25, 0xFF	; 255
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <csp_conn_find>:
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	0f 93       	push	r16
    2994:	1f 93       	push	r17
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	ed e0       	ldi	r30, 0x0D	; 13
    299c:	fd e3       	ldi	r31, 0x3D	; 61
    299e:	0d ef       	ldi	r16, 0xFD	; 253
    29a0:	1d e3       	ldi	r17, 0x3D	; 61
    29a2:	ef 01       	movw	r28, r30
    29a4:	a1 81       	ldd	r26, Z+1	; 0x01
    29a6:	aa 23       	and	r26, r26
    29a8:	99 f0       	breq	.+38     	; 0x29d0 <csp_conn_find+0x46>
    29aa:	a0 81       	ld	r26, Z
    29ac:	a1 11       	cpse	r26, r1
    29ae:	10 c0       	rjmp	.+32     	; 0x29d0 <csp_conn_find+0x46>
    29b0:	c4 80       	ldd	r12, Z+4	; 0x04
    29b2:	d5 80       	ldd	r13, Z+5	; 0x05
    29b4:	e6 80       	ldd	r14, Z+6	; 0x06
    29b6:	f7 80       	ldd	r15, Z+7	; 0x07
    29b8:	c6 26       	eor	r12, r22
    29ba:	d7 26       	eor	r13, r23
    29bc:	e8 26       	eor	r14, r24
    29be:	f9 26       	eor	r15, r25
    29c0:	c2 22       	and	r12, r18
    29c2:	d3 22       	and	r13, r19
    29c4:	e4 22       	and	r14, r20
    29c6:	f5 22       	and	r15, r21
    29c8:	cd 28       	or	r12, r13
    29ca:	ce 28       	or	r12, r14
    29cc:	cf 28       	or	r12, r15
    29ce:	29 f0       	breq	.+10     	; 0x29da <csp_conn_find+0x50>
    29d0:	78 96       	adiw	r30, 0x18	; 24
    29d2:	e0 17       	cp	r30, r16
    29d4:	f1 07       	cpc	r31, r17
    29d6:	29 f7       	brne	.-54     	; 0x29a2 <csp_conn_find+0x18>
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <csp_conn_find+0x56>
    29da:	8e 2f       	mov	r24, r30
    29dc:	9d 2f       	mov	r25, r29
    29de:	02 c0       	rjmp	.+4      	; 0x29e4 <csp_conn_find+0x5a>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	df 90       	pop	r13
    29f2:	cf 90       	pop	r12
    29f4:	08 95       	ret

000029f6 <csp_conn_flush_rx_queue>:
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
    29fe:	1f 92       	push	r1
    2a00:	1f 92       	push	r1
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	8c 01       	movw	r16, r24
    2a08:	05 c0       	rjmp	.+10     	; 0x2a14 <csp_conn_flush_rx_queue+0x1e>
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <csp_conn_flush_rx_queue+0x1e>
    2a12:	0e df       	rcall	.-484    	; 0x2830 <csp_buffer_free>
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	a9 01       	movw	r20, r18
    2a1a:	be 01       	movw	r22, r28
    2a1c:	6f 5f       	subi	r22, 0xFF	; 255
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	f8 01       	movw	r30, r16
    2a22:	84 85       	ldd	r24, Z+12	; 0x0c
    2a24:	95 85       	ldd	r25, Z+13	; 0x0d
    2a26:	02 dd       	rcall	.-1532   	; 0x242c <csp_queue_dequeue>
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	79 f3       	breq	.-34     	; 0x2a0a <csp_conn_flush_rx_queue+0x14>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	08 95       	ret

00002a3e <csp_conn_allocate>:
    2a3e:	1f 93       	push	r17
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	18 2f       	mov	r17, r24
    2a46:	44 e6       	ldi	r20, 0x64	; 100
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	70 e0       	ldi	r23, 0x00	; 0
    2a4e:	8b e0       	ldi	r24, 0x0B	; 11
    2a50:	9d e3       	ldi	r25, 0x3D	; 61
    2a52:	23 dd       	rcall	.-1466   	; 0x249a <csp_bin_sem_wait>
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <csp_conn_allocate+0x1c>
    2a58:	47 c0       	rjmp	.+142    	; 0x2ae8 <csp_conn_allocate+0xaa>
    2a5a:	80 91 07 3d 	lds	r24, 0x3D07
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	6a e0       	ldi	r22, 0x0A	; 10
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    2a6a:	ec 01       	movw	r28, r24
    2a6c:	cc 0f       	add	r28, r28
    2a6e:	dd 1f       	adc	r29, r29
    2a70:	c8 0f       	add	r28, r24
    2a72:	d9 1f       	adc	r29, r25
    2a74:	cc 0f       	add	r28, r28
    2a76:	dd 1f       	adc	r29, r29
    2a78:	cc 0f       	add	r28, r28
    2a7a:	dd 1f       	adc	r29, r29
    2a7c:	cc 0f       	add	r28, r28
    2a7e:	dd 1f       	adc	r29, r29
    2a80:	c3 5f       	subi	r28, 0xF3	; 243
    2a82:	d2 4c       	sbci	r29, 0xC2	; 194
    2a84:	49 81       	ldd	r20, Y+1	; 0x01
    2a86:	41 11       	cpse	r20, r1
    2a88:	32 c0       	rjmp	.+100    	; 0x2aee <csp_conn_allocate+0xb0>
    2a8a:	21 c0       	rjmp	.+66     	; 0x2ace <csp_conn_allocate+0x90>
    2a8c:	ec 01       	movw	r28, r24
    2a8e:	cc 0f       	add	r28, r28
    2a90:	dd 1f       	adc	r29, r29
    2a92:	c8 0f       	add	r28, r24
    2a94:	d9 1f       	adc	r29, r25
    2a96:	cc 0f       	add	r28, r28
    2a98:	dd 1f       	adc	r29, r29
    2a9a:	cc 0f       	add	r28, r28
    2a9c:	dd 1f       	adc	r29, r29
    2a9e:	cc 0f       	add	r28, r28
    2aa0:	dd 1f       	adc	r29, r29
    2aa2:	c3 5f       	subi	r28, 0xF3	; 243
    2aa4:	d2 4c       	sbci	r29, 0xC2	; 194
    2aa6:	49 81       	ldd	r20, Y+1	; 0x01
    2aa8:	44 23       	and	r20, r20
    2aaa:	89 f0       	breq	.+34     	; 0x2ace <csp_conn_allocate+0x90>
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	bf 01       	movw	r22, r30
    2ab0:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    2ab4:	21 50       	subi	r18, 0x01	; 1
    2ab6:	31 09       	sbc	r19, r1
    2ab8:	21 15       	cp	r18, r1
    2aba:	31 05       	cpc	r19, r1
    2abc:	39 f7       	brne	.-50     	; 0x2a8c <csp_conn_allocate+0x4e>
    2abe:	41 30       	cpi	r20, 0x01	; 1
    2ac0:	31 f4       	brne	.+12     	; 0x2ace <csp_conn_allocate+0x90>
    2ac2:	8b e0       	ldi	r24, 0x0B	; 11
    2ac4:	9d e3       	ldi	r25, 0x3D	; 61
    2ac6:	f9 dc       	rcall	.-1550   	; 0x24ba <csp_bin_sem_post>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	1a c0       	rjmp	.+52     	; 0x2b02 <csp_conn_allocate+0xc4>
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	99 83       	std	Y+1, r25	; 0x01
    2ad2:	1e 86       	std	Y+14, r1	; 0x0e
    2ad4:	1f 86       	std	Y+15, r1	; 0x0f
    2ad6:	18 83       	st	Y, r17
    2ad8:	80 93 07 3d 	sts	0x3D07, r24
    2adc:	8b e0       	ldi	r24, 0x0B	; 11
    2ade:	9d e3       	ldi	r25, 0x3D	; 61
    2ae0:	ec dc       	rcall	.-1576   	; 0x24ba <csp_bin_sem_post>
    2ae2:	8c 2f       	mov	r24, r28
    2ae4:	9d 2f       	mov	r25, r29
    2ae6:	0d c0       	rjmp	.+26     	; 0x2b02 <csp_conn_allocate+0xc4>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0a c0       	rjmp	.+20     	; 0x2b02 <csp_conn_allocate+0xc4>
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	6a e0       	ldi	r22, 0x0A	; 10
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    2af8:	29 e0       	ldi	r18, 0x09	; 9
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	ea e0       	ldi	r30, 0x0A	; 10
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	c5 cf       	rjmp	.-118    	; 0x2a8c <csp_conn_allocate+0x4e>
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	08 95       	ret

00002b0a <csp_conn_new>:
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	4b 01       	movw	r8, r22
    2b20:	5c 01       	movw	r10, r24
    2b22:	69 01       	movw	r12, r18
    2b24:	7a 01       	movw	r14, r20
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	8a df       	rcall	.-236    	; 0x2a3e <csp_conn_allocate>
    2b2a:	ec 01       	movw	r28, r24
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	79 f0       	breq	.+30     	; 0x2b4e <csp_conn_new+0x44>
    2b30:	8c 82       	std	Y+4, r8	; 0x04
    2b32:	9d 82       	std	Y+5, r9	; 0x05
    2b34:	ae 82       	std	Y+6, r10	; 0x06
    2b36:	bf 82       	std	Y+7, r11	; 0x07
    2b38:	c8 86       	std	Y+8, r12	; 0x08
    2b3a:	d9 86       	std	Y+9, r13	; 0x09
    2b3c:	ea 86       	std	Y+10, r14	; 0x0a
    2b3e:	fb 86       	std	Y+11, r15	; 0x0b
    2b40:	60 dd       	rcall	.-1344   	; 0x2602 <csp_get_ms>
    2b42:	68 8b       	std	Y+16, r22	; 0x10
    2b44:	79 8b       	std	Y+17, r23	; 0x11
    2b46:	8a 8b       	std	Y+18, r24	; 0x12
    2b48:	9b 8b       	std	Y+19, r25	; 0x13
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	54 df       	rcall	.-344    	; 0x29f6 <csp_conn_flush_rx_queue>
    2b4e:	ce 01       	movw	r24, r28
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	bf 90       	pop	r11
    2b5e:	af 90       	pop	r10
    2b60:	9f 90       	pop	r9
    2b62:	8f 90       	pop	r8
    2b64:	08 95       	ret

00002b66 <csp_close>:
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	ec 01       	movw	r28, r24
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	a9 f0       	breq	.+42     	; 0x2b9a <csp_close+0x34>
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	88 23       	and	r24, r24
    2b74:	a9 f0       	breq	.+42     	; 0x2ba0 <csp_close+0x3a>
    2b76:	44 e6       	ldi	r20, 0x64	; 100
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	8b e0       	ldi	r24, 0x0B	; 11
    2b80:	9d e3       	ldi	r25, 0x3D	; 61
    2b82:	8b dc       	rcall	.-1770   	; 0x249a <csp_bin_sem_wait>
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	79 f4       	brne	.+30     	; 0x2ba6 <csp_close+0x40>
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	34 df       	rcall	.-408    	; 0x29f6 <csp_conn_flush_rx_queue>
    2b8e:	8b e0       	ldi	r24, 0x0B	; 11
    2b90:	9d e3       	ldi	r25, 0x3D	; 61
    2b92:	93 dc       	rcall	.-1754   	; 0x24ba <csp_bin_sem_post>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	08 c0       	rjmp	.+16     	; 0x2baa <csp_close+0x44>
    2b9a:	8e ef       	ldi	r24, 0xFE	; 254
    2b9c:	9f ef       	ldi	r25, 0xFF	; 255
    2b9e:	05 c0       	rjmp	.+10     	; 0x2baa <csp_close+0x44>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <csp_close+0x44>
    2ba6:	8d ef       	ldi	r24, 0xFD	; 253
    2ba8:	9f ef       	ldi	r25, 0xFF	; 255
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <csp_conn_dport>:

inline int csp_conn_dport(csp_conn_t * conn) {
    2bb0:	fc 01       	movw	r30, r24

	return conn->idin.dport;
    2bb2:	95 81       	ldd	r25, Z+5	; 0x05
    2bb4:	92 95       	swap	r25
    2bb6:	96 95       	lsr	r25
    2bb8:	96 95       	lsr	r25
    2bba:	93 70       	andi	r25, 0x03	; 3
    2bbc:	86 81       	ldd	r24, Z+6	; 0x06
    2bbe:	8f 70       	andi	r24, 0x0F	; 15
    2bc0:	88 0f       	add	r24, r24
    2bc2:	88 0f       	add	r24, r24
    2bc4:	89 2b       	or	r24, r25

}
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	08 95       	ret

00002bca <csp_crc32_memory>:
		0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
		0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
		0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
    2bca:	8f 92       	push	r8
    2bcc:	9f 92       	push	r9
    2bce:	af 92       	push	r10
    2bd0:	bf 92       	push	r11
    2bd2:	cf 92       	push	r12
    2bd4:	df 92       	push	r13
    2bd6:	ef 92       	push	r14
    2bd8:	ff 92       	push	r15
    2bda:	0f 93       	push	r16
    2bdc:	1f 93       	push	r17
   uint32_t crc;

   crc = 0xFFFFFFFF;
   while (length--)
    2bde:	8a 01       	movw	r16, r20
    2be0:	9b 01       	movw	r18, r22
    2be2:	01 50       	subi	r16, 0x01	; 1
    2be4:	11 09       	sbc	r17, r1
    2be6:	21 09       	sbc	r18, r1
    2be8:	31 09       	sbc	r19, r1
    2bea:	45 2b       	or	r20, r21
    2bec:	46 2b       	or	r20, r22
    2bee:	47 2b       	or	r20, r23
    2bf0:	49 f1       	breq	.+82     	; 0x2c44 <csp_crc32_memory+0x7a>
    2bf2:	a8 2f       	mov	r26, r24
    2bf4:	b9 2f       	mov	r27, r25
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
    2bf6:	88 24       	eor	r8, r8
    2bf8:	8a 94       	dec	r8
    2bfa:	98 2c       	mov	r9, r8
    2bfc:	54 01       	movw	r10, r8
   while (length--)
#ifdef __AVR__
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
    2bfe:	4d 91       	ld	r20, X+
    2c00:	75 01       	movw	r14, r10
    2c02:	64 01       	movw	r12, r8
    2c04:	c4 26       	eor	r12, r20
    2c06:	dd 24       	eor	r13, r13
    2c08:	ee 24       	eor	r14, r14
    2c0a:	ff 24       	eor	r15, r15
    2c0c:	c6 01       	movw	r24, r12
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	fc 01       	movw	r30, r24
    2c18:	e6 5f       	subi	r30, 0xF6	; 246
    2c1a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c1c:	c5 90       	lpm	r12, Z+
    2c1e:	d5 90       	lpm	r13, Z+
    2c20:	e5 90       	lpm	r14, Z+
    2c22:	f4 90       	lpm	r15, Z
    2c24:	77 27       	eor	r23, r23
    2c26:	6b 2d       	mov	r22, r11
    2c28:	5a 2d       	mov	r21, r10
    2c2a:	49 2d       	mov	r20, r9
    2c2c:	4a 01       	movw	r8, r20
    2c2e:	5b 01       	movw	r10, r22
    2c30:	8c 24       	eor	r8, r12
    2c32:	9d 24       	eor	r9, r13
    2c34:	ae 24       	eor	r10, r14
    2c36:	bf 24       	eor	r11, r15

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
   while (length--)
    2c38:	01 50       	subi	r16, 0x01	; 1
    2c3a:	11 09       	sbc	r17, r1
    2c3c:	21 09       	sbc	r18, r1
    2c3e:	31 09       	sbc	r19, r1
    2c40:	f0 f6       	brcc	.-68     	; 0x2bfe <csp_crc32_memory+0x34>
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <csp_crc32_memory+0x82>
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
    2c44:	88 24       	eor	r8, r8
    2c46:	8a 94       	dec	r8
    2c48:	98 2c       	mov	r9, r8
    2c4a:	54 01       	movw	r10, r8
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
#else
	   crc = crc_tab[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
#endif

   return (crc ^ 0xFFFFFFFF);
    2c4c:	c5 01       	movw	r24, r10
    2c4e:	b4 01       	movw	r22, r8
    2c50:	60 95       	com	r22
    2c52:	70 95       	com	r23
    2c54:	80 95       	com	r24
    2c56:	90 95       	com	r25
}
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	bf 90       	pop	r11
    2c66:	af 90       	pop	r10
    2c68:	9f 90       	pop	r9
    2c6a:	8f 90       	pop	r8
    2c6c:	08 95       	ret

00002c6e <csp_crc32_append>:

int csp_crc32_append(csp_packet_t * packet) {
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	ec 01       	movw	r28, r24

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	b9 f0       	breq	.+46     	; 0x2ca6 <csp_crc32_append+0x38>
		return CSP_ERR_INVAL;

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory(packet->data, packet->length);
    2c78:	48 85       	ldd	r20, Y+8	; 0x08
    2c7a:	59 85       	ldd	r21, Y+9	; 0x09
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	0e 96       	adiw	r24, 0x0e	; 14
    2c82:	a3 df       	rcall	.-186    	; 0x2bca <csp_crc32_memory>
	crc = csp_hton32(crc);
    2c84:	5e d0       	rcall	.+188    	; 0x2d42 <csp_hton32>

	/* Copy checksum to packet */
	memcpy(&packet->data[packet->length], &crc, sizeof(uint32_t));
    2c86:	e8 85       	ldd	r30, Y+8	; 0x08
    2c88:	f9 85       	ldd	r31, Y+9	; 0x09
    2c8a:	ec 0f       	add	r30, r28
    2c8c:	fd 1f       	adc	r31, r29
    2c8e:	66 87       	std	Z+14, r22	; 0x0e
    2c90:	77 87       	std	Z+15, r23	; 0x0f
    2c92:	80 8b       	std	Z+16, r24	; 0x10
    2c94:	91 8b       	std	Z+17, r25	; 0x11
	packet->length += sizeof(uint32_t);
    2c96:	88 85       	ldd	r24, Y+8	; 0x08
    2c98:	99 85       	ldd	r25, Y+9	; 0x09
    2c9a:	04 96       	adiw	r24, 0x04	; 4
    2c9c:	88 87       	std	Y+8, r24	; 0x08
    2c9e:	99 87       	std	Y+9, r25	; 0x09

	return CSP_ERR_NONE;
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <csp_crc32_append+0x3c>

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
		return CSP_ERR_INVAL;
    2ca6:	8e ef       	ldi	r24, 0xFE	; 254
    2ca8:	9f ef       	ldi	r25, 0xFF	; 255
	memcpy(&packet->data[packet->length], &crc, sizeof(uint32_t));
	packet->length += sizeof(uint32_t);

	return CSP_ERR_NONE;

}
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <csp_crc32_verify>:

int csp_crc32_verify(csp_packet_t * packet) {
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <csp_crc32_verify+0xe>
    2cbe:	1f 92       	push	r1
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	8c 01       	movw	r16, r24

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	51 f1       	breq	.+84     	; 0x2d1e <csp_crc32_verify+0x6e>
		return CSP_ERR_INVAL;

	if (packet->length < sizeof(uint32_t))
    2cca:	fc 01       	movw	r30, r24
    2ccc:	80 85       	ldd	r24, Z+8	; 0x08
    2cce:	91 85       	ldd	r25, Z+9	; 0x09
    2cd0:	84 30       	cpi	r24, 0x04	; 4
    2cd2:	91 05       	cpc	r25, r1
    2cd4:	38 f1       	brcs	.+78     	; 0x2d24 <csp_crc32_verify+0x74>
		return CSP_ERR_INVAL;

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory(packet->data, packet->length - sizeof(uint32_t));
    2cd6:	ac 01       	movw	r20, r24
    2cd8:	44 50       	subi	r20, 0x04	; 4
    2cda:	51 09       	sbc	r21, r1
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	0e 96       	adiw	r24, 0x0e	; 14
    2ce4:	72 df       	rcall	.-284    	; 0x2bca <csp_crc32_memory>
	crc = csp_hton32(crc);
    2ce6:	2d d0       	rcall	.+90     	; 0x2d42 <csp_hton32>
    2ce8:	69 83       	std	Y+1, r22	; 0x01
    2cea:	7a 83       	std	Y+2, r23	; 0x02
    2cec:	8b 83       	std	Y+3, r24	; 0x03
    2cee:	9c 83       	std	Y+4, r25	; 0x04

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(uint32_t), &crc, sizeof(uint32_t)) != 0) {
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 85       	ldd	r24, Z+8	; 0x08
    2cf4:	91 85       	ldd	r25, Z+9	; 0x09
    2cf6:	7c 01       	movw	r14, r24
    2cf8:	f4 e0       	ldi	r31, 0x04	; 4
    2cfa:	ef 1a       	sub	r14, r31
    2cfc:	f1 08       	sbc	r15, r1
    2cfe:	0a 96       	adiw	r24, 0x0a	; 10
    2d00:	44 e0       	ldi	r20, 0x04	; 4
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	be 01       	movw	r22, r28
    2d06:	6f 5f       	subi	r22, 0xFF	; 255
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0a:	80 0f       	add	r24, r16
    2d0c:	91 1f       	adc	r25, r17
    2d0e:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <memcmp>
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	51 f4       	brne	.+20     	; 0x2d2a <csp_crc32_verify+0x7a>
		/* CRC32 failed */
		return CSP_ERR_INVAL;
	} else {
		/* Strip CRC32 */
		packet->length -= sizeof(uint32_t);
    2d16:	f8 01       	movw	r30, r16
    2d18:	e0 86       	std	Z+8, r14	; 0x08
    2d1a:	f1 86       	std	Z+9, r15	; 0x09
		return CSP_ERR_NONE;
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <csp_crc32_verify+0x7e>

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
		return CSP_ERR_INVAL;
    2d1e:	8e ef       	ldi	r24, 0xFE	; 254
    2d20:	9f ef       	ldi	r25, 0xFF	; 255
    2d22:	05 c0       	rjmp	.+10     	; 0x2d2e <csp_crc32_verify+0x7e>

	if (packet->length < sizeof(uint32_t))
		return CSP_ERR_INVAL;
    2d24:	8e ef       	ldi	r24, 0xFE	; 254
    2d26:	9f ef       	ldi	r25, 0xFF	; 255
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <csp_crc32_verify+0x7e>
	crc = csp_hton32(crc);

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(uint32_t), &crc, sizeof(uint32_t)) != 0) {
		/* CRC32 failed */
		return CSP_ERR_INVAL;
    2d2a:	8e ef       	ldi	r24, 0xFE	; 254
    2d2c:	9f ef       	ldi	r25, 0xFF	; 255
		/* Strip CRC32 */
		packet->length -= sizeof(uint32_t);
		return CSP_ERR_NONE;
	}

}
    2d2e:	24 96       	adiw	r28, 0x04	; 4
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	ff 90       	pop	r15
    2d3e:	ef 90       	pop	r14
    2d40:	08 95       	ret

00002d42 <csp_hton32>:
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
	return csp_hton16(n16);
}

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
    2d42:	cf 92       	push	r12
    2d44:	df 92       	push	r13
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d4e:	f6 2e       	mov	r15, r22
    2d50:	ee 24       	eor	r14, r14
    2d52:	dd 24       	eor	r13, r13
    2d54:	cc 24       	eor	r12, r12
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d56:	09 2f       	mov	r16, r25
    2d58:	11 27       	eor	r17, r17
    2d5a:	22 27       	eor	r18, r18
    2d5c:	33 27       	eor	r19, r19
    2d5e:	0c 29       	or	r16, r12
    2d60:	1d 29       	or	r17, r13
    2d62:	2e 29       	or	r18, r14
    2d64:	3f 29       	or	r19, r15
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
    2d66:	6b 01       	movw	r12, r22
    2d68:	7c 01       	movw	r14, r24
    2d6a:	cc 24       	eor	r12, r12
    2d6c:	ee 24       	eor	r14, r14
    2d6e:	ff 24       	eor	r15, r15
    2d70:	fe 2c       	mov	r15, r14
    2d72:	ed 2c       	mov	r14, r13
    2d74:	dc 2c       	mov	r13, r12
    2d76:	cc 24       	eor	r12, r12
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d78:	0c 29       	or	r16, r12
    2d7a:	1d 29       	or	r17, r13
    2d7c:	2e 29       	or	r18, r14
    2d7e:	3f 29       	or	r19, r15
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	88 27       	eor	r24, r24
    2d86:	99 27       	eor	r25, r25
    2d88:	bb 27       	eor	r27, r27
    2d8a:	89 2f       	mov	r24, r25
    2d8c:	9a 2f       	mov	r25, r26
    2d8e:	ab 2f       	mov	r26, r27
    2d90:	bb 27       	eor	r27, r27
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	60 2b       	or	r22, r16
    2d98:	71 2b       	or	r23, r17
    2d9a:	82 2b       	or	r24, r18
    2d9c:	93 2b       	or	r25, r19
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
#endif
}
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	df 90       	pop	r13
    2da8:	cf 90       	pop	r12
    2daa:	08 95       	ret

00002dac <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
    2dac:	cf 92       	push	r12
    2dae:	df 92       	push	r13
    2db0:	ef 92       	push	r14
    2db2:	ff 92       	push	r15
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2db8:	f6 2e       	mov	r15, r22
    2dba:	ee 24       	eor	r14, r14
    2dbc:	dd 24       	eor	r13, r13
    2dbe:	cc 24       	eor	r12, r12
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2dc0:	09 2f       	mov	r16, r25
    2dc2:	11 27       	eor	r17, r17
    2dc4:	22 27       	eor	r18, r18
    2dc6:	33 27       	eor	r19, r19
    2dc8:	0c 29       	or	r16, r12
    2dca:	1d 29       	or	r17, r13
    2dcc:	2e 29       	or	r18, r14
    2dce:	3f 29       	or	r19, r15
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
    2dd0:	6b 01       	movw	r12, r22
    2dd2:	7c 01       	movw	r14, r24
    2dd4:	cc 24       	eor	r12, r12
    2dd6:	ee 24       	eor	r14, r14
    2dd8:	ff 24       	eor	r15, r15
    2dda:	fe 2c       	mov	r15, r14
    2ddc:	ed 2c       	mov	r14, r13
    2dde:	dc 2c       	mov	r13, r12
    2de0:	cc 24       	eor	r12, r12
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2de2:	0c 29       	or	r16, r12
    2de4:	1d 29       	or	r17, r13
    2de6:	2e 29       	or	r18, r14
    2de8:	3f 29       	or	r19, r15
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	88 27       	eor	r24, r24
    2df0:	99 27       	eor	r25, r25
    2df2:	bb 27       	eor	r27, r27
    2df4:	89 2f       	mov	r24, r25
    2df6:	9a 2f       	mov	r25, r26
    2df8:	ab 2f       	mov	r26, r27
    2dfa:	bb 27       	eor	r27, r27
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	60 2b       	or	r22, r16
    2e02:	71 2b       	or	r23, r17
    2e04:	82 2b       	or	r24, r18
    2e06:	93 2b       	or	r25, r19
}

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
	return csp_hton32(n32);
}
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	ff 90       	pop	r15
    2e0e:	ef 90       	pop	r14
    2e10:	df 90       	pop	r13
    2e12:	cf 90       	pop	r12
    2e14:	08 95       	ret

00002e16 <csp_get_hostname>:
	csp_packet_t * packet = NULL;
	csp_queue_dequeue(socket->socket, &packet, timeout);

	return packet;

}
    2e16:	80 91 ff 3d 	lds	r24, 0x3DFF
    2e1a:	90 91 00 3e 	lds	r25, 0x3E00
    2e1e:	08 95       	ret

00002e20 <csp_get_model>:
    2e20:	80 91 fd 3d 	lds	r24, 0x3DFD
    2e24:	90 91 fe 3d 	lds	r25, 0x3DFE
    2e28:	08 95       	ret

00002e2a <csp_init>:
    2e2a:	80 93 77 3f 	sts	0x3F77, r24
    2e2e:	63 dd       	rcall	.-1338   	; 0x28f6 <csp_conn_init>
    2e30:	9c 01       	movw	r18, r24
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	31 f4       	brne	.+12     	; 0x2e42 <csp_init+0x18>
    2e36:	08 d2       	rcall	.+1040   	; 0x3248 <csp_port_init>
    2e38:	9c 01       	movw	r18, r24
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	21 f4       	brne	.+8      	; 0x2e46 <csp_init+0x1c>
    2e3e:	37 c3       	rjmp	.+1646   	; 0x34ae <csp_route_table_init>
    2e40:	08 95       	ret
    2e42:	93 2f       	mov	r25, r19
    2e44:	08 95       	ret
    2e46:	93 2f       	mov	r25, r19
    2e48:	08 95       	ret

00002e4a <csp_socket>:
    2e4a:	cf 92       	push	r12
    2e4c:	df 92       	push	r13
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	6b 01       	movw	r12, r22
    2e58:	7c 01       	movw	r14, r24
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	81 71       	andi	r24, 0x11	; 17
    2e60:	99 27       	eor	r25, r25
    2e62:	aa 27       	eor	r26, r26
    2e64:	bb 27       	eor	r27, r27
    2e66:	89 2b       	or	r24, r25
    2e68:	8a 2b       	or	r24, r26
    2e6a:	8b 2b       	or	r24, r27
    2e6c:	11 f5       	brne	.+68     	; 0x2eb2 <csp_socket+0x68>
    2e6e:	d7 01       	movw	r26, r14
    2e70:	c6 01       	movw	r24, r12
    2e72:	8e 7a       	andi	r24, 0xAE	; 174
    2e74:	9e 7f       	andi	r25, 0xFE	; 254
    2e76:	89 2b       	or	r24, r25
    2e78:	8a 2b       	or	r24, r26
    2e7a:	8b 2b       	or	r24, r27
    2e7c:	e9 f4       	brne	.+58     	; 0x2eb8 <csp_socket+0x6e>
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	de dd       	rcall	.-1092   	; 0x2a3e <csp_conn_allocate>
    2e82:	ec 01       	movw	r28, r24
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	d9 f0       	breq	.+54     	; 0x2ebe <csp_socket+0x74>
    2e88:	d0 fe       	sbrs	r13, 0
    2e8a:	0a c0       	rjmp	.+20     	; 0x2ea0 <csp_socket+0x56>
    2e8c:	62 e0       	ldi	r22, 0x02	; 2
    2e8e:	70 e0       	ldi	r23, 0x00	; 0
    2e90:	8a e0       	ldi	r24, 0x0A	; 10
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	b6 da       	rcall	.-2708   	; 0x2402 <csp_queue_create>
    2e96:	8e 87       	std	Y+14, r24	; 0x0e
    2e98:	9f 87       	std	Y+15, r25	; 0x0f
    2e9a:	89 2b       	or	r24, r25
    2e9c:	19 f4       	brne	.+6      	; 0x2ea4 <csp_socket+0x5a>
    2e9e:	12 c0       	rjmp	.+36     	; 0x2ec4 <csp_socket+0x7a>
    2ea0:	1e 86       	std	Y+14, r1	; 0x0e
    2ea2:	1f 86       	std	Y+15, r1	; 0x0f
    2ea4:	cc 8a       	std	Y+20, r12	; 0x14
    2ea6:	dd 8a       	std	Y+21, r13	; 0x15
    2ea8:	ee 8a       	std	Y+22, r14	; 0x16
    2eaa:	ff 8a       	std	Y+23, r15	; 0x17
    2eac:	8c 2f       	mov	r24, r28
    2eae:	9d 2f       	mov	r25, r29
    2eb0:	0b c0       	rjmp	.+22     	; 0x2ec8 <csp_socket+0x7e>
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	08 c0       	rjmp	.+16     	; 0x2ec8 <csp_socket+0x7e>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	05 c0       	rjmp	.+10     	; 0x2ec8 <csp_socket+0x7e>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <csp_socket+0x7e>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	ff 90       	pop	r15
    2ece:	ef 90       	pop	r14
    2ed0:	df 90       	pop	r13
    2ed2:	cf 90       	pop	r12
    2ed4:	08 95       	ret

00002ed6 <csp_accept>:
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	1f 92       	push	r1
    2edc:	1f 92       	push	r1
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	81 f0       	breq	.+32     	; 0x2f06 <csp_accept+0x30>
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	86 85       	ldd	r24, Z+14	; 0x0e
    2eea:	97 85       	ldd	r25, Z+15	; 0x0f
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	71 f0       	breq	.+28     	; 0x2f0c <csp_accept+0x36>
    2ef0:	9a 01       	movw	r18, r20
    2ef2:	ab 01       	movw	r20, r22
    2ef4:	be 01       	movw	r22, r28
    2ef6:	6f 5f       	subi	r22, 0xFF	; 255
    2ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    2efa:	98 da       	rcall	.-2768   	; 0x242c <csp_queue_dequeue>
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	49 f4       	brne	.+18     	; 0x2f12 <csp_accept+0x3c>
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	08 c0       	rjmp	.+16     	; 0x2f16 <csp_accept+0x40>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <csp_accept+0x40>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <csp_accept+0x40>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <csp_read>:
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	1f 92       	push	r1
    2f26:	1f 92       	push	r1
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	19 82       	std	Y+1, r1	; 0x01
    2f2e:	1a 82       	std	Y+2, r1	; 0x02
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	89 f0       	breq	.+34     	; 0x2f56 <csp_read+0x36>
    2f34:	fc 01       	movw	r30, r24
    2f36:	21 81       	ldd	r18, Z+1	; 0x01
    2f38:	21 30       	cpi	r18, 0x01	; 1
    2f3a:	81 f4       	brne	.+32     	; 0x2f5c <csp_read+0x3c>
    2f3c:	9a 01       	movw	r18, r20
    2f3e:	ab 01       	movw	r20, r22
    2f40:	be 01       	movw	r22, r28
    2f42:	6f 5f       	subi	r22, 0xFF	; 255
    2f44:	7f 4f       	sbci	r23, 0xFF	; 255
    2f46:	84 85       	ldd	r24, Z+12	; 0x0c
    2f48:	95 85       	ldd	r25, Z+13	; 0x0d
    2f4a:	70 da       	rcall	.-2848   	; 0x242c <csp_queue_dequeue>
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	49 f4       	brne	.+18     	; 0x2f62 <csp_read+0x42>
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	08 c0       	rjmp	.+16     	; 0x2f66 <csp_read+0x46>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <csp_read+0x46>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <csp_read+0x46>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <csp_send_direct>:
    2f70:	8f 92       	push	r8
    2f72:	9f 92       	push	r9
    2f74:	af 92       	push	r10
    2f76:	bf 92       	push	r11
    2f78:	cf 92       	push	r12
    2f7a:	df 92       	push	r13
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	96 2e       	mov	r9, r22
    2f8a:	87 2e       	mov	r8, r23
    2f8c:	d8 2f       	mov	r29, r24
    2f8e:	c9 2f       	mov	r28, r25
    2f90:	5a 01       	movw	r10, r20
    2f92:	68 01       	movw	r12, r16
    2f94:	79 01       	movw	r14, r18
    2f96:	41 15       	cp	r20, r1
    2f98:	51 05       	cpc	r21, r1
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <csp_send_direct+0x2e>
    2f9c:	7b c0       	rjmp	.+246    	; 0x3094 <csp_send_direct+0x124>
    2f9e:	89 2f       	mov	r24, r25
    2fa0:	81 70       	andi	r24, 0x01	; 1
    2fa2:	82 95       	swap	r24
    2fa4:	80 7f       	andi	r24, 0xF0	; 240
    2fa6:	9d 2f       	mov	r25, r29
    2fa8:	92 95       	swap	r25
    2faa:	9f 70       	andi	r25, 0x0F	; 15
    2fac:	89 2b       	or	r24, r25
    2fae:	a9 d2       	rcall	.+1362   	; 0x3502 <csp_route_if>
    2fb0:	8c 01       	movw	r16, r24
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <csp_send_direct+0x48>
    2fb6:	71 c0       	rjmp	.+226    	; 0x309a <csp_send_direct+0x12a>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	ed 91       	ld	r30, X+
    2fbc:	fc 91       	ld	r31, X
    2fbe:	30 97       	sbiw	r30, 0x00	; 0
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <csp_send_direct+0x54>
    2fc2:	6e c0       	rjmp	.+220    	; 0x30a0 <csp_send_direct+0x130>
    2fc4:	24 81       	ldd	r18, Z+4	; 0x04
    2fc6:	35 81       	ldd	r19, Z+5	; 0x05
    2fc8:	23 2b       	or	r18, r19
    2fca:	09 f4       	brne	.+2      	; 0x2fce <csp_send_direct+0x5e>
    2fcc:	6c c0       	rjmp	.+216    	; 0x30a6 <csp_send_direct+0x136>
    2fce:	2c 2f       	mov	r18, r28
    2fd0:	26 95       	lsr	r18
    2fd2:	2f 71       	andi	r18, 0x1F	; 31
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	80 91 77 3f 	lds	r24, 0x3F77
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	28 17       	cp	r18, r24
    2fde:	39 07       	cpc	r19, r25
    2fe0:	59 f4       	brne	.+22     	; 0x2ff8 <csp_send_direct+0x88>
    2fe2:	93 fc       	sbrc	r9, 3
    2fe4:	46 c0       	rjmp	.+140    	; 0x3072 <csp_send_direct+0x102>
    2fe6:	90 fe       	sbrs	r9, 0
    2fe8:	05 c0       	rjmp	.+10     	; 0x2ff4 <csp_send_direct+0x84>
    2fea:	c5 01       	movw	r24, r10
    2fec:	40 de       	rcall	.-896    	; 0x2c6e <csp_crc32_append>
    2fee:	89 2b       	or	r24, r25
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <csp_send_direct+0x84>
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <csp_send_direct+0x102>
    2ff4:	92 fc       	sbrc	r9, 2
    2ff6:	3d c0       	rjmp	.+122    	; 0x3072 <csp_send_direct+0x102>
    2ff8:	f5 01       	movw	r30, r10
    2ffa:	92 86       	std	Z+10, r9	; 0x0a
    2ffc:	83 86       	std	Z+11, r8	; 0x0b
    2ffe:	d4 87       	std	Z+12, r29	; 0x0c
    3000:	c5 87       	std	Z+13, r28	; 0x0d
    3002:	c0 85       	ldd	r28, Z+8	; 0x08
    3004:	d1 85       	ldd	r29, Z+9	; 0x09
    3006:	f8 01       	movw	r30, r16
    3008:	a0 81       	ld	r26, Z
    300a:	b1 81       	ldd	r27, Z+1	; 0x01
    300c:	17 96       	adiw	r26, 0x07	; 7
    300e:	8d 91       	ld	r24, X+
    3010:	9c 91       	ld	r25, X
    3012:	18 97       	sbiw	r26, 0x08	; 8
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	19 f0       	breq	.+6      	; 0x301e <csp_send_direct+0xae>
    3018:	8c 17       	cp	r24, r28
    301a:	9d 07       	cpc	r25, r29
    301c:	50 f1       	brcs	.+84     	; 0x3072 <csp_send_direct+0x102>
    301e:	14 96       	adiw	r26, 0x04	; 4
    3020:	ed 91       	ld	r30, X+
    3022:	fc 91       	ld	r31, X
    3024:	15 97       	sbiw	r26, 0x05	; 5
    3026:	a7 01       	movw	r20, r14
    3028:	96 01       	movw	r18, r12
    302a:	b5 01       	movw	r22, r10
    302c:	cd 01       	movw	r24, r26
    302e:	19 95       	eicall
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	f9 f4       	brne	.+62     	; 0x3072 <csp_send_direct+0x102>
    3034:	d8 01       	movw	r26, r16
    3036:	ed 91       	ld	r30, X+
    3038:	fc 91       	ld	r31, X
    303a:	11 97       	sbiw	r26, 0x01	; 1
    303c:	42 85       	ldd	r20, Z+10	; 0x0a
    303e:	53 85       	ldd	r21, Z+11	; 0x0b
    3040:	64 85       	ldd	r22, Z+12	; 0x0c
    3042:	75 85       	ldd	r23, Z+13	; 0x0d
    3044:	4f 5f       	subi	r20, 0xFF	; 255
    3046:	5f 4f       	sbci	r21, 0xFF	; 255
    3048:	6f 4f       	sbci	r22, 0xFF	; 255
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	42 87       	std	Z+10, r20	; 0x0a
    304e:	53 87       	std	Z+11, r21	; 0x0b
    3050:	64 87       	std	Z+12, r22	; 0x0c
    3052:	75 87       	std	Z+13, r23	; 0x0d
    3054:	ed 91       	ld	r30, X+
    3056:	fc 91       	ld	r31, X
    3058:	46 a1       	ldd	r20, Z+38	; 0x26
    305a:	57 a1       	ldd	r21, Z+39	; 0x27
    305c:	60 a5       	ldd	r22, Z+40	; 0x28
    305e:	71 a5       	ldd	r23, Z+41	; 0x29
    3060:	4c 0f       	add	r20, r28
    3062:	5d 1f       	adc	r21, r29
    3064:	61 1d       	adc	r22, r1
    3066:	71 1d       	adc	r23, r1
    3068:	46 a3       	std	Z+38, r20	; 0x26
    306a:	57 a3       	std	Z+39, r21	; 0x27
    306c:	60 a7       	std	Z+40, r22	; 0x28
    306e:	71 a7       	std	Z+41, r23	; 0x29
    3070:	1c c0       	rjmp	.+56     	; 0x30aa <csp_send_direct+0x13a>
    3072:	d8 01       	movw	r26, r16
    3074:	ed 91       	ld	r30, X+
    3076:	fc 91       	ld	r31, X
    3078:	82 89       	ldd	r24, Z+18	; 0x12
    307a:	93 89       	ldd	r25, Z+19	; 0x13
    307c:	a4 89       	ldd	r26, Z+20	; 0x14
    307e:	b5 89       	ldd	r27, Z+21	; 0x15
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	a1 1d       	adc	r26, r1
    3084:	b1 1d       	adc	r27, r1
    3086:	82 8b       	std	Z+18, r24	; 0x12
    3088:	93 8b       	std	Z+19, r25	; 0x13
    308a:	a4 8b       	std	Z+20, r26	; 0x14
    308c:	b5 8b       	std	Z+21, r27	; 0x15
    308e:	86 ef       	ldi	r24, 0xF6	; 246
    3090:	9f ef       	ldi	r25, 0xFF	; 255
    3092:	0b c0       	rjmp	.+22     	; 0x30aa <csp_send_direct+0x13a>
    3094:	86 ef       	ldi	r24, 0xF6	; 246
    3096:	9f ef       	ldi	r25, 0xFF	; 255
    3098:	08 c0       	rjmp	.+16     	; 0x30aa <csp_send_direct+0x13a>
    309a:	86 ef       	ldi	r24, 0xF6	; 246
    309c:	9f ef       	ldi	r25, 0xFF	; 255
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <csp_send_direct+0x13a>
    30a0:	86 ef       	ldi	r24, 0xF6	; 246
    30a2:	9f ef       	ldi	r25, 0xFF	; 255
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <csp_send_direct+0x13a>
    30a6:	86 ef       	ldi	r24, 0xF6	; 246
    30a8:	9f ef       	ldi	r25, 0xFF	; 255
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	bf 90       	pop	r11
    30bc:	af 90       	pop	r10
    30be:	9f 90       	pop	r9
    30c0:	8f 90       	pop	r8
    30c2:	08 95       	ret

000030c4 <csp_send>:
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	fb 01       	movw	r30, r22
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	d1 f0       	breq	.+52     	; 0x3102 <csp_send+0x3e>
    30ce:	30 97       	sbiw	r30, 0x00	; 0
    30d0:	d9 f0       	breq	.+54     	; 0x3108 <csp_send+0x44>
    30d2:	dc 01       	movw	r26, r24
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	6c 91       	ld	r22, X
    30d8:	11 97       	sbiw	r26, 0x01	; 1
    30da:	61 30       	cpi	r22, 0x01	; 1
    30dc:	c1 f4       	brne	.+48     	; 0x310e <csp_send+0x4a>
    30de:	18 96       	adiw	r26, 0x08	; 8
    30e0:	6d 91       	ld	r22, X+
    30e2:	7d 91       	ld	r23, X+
    30e4:	8d 91       	ld	r24, X+
    30e6:	9c 91       	ld	r25, X
    30e8:	1b 97       	sbiw	r26, 0x0b	; 11
    30ea:	89 01       	movw	r16, r18
    30ec:	9a 01       	movw	r18, r20
    30ee:	af 01       	movw	r20, r30
    30f0:	3f df       	rcall	.-386    	; 0x2f70 <csp_send_direct>
    30f2:	31 e0       	ldi	r19, 0x01	; 1
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	89 2b       	or	r24, r25
    30f8:	09 f0       	breq	.+2      	; 0x30fc <csp_send+0x38>
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	83 2f       	mov	r24, r19
    30fe:	92 2f       	mov	r25, r18
    3100:	08 c0       	rjmp	.+16     	; 0x3112 <csp_send+0x4e>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	05 c0       	rjmp	.+10     	; 0x3112 <csp_send+0x4e>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <csp_send+0x4e>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <csp_sendto>:

int csp_sendto(uint8_t prio, uint8_t dest, uint8_t dport, uint8_t src_port, uint32_t opts, csp_packet_t * packet, uint32_t timeout) {
    3118:	4f 92       	push	r4
    311a:	5f 92       	push	r5
    311c:	6f 92       	push	r6
    311e:	7f 92       	push	r7
    3120:	8f 92       	push	r8
    3122:	9f 92       	push	r9
    3124:	af 92       	push	r10
    3126:	bf 92       	push	r11
    3128:	cf 92       	push	r12
    312a:	df 92       	push	r13
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	f6 01       	movw	r30, r12

	packet->id.flags = 0;
    313e:	12 86       	std	Z+10, r1	; 0x0a

	if (opts & CSP_O_RDP) {
    3140:	e0 fc       	sbrc	r14, 0
    3142:	45 c0       	rjmp	.+138    	; 0x31ce <csp_sendto+0xb6>
    3144:	27 01       	movw	r4, r14
    3146:	38 01       	movw	r6, r16
    3148:	94 e1       	ldi	r25, 0x14	; 20
    314a:	49 22       	and	r4, r25
    314c:	55 24       	eor	r5, r5
    314e:	66 24       	eor	r6, r6
    3150:	77 24       	eor	r7, r7
		csp_log_error("Attempt to create HMAC authenticated packet, but CSP was compiled without HMAC support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	if (opts & CSP_O_XTEA) {
    3152:	45 28       	or	r4, r5
    3154:	46 28       	or	r4, r6
    3156:	47 28       	or	r4, r7
    3158:	e9 f5       	brne	.+122    	; 0x31d4 <csp_sendto+0xbc>
		csp_log_error("Attempt to create XTEA encrypted packet, but CSP was compiled without XTEA support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	if (opts & CSP_O_CRC32) {
    315a:	e6 fe       	sbrs	r14, 6
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <csp_sendto+0x4a>
#ifdef CSP_USE_CRC32
		packet->id.flags |= CSP_FCRC32;
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	92 87       	std	Z+10, r25	; 0x0a
		csp_log_error("Attempt to create CRC32 validated packet, but CSP was compiled without CRC32 support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	packet->id.dst = dest;
    3162:	64 fb       	bst	r22, 4
    3164:	99 27       	eor	r25, r25
    3166:	90 f9       	bld	r25, 0
    3168:	35 85       	ldd	r19, Z+13	; 0x0d
    316a:	3e 7f       	andi	r19, 0xFE	; 254
    316c:	39 2b       	or	r19, r25
    316e:	35 87       	std	Z+13, r19	; 0x0d
	packet->id.dport = dport;
    3170:	54 2f       	mov	r21, r20
    3172:	52 95       	swap	r21
    3174:	55 0f       	add	r21, r21
    3176:	55 0f       	add	r21, r21
    3178:	50 7c       	andi	r21, 0xC0	; 192
    317a:	93 85       	ldd	r25, Z+11	; 0x0b
    317c:	9f 73       	andi	r25, 0x3F	; 63
    317e:	95 2b       	or	r25, r21
    3180:	93 87       	std	Z+11, r25	; 0x0b
    3182:	46 95       	lsr	r20
    3184:	46 95       	lsr	r20
    3186:	4f 70       	andi	r20, 0x0F	; 15
    3188:	62 95       	swap	r22
    318a:	60 7f       	andi	r22, 0xF0	; 240
    318c:	64 2b       	or	r22, r20
    318e:	64 87       	std	Z+12, r22	; 0x0c
	packet->id.src = my_address;
    3190:	40 91 77 3f 	lds	r20, 0x3F77
    3194:	4f 71       	andi	r20, 0x1F	; 31
    3196:	44 0f       	add	r20, r20
    3198:	31 70       	andi	r19, 0x01	; 1
	packet->id.sport = src_port;
    319a:	2f 73       	andi	r18, 0x3F	; 63
    319c:	90 7c       	andi	r25, 0xC0	; 192
    319e:	29 2b       	or	r18, r25
    31a0:	23 87       	std	Z+11, r18	; 0x0b
	packet->id.pri = prio;
    31a2:	98 2f       	mov	r25, r24
    31a4:	92 95       	swap	r25
    31a6:	99 0f       	add	r25, r25
    31a8:	99 0f       	add	r25, r25
    31aa:	90 7c       	andi	r25, 0xC0	; 192
    31ac:	83 2f       	mov	r24, r19
    31ae:	84 2b       	or	r24, r20
    31b0:	89 2b       	or	r24, r25
    31b2:	85 87       	std	Z+13, r24	; 0x0d

	if (csp_send_direct(packet->id, packet, timeout) != CSP_ERR_NONE)
    31b4:	62 85       	ldd	r22, Z+10	; 0x0a
    31b6:	73 85       	ldd	r23, Z+11	; 0x0b
    31b8:	84 85       	ldd	r24, Z+12	; 0x0c
    31ba:	95 85       	ldd	r25, Z+13	; 0x0d
    31bc:	95 01       	movw	r18, r10
    31be:	84 01       	movw	r16, r8
    31c0:	af 01       	movw	r20, r30
    31c2:	d6 de       	rcall	.-596    	; 0x2f70 <csp_send_direct>
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	41 f0       	breq	.+16     	; 0x31d8 <csp_sendto+0xc0>
		return CSP_ERR_NOTSUP;
    31c8:	8b ef       	ldi	r24, 0xFB	; 251
    31ca:	9f ef       	ldi	r25, 0xFF	; 255
    31cc:	05 c0       	rjmp	.+10     	; 0x31d8 <csp_sendto+0xc0>

	packet->id.flags = 0;

	if (opts & CSP_O_RDP) {
		csp_log_error("Attempt to create RDP packet on connection-less socket\r\n");
		return CSP_ERR_INVAL;
    31ce:	8e ef       	ldi	r24, 0xFE	; 254
    31d0:	9f ef       	ldi	r25, 0xFF	; 255
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <csp_sendto+0xc0>
	if (opts & CSP_O_XTEA) {
#ifdef CSP_USE_XTEA
		packet->id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted packet, but CSP was compiled without XTEA support\r\n");
		return CSP_ERR_NOTSUP;
    31d4:	8b ef       	ldi	r24, 0xFB	; 251
    31d6:	9f ef       	ldi	r25, 0xFF	; 255
	if (csp_send_direct(packet->id, packet, timeout) != CSP_ERR_NONE)
		return CSP_ERR_NOTSUP;
	
	return CSP_ERR_NONE;

}
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	bf 90       	pop	r11
    31ea:	af 90       	pop	r10
    31ec:	9f 90       	pop	r9
    31ee:	8f 90       	pop	r8
    31f0:	7f 90       	pop	r7
    31f2:	6f 90       	pop	r6
    31f4:	5f 90       	pop	r5
    31f6:	4f 90       	pop	r4
    31f8:	08 95       	ret

000031fa <csp_port_get_socket>:

csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;

	if (port > CSP_ANY)
    31fa:	81 32       	cpi	r24, 0x21	; 33
    31fc:	91 05       	cpc	r25, r1
    31fe:	f0 f4       	brcc	.+60     	; 0x323c <csp_port_get_socket+0x42>
		return NULL;

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN)
    3200:	fc 01       	movw	r30, r24
    3202:	ee 0f       	add	r30, r30
    3204:	ff 1f       	adc	r31, r31
    3206:	e8 0f       	add	r30, r24
    3208:	f9 1f       	adc	r31, r25
    320a:	ef 5f       	subi	r30, 0xFF	; 255
    320c:	f1 4c       	sbci	r31, 0xC1	; 193
    320e:	20 81       	ld	r18, Z
    3210:	21 30       	cpi	r18, 0x01	; 1
    3212:	59 f4       	brne	.+22     	; 0x322a <csp_port_get_socket+0x30>
		ret = ports[port].socket;
    3214:	fc 01       	movw	r30, r24
    3216:	ee 0f       	add	r30, r30
    3218:	ff 1f       	adc	r31, r31
    321a:	8e 0f       	add	r24, r30
    321c:	9f 1f       	adc	r25, r31
    321e:	fc 01       	movw	r30, r24
    3220:	ef 5f       	subi	r30, 0xFF	; 255
    3222:	f1 4c       	sbci	r31, 0xC1	; 193
    3224:	81 81       	ldd	r24, Z+1	; 0x01
    3226:	92 81       	ldd	r25, Z+2	; 0x02
    3228:	08 95       	ret
	else if (ports[CSP_ANY].state == PORT_OPEN)
    322a:	80 91 61 3e 	lds	r24, 0x3E61
    322e:	81 30       	cpi	r24, 0x01	; 1
    3230:	41 f4       	brne	.+16     	; 0x3242 <csp_port_get_socket+0x48>
		ret = ports[CSP_ANY].socket;
    3232:	80 91 62 3e 	lds	r24, 0x3E62
    3236:	90 91 63 3e 	lds	r25, 0x3E63
    323a:	08 95       	ret
csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;

	if (port > CSP_ANY)
		return NULL;
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	08 95       	ret
/* Allocation of ports */
static csp_port_t ports[CSP_MAX_BIND_PORT + 2];

csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
	else if (ports[CSP_ANY].state == PORT_OPEN)
		ret = ports[CSP_ANY].socket;

	return ret;

}
    3246:	08 95       	ret

00003248 <csp_port_init>:

int csp_port_init(void) {

	memset(ports, PORT_CLOSED, sizeof(csp_port_t) * (CSP_MAX_BIND_PORT + 2));
    3248:	83 e6       	ldi	r24, 0x63	; 99
    324a:	e1 e0       	ldi	r30, 0x01	; 1
    324c:	fe e3       	ldi	r31, 0x3E	; 62
    324e:	df 01       	movw	r26, r30
    3250:	1d 92       	st	X+, r1
    3252:	8a 95       	dec	r24
    3254:	e9 f7       	brne	.-6      	; 0x3250 <csp_port_init+0x8>

	return CSP_ERR_NONE;

}
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	08 95       	ret

0000325c <csp_listen>:

int csp_listen(csp_socket_t * socket, size_t conn_queue_length) {
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	ec 01       	movw	r28, r24
    3262:	cb 01       	movw	r24, r22
	
	if (socket == NULL)
    3264:	20 97       	sbiw	r28, 0x00	; 0
    3266:	81 f0       	breq	.+32     	; 0x3288 <csp_listen+0x2c>
		return CSP_ERR_INVAL;

	socket->socket = csp_queue_create(conn_queue_length, sizeof(csp_conn_t *));
    3268:	62 e0       	ldi	r22, 0x02	; 2
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	ca d8       	rcall	.-3692   	; 0x2402 <csp_queue_create>
    326e:	8e 87       	std	Y+14, r24	; 0x0e
    3270:	9f 87       	std	Y+15, r25	; 0x0f
	if (socket->socket == NULL)
    3272:	21 e0       	ldi	r18, 0x01	; 1
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	89 2b       	or	r24, r25
    3278:	11 f0       	breq	.+4      	; 0x327e <csp_listen+0x22>
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	88 27       	eor	r24, r24
    3280:	99 27       	eor	r25, r25
    3282:	82 1b       	sub	r24, r18
    3284:	93 0b       	sbc	r25, r19
    3286:	02 c0       	rjmp	.+4      	; 0x328c <csp_listen+0x30>
}

int csp_listen(csp_socket_t * socket, size_t conn_queue_length) {
	
	if (socket == NULL)
		return CSP_ERR_INVAL;
    3288:	8e ef       	ldi	r24, 0xFE	; 254
    328a:	9f ef       	ldi	r25, 0xFF	; 255
	if (socket->socket == NULL)
		return CSP_ERR_NOMEM;

	return CSP_ERR_NONE;

}
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	08 95       	ret

00003292 <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
	
	if (socket == NULL)
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	e1 f0       	breq	.+56     	; 0x32ce <csp_bind+0x3c>
		return CSP_ERR_INVAL;

	if (port > CSP_ANY) {
    3296:	61 32       	cpi	r22, 0x21	; 33
    3298:	e8 f4       	brcc	.+58     	; 0x32d4 <csp_bind+0x42>
		csp_log_error("Only ports from 0-%u (and CSP_ANY for default) are available for incoming ports\r\n", CSP_ANY);
		return CSP_ERR_INVAL;
	}

	/* Check if port number is valid */
	if (ports[port].state != PORT_CLOSED) {
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	fb 01       	movw	r30, r22
    329e:	ee 0f       	add	r30, r30
    32a0:	ff 1f       	adc	r31, r31
    32a2:	e6 0f       	add	r30, r22
    32a4:	f7 1f       	adc	r31, r23
    32a6:	ef 5f       	subi	r30, 0xFF	; 255
    32a8:	f1 4c       	sbci	r31, 0xC1	; 193
    32aa:	20 81       	ld	r18, Z
    32ac:	21 11       	cpse	r18, r1
    32ae:	15 c0       	rjmp	.+42     	; 0x32da <csp_bind+0x48>
	}

	csp_log_info("Binding socket %p to port %u\r\n", socket, port);

	/* Save listener */
	ports[port].socket = socket;
    32b0:	fb 01       	movw	r30, r22
    32b2:	ee 0f       	add	r30, r30
    32b4:	ff 1f       	adc	r31, r31
    32b6:	6e 0f       	add	r22, r30
    32b8:	7f 1f       	adc	r23, r31
    32ba:	fb 01       	movw	r30, r22
    32bc:	ef 5f       	subi	r30, 0xFF	; 255
    32be:	f1 4c       	sbci	r31, 0xC1	; 193
    32c0:	81 83       	std	Z+1, r24	; 0x01
    32c2:	92 83       	std	Z+2, r25	; 0x02
	ports[port].state = PORT_OPEN;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	80 83       	st	Z, r24

	return CSP_ERR_NONE;
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	08 95       	ret
}

int csp_bind(csp_socket_t * socket, uint8_t port) {
	
	if (socket == NULL)
		return CSP_ERR_INVAL;
    32ce:	8e ef       	ldi	r24, 0xFE	; 254
    32d0:	9f ef       	ldi	r25, 0xFF	; 255
    32d2:	08 95       	ret

	if (port > CSP_ANY) {
		csp_log_error("Only ports from 0-%u (and CSP_ANY for default) are available for incoming ports\r\n", CSP_ANY);
		return CSP_ERR_INVAL;
    32d4:	8e ef       	ldi	r24, 0xFE	; 254
    32d6:	9f ef       	ldi	r25, 0xFF	; 255
    32d8:	08 95       	ret
	}

	/* Check if port number is valid */
	if (ports[port].state != PORT_CLOSED) {
		csp_log_error("Port %d is already in use\r\n", port);
		return CSP_ERR_USED;
    32da:	8c ef       	ldi	r24, 0xFC	; 252
    32dc:	9f ef       	ldi	r25, 0xFF	; 255
	ports[port].socket = socket;
	ports[port].state = PORT_OPEN;

	return CSP_ERR_NONE;

}
    32de:	08 95       	ret

000032e0 <csp_route_security_check>:
	return prio;
#else
	return 0;
#endif

}
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	ea 01       	movw	r28, r20
    32ea:	89 01       	movw	r16, r18
    32ec:	f9 01       	movw	r30, r18
    32ee:	82 85       	ldd	r24, Z+10	; 0x0a
    32f0:	82 ff       	sbrs	r24, 2
    32f2:	0e c0       	rjmp	.+28     	; 0x3310 <csp_route_security_check+0x30>
    32f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32f8:	a8 a1       	ldd	r26, Y+32	; 0x20
    32fa:	b9 a1       	ldd	r27, Y+33	; 0x21
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	a1 1d       	adc	r26, r1
    3300:	b1 1d       	adc	r27, r1
    3302:	8e 8f       	std	Y+30, r24	; 0x1e
    3304:	9f 8f       	std	Y+31, r25	; 0x1f
    3306:	a8 a3       	std	Y+32, r26	; 0x20
    3308:	b9 a3       	std	Y+33, r27	; 0x21
    330a:	8b ef       	ldi	r24, 0xFB	; 251
    330c:	9f ef       	ldi	r25, 0xFF	; 255
    330e:	28 c0       	rjmp	.+80     	; 0x3360 <csp_route_security_check+0x80>
    3310:	80 ff       	sbrs	r24, 0
    3312:	12 c0       	rjmp	.+36     	; 0x3338 <csp_route_security_check+0x58>
    3314:	c9 01       	movw	r24, r18
    3316:	cc dc       	rcall	.-1640   	; 0x2cb0 <csp_crc32_verify>
    3318:	89 2b       	or	r24, r25
    331a:	71 f0       	breq	.+28     	; 0x3338 <csp_route_security_check+0x58>
    331c:	8e 89       	ldd	r24, Y+22	; 0x16
    331e:	9f 89       	ldd	r25, Y+23	; 0x17
    3320:	a8 8d       	ldd	r26, Y+24	; 0x18
    3322:	b9 8d       	ldd	r27, Y+25	; 0x19
    3324:	01 96       	adiw	r24, 0x01	; 1
    3326:	a1 1d       	adc	r26, r1
    3328:	b1 1d       	adc	r27, r1
    332a:	8e 8b       	std	Y+22, r24	; 0x16
    332c:	9f 8b       	std	Y+23, r25	; 0x17
    332e:	a8 8f       	std	Y+24, r26	; 0x18
    3330:	b9 8f       	std	Y+25, r27	; 0x19
    3332:	8a e9       	ldi	r24, 0x9A	; 154
    3334:	9f ef       	ldi	r25, 0xFF	; 255
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <csp_route_security_check+0x80>
    3338:	f8 01       	movw	r30, r16
    333a:	82 85       	ldd	r24, Z+10	; 0x0a
    333c:	83 ff       	sbrs	r24, 3
    333e:	0e c0       	rjmp	.+28     	; 0x335c <csp_route_security_check+0x7c>
    3340:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3342:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3344:	a8 a1       	ldd	r26, Y+32	; 0x20
    3346:	b9 a1       	ldd	r27, Y+33	; 0x21
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	a1 1d       	adc	r26, r1
    334c:	b1 1d       	adc	r27, r1
    334e:	8e 8f       	std	Y+30, r24	; 0x1e
    3350:	9f 8f       	std	Y+31, r25	; 0x1f
    3352:	a8 a3       	std	Y+32, r26	; 0x20
    3354:	b9 a3       	std	Y+33, r27	; 0x21
    3356:	8b ef       	ldi	r24, 0xFB	; 251
    3358:	9f ef       	ldi	r25, 0xFF	; 255
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <csp_route_security_check+0x80>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	08 95       	ret

0000336a <csp_route_next_packet>:
    336a:	2f ef       	ldi	r18, 0xFF	; 255
    336c:	3f ef       	ldi	r19, 0xFF	; 255
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	bc 01       	movw	r22, r24
    3374:	80 91 64 3e 	lds	r24, 0x3E64
    3378:	90 91 65 3e 	lds	r25, 0x3E65
    337c:	57 d8       	rcall	.-3922   	; 0x242c <csp_queue_dequeue>
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	19 f0       	breq	.+6      	; 0x3388 <csp_route_next_packet+0x1e>
    3382:	8d ef       	ldi	r24, 0xFD	; 253
    3384:	9f ef       	ldi	r25, 0xFF	; 255
    3386:	08 95       	ret
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	08 95       	ret

0000338e <csp_route_start_task>:
    338e:	ef 92       	push	r14
    3390:	ff 92       	push	r15
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	0f 2e       	mov	r0, r31
    3398:	f6 e6       	ldi	r31, 0x66	; 102
    339a:	ef 2e       	mov	r14, r31
    339c:	fe e3       	ldi	r31, 0x3E	; 62
    339e:	ff 2e       	mov	r15, r31
    33a0:	f0 2d       	mov	r31, r0
    33a2:	8b 01       	movw	r16, r22
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	ac 01       	movw	r20, r24
    33aa:	6e e8       	ldi	r22, 0x8E	; 142
    33ac:	70 e2       	ldi	r23, 0x20	; 32
    33ae:	8b e9       	ldi	r24, 0x9B	; 155
    33b0:	9a e1       	ldi	r25, 0x1A	; 26
    33b2:	08 d9       	rcall	.-3568   	; 0x25c4 <csp_thread_create>
    33b4:	21 e0       	ldi	r18, 0x01	; 1
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	89 2b       	or	r24, r25
    33ba:	11 f4       	brne	.+4      	; 0x33c0 <csp_route_start_task+0x32>
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	88 27       	eor	r24, r24
    33c2:	99 27       	eor	r25, r25
    33c4:	82 1b       	sub	r24, r18
    33c6:	93 0b       	sbc	r25, r19
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	08 95       	ret

000033d2 <csp_route_get_if_by_name>:
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	8c 01       	movw	r16, r24
    33dc:	c0 91 cb 3e 	lds	r28, 0x3ECB
    33e0:	d0 91 cc 3e 	lds	r29, 0x3ECC
    33e4:	20 97       	sbiw	r28, 0x00	; 0
    33e6:	71 f0       	breq	.+28     	; 0x3404 <csp_route_get_if_by_name+0x32>
    33e8:	4a e0       	ldi	r20, 0x0A	; 10
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	b8 01       	movw	r22, r16
    33ee:	88 81       	ld	r24, Y
    33f0:	99 81       	ldd	r25, Y+1	; 0x01
    33f2:	0e 94 06 2c 	call	0x580c	; 0x580c <strncmp>
    33f6:	89 2b       	or	r24, r25
    33f8:	29 f0       	breq	.+10     	; 0x3404 <csp_route_get_if_by_name+0x32>
    33fa:	0a a8       	ldd	r0, Y+50	; 0x32
    33fc:	db a9       	ldd	r29, Y+51	; 0x33
    33fe:	c0 2d       	mov	r28, r0
    3400:	20 97       	sbiw	r28, 0x00	; 0
    3402:	91 f7       	brne	.-28     	; 0x33e8 <csp_route_get_if_by_name+0x16>
    3404:	ce 01       	movw	r24, r28
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	08 95       	ret

00003410 <csp_route_add_if>:
    3410:	a0 91 cb 3e 	lds	r26, 0x3ECB
    3414:	b0 91 cc 3e 	lds	r27, 0x3ECC
    3418:	10 97       	sbiw	r26, 0x00	; 0
    341a:	41 f4       	brne	.+16     	; 0x342c <csp_route_add_if+0x1c>
    341c:	80 93 cb 3e 	sts	0x3ECB, r24
    3420:	90 93 cc 3e 	sts	0x3ECC, r25
    3424:	fc 01       	movw	r30, r24
    3426:	12 aa       	std	Z+50, r1	; 0x32
    3428:	13 aa       	std	Z+51, r1	; 0x33
    342a:	08 95       	ret
    342c:	a8 17       	cp	r26, r24
    342e:	b9 07       	cpc	r27, r25
    3430:	b9 f0       	breq	.+46     	; 0x3460 <csp_route_add_if+0x50>
    3432:	d2 96       	adiw	r26, 0x32	; 50
    3434:	ed 91       	ld	r30, X+
    3436:	fc 91       	ld	r31, X
    3438:	d3 97       	sbiw	r26, 0x33	; 51
    343a:	30 97       	sbiw	r30, 0x00	; 0
    343c:	39 f4       	brne	.+14     	; 0x344c <csp_route_add_if+0x3c>
    343e:	0a c0       	rjmp	.+20     	; 0x3454 <csp_route_add_if+0x44>
    3440:	22 a9       	ldd	r18, Z+50	; 0x32
    3442:	33 a9       	ldd	r19, Z+51	; 0x33
    3444:	21 15       	cp	r18, r1
    3446:	31 05       	cpc	r19, r1
    3448:	31 f0       	breq	.+12     	; 0x3456 <csp_route_add_if+0x46>
    344a:	f9 01       	movw	r30, r18
    344c:	8e 17       	cp	r24, r30
    344e:	9f 07       	cpc	r25, r31
    3450:	b9 f7       	brne	.-18     	; 0x3440 <csp_route_add_if+0x30>
    3452:	08 95       	ret
    3454:	fd 01       	movw	r30, r26
    3456:	82 ab       	std	Z+50, r24	; 0x32
    3458:	93 ab       	std	Z+51, r25	; 0x33
    345a:	fc 01       	movw	r30, r24
    345c:	12 aa       	std	Z+50, r1	; 0x32
    345e:	13 aa       	std	Z+51, r1	; 0x33
    3460:	08 95       	ret

00003462 <csp_route_set>:
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	18 2f       	mov	r17, r24
    346c:	eb 01       	movw	r28, r22
    346e:	04 2f       	mov	r16, r20
    3470:	20 97       	sbiw	r28, 0x00	; 0
    3472:	99 f0       	breq	.+38     	; 0x349a <csp_route_set+0x38>
    3474:	cb 01       	movw	r24, r22
    3476:	cc df       	rcall	.-104    	; 0x3410 <csp_route_add_if>
    3478:	11 32       	cpi	r17, 0x21	; 33
    347a:	90 f4       	brcc	.+36     	; 0x34a0 <csp_route_set+0x3e>
    347c:	81 2f       	mov	r24, r17
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	fc 01       	movw	r30, r24
    3482:	ee 0f       	add	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	e8 0f       	add	r30, r24
    3488:	f9 1f       	adc	r31, r25
    348a:	e8 59       	subi	r30, 0x98	; 152
    348c:	f1 4c       	sbci	r31, 0xC1	; 193
    348e:	c0 83       	st	Z, r28
    3490:	d1 83       	std	Z+1, r29	; 0x01
    3492:	02 83       	std	Z+2, r16	; 0x02
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <csp_route_set+0x42>
    349a:	8e ef       	ldi	r24, 0xFE	; 254
    349c:	9f ef       	ldi	r25, 0xFF	; 255
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <csp_route_set+0x42>
    34a0:	8e ef       	ldi	r24, 0xFE	; 254
    34a2:	9f ef       	ldi	r25, 0xFF	; 255
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	08 95       	ret

000034ae <csp_route_table_init>:
    34ae:	83 e6       	ldi	r24, 0x63	; 99
    34b0:	e8 e6       	ldi	r30, 0x68	; 104
    34b2:	fe e3       	ldi	r31, 0x3E	; 62
    34b4:	df 01       	movw	r26, r30
    34b6:	1d 92       	st	X+, r1
    34b8:	8a 95       	dec	r24
    34ba:	e9 f7       	brne	.-6      	; 0x34b6 <csp_route_table_init+0x8>
    34bc:	80 91 64 3e 	lds	r24, 0x3E64
    34c0:	90 91 65 3e 	lds	r25, 0x3E65
    34c4:	89 2b       	or	r24, r25
    34c6:	61 f4       	brne	.+24     	; 0x34e0 <csp_route_table_init+0x32>
    34c8:	64 e0       	ldi	r22, 0x04	; 4
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	8a e0       	ldi	r24, 0x0A	; 10
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 01 12 	call	0x2402	; 0x2402 <csp_queue_create>
    34d4:	80 93 64 3e 	sts	0x3E64, r24
    34d8:	90 93 65 3e 	sts	0x3E65, r25
    34dc:	89 2b       	or	r24, r25
    34de:	71 f0       	breq	.+28     	; 0x34fc <csp_route_table_init+0x4e>
    34e0:	4f ef       	ldi	r20, 0xFF	; 255
    34e2:	6b e3       	ldi	r22, 0x3B	; 59
    34e4:	70 e2       	ldi	r23, 0x20	; 32
    34e6:	80 91 77 3f 	lds	r24, 0x3F77
    34ea:	bb df       	rcall	.-138    	; 0x3462 <csp_route_set>
    34ec:	4f ef       	ldi	r20, 0xFF	; 255
    34ee:	6b e3       	ldi	r22, 0x3B	; 59
    34f0:	70 e2       	ldi	r23, 0x20	; 32
    34f2:	80 e2       	ldi	r24, 0x20	; 32
    34f4:	b6 df       	rcall	.-148    	; 0x3462 <csp_route_set>
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	08 95       	ret
    34fc:	8f ef       	ldi	r24, 0xFF	; 255
    34fe:	9f ef       	ldi	r25, 0xFF	; 255
    3500:	08 95       	ret

00003502 <csp_route_if>:
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	fc 01       	movw	r30, r24
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	e8 0f       	add	r30, r24
    350c:	f9 1f       	adc	r31, r25
    350e:	e8 59       	subi	r30, 0x98	; 152
    3510:	f1 4c       	sbci	r31, 0xC1	; 193
    3512:	20 81       	ld	r18, Z
    3514:	31 81       	ldd	r19, Z+1	; 0x01
    3516:	23 2b       	or	r18, r19
    3518:	11 f0       	breq	.+4      	; 0x351e <csp_route_if+0x1c>
    351a:	cf 01       	movw	r24, r30
    351c:	08 95       	ret
    351e:	80 91 c8 3e 	lds	r24, 0x3EC8
    3522:	90 91 c9 3e 	lds	r25, 0x3EC9
    3526:	89 2b       	or	r24, r25
    3528:	19 f0       	breq	.+6      	; 0x3530 <csp_route_if+0x2e>
    352a:	88 ec       	ldi	r24, 0xC8	; 200
    352c:	9e e3       	ldi	r25, 0x3E	; 62
    352e:	08 95       	ret
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	08 95       	ret

00003536 <csp_task_router>:
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	00 d0       	rcall	.+0      	; 0x353c <csp_task_router+0x6>
    353c:	00 d0       	rcall	.+0      	; 0x353e <csp_task_router+0x8>
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	ce 01       	movw	r24, r28
    3544:	01 96       	adiw	r24, 0x01	; 1
    3546:	11 df       	rcall	.-478    	; 0x336a <csp_route_next_packet>
    3548:	89 2b       	or	r24, r25
    354a:	d9 f7       	brne	.-10     	; 0x3542 <csp_task_router+0xc>
    354c:	cb 80       	ldd	r12, Y+3	; 0x03
    354e:	dc 80       	ldd	r13, Y+4	; 0x04
    3550:	cd 82       	std	Y+5, r12	; 0x05
    3552:	de 82       	std	Y+6, r13	; 0x06
    3554:	d6 01       	movw	r26, r12
    3556:	1c 96       	adiw	r26, 0x0c	; 12
    3558:	9c 91       	ld	r25, X
    355a:	1c 97       	sbiw	r26, 0x0c	; 12
    355c:	92 95       	swap	r25
    355e:	9f 70       	andi	r25, 0x0F	; 15
    3560:	1d 96       	adiw	r26, 0x0d	; 13
    3562:	8c 91       	ld	r24, X
    3564:	81 70       	andi	r24, 0x01	; 1
    3566:	82 95       	swap	r24
    3568:	80 7f       	andi	r24, 0xF0	; 240
    356a:	89 2b       	or	r24, r25
    356c:	48 2f       	mov	r20, r24
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	20 91 77 3f 	lds	r18, 0x3F77
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	42 17       	cp	r20, r18
    3578:	53 07       	cpc	r21, r19
    357a:	21 f1       	breq	.+72     	; 0x35c4 <csp_task_router+0x8e>
    357c:	8f 31       	cpi	r24, 0x1F	; 31
    357e:	11 f1       	breq	.+68     	; 0x35c4 <csp_task_router+0x8e>
    3580:	c0 df       	rcall	.-128    	; 0x3502 <csp_route_if>
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	59 f0       	breq	.+22     	; 0x359c <csp_task_router+0x66>
    3586:	dc 01       	movw	r26, r24
    3588:	ed 91       	ld	r30, X+
    358a:	fc 91       	ld	r31, X
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	e8 17       	cp	r30, r24
    3592:	f9 07       	cpc	r31, r25
    3594:	31 f4       	brne	.+12     	; 0x35a2 <csp_task_router+0x6c>
    3596:	81 85       	ldd	r24, Z+9	; 0x09
    3598:	81 11       	cpse	r24, r1
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <csp_task_router+0x6c>
    359c:	c6 01       	movw	r24, r12
    359e:	48 d9       	rcall	.-3440   	; 0x2830 <csp_buffer_free>
    35a0:	d0 cf       	rjmp	.-96     	; 0x3542 <csp_task_router+0xc>
    35a2:	f6 01       	movw	r30, r12
    35a4:	62 85       	ldd	r22, Z+10	; 0x0a
    35a6:	73 85       	ldd	r23, Z+11	; 0x0b
    35a8:	84 85       	ldd	r24, Z+12	; 0x0c
    35aa:	95 85       	ldd	r25, Z+13	; 0x0d
    35ac:	00 e0       	ldi	r16, 0x00	; 0
    35ae:	10 e0       	ldi	r17, 0x00	; 0
    35b0:	98 01       	movw	r18, r16
    35b2:	a6 01       	movw	r20, r12
    35b4:	dd dc       	rcall	.-1606   	; 0x2f70 <csp_send_direct>
    35b6:	89 2b       	or	r24, r25
    35b8:	09 f4       	brne	.+2      	; 0x35bc <csp_task_router+0x86>
    35ba:	c3 cf       	rjmp	.-122    	; 0x3542 <csp_task_router+0xc>
    35bc:	8d 81       	ldd	r24, Y+5	; 0x05
    35be:	9e 81       	ldd	r25, Y+6	; 0x06
    35c0:	37 d9       	rcall	.-3474   	; 0x2830 <csp_buffer_free>
    35c2:	bf cf       	rjmp	.-130    	; 0x3542 <csp_task_router+0xc>
    35c4:	d6 01       	movw	r26, r12
    35c6:	1b 96       	adiw	r26, 0x0b	; 11
    35c8:	9c 91       	ld	r25, X
    35ca:	1b 97       	sbiw	r26, 0x0b	; 11
    35cc:	92 95       	swap	r25
    35ce:	96 95       	lsr	r25
    35d0:	96 95       	lsr	r25
    35d2:	93 70       	andi	r25, 0x03	; 3
    35d4:	1c 96       	adiw	r26, 0x0c	; 12
    35d6:	8c 91       	ld	r24, X
    35d8:	8f 70       	andi	r24, 0x0F	; 15
    35da:	88 0f       	add	r24, r24
    35dc:	88 0f       	add	r24, r24
    35de:	89 2b       	or	r24, r25
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0b de       	rcall	.-1002   	; 0x31fa <csp_port_get_socket>
    35e4:	8c 01       	movw	r16, r24
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	09 f4       	brne	.+2      	; 0x35ec <csp_task_router+0xb6>
    35ea:	b5 c0       	rjmp	.+362    	; 0x3756 <csp_task_router+0x220>
    35ec:	fc 01       	movw	r30, r24
    35ee:	64 89       	ldd	r22, Z+20	; 0x14
    35f0:	75 89       	ldd	r23, Z+21	; 0x15
    35f2:	86 89       	ldd	r24, Z+22	; 0x16
    35f4:	97 89       	ldd	r25, Z+23	; 0x17
    35f6:	70 ff       	sbrs	r23, 0
    35f8:	bd c0       	rjmp	.+378    	; 0x3774 <csp_task_router+0x23e>
    35fa:	2d 81       	ldd	r18, Y+5	; 0x05
    35fc:	3e 81       	ldd	r19, Y+6	; 0x06
    35fe:	49 81       	ldd	r20, Y+1	; 0x01
    3600:	5a 81       	ldd	r21, Y+2	; 0x02
    3602:	6e de       	rcall	.-804    	; 0x32e0 <csp_route_security_check>
    3604:	99 23       	and	r25, r25
    3606:	24 f4       	brge	.+8      	; 0x3610 <csp_task_router+0xda>
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	11 d9       	rcall	.-3550   	; 0x2830 <csp_buffer_free>
    360e:	99 cf       	rjmp	.-206    	; 0x3542 <csp_task_router+0xc>
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	a9 01       	movw	r20, r18
    3616:	be 01       	movw	r22, r28
    3618:	6b 5f       	subi	r22, 0xFB	; 251
    361a:	7f 4f       	sbci	r23, 0xFF	; 255
    361c:	d8 01       	movw	r26, r16
    361e:	1e 96       	adiw	r26, 0x0e	; 14
    3620:	8d 91       	ld	r24, X+
    3622:	9c 91       	ld	r25, X
    3624:	1f 97       	sbiw	r26, 0x0f	; 15
    3626:	0e 94 04 12 	call	0x2408	; 0x2408 <csp_queue_enqueue>
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	09 f4       	brne	.+2      	; 0x3630 <csp_task_router+0xfa>
    362e:	89 cf       	rjmp	.-238    	; 0x3542 <csp_task_router+0xc>
    3630:	8d 81       	ldd	r24, Y+5	; 0x05
    3632:	9e 81       	ldd	r25, Y+6	; 0x06
    3634:	fd d8       	rcall	.-3590   	; 0x2830 <csp_buffer_free>
    3636:	85 cf       	rjmp	.-246    	; 0x3542 <csp_task_router+0xc>
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	f9 d8       	rcall	.-3598   	; 0x2830 <csp_buffer_free>
    363e:	81 cf       	rjmp	.-254    	; 0x3542 <csp_task_router+0xc>
    3640:	2d 81       	ldd	r18, Y+5	; 0x05
    3642:	3e 81       	ldd	r19, Y+6	; 0x06
    3644:	49 81       	ldd	r20, Y+1	; 0x01
    3646:	5a 81       	ldd	r21, Y+2	; 0x02
    3648:	f8 01       	movw	r30, r16
    364a:	64 89       	ldd	r22, Z+20	; 0x14
    364c:	75 89       	ldd	r23, Z+21	; 0x15
    364e:	86 89       	ldd	r24, Z+22	; 0x16
    3650:	97 89       	ldd	r25, Z+23	; 0x17
    3652:	46 de       	rcall	.-884    	; 0x32e0 <csp_route_security_check>
    3654:	99 23       	and	r25, r25
    3656:	24 f4       	brge	.+8      	; 0x3660 <csp_task_router+0x12a>
    3658:	8d 81       	ldd	r24, Y+5	; 0x05
    365a:	9e 81       	ldd	r25, Y+6	; 0x06
    365c:	e9 d8       	rcall	.-3630   	; 0x2830 <csp_buffer_free>
    365e:	71 cf       	rjmp	.-286    	; 0x3542 <csp_task_router+0xc>
    3660:	ed 81       	ldd	r30, Y+5	; 0x05
    3662:	fe 81       	ldd	r31, Y+6	; 0x06
    3664:	95 85       	ldd	r25, Z+13	; 0x0d
    3666:	89 2f       	mov	r24, r25
    3668:	80 7c       	andi	r24, 0xC0	; 192
    366a:	2f 2d       	mov	r18, r15
    366c:	2f 73       	andi	r18, 0x3F	; 63
    366e:	f2 2e       	mov	r15, r18
    3670:	f8 2a       	or	r15, r24
    3672:	80 91 77 3f 	lds	r24, 0x3F77
    3676:	8f 71       	andi	r24, 0x1F	; 31
    3678:	88 0f       	add	r24, r24
    367a:	2f 2d       	mov	r18, r15
    367c:	21 7c       	andi	r18, 0xC1	; 193
    367e:	f2 2e       	mov	r15, r18
    3680:	f8 2a       	or	r15, r24
    3682:	96 95       	lsr	r25
    3684:	94 fb       	bst	r25, 4
    3686:	88 27       	eor	r24, r24
    3688:	80 f9       	bld	r24, 0
    368a:	80 fb       	bst	r24, 0
    368c:	f0 f8       	bld	r15, 0
    368e:	83 85       	ldd	r24, Z+11	; 0x0b
    3690:	48 2f       	mov	r20, r24
    3692:	4f 73       	andi	r20, 0x3F	; 63
    3694:	46 95       	lsr	r20
    3696:	46 95       	lsr	r20
    3698:	92 95       	swap	r25
    369a:	90 7f       	andi	r25, 0xF0	; 240
    369c:	49 2b       	or	r20, r25
    369e:	98 2f       	mov	r25, r24
    36a0:	92 95       	swap	r25
    36a2:	96 95       	lsr	r25
    36a4:	96 95       	lsr	r25
    36a6:	93 70       	andi	r25, 0x03	; 3
    36a8:	34 85       	ldd	r19, Z+12	; 0x0c
    36aa:	3f 70       	andi	r19, 0x0F	; 15
    36ac:	33 0f       	add	r19, r19
    36ae:	33 0f       	add	r19, r19
    36b0:	39 2b       	or	r19, r25
    36b2:	82 95       	swap	r24
    36b4:	88 0f       	add	r24, r24
    36b6:	88 0f       	add	r24, r24
    36b8:	80 7c       	andi	r24, 0xC0	; 192
    36ba:	38 2b       	or	r19, r24
    36bc:	22 85       	ldd	r18, Z+10	; 0x0a
    36be:	62 85       	ldd	r22, Z+10	; 0x0a
    36c0:	73 85       	ldd	r23, Z+11	; 0x0b
    36c2:	84 85       	ldd	r24, Z+12	; 0x0c
    36c4:	95 85       	ldd	r25, Z+13	; 0x0d
    36c6:	5f 2d       	mov	r21, r15
    36c8:	20 da       	rcall	.-3008   	; 0x2b0a <csp_conn_new>
    36ca:	6c 01       	movw	r12, r24
    36cc:	00 97       	sbiw	r24, 0x00	; 0
    36ce:	21 f4       	brne	.+8      	; 0x36d8 <csp_task_router+0x1a2>
    36d0:	8d 81       	ldd	r24, Y+5	; 0x05
    36d2:	9e 81       	ldd	r25, Y+6	; 0x06
    36d4:	ad d8       	rcall	.-3750   	; 0x2830 <csp_buffer_free>
    36d6:	35 cf       	rjmp	.-406    	; 0x3542 <csp_task_router+0xc>
    36d8:	d8 01       	movw	r26, r16
    36da:	1e 96       	adiw	r26, 0x0e	; 14
    36dc:	8d 91       	ld	r24, X+
    36de:	9c 91       	ld	r25, X
    36e0:	1f 97       	sbiw	r26, 0x0f	; 15
    36e2:	f6 01       	movw	r30, r12
    36e4:	86 87       	std	Z+14, r24	; 0x0e
    36e6:	97 87       	std	Z+15, r25	; 0x0f
    36e8:	54 96       	adiw	r26, 0x14	; 20
    36ea:	8d 91       	ld	r24, X+
    36ec:	9d 91       	ld	r25, X+
    36ee:	0d 90       	ld	r0, X+
    36f0:	bc 91       	ld	r27, X
    36f2:	a0 2d       	mov	r26, r0
    36f4:	84 8b       	std	Z+20, r24	; 0x14
    36f6:	95 8b       	std	Z+21, r25	; 0x15
    36f8:	a6 8b       	std	Z+22, r26	; 0x16
    36fa:	b7 8b       	std	Z+23, r27	; 0x17
    36fc:	12 c0       	rjmp	.+36     	; 0x3722 <csp_task_router+0x1ec>
    36fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3700:	3e 81       	ldd	r19, Y+6	; 0x06
    3702:	49 81       	ldd	r20, Y+1	; 0x01
    3704:	5a 81       	ldd	r21, Y+2	; 0x02
    3706:	d6 01       	movw	r26, r12
    3708:	54 96       	adiw	r26, 0x14	; 20
    370a:	6d 91       	ld	r22, X+
    370c:	7d 91       	ld	r23, X+
    370e:	8d 91       	ld	r24, X+
    3710:	9c 91       	ld	r25, X
    3712:	57 97       	sbiw	r26, 0x17	; 23
    3714:	e5 dd       	rcall	.-1078   	; 0x32e0 <csp_route_security_check>
    3716:	99 23       	and	r25, r25
    3718:	24 f4       	brge	.+8      	; 0x3722 <csp_task_router+0x1ec>
    371a:	8d 81       	ldd	r24, Y+5	; 0x05
    371c:	9e 81       	ldd	r25, Y+6	; 0x06
    371e:	88 d8       	rcall	.-3824   	; 0x2830 <csp_buffer_free>
    3720:	10 cf       	rjmp	.-480    	; 0x3542 <csp_task_router+0xc>
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	fc 01       	movw	r30, r24
    3728:	22 85       	ldd	r18, Z+10	; 0x0a
    372a:	21 ff       	sbrs	r18, 1
    372c:	10 c0       	rjmp	.+32     	; 0x374e <csp_task_router+0x218>
    372e:	e9 81       	ldd	r30, Y+1	; 0x01
    3730:	fa 81       	ldd	r31, Y+2	; 0x02
    3732:	46 89       	ldd	r20, Z+22	; 0x16
    3734:	57 89       	ldd	r21, Z+23	; 0x17
    3736:	60 8d       	ldd	r22, Z+24	; 0x18
    3738:	71 8d       	ldd	r23, Z+25	; 0x19
    373a:	4f 5f       	subi	r20, 0xFF	; 255
    373c:	5f 4f       	sbci	r21, 0xFF	; 255
    373e:	6f 4f       	sbci	r22, 0xFF	; 255
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	46 8b       	std	Z+22, r20	; 0x16
    3744:	57 8b       	std	Z+23, r21	; 0x17
    3746:	60 8f       	std	Z+24, r22	; 0x18
    3748:	71 8f       	std	Z+25, r23	; 0x19
    374a:	72 d8       	rcall	.-3868   	; 0x2830 <csp_buffer_free>
    374c:	fa ce       	rjmp	.-524    	; 0x3542 <csp_task_router+0xc>
    374e:	bc 01       	movw	r22, r24
    3750:	c6 01       	movw	r24, r12
    3752:	8a d3       	rcall	.+1812   	; 0x3e68 <csp_udp_new_packet>
    3754:	f6 ce       	rjmp	.-532    	; 0x3542 <csp_task_router+0xc>
    3756:	ed 81       	ldd	r30, Y+5	; 0x05
    3758:	fe 81       	ldd	r31, Y+6	; 0x06
    375a:	62 85       	ldd	r22, Z+10	; 0x0a
    375c:	73 85       	ldd	r23, Z+11	; 0x0b
    375e:	84 85       	ldd	r24, Z+12	; 0x0c
    3760:	95 85       	ldd	r25, Z+13	; 0x0d
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	3f ef       	ldi	r19, 0xFF	; 255
    3766:	4f ef       	ldi	r20, 0xFF	; 255
    3768:	5f e3       	ldi	r21, 0x3F	; 63
    376a:	0f d9       	rcall	.-3554   	; 0x298a <csp_conn_find>
    376c:	6c 01       	movw	r12, r24
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	31 f6       	brne	.-116    	; 0x36fe <csp_task_router+0x1c8>
    3772:	62 cf       	rjmp	.-316    	; 0x3638 <csp_task_router+0x102>
    3774:	ed 81       	ldd	r30, Y+5	; 0x05
    3776:	fe 81       	ldd	r31, Y+6	; 0x06
    3778:	62 85       	ldd	r22, Z+10	; 0x0a
    377a:	73 85       	ldd	r23, Z+11	; 0x0b
    377c:	84 85       	ldd	r24, Z+12	; 0x0c
    377e:	95 85       	ldd	r25, Z+13	; 0x0d
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	3f ef       	ldi	r19, 0xFF	; 255
    3784:	4f ef       	ldi	r20, 0xFF	; 255
    3786:	5f e3       	ldi	r21, 0x3F	; 63
    3788:	00 d9       	rcall	.-3584   	; 0x298a <csp_conn_find>
    378a:	6c 01       	movw	r12, r24
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	09 f0       	breq	.+2      	; 0x3792 <csp_task_router+0x25c>
    3790:	b6 cf       	rjmp	.-148    	; 0x36fe <csp_task_router+0x1c8>
    3792:	56 cf       	rjmp	.-340    	; 0x3640 <csp_task_router+0x10a>

00003794 <csp_route_enqueue>:
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	01 15       	cp	r16, r1
    379a:	11 05       	cpc	r17, r1
    379c:	19 f4       	brne	.+6      	; 0x37a4 <csp_route_enqueue+0x10>
    379e:	0e 94 04 12 	call	0x2408	; 0x2408 <csp_queue_enqueue>
    37a2:	03 c0       	rjmp	.+6      	; 0x37aa <csp_route_enqueue+0x16>
    37a4:	a8 01       	movw	r20, r16
    37a6:	0e 94 0f 12 	call	0x241e	; 0x241e <csp_queue_enqueue_isr>
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	19 f4       	brne	.+6      	; 0x37b4 <csp_route_enqueue+0x20>
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	02 c0       	rjmp	.+4      	; 0x37b8 <csp_route_enqueue+0x24>
    37b4:	87 ef       	ldi	r24, 0xF7	; 247
    37b6:	9f ef       	ldi	r25, 0xFF	; 255
    37b8:	1f 91       	pop	r17
    37ba:	0f 91       	pop	r16
    37bc:	08 95       	ret

000037be <csp_new_packet>:

void csp_new_packet(csp_packet_t * packet, csp_iface_t * interface, CSP_BASE_TYPE * pxTaskWoken) {
    37be:	af 92       	push	r10
    37c0:	bf 92       	push	r11
    37c2:	cf 92       	push	r12
    37c4:	df 92       	push	r13
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <csp_new_packet+0x16>
    37d4:	1f 92       	push	r1
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	6c 01       	movw	r12, r24
    37dc:	7b 01       	movw	r14, r22
    37de:	5a 01       	movw	r10, r20

	int result, fifo;

	if (packet == NULL) {
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <csp_new_packet+0x28>
    37e4:	50 c0       	rjmp	.+160    	; 0x3886 <csp_new_packet+0xc8>
		csp_log_warn("csp_new packet called with NULL packet\r\n");
		return;
	} else if (interface == NULL) {
    37e6:	61 15       	cp	r22, r1
    37e8:	71 05       	cpc	r23, r1
    37ea:	41 f4       	brne	.+16     	; 0x37fc <csp_new_packet+0x3e>
		csp_log_warn("csp_new packet called with NULL interface\r\n");
		if (pxTaskWoken == NULL)
    37ec:	41 15       	cp	r20, r1
    37ee:	51 05       	cpc	r21, r1
    37f0:	11 f4       	brne	.+4      	; 0x37f6 <csp_new_packet+0x38>
			csp_buffer_free(packet);
    37f2:	1e d8       	rcall	.-4036   	; 0x2830 <csp_buffer_free>
    37f4:	48 c0       	rjmp	.+144    	; 0x3886 <csp_new_packet+0xc8>
		else
			csp_buffer_free_isr(packet);
    37f6:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free_isr>
    37fa:	45 c0       	rjmp	.+138    	; 0x3886 <csp_new_packet+0xc8>
		return;
	}

	csp_route_queue_t queue_element;
	queue_element.interface = interface;
    37fc:	69 83       	std	Y+1, r22	; 0x01
    37fe:	7a 83       	std	Y+2, r23	; 0x02
	queue_element.outcomingPacket = packet;
    3800:	8b 83       	std	Y+3, r24	; 0x03
    3802:	9c 83       	std	Y+4, r25	; 0x04

	fifo = csp_route_get_fifo(packet->id.pri);
	result = csp_route_enqueue(router_input_fifo[fifo], &queue_element, 0, pxTaskWoken);
    3804:	8a 01       	movw	r16, r20
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	a9 01       	movw	r20, r18
    380c:	be 01       	movw	r22, r28
    380e:	6f 5f       	subi	r22, 0xFF	; 255
    3810:	7f 4f       	sbci	r23, 0xFF	; 255
    3812:	80 91 64 3e 	lds	r24, 0x3E64
    3816:	90 91 65 3e 	lds	r25, 0x3E65
    381a:	bc df       	rcall	.-136    	; 0x3794 <csp_route_enqueue>

	if (result != CSP_ERR_NONE) {
    381c:	89 2b       	or	r24, r25
    381e:	b1 f0       	breq	.+44     	; 0x384c <csp_new_packet+0x8e>
		csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.\r\n");
		interface->drop++;
    3820:	f7 01       	movw	r30, r14
    3822:	82 8d       	ldd	r24, Z+26	; 0x1a
    3824:	93 8d       	ldd	r25, Z+27	; 0x1b
    3826:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3828:	b5 8d       	ldd	r27, Z+29	; 0x1d
    382a:	01 96       	adiw	r24, 0x01	; 1
    382c:	a1 1d       	adc	r26, r1
    382e:	b1 1d       	adc	r27, r1
    3830:	82 8f       	std	Z+26, r24	; 0x1a
    3832:	93 8f       	std	Z+27, r25	; 0x1b
    3834:	a4 8f       	std	Z+28, r26	; 0x1c
    3836:	b5 8f       	std	Z+29, r27	; 0x1d
		if (pxTaskWoken == NULL)
    3838:	ab 28       	or	r10, r11
    383a:	21 f4       	brne	.+8      	; 0x3844 <csp_new_packet+0x86>
			csp_buffer_free(packet);
    383c:	c6 01       	movw	r24, r12
    383e:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
    3842:	21 c0       	rjmp	.+66     	; 0x3886 <csp_new_packet+0xc8>
		else
			csp_buffer_free_isr(packet);
    3844:	c6 01       	movw	r24, r12
    3846:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free_isr>
    384a:	1d c0       	rjmp	.+58     	; 0x3886 <csp_new_packet+0xc8>
	} else {
		interface->rx++;
    384c:	f7 01       	movw	r30, r14
    384e:	46 85       	ldd	r20, Z+14	; 0x0e
    3850:	57 85       	ldd	r21, Z+15	; 0x0f
    3852:	60 89       	ldd	r22, Z+16	; 0x10
    3854:	71 89       	ldd	r23, Z+17	; 0x11
    3856:	4f 5f       	subi	r20, 0xFF	; 255
    3858:	5f 4f       	sbci	r21, 0xFF	; 255
    385a:	6f 4f       	sbci	r22, 0xFF	; 255
    385c:	7f 4f       	sbci	r23, 0xFF	; 255
    385e:	46 87       	std	Z+14, r20	; 0x0e
    3860:	57 87       	std	Z+15, r21	; 0x0f
    3862:	60 8b       	std	Z+16, r22	; 0x10
    3864:	71 8b       	std	Z+17, r23	; 0x11
		interface->rxbytes += packet->length;
    3866:	f6 01       	movw	r30, r12
    3868:	20 85       	ldd	r18, Z+8	; 0x08
    386a:	31 85       	ldd	r19, Z+9	; 0x09
    386c:	f7 01       	movw	r30, r14
    386e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3870:	93 a5       	ldd	r25, Z+43	; 0x2b
    3872:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3874:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3876:	82 0f       	add	r24, r18
    3878:	93 1f       	adc	r25, r19
    387a:	a1 1d       	adc	r26, r1
    387c:	b1 1d       	adc	r27, r1
    387e:	82 a7       	std	Z+42, r24	; 0x2a
    3880:	93 a7       	std	Z+43, r25	; 0x2b
    3882:	a4 a7       	std	Z+44, r26	; 0x2c
    3884:	b5 a7       	std	Z+45, r27	; 0x2d
	}

}
    3886:	24 96       	adiw	r28, 0x04	; 4
    3888:	cd bf       	out	0x3d, r28	; 61
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	ff 90       	pop	r15
    3896:	ef 90       	pop	r14
    3898:	df 90       	pop	r13
    389a:	cf 90       	pop	r12
    389c:	bf 90       	pop	r11
    389e:	af 90       	pop	r10
    38a0:	08 95       	ret

000038a2 <csp_route_get_nexthop_mac>:

uint8_t csp_route_get_nexthop_mac(uint8_t node) {

	csp_route_t * route = csp_route_if(node);
    38a2:	2f de       	rcall	.-930    	; 0x3502 <csp_route_if>
	return route->nexthop_mac_addr;

}
    38a4:	fc 01       	movw	r30, r24
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	08 95       	ret

000038aa <csp_cmp_handler>:
	return CSP_ERR_NONE;

}

/* CSP Management Protocol handler */
int csp_cmp_handler(csp_conn_t * conn, csp_packet_t * packet) {
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	eb 01       	movw	r28, r22

	int ret = CSP_ERR_INVAL;
	struct csp_cmp_message * cmp = (struct csp_cmp_message *) packet->data;

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
    38b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    38b6:	81 11       	cpse	r24, r1
    38b8:	55 c1       	rjmp	.+682    	; 0x3b64 <csp_cmp_handler+0x2ba>
		return ret;

	switch (cmp->code) {
    38ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    38bc:	83 30       	cpi	r24, 0x03	; 3
    38be:	09 f4       	brne	.+2      	; 0x38c2 <csp_cmp_handler+0x18>
    38c0:	6d c0       	rjmp	.+218    	; 0x399c <csp_cmp_handler+0xf2>
    38c2:	30 f4       	brcc	.+12     	; 0x38d0 <csp_cmp_handler+0x26>
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	69 f0       	breq	.+26     	; 0x38e2 <csp_cmp_handler+0x38>
    38c8:	82 30       	cpi	r24, 0x02	; 2
    38ca:	09 f4       	brne	.+2      	; 0x38ce <csp_cmp_handler+0x24>
    38cc:	4f c0       	rjmp	.+158    	; 0x396c <csp_cmp_handler+0xc2>
    38ce:	45 c1       	rjmp	.+650    	; 0x3b5a <csp_cmp_handler+0x2b0>
    38d0:	85 30       	cpi	r24, 0x05	; 5
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <csp_cmp_handler+0x2c>
    38d4:	f1 c0       	rjmp	.+482    	; 0x3ab8 <csp_cmp_handler+0x20e>
    38d6:	08 f4       	brcc	.+2      	; 0x38da <csp_cmp_handler+0x30>
    38d8:	d8 c0       	rjmp	.+432    	; 0x3a8a <csp_cmp_handler+0x1e0>
    38da:	86 30       	cpi	r24, 0x06	; 6
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <csp_cmp_handler+0x36>
    38de:	06 c1       	rjmp	.+524    	; 0x3aec <csp_cmp_handler+0x242>
    38e0:	3c c1       	rjmp	.+632    	; 0x3b5a <csp_cmp_handler+0x2b0>
#define CSP_RPS_MTU	196

static int do_cmp_ident(struct csp_cmp_message *cmp) {

	/* Copy revision */
	strncpy(cmp->ident.revision, GIT_REV, CSP_CMP_IDENT_REV_LEN);
    38e2:	44 e1       	ldi	r20, 0x14	; 20
    38e4:	50 e0       	ldi	r21, 0x00	; 0
    38e6:	62 e9       	ldi	r22, 0x92	; 146
    38e8:	70 e2       	ldi	r23, 0x20	; 32
    38ea:	ce 01       	movw	r24, r28
    38ec:	8e 5b       	subi	r24, 0xBE	; 190
    38ee:	9f 4f       	sbci	r25, 0xFF	; 255
    38f0:	0e 94 14 2c 	call	0x5828	; 0x5828 <strncpy>
	cmp->ident.revision[CSP_CMP_IDENT_REV_LEN - 1] = '\0';
    38f4:	fe 01       	movw	r30, r28
    38f6:	eb 5a       	subi	r30, 0xAB	; 171
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	10 82       	st	Z, r1

	/* Copy compilation date */
	strncpy(cmp->ident.date, __DATE__, CSP_CMP_IDENT_DATE_LEN);
    38fc:	8c e0       	ldi	r24, 0x0C	; 12
    38fe:	ea e9       	ldi	r30, 0x9A	; 154
    3900:	f0 e2       	ldi	r31, 0x20	; 32
    3902:	de 01       	movw	r26, r28
    3904:	aa 5a       	subi	r26, 0xAA	; 170
    3906:	bf 4f       	sbci	r27, 0xFF	; 255
    3908:	01 90       	ld	r0, Z+
    390a:	0d 92       	st	X+, r0
    390c:	8a 95       	dec	r24
    390e:	e1 f7       	brne	.-8      	; 0x3908 <csp_cmp_handler+0x5e>
	cmp->ident.date[CSP_CMP_IDENT_DATE_LEN - 1] = '\0';
    3910:	fe 01       	movw	r30, r28
    3912:	ef 59       	subi	r30, 0x9F	; 159
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	10 82       	st	Z, r1

	/* Copy compilation time */
	strncpy(cmp->ident.time, __TIME__, CSP_CMP_IDENT_TIME_LEN);
    3918:	89 e0       	ldi	r24, 0x09	; 9
    391a:	e6 ea       	ldi	r30, 0xA6	; 166
    391c:	f0 e2       	ldi	r31, 0x20	; 32
    391e:	de 01       	movw	r26, r28
    3920:	ae 59       	subi	r26, 0x9E	; 158
    3922:	bf 4f       	sbci	r27, 0xFF	; 255
    3924:	01 90       	ld	r0, Z+
    3926:	0d 92       	st	X+, r0
    3928:	8a 95       	dec	r24
    392a:	e1 f7       	brne	.-8      	; 0x3924 <csp_cmp_handler+0x7a>
	cmp->ident.time[CSP_CMP_IDENT_TIME_LEN - 1] = '\0';
    392c:	fe 01       	movw	r30, r28
    392e:	e6 59       	subi	r30, 0x96	; 150
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	10 82       	st	Z, r1

	/* Copy hostname */
	strncpy(cmp->ident.hostname, csp_get_hostname(), CSP_HOSTNAME_LEN);
    3934:	70 da       	rcall	.-2848   	; 0x2e16 <csp_get_hostname>
    3936:	44 e1       	ldi	r20, 0x14	; 20
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	bc 01       	movw	r22, r24
    393c:	ce 01       	movw	r24, r28
    393e:	40 96       	adiw	r24, 0x10	; 16
    3940:	0e 94 14 2c 	call	0x5828	; 0x5828 <strncpy>
	cmp->ident.hostname[CSP_HOSTNAME_LEN - 1] = '\0';
    3944:	1b a2       	std	Y+35, r1	; 0x23

	/* Copy model name */
	strncpy(cmp->ident.model, csp_get_model(), CSP_MODEL_LEN);
    3946:	6c da       	rcall	.-2856   	; 0x2e20 <csp_get_model>
    3948:	4e e1       	ldi	r20, 0x1E	; 30
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	bc 01       	movw	r22, r24
    394e:	ce 01       	movw	r24, r28
    3950:	84 96       	adiw	r24, 0x24	; 36
    3952:	0e 94 14 2c 	call	0x5828	; 0x5828 <strncpy>
	cmp->ident.model[CSP_MODEL_LEN - 1] = '\0';
    3956:	fe 01       	movw	r30, r28
    3958:	ef 5b       	subi	r30, 0xBF	; 191
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	10 82       	st	Z, r1
		return ret;

	switch (cmp->code) {
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
			packet->length = CMP_SIZE(ident);
    395e:	8d e5       	ldi	r24, 0x5D	; 93
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	88 87       	std	Y+8, r24	; 0x08
    3964:	99 87       	std	Y+9, r25	; 0x09
	if (cmp->type != CSP_CMP_REQUEST)
		return ret;

	switch (cmp->code) {
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
			packet->length = CMP_SIZE(ident);
			break;
    396a:	f9 c0       	rjmp	.+498    	; 0x3b5e <csp_cmp_handler+0x2b4>

}

static int do_cmp_route_set(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->route_set.interface);
    396c:	cb 01       	movw	r24, r22
    396e:	42 96       	adiw	r24, 0x12	; 18
    3970:	30 dd       	rcall	.-1440   	; 0x33d2 <csp_route_get_if_by_name>
	if (ifc == NULL)
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	49 f0       	breq	.+18     	; 0x3988 <csp_cmp_handler+0xde>
		return CSP_ERR_INVAL;

	if (csp_route_set(cmp->route_set.dest_node, ifc, cmp->route_set.next_hop_mac) != CSP_ERR_NONE)
    3976:	49 89       	ldd	r20, Y+17	; 0x11
    3978:	bc 01       	movw	r22, r24
    397a:	88 89       	ldd	r24, Y+16	; 0x10
    397c:	72 dd       	rcall	.-1308   	; 0x3462 <csp_route_set>
    397e:	89 2b       	or	r24, r25
    3980:	31 f0       	breq	.+12     	; 0x398e <csp_cmp_handler+0xe4>
		return CSP_ERR_INVAL;
    3982:	8e ef       	ldi	r24, 0xFE	; 254
    3984:	9f ef       	ldi	r25, 0xFF	; 255
    3986:	05 c0       	rjmp	.+10     	; 0x3992 <csp_cmp_handler+0xe8>

static int do_cmp_route_set(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->route_set.interface);
	if (ifc == NULL)
		return CSP_ERR_INVAL;
    3988:	8e ef       	ldi	r24, 0xFE	; 254
    398a:	9f ef       	ldi	r25, 0xFF	; 255
    398c:	02 c0       	rjmp	.+4      	; 0x3992 <csp_cmp_handler+0xe8>

	if (csp_route_set(cmp->route_set.dest_node, ifc, cmp->route_set.next_hop_mac) != CSP_ERR_NONE)
		return CSP_ERR_INVAL;

	return CSP_ERR_NONE;
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
			packet->length = CMP_SIZE(ident);
			break;

		case CSP_CMP_ROUTE_SET:
			ret = do_cmp_route_set(cmp);
			packet->length = CMP_SIZE(route_set);
    3992:	2f e0       	ldi	r18, 0x0F	; 15
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	28 87       	std	Y+8, r18	; 0x08
    3998:	39 87       	std	Y+9, r19	; 0x09
			break;
    399a:	e1 c0       	rjmp	.+450    	; 0x3b5e <csp_cmp_handler+0x2b4>

}

static int do_cmp_if_stats(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->if_stats.interface);
    399c:	cb 01       	movw	r24, r22
    399e:	40 96       	adiw	r24, 0x10	; 16
    39a0:	18 dd       	rcall	.-1488   	; 0x33d2 <csp_route_get_if_by_name>
    39a2:	8c 01       	movw	r16, r24
	if (ifc == NULL)
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	09 f4       	brne	.+2      	; 0x39aa <csp_cmp_handler+0x100>
    39a8:	69 c0       	rjmp	.+210    	; 0x3a7c <csp_cmp_handler+0x1d2>
		return CSP_ERR_INVAL;

	cmp->if_stats.tx =       csp_hton32(ifc->tx);
    39aa:	fc 01       	movw	r30, r24
    39ac:	62 85       	ldd	r22, Z+10	; 0x0a
    39ae:	73 85       	ldd	r23, Z+11	; 0x0b
    39b0:	84 85       	ldd	r24, Z+12	; 0x0c
    39b2:	95 85       	ldd	r25, Z+13	; 0x0d
    39b4:	c6 d9       	rcall	.-3188   	; 0x2d42 <csp_hton32>
    39b6:	6b 8f       	std	Y+27, r22	; 0x1b
    39b8:	7c 8f       	std	Y+28, r23	; 0x1c
    39ba:	8d 8f       	std	Y+29, r24	; 0x1d
    39bc:	9e 8f       	std	Y+30, r25	; 0x1e
	cmp->if_stats.rx =       csp_hton32(ifc->rx);
    39be:	f8 01       	movw	r30, r16
    39c0:	66 85       	ldd	r22, Z+14	; 0x0e
    39c2:	77 85       	ldd	r23, Z+15	; 0x0f
    39c4:	80 89       	ldd	r24, Z+16	; 0x10
    39c6:	91 89       	ldd	r25, Z+17	; 0x11
    39c8:	bc d9       	rcall	.-3208   	; 0x2d42 <csp_hton32>
    39ca:	6f 8f       	std	Y+31, r22	; 0x1f
    39cc:	78 a3       	std	Y+32, r23	; 0x20
    39ce:	89 a3       	std	Y+33, r24	; 0x21
    39d0:	9a a3       	std	Y+34, r25	; 0x22
	cmp->if_stats.tx_error = csp_hton32(ifc->tx_error);
    39d2:	f8 01       	movw	r30, r16
    39d4:	62 89       	ldd	r22, Z+18	; 0x12
    39d6:	73 89       	ldd	r23, Z+19	; 0x13
    39d8:	84 89       	ldd	r24, Z+20	; 0x14
    39da:	95 89       	ldd	r25, Z+21	; 0x15
    39dc:	b2 d9       	rcall	.-3228   	; 0x2d42 <csp_hton32>
    39de:	6b a3       	std	Y+35, r22	; 0x23
    39e0:	7c a3       	std	Y+36, r23	; 0x24
    39e2:	8d a3       	std	Y+37, r24	; 0x25
    39e4:	9e a3       	std	Y+38, r25	; 0x26
	cmp->if_stats.rx_error = csp_hton32(ifc->rx_error);
    39e6:	f8 01       	movw	r30, r16
    39e8:	66 89       	ldd	r22, Z+22	; 0x16
    39ea:	77 89       	ldd	r23, Z+23	; 0x17
    39ec:	80 8d       	ldd	r24, Z+24	; 0x18
    39ee:	91 8d       	ldd	r25, Z+25	; 0x19
    39f0:	a8 d9       	rcall	.-3248   	; 0x2d42 <csp_hton32>
    39f2:	6f a3       	std	Y+39, r22	; 0x27
    39f4:	78 a7       	std	Y+40, r23	; 0x28
    39f6:	89 a7       	std	Y+41, r24	; 0x29
    39f8:	9a a7       	std	Y+42, r25	; 0x2a
	cmp->if_stats.drop =     csp_hton32(ifc->drop);
    39fa:	f8 01       	movw	r30, r16
    39fc:	62 8d       	ldd	r22, Z+26	; 0x1a
    39fe:	73 8d       	ldd	r23, Z+27	; 0x1b
    3a00:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a02:	95 8d       	ldd	r25, Z+29	; 0x1d
    3a04:	9e d9       	rcall	.-3268   	; 0x2d42 <csp_hton32>
    3a06:	6b a7       	std	Y+43, r22	; 0x2b
    3a08:	7c a7       	std	Y+44, r23	; 0x2c
    3a0a:	8d a7       	std	Y+45, r24	; 0x2d
    3a0c:	9e a7       	std	Y+46, r25	; 0x2e
	cmp->if_stats.autherr =  csp_hton32(ifc->autherr);
    3a0e:	f8 01       	movw	r30, r16
    3a10:	66 8d       	ldd	r22, Z+30	; 0x1e
    3a12:	77 8d       	ldd	r23, Z+31	; 0x1f
    3a14:	80 a1       	ldd	r24, Z+32	; 0x20
    3a16:	91 a1       	ldd	r25, Z+33	; 0x21
    3a18:	94 d9       	rcall	.-3288   	; 0x2d42 <csp_hton32>
    3a1a:	6f a7       	std	Y+47, r22	; 0x2f
    3a1c:	78 ab       	std	Y+48, r23	; 0x30
    3a1e:	89 ab       	std	Y+49, r24	; 0x31
    3a20:	9a ab       	std	Y+50, r25	; 0x32
	cmp->if_stats.frame =    csp_hton32(ifc->frame);
    3a22:	f8 01       	movw	r30, r16
    3a24:	62 a1       	ldd	r22, Z+34	; 0x22
    3a26:	73 a1       	ldd	r23, Z+35	; 0x23
    3a28:	84 a1       	ldd	r24, Z+36	; 0x24
    3a2a:	95 a1       	ldd	r25, Z+37	; 0x25
    3a2c:	8a d9       	rcall	.-3308   	; 0x2d42 <csp_hton32>
    3a2e:	6b ab       	std	Y+51, r22	; 0x33
    3a30:	7c ab       	std	Y+52, r23	; 0x34
    3a32:	8d ab       	std	Y+53, r24	; 0x35
    3a34:	9e ab       	std	Y+54, r25	; 0x36
	cmp->if_stats.txbytes =  csp_hton32(ifc->txbytes);
    3a36:	f8 01       	movw	r30, r16
    3a38:	66 a1       	ldd	r22, Z+38	; 0x26
    3a3a:	77 a1       	ldd	r23, Z+39	; 0x27
    3a3c:	80 a5       	ldd	r24, Z+40	; 0x28
    3a3e:	91 a5       	ldd	r25, Z+41	; 0x29
    3a40:	80 d9       	rcall	.-3328   	; 0x2d42 <csp_hton32>
    3a42:	6f ab       	std	Y+55, r22	; 0x37
    3a44:	78 af       	std	Y+56, r23	; 0x38
    3a46:	89 af       	std	Y+57, r24	; 0x39
    3a48:	9a af       	std	Y+58, r25	; 0x3a
	cmp->if_stats.rxbytes =  csp_hton32(ifc->rxbytes);
    3a4a:	f8 01       	movw	r30, r16
    3a4c:	62 a5       	ldd	r22, Z+42	; 0x2a
    3a4e:	73 a5       	ldd	r23, Z+43	; 0x2b
    3a50:	84 a5       	ldd	r24, Z+44	; 0x2c
    3a52:	95 a5       	ldd	r25, Z+45	; 0x2d
    3a54:	76 d9       	rcall	.-3348   	; 0x2d42 <csp_hton32>
    3a56:	6b af       	std	Y+59, r22	; 0x3b
    3a58:	7c af       	std	Y+60, r23	; 0x3c
    3a5a:	8d af       	std	Y+61, r24	; 0x3d
    3a5c:	9e af       	std	Y+62, r25	; 0x3e
	cmp->if_stats.irq = 	 csp_hton32(ifc->irq);
    3a5e:	f8 01       	movw	r30, r16
    3a60:	66 a5       	ldd	r22, Z+46	; 0x2e
    3a62:	77 a5       	ldd	r23, Z+47	; 0x2f
    3a64:	80 a9       	ldd	r24, Z+48	; 0x30
    3a66:	91 a9       	ldd	r25, Z+49	; 0x31
    3a68:	6c d9       	rcall	.-3368   	; 0x2d42 <csp_hton32>
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ff 96       	adiw	r30, 0x3f	; 63
    3a6e:	60 83       	st	Z, r22
    3a70:	71 83       	std	Z+1, r23	; 0x01
    3a72:	82 83       	std	Z+2, r24	; 0x02
    3a74:	93 83       	std	Z+3, r25	; 0x03

	return CSP_ERR_NONE;
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <csp_cmp_handler+0x1d6>

static int do_cmp_if_stats(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->if_stats.interface);
	if (ifc == NULL)
		return CSP_ERR_INVAL;
    3a7c:	8e ef       	ldi	r24, 0xFE	; 254
    3a7e:	9f ef       	ldi	r25, 0xFF	; 255
			packet->length = CMP_SIZE(route_set);
			break;

		case CSP_CMP_IF_STATS:
			ret = do_cmp_if_stats(cmp);
			packet->length = CMP_SIZE(if_stats);
    3a80:	25 e3       	ldi	r18, 0x35	; 53
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	28 87       	std	Y+8, r18	; 0x08
    3a86:	39 87       	std	Y+9, r19	; 0x09
			break;
    3a88:	6a c0       	rjmp	.+212    	; 0x3b5e <csp_cmp_handler+0x2b4>
	return CSP_ERR_NONE;
}

static int do_cmp_peek(struct csp_cmp_message *cmp) {

	cmp->peek.addr = csp_hton32(cmp->peek.addr);
    3a8a:	68 89       	ldd	r22, Y+16	; 0x10
    3a8c:	79 89       	ldd	r23, Y+17	; 0x11
    3a8e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a90:	9b 89       	ldd	r25, Y+19	; 0x13
    3a92:	57 d9       	rcall	.-3410   	; 0x2d42 <csp_hton32>
    3a94:	68 8b       	std	Y+16, r22	; 0x10
    3a96:	79 8b       	std	Y+17, r23	; 0x11
    3a98:	8a 8b       	std	Y+18, r24	; 0x12
    3a9a:	9b 8b       	std	Y+19, r25	; 0x13
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
    3a9c:	4c 89       	ldd	r20, Y+20	; 0x14
    3a9e:	49 3c       	cpi	r20, 0xC9	; 201
    3aa0:	40 f4       	brcc	.+16     	; 0x3ab2 <csp_cmp_handler+0x208>
		return CSP_ERR_INVAL;

	/* Dangerous, you better know what you are doing */
	memcpy(cmp->peek.data, (void *) (uintptr_t) cmp->peek.addr, cmp->peek.len);
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	45 96       	adiw	r24, 0x15	; 21
    3aa8:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <memcpy>

	return CSP_ERR_NONE;
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	56 c0       	rjmp	.+172    	; 0x3b5e <csp_cmp_handler+0x2b4>

static int do_cmp_peek(struct csp_cmp_message *cmp) {

	cmp->peek.addr = csp_hton32(cmp->peek.addr);
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
		return CSP_ERR_INVAL;
    3ab2:	8e ef       	ldi	r24, 0xFE	; 254
    3ab4:	9f ef       	ldi	r25, 0xFF	; 255
			packet->length = CMP_SIZE(if_stats);
			break;

		case CSP_CMP_PEEK:
			ret = do_cmp_peek(cmp);
			break;
    3ab6:	53 c0       	rjmp	.+166    	; 0x3b5e <csp_cmp_handler+0x2b4>

}

static int do_cmp_poke(struct csp_cmp_message *cmp) {

	cmp->poke.addr = csp_hton32(cmp->poke.addr);
    3ab8:	68 89       	ldd	r22, Y+16	; 0x10
    3aba:	79 89       	ldd	r23, Y+17	; 0x11
    3abc:	8a 89       	ldd	r24, Y+18	; 0x12
    3abe:	9b 89       	ldd	r25, Y+19	; 0x13
    3ac0:	40 d9       	rcall	.-3456   	; 0x2d42 <csp_hton32>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	88 8b       	std	Y+16, r24	; 0x10
    3ac8:	99 8b       	std	Y+17, r25	; 0x11
    3aca:	aa 8b       	std	Y+18, r26	; 0x12
    3acc:	bb 8b       	std	Y+19, r27	; 0x13
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
    3ace:	4c 89       	ldd	r20, Y+20	; 0x14
    3ad0:	49 3c       	cpi	r20, 0xC9	; 201
    3ad2:	48 f4       	brcc	.+18     	; 0x3ae6 <csp_cmp_handler+0x23c>
		return CSP_ERR_INVAL;

	/* Extremely dangerous, you better know what you are doing */
	memcpy((void *) (uintptr_t) cmp->poke.addr, cmp->poke.data, cmp->poke.len);
    3ad4:	50 e0       	ldi	r21, 0x00	; 0
    3ad6:	be 01       	movw	r22, r28
    3ad8:	6b 5e       	subi	r22, 0xEB	; 235
    3ada:	7f 4f       	sbci	r23, 0xFF	; 255
    3adc:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <memcpy>

	return CSP_ERR_NONE;
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	3c c0       	rjmp	.+120    	; 0x3b5e <csp_cmp_handler+0x2b4>

static int do_cmp_poke(struct csp_cmp_message *cmp) {

	cmp->poke.addr = csp_hton32(cmp->poke.addr);
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
		return CSP_ERR_INVAL;
    3ae6:	8e ef       	ldi	r24, 0xFE	; 254
    3ae8:	9f ef       	ldi	r25, 0xFF	; 255
			ret = do_cmp_peek(cmp);
			break;

		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
			break;
    3aea:	39 c0       	rjmp	.+114    	; 0x3b5e <csp_cmp_handler+0x2b4>

}

static int do_cmp_clock(struct csp_cmp_message *cmp) {

	cmp->clock.tv_sec = csp_ntoh32(cmp->clock.tv_sec);
    3aec:	68 89       	ldd	r22, Y+16	; 0x10
    3aee:	79 89       	ldd	r23, Y+17	; 0x11
    3af0:	8a 89       	ldd	r24, Y+18	; 0x12
    3af2:	9b 89       	ldd	r25, Y+19	; 0x13
    3af4:	5b d9       	rcall	.-3402   	; 0x2dac <csp_ntoh32>
    3af6:	68 8b       	std	Y+16, r22	; 0x10
    3af8:	79 8b       	std	Y+17, r23	; 0x11
    3afa:	8a 8b       	std	Y+18, r24	; 0x12
    3afc:	9b 8b       	std	Y+19, r25	; 0x13
	cmp->clock.tv_nsec = csp_ntoh32(cmp->clock.tv_nsec);
    3afe:	6c 89       	ldd	r22, Y+20	; 0x14
    3b00:	7d 89       	ldd	r23, Y+21	; 0x15
    3b02:	8e 89       	ldd	r24, Y+22	; 0x16
    3b04:	9f 89       	ldd	r25, Y+23	; 0x17
    3b06:	52 d9       	rcall	.-3420   	; 0x2dac <csp_ntoh32>
    3b08:	6c 8b       	std	Y+20, r22	; 0x14
    3b0a:	7d 8b       	std	Y+21, r23	; 0x15
    3b0c:	8e 8b       	std	Y+22, r24	; 0x16
    3b0e:	9f 8b       	std	Y+23, r25	; 0x17

	if (cmp->clock.tv_sec != 0) {
    3b10:	88 89       	ldd	r24, Y+16	; 0x10
    3b12:	99 89       	ldd	r25, Y+17	; 0x11
    3b14:	aa 89       	ldd	r26, Y+18	; 0x12
    3b16:	bb 89       	ldd	r27, Y+19	; 0x13
    3b18:	89 2b       	or	r24, r25
    3b1a:	8a 2b       	or	r24, r26
    3b1c:	8b 2b       	or	r24, r27
    3b1e:	21 f0       	breq	.+8      	; 0x3b28 <csp_cmp_handler+0x27e>
		clock_set_time(&cmp->clock);
    3b20:	ce 01       	movw	r24, r28
    3b22:	40 96       	adiw	r24, 0x10	; 16
    3b24:	0e 94 8f 04 	call	0x91e	; 0x91e <clock_set_time>
	}

	clock_get_time(&cmp->clock);
    3b28:	ce 01       	movw	r24, r28
    3b2a:	40 96       	adiw	r24, 0x10	; 16
    3b2c:	0e 94 8e 04 	call	0x91c	; 0x91c <clock_get_time>
	cmp->clock.tv_sec = csp_hton32(cmp->clock.tv_sec);
    3b30:	68 89       	ldd	r22, Y+16	; 0x10
    3b32:	79 89       	ldd	r23, Y+17	; 0x11
    3b34:	8a 89       	ldd	r24, Y+18	; 0x12
    3b36:	9b 89       	ldd	r25, Y+19	; 0x13
    3b38:	04 d9       	rcall	.-3576   	; 0x2d42 <csp_hton32>
    3b3a:	68 8b       	std	Y+16, r22	; 0x10
    3b3c:	79 8b       	std	Y+17, r23	; 0x11
    3b3e:	8a 8b       	std	Y+18, r24	; 0x12
    3b40:	9b 8b       	std	Y+19, r25	; 0x13
	cmp->clock.tv_nsec = csp_hton32(cmp->clock.tv_nsec);
    3b42:	6c 89       	ldd	r22, Y+20	; 0x14
    3b44:	7d 89       	ldd	r23, Y+21	; 0x15
    3b46:	8e 89       	ldd	r24, Y+22	; 0x16
    3b48:	9f 89       	ldd	r25, Y+23	; 0x17
    3b4a:	fb d8       	rcall	.-3594   	; 0x2d42 <csp_hton32>
    3b4c:	6c 8b       	std	Y+20, r22	; 0x14
    3b4e:	7d 8b       	std	Y+21, r23	; 0x15
    3b50:	8e 8b       	std	Y+22, r24	; 0x16
    3b52:	9f 8b       	std	Y+23, r25	; 0x17
		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
			break;

		case CSP_CMP_CLOCK:
			ret = do_cmp_clock(cmp);
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	90 e0       	ldi	r25, 0x00	; 0
			break;
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <csp_cmp_handler+0x2b4>

		default:
			ret = CSP_ERR_INVAL;
    3b5a:	8e ef       	ldi	r24, 0xFE	; 254
    3b5c:	9f ef       	ldi	r25, 0xFF	; 255
			break;
	}

	cmp->type = CSP_CMP_REPLY;
    3b5e:	2f ef       	ldi	r18, 0xFF	; 255
    3b60:	2e 87       	std	Y+14, r18	; 0x0e

	return ret;
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <csp_cmp_handler+0x2be>
	int ret = CSP_ERR_INVAL;
	struct csp_cmp_message * cmp = (struct csp_cmp_message *) packet->data;

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
		return ret;
    3b64:	8e ef       	ldi	r24, 0xFE	; 254
    3b66:	9f ef       	ldi	r25, 0xFF	; 255
	}

	cmp->type = CSP_CMP_REPLY;

	return ret;
}
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

00003b72 <csp_service_handler>:

void csp_service_handler(csp_conn_t * conn, csp_packet_t * packet) {
    3b72:	af 92       	push	r10
    3b74:	bf 92       	push	r11
    3b76:	cf 92       	push	r12
    3b78:	df 92       	push	r13
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	8c 01       	movw	r16, r24
    3b88:	eb 01       	movw	r28, r22

	switch (csp_conn_dport(conn)) {
    3b8a:	12 d8       	rcall	.-4060   	; 0x2bb0 <csp_conn_dport>
    3b8c:	87 30       	cpi	r24, 0x07	; 7
    3b8e:	91 05       	cpc	r25, r1
    3b90:	08 f0       	brcs	.+2      	; 0x3b94 <csp_service_handler+0x22>
    3b92:	90 c0       	rjmp	.+288    	; 0x3cb4 <csp_service_handler+0x142>
    3b94:	fc 01       	movw	r30, r24
    3b96:	e2 50       	subi	r30, 0x02	; 2
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	0c 94 74 2a 	jmp	0x54e8	; 0x54e8 <__tablejump2__>

	case CSP_CMP:
		/* Pass to CMP handler */
		if (csp_cmp_handler(conn, packet) != CSP_ERR_NONE) {
    3b9e:	be 01       	movw	r22, r28
    3ba0:	c8 01       	movw	r24, r16
    3ba2:	83 de       	rcall	.-762    	; 0x38aa <csp_cmp_handler>
    3ba4:	89 2b       	or	r24, r25
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <csp_service_handler+0x38>
    3ba8:	89 c0       	rjmp	.+274    	; 0x3cbc <csp_service_handler+0x14a>
			csp_buffer_free(packet);
    3baa:	ce 01       	movw	r24, r28
    3bac:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
			return;
    3bb0:	92 c0       	rjmp	.+292    	; 0x3cd6 <csp_service_handler+0x164>
		break;

	case CSP_PS: {

		/* Start by allocating just the right amount of memory */
		int task_list_size = csp_sys_tasklist_size();
    3bb2:	0e 94 73 12 	call	0x24e6	; 0x24e6 <csp_sys_tasklist_size>
    3bb6:	7c 01       	movw	r14, r24
		char * pslist = csp_malloc(task_list_size);
    3bb8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <csp_malloc>
    3bbc:	5c 01       	movw	r10, r24

		/* Retrieve the tasklist */
		csp_sys_tasklist(pslist);
    3bbe:	0e 94 6f 12 	call	0x24de	; 0x24de <csp_sys_tasklist>
		int pslen = strnlen(pslist, task_list_size);
    3bc2:	b7 01       	movw	r22, r14
    3bc4:	c5 01       	movw	r24, r10
    3bc6:	0e 94 23 2c 	call	0x5846	; 0x5846 <strnlen>
    3bca:	6c 01       	movw	r12, r24

		/* Split the potentially very long string into packets */
		int i = 0;
		while(i < pslen) {
    3bcc:	18 16       	cp	r1, r24
    3bce:	19 06       	cpc	r1, r25
    3bd0:	0c f0       	brlt	.+2      	; 0x3bd4 <csp_service_handler+0x62>
    3bd2:	74 c0       	rjmp	.+232    	; 0x3cbc <csp_service_handler+0x14a>
		/* Retrieve the tasklist */
		csp_sys_tasklist(pslist);
		int pslen = strnlen(pslist, task_list_size);

		/* Split the potentially very long string into packets */
		int i = 0;
    3bd4:	e1 2c       	mov	r14, r1
    3bd6:	f1 2c       	mov	r15, r1
		while(i < pslen) {

			/* Allocate packet buffer, if need be */
			if (packet == NULL)
    3bd8:	20 97       	sbiw	r28, 0x00	; 0
    3bda:	41 f4       	brne	.+16     	; 0x3bec <csp_service_handler+0x7a>
				packet = csp_buffer_get(CSP_RPS_MTU);
    3bdc:	84 ec       	ldi	r24, 0xC4	; 196
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	0e 94 a6 13 	call	0x274c	; 0x274c <csp_buffer_get>
    3be4:	ec 01       	movw	r28, r24
			if (packet == NULL)
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	09 f4       	brne	.+2      	; 0x3bec <csp_service_handler+0x7a>
    3bea:	75 c0       	rjmp	.+234    	; 0x3cd6 <csp_service_handler+0x164>
				break;

			/* Calculate length, either full MTU or the remainder */
			packet->length = (pslen - i > CSP_RPS_MTU) ? CSP_RPS_MTU : (pslen - i);
    3bec:	a6 01       	movw	r20, r12
    3bee:	4e 19       	sub	r20, r14
    3bf0:	5f 09       	sbc	r21, r15
    3bf2:	45 3c       	cpi	r20, 0xC5	; 197
    3bf4:	51 05       	cpc	r21, r1
    3bf6:	14 f0       	brlt	.+4      	; 0x3bfc <csp_service_handler+0x8a>
    3bf8:	44 ec       	ldi	r20, 0xC4	; 196
    3bfa:	50 e0       	ldi	r21, 0x00	; 0
    3bfc:	48 87       	std	Y+8, r20	; 0x08
    3bfe:	59 87       	std	Y+9, r21	; 0x09

			/* Send out the data */
			memcpy(packet->data, &pslist[i], packet->length);
    3c00:	b5 01       	movw	r22, r10
    3c02:	6e 0d       	add	r22, r14
    3c04:	7f 1d       	adc	r23, r15
    3c06:	ce 01       	movw	r24, r28
    3c08:	0e 96       	adiw	r24, 0x0e	; 14
    3c0a:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <memcpy>
			i += packet->length;
    3c0e:	88 85       	ldd	r24, Y+8	; 0x08
    3c10:	99 85       	ldd	r25, Y+9	; 0x09
    3c12:	e8 0e       	add	r14, r24
    3c14:	f9 1e       	adc	r15, r25
			if (!csp_send(conn, packet, 0))
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	a9 01       	movw	r20, r18
    3c1c:	be 01       	movw	r22, r28
    3c1e:	c8 01       	movw	r24, r16
    3c20:	51 da       	rcall	.-2910   	; 0x30c4 <csp_send>
    3c22:	89 2b       	or	r24, r25
    3c24:	19 f4       	brne	.+6      	; 0x3c2c <csp_service_handler+0xba>
				csp_buffer_free(packet);
    3c26:	ce 01       	movw	r24, r28
    3c28:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
		csp_sys_tasklist(pslist);
		int pslen = strnlen(pslist, task_list_size);

		/* Split the potentially very long string into packets */
		int i = 0;
		while(i < pslen) {
    3c2c:	ec 14       	cp	r14, r12
    3c2e:	fd 04       	cpc	r15, r13
    3c30:	0c f0       	brlt	.+2      	; 0x3c34 <csp_service_handler+0xc2>
    3c32:	51 c0       	rjmp	.+162    	; 0x3cd6 <csp_service_handler+0x164>
    3c34:	c0 e0       	ldi	r28, 0x00	; 0
    3c36:	d0 e0       	ldi	r29, 0x00	; 0
    3c38:	cf cf       	rjmp	.-98     	; 0x3bd8 <csp_service_handler+0x66>
		}
		break;
	}

	case CSP_MEMFREE: {
		uint32_t total = csp_sys_memfree();
    3c3a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <csp_sys_memfree>

		total = csp_hton32(total);
    3c3e:	81 d8       	rcall	.-3838   	; 0x2d42 <csp_hton32>
		memcpy(packet->data, &total, sizeof(total));
    3c40:	6e 87       	std	Y+14, r22	; 0x0e
    3c42:	7f 87       	std	Y+15, r23	; 0x0f
    3c44:	88 8b       	std	Y+16, r24	; 0x10
    3c46:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(total);
    3c48:	84 e0       	ldi	r24, 0x04	; 4
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	88 87       	std	Y+8, r24	; 0x08
    3c4e:	99 87       	std	Y+9, r25	; 0x09
    3c50:	35 c0       	rjmp	.+106    	; 0x3cbc <csp_service_handler+0x14a>

	case CSP_REBOOT: {
		uint32_t magic_word;
		memcpy(&magic_word, packet->data, sizeof(magic_word));

		magic_word = csp_ntoh32(magic_word);
    3c52:	6e 85       	ldd	r22, Y+14	; 0x0e
    3c54:	7f 85       	ldd	r23, Y+15	; 0x0f
    3c56:	88 89       	ldd	r24, Y+16	; 0x10
    3c58:	99 89       	ldd	r25, Y+17	; 0x11
    3c5a:	a8 d8       	rcall	.-3760   	; 0x2dac <csp_ntoh32>

		/* If the magic word is invalid, return */
		if (magic_word != 0x80078007) {
    3c5c:	67 30       	cpi	r22, 0x07	; 7
    3c5e:	70 48       	sbci	r23, 0x80	; 128
    3c60:	87 40       	sbci	r24, 0x07	; 7
    3c62:	90 48       	sbci	r25, 0x80	; 128
    3c64:	21 f0       	breq	.+8      	; 0x3c6e <csp_service_handler+0xfc>
			csp_buffer_free(packet);
    3c66:	ce 01       	movw	r24, r28
    3c68:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
			return;
    3c6c:	34 c0       	rjmp	.+104    	; 0x3cd6 <csp_service_handler+0x164>
		}

		/* Otherwise Reboot */
		csp_sys_reboot();
    3c6e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <csp_sys_reboot>
		
		csp_buffer_free(packet);
    3c72:	ce 01       	movw	r24, r28
    3c74:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
		return;
    3c78:	2e c0       	rjmp	.+92     	; 0x3cd6 <csp_service_handler+0x164>
	}

	case CSP_BUF_FREE: {
		uint32_t size = csp_buffer_remaining();
    3c7a:	0e 94 4f 14 	call	0x289e	; 0x289e <csp_buffer_remaining>
    3c7e:	bc 01       	movw	r22, r24
    3c80:	88 27       	eor	r24, r24
    3c82:	77 fd       	sbrc	r23, 7
    3c84:	80 95       	com	r24
    3c86:	98 2f       	mov	r25, r24
		size = csp_hton32(size);
    3c88:	5c d8       	rcall	.-3912   	; 0x2d42 <csp_hton32>
		memcpy(packet->data, &size, sizeof(size));
    3c8a:	6e 87       	std	Y+14, r22	; 0x0e
    3c8c:	7f 87       	std	Y+15, r23	; 0x0f
    3c8e:	88 8b       	std	Y+16, r24	; 0x10
    3c90:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(size);
    3c92:	84 e0       	ldi	r24, 0x04	; 4
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	88 87       	std	Y+8, r24	; 0x08
    3c98:	99 87       	std	Y+9, r25	; 0x09
    3c9a:	10 c0       	rjmp	.+32     	; 0x3cbc <csp_service_handler+0x14a>
		break;
	}

	case CSP_UPTIME: {
		uint32_t time = csp_get_s();
    3c9c:	0e 94 06 13 	call	0x260c	; 0x260c <csp_get_s>
		time = csp_hton32(time);
    3ca0:	50 d8       	rcall	.-3936   	; 0x2d42 <csp_hton32>
		memcpy(packet->data, &time, sizeof(time));
    3ca2:	6e 87       	std	Y+14, r22	; 0x0e
    3ca4:	7f 87       	std	Y+15, r23	; 0x0f
    3ca6:	88 8b       	std	Y+16, r24	; 0x10
    3ca8:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(time);
    3caa:	84 e0       	ldi	r24, 0x04	; 4
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	88 87       	std	Y+8, r24	; 0x08
    3cb0:	99 87       	std	Y+9, r25	; 0x09
    3cb2:	04 c0       	rjmp	.+8      	; 0x3cbc <csp_service_handler+0x14a>
		break;
	}

	default:
		csp_buffer_free(packet);
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
		return;
    3cba:	0d c0       	rjmp	.+26     	; 0x3cd6 <csp_service_handler+0x164>
	}

	if (packet != NULL) {
    3cbc:	20 97       	sbiw	r28, 0x00	; 0
    3cbe:	59 f0       	breq	.+22     	; 0x3cd6 <csp_service_handler+0x164>
		if (!csp_send(conn, packet, 0))
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	a9 01       	movw	r20, r18
    3cc6:	be 01       	movw	r22, r28
    3cc8:	c8 01       	movw	r24, r16
    3cca:	fc d9       	rcall	.-3080   	; 0x30c4 <csp_send>
    3ccc:	89 2b       	or	r24, r25
    3cce:	19 f4       	brne	.+6      	; 0x3cd6 <csp_service_handler+0x164>
			csp_buffer_free(packet);
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
	}

}
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	ff 90       	pop	r15
    3ce0:	ef 90       	pop	r14
    3ce2:	df 90       	pop	r13
    3ce4:	cf 90       	pop	r12
    3ce6:	bf 90       	pop	r11
    3ce8:	af 90       	pop	r10
    3cea:	08 95       	ret

00003cec <csp_i2c_tx>:
#include <csp/csp_interface.h>
#include <csp/csp_error.h>
#include <csp/interfaces/csp_if_i2c.h>
#include <csp/drivers/i2c.h>

int csp_i2c_tx(csp_iface_t * interface, csp_packet_t * packet, uint32_t timeout) {
    3cec:	cf 92       	push	r12
    3cee:	df 92       	push	r13
    3cf0:	ef 92       	push	r14
    3cf2:	ff 92       	push	r15
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	eb 01       	movw	r28, r22
    3cfa:	69 01       	movw	r12, r18
    3cfc:	7a 01       	movw	r14, r20

	/* Cast the CSP packet buffer into an i2c frame */
	i2c_frame_t * frame = (i2c_frame_t *) packet;

	/* Insert destination node into the i2c destination field */
	if (csp_route_get_nexthop_mac(packet->id.dst) == CSP_NODE_MAC) {
    3cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d00:	92 95       	swap	r25
    3d02:	9f 70       	andi	r25, 0x0F	; 15
    3d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d06:	81 70       	andi	r24, 0x01	; 1
    3d08:	82 95       	swap	r24
    3d0a:	80 7f       	andi	r24, 0xF0	; 240
    3d0c:	89 2b       	or	r24, r25
    3d0e:	c9 dd       	rcall	.-1134   	; 0x38a2 <csp_route_get_nexthop_mac>
    3d10:	8f 3f       	cpi	r24, 0xFF	; 255
    3d12:	51 f4       	brne	.+20     	; 0x3d28 <csp_i2c_tx+0x3c>
		frame->dest = packet->id.dst;
    3d14:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d16:	92 95       	swap	r25
    3d18:	9f 70       	andi	r25, 0x0F	; 15
    3d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1c:	81 70       	andi	r24, 0x01	; 1
    3d1e:	82 95       	swap	r24
    3d20:	80 7f       	andi	r24, 0xF0	; 240
    3d22:	89 2b       	or	r24, r25
    3d24:	8e 83       	std	Y+6, r24	; 0x06
    3d26:	0a c0       	rjmp	.+20     	; 0x3d3c <csp_i2c_tx+0x50>
	} else {
		frame->dest = csp_route_get_nexthop_mac(packet->id.dst);
    3d28:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d2a:	92 95       	swap	r25
    3d2c:	9f 70       	andi	r25, 0x0F	; 15
    3d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d30:	81 70       	andi	r24, 0x01	; 1
    3d32:	82 95       	swap	r24
    3d34:	80 7f       	andi	r24, 0xF0	; 240
    3d36:	89 2b       	or	r24, r25
    3d38:	b4 dd       	rcall	.-1176   	; 0x38a2 <csp_route_get_nexthop_mac>
    3d3a:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* Save the outgoing id in the buffer */
	packet->id.ext = csp_hton32(packet->id.ext);
    3d3c:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d3e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d42:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d44:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <csp_hton32>
    3d48:	6a 87       	std	Y+10, r22	; 0x0a
    3d4a:	7b 87       	std	Y+11, r23	; 0x0b
    3d4c:	8c 87       	std	Y+12, r24	; 0x0c
    3d4e:	9d 87       	std	Y+13, r25	; 0x0d

	/* Add the CSP header to the I2C length field */
	frame->len += sizeof(packet->id);
    3d50:	88 85       	ldd	r24, Y+8	; 0x08
    3d52:	99 85       	ldd	r25, Y+9	; 0x09
    3d54:	04 96       	adiw	r24, 0x04	; 4
    3d56:	88 87       	std	Y+8, r24	; 0x08
    3d58:	99 87       	std	Y+9, r25	; 0x09
	frame->len_rx = 0;
    3d5a:	1f 82       	std	Y+7, r1	; 0x07

	/* Some I2C drivers support X number of retries
	 * CSP don't care about this. If it doesn't work the first
	 * time, don'y use time on it.
	 */
	frame->retries = 0;
    3d5c:	19 82       	std	Y+1, r1	; 0x01

	/* enqueue the frame */
	if (i2c_send(0, frame, timeout) != E_NO_ERR)
    3d5e:	a6 01       	movw	r20, r12
    3d60:	be 01       	movw	r22, r28
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <i2c_send>
    3d6a:	01 96       	adiw	r24, 0x01	; 1
    3d6c:	19 f0       	breq	.+6      	; 0x3d74 <csp_i2c_tx+0x88>
		return CSP_ERR_DRIVER;
    3d6e:	85 ef       	ldi	r24, 0xF5	; 245
    3d70:	9f ef       	ldi	r25, 0xFF	; 255
    3d72:	02 c0       	rjmp	.+4      	; 0x3d78 <csp_i2c_tx+0x8c>

	return CSP_ERR_NONE;
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0

}
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	ff 90       	pop	r15
    3d7e:	ef 90       	pop	r14
    3d80:	df 90       	pop	r13
    3d82:	cf 90       	pop	r12
    3d84:	08 95       	ret

00003d86 <csp_i2c_rx>:
 * When a frame is received, cast it to a csp_packet
 * and send it directly to the CSP new packet function.
 * Context: ISR only
 * @param frame
 */
void csp_i2c_rx(i2c_frame_t * frame, void * pxTaskWoken) {
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	ec 01       	movw	r28, r24
    3d90:	8b 01       	movw	r16, r22

	static csp_packet_t * packet;

	/* Validate input */
	if (frame == NULL)
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	79 f1       	breq	.+94     	; 0x3df4 <csp_i2c_rx+0x6e>
		return;

	if ((frame->len < 4) || (frame->len > I2C_MTU)) {
    3d96:	88 85       	ldd	r24, Y+8	; 0x08
    3d98:	99 85       	ldd	r25, Y+9	; 0x09
    3d9a:	04 97       	sbiw	r24, 0x04	; 4
    3d9c:	8d 3f       	cpi	r24, 0xFD	; 253
    3d9e:	91 05       	cpc	r25, r1
    3da0:	88 f0       	brcs	.+34     	; 0x3dc4 <csp_i2c_rx+0x3e>
		csp_if_i2c.frame++;
    3da2:	e9 e2       	ldi	r30, 0x29	; 41
    3da4:	f0 e2       	ldi	r31, 0x20	; 32
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	a2 81       	ldd	r26, Z+2	; 0x02
    3dac:	b3 81       	ldd	r27, Z+3	; 0x03
    3dae:	01 96       	adiw	r24, 0x01	; 1
    3db0:	a1 1d       	adc	r26, r1
    3db2:	b1 1d       	adc	r27, r1
    3db4:	80 83       	st	Z, r24
    3db6:	91 83       	std	Z+1, r25	; 0x01
    3db8:	a2 83       	std	Z+2, r26	; 0x02
    3dba:	b3 83       	std	Z+3, r27	; 0x03
		csp_buffer_free_isr(frame);
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <csp_buffer_free_isr>
		return;
    3dc2:	18 c0       	rjmp	.+48     	; 0x3df4 <csp_i2c_rx+0x6e>
	}

	/* Strip the CSP header off the length field before converting to CSP packet */
	frame->len -= sizeof(csp_id_t);
    3dc4:	88 87       	std	Y+8, r24	; 0x08
    3dc6:	99 87       	std	Y+9, r25	; 0x09

	/* Convert the packet from network to host order */
	packet = (csp_packet_t *) frame;
    3dc8:	c0 93 cd 3e 	sts	0x3ECD, r28
    3dcc:	d0 93 ce 3e 	sts	0x3ECE, r29
	packet->id.ext = csp_ntoh32(packet->id.ext);
    3dd0:	6a 85       	ldd	r22, Y+10	; 0x0a
    3dd2:	7b 85       	ldd	r23, Y+11	; 0x0b
    3dd4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dd6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dd8:	0e 94 d6 16 	call	0x2dac	; 0x2dac <csp_ntoh32>
    3ddc:	6a 87       	std	Y+10, r22	; 0x0a
    3dde:	7b 87       	std	Y+11, r23	; 0x0b
    3de0:	8c 87       	std	Y+12, r24	; 0x0c
    3de2:	9d 87       	std	Y+13, r25	; 0x0d

	/* Receive the packet in CSP */
	csp_new_packet(packet, &csp_if_i2c, pxTaskWoken);
    3de4:	a8 01       	movw	r20, r16
    3de6:	67 e0       	ldi	r22, 0x07	; 7
    3de8:	70 e2       	ldi	r23, 0x20	; 32
    3dea:	80 91 cd 3e 	lds	r24, 0x3ECD
    3dee:	90 91 ce 3e 	lds	r25, 0x3ECE
    3df2:	e5 dc       	rcall	.-1590   	; 0x37be <csp_new_packet>

}
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	08 95       	ret

00003dfe <csp_i2c_init>:

int csp_i2c_init(uint8_t addr, int handle, int speed) {
    3dfe:	cf 92       	push	r12
    3e00:	df 92       	push	r13
    3e02:	ef 92       	push	r14
    3e04:	ff 92       	push	r15
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	e8 2f       	mov	r30, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	9a 01       	movw	r18, r20

	/* Create i2c_handle */
	if (i2c_init(handle, I2C_MASTER, addr, speed, 10, 10, csp_i2c_rx) != E_NO_ERR)
    3e10:	0f 2e       	mov	r0, r31
    3e12:	f3 ec       	ldi	r31, 0xC3	; 195
    3e14:	cf 2e       	mov	r12, r31
    3e16:	fe e1       	ldi	r31, 0x1E	; 30
    3e18:	df 2e       	mov	r13, r31
    3e1a:	f0 2d       	mov	r31, r0
    3e1c:	0f 2e       	mov	r0, r31
    3e1e:	fa e0       	ldi	r31, 0x0A	; 10
    3e20:	ef 2e       	mov	r14, r31
    3e22:	f1 2c       	mov	r15, r1
    3e24:	f0 2d       	mov	r31, r0
    3e26:	0a e0       	ldi	r16, 0x0A	; 10
    3e28:	10 e0       	ldi	r17, 0x00	; 0
    3e2a:	4e 2f       	mov	r20, r30
    3e2c:	60 e0       	ldi	r22, 0x00	; 0
    3e2e:	70 e0       	ldi	r23, 0x00	; 0
    3e30:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2c_init>
    3e34:	01 96       	adiw	r24, 0x01	; 1
    3e36:	31 f4       	brne	.+12     	; 0x3e44 <csp_i2c_init+0x46>
		return CSP_ERR_DRIVER;

	/* Regsiter interface */
	csp_route_add_if(&csp_if_i2c);
    3e38:	87 e0       	ldi	r24, 0x07	; 7
    3e3a:	90 e2       	ldi	r25, 0x20	; 32
    3e3c:	e9 da       	rcall	.-2606   	; 0x3410 <csp_route_add_if>

	return CSP_ERR_NONE;
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <csp_i2c_init+0x4a>

int csp_i2c_init(uint8_t addr, int handle, int speed) {

	/* Create i2c_handle */
	if (i2c_init(handle, I2C_MASTER, addr, speed, 10, 10, csp_i2c_rx) != E_NO_ERR)
		return CSP_ERR_DRIVER;
    3e44:	85 ef       	ldi	r24, 0xF5	; 245
    3e46:	9f ef       	ldi	r25, 0xFF	; 255
	/* Regsiter interface */
	csp_route_add_if(&csp_if_i2c);

	return CSP_ERR_NONE;

}
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	ff 90       	pop	r15
    3e4e:	ef 90       	pop	r14
    3e50:	df 90       	pop	r13
    3e52:	cf 90       	pop	r12
    3e54:	08 95       	ret

00003e56 <csp_lo_tx>:
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @param timeout Timout in ms
 * @return 1 if packet was successfully transmitted, 0 on error
 */
int csp_lo_tx(csp_iface_t * interface, csp_packet_t * packet, uint32_t timeout) {
    3e56:	cb 01       	movw	r24, r22

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_new_packet(packet, &csp_if_lo, NULL);
    3e58:	40 e0       	ldi	r20, 0x00	; 0
    3e5a:	50 e0       	ldi	r21, 0x00	; 0
    3e5c:	6b e3       	ldi	r22, 0x3B	; 59
    3e5e:	70 e2       	ldi	r23, 0x20	; 32
    3e60:	ae dc       	rcall	.-1700   	; 0x37be <csp_new_packet>

	return CSP_ERR_NONE;

}
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	08 95       	ret

00003e68 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>
#include "../csp_port.h"
#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
    3e68:	0f 93       	push	r16
    3e6a:	1f 93       	push	r17
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	1f 92       	push	r1
    3e72:	1f 92       	push	r1
    3e74:	cd b7       	in	r28, 0x3d	; 61
    3e76:	de b7       	in	r29, 0x3e	; 62
    3e78:	89 83       	std	Y+1, r24	; 0x01
    3e7a:	9a 83       	std	Y+2, r25	; 0x02
    3e7c:	8b 01       	movw	r16, r22

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
    3e7e:	0e 94 55 14 	call	0x28aa	; 0x28aa <csp_conn_enqueue_packet>
    3e82:	99 23       	and	r25, r25
    3e84:	24 f4       	brge	.+8      	; 0x3e8e <csp_udp_new_packet+0x26>
		csp_log_error("Connection buffer queue full!\r\n");
		csp_buffer_free(packet);
    3e86:	c8 01       	movw	r24, r16
    3e88:	0e 94 18 14 	call	0x2830	; 0x2830 <csp_buffer_free>
		return;
    3e8c:	19 c0       	rjmp	.+50     	; 0x3ec0 <csp_udp_new_packet+0x58>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
    3e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e90:	fa 81       	ldd	r31, Y+2	; 0x02
    3e92:	86 85       	ldd	r24, Z+14	; 0x0e
    3e94:	97 85       	ldd	r25, Z+15	; 0x0f
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	99 f0       	breq	.+38     	; 0x3ec0 <csp_udp_new_packet+0x58>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	a9 01       	movw	r20, r18
    3ea0:	be 01       	movw	r22, r28
    3ea2:	6f 5f       	subi	r22, 0xFF	; 255
    3ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea6:	0e 94 04 12 	call	0x2408	; 0x2408 <csp_queue_enqueue>
    3eaa:	01 97       	sbiw	r24, 0x01	; 1
    3eac:	29 f0       	breq	.+10     	; 0x3eb8 <csp_udp_new_packet+0x50>
			csp_log_warn("Warning socket connection queue full\r\n");
			csp_close(conn);
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <csp_close>
			return;
    3eb6:	04 c0       	rjmp	.+8      	; 0x3ec0 <csp_udp_new_packet+0x58>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
    3eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eba:	fa 81       	ldd	r31, Y+2	; 0x02
    3ebc:	16 86       	std	Z+14, r1	; 0x0e
    3ebe:	17 86       	std	Z+15, r1	; 0x0f
	}

}
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	1f 91       	pop	r17
    3eca:	0f 91       	pop	r16
    3ecc:	08 95       	ret

00003ece <blink>:

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    3ece:	c0 e8       	ldi	r28, 0x80	; 128
    3ed0:	d6 e0       	ldi	r29, 0x06	; 6
    3ed2:	18 e0       	ldi	r17, 0x08	; 8
    3ed4:	1f 83       	std	Y+7, r17	; 0x07
void blink(void *p) {
	
	while (1) {
				
		power_switch_toggle();		
        vTaskDelay(1000);
    3ed6:	88 ee       	ldi	r24, 0xE8	; 232
    3ed8:	93 e0       	ldi	r25, 0x03	; 3
    3eda:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <vTaskDelay>
    3ede:	fa cf       	rjmp	.-12     	; 0x3ed4 <blink+0x6>

00003ee0 <main>:
// 		
// 		
// 	vTaskDelay(1000);
// }

int main(void) {
    3ee0:	af 92       	push	r10
    3ee2:	bf 92       	push	r11
    3ee4:	cf 92       	push	r12
    3ee6:	df 92       	push	r13
    3ee8:	ef 92       	push	r14
    3eea:	ff 92       	push	r15
    3eec:	0f 93       	push	r16
	
	// initialize the xMega peripherals
	boardInit();
    3eee:	d9 d6       	rcall	.+3506   	; 0x4ca2 <boardInit>
	
	// Initialize the CSP buffers
	csp_buffer_init(CSP_BUFFER_COUNT, CSP_BUFFER_SIZE);
    3ef0:	66 e5       	ldi	r22, 0x56	; 86
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	0e 94 1c 13 	call	0x2638	; 0x2638 <csp_buffer_init>
			
	// Initialize the CSP
	csp_init(CSP_MY_ADDRESS);
    3efc:	84 e0       	ldi	r24, 0x04	; 4
    3efe:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <csp_init>
	
	// Initialize the CSP I2C interface
	csp_i2c_init(CSP_I2C_SLAVE_ADDRESS, 0, CSP_I2C_BAUDSETTING);
    3f02:	4f e0       	ldi	r20, 0x0F	; 15
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	84 e0       	ldi	r24, 0x04	; 4
    3f0c:	78 df       	rcall	.-272    	; 0x3dfe <csp_i2c_init>
					
	// Add route to OBC via i2c
	csp_route_set(CSP_OBC_ADDRESS, &csp_if_i2c, CSP_I2C_OBC_ADDRESS);
    3f0e:	41 e0       	ldi	r20, 0x01	; 1
    3f10:	67 e0       	ldi	r22, 0x07	; 7
    3f12:	70 e2       	ldi	r23, 0x20	; 32
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	a5 da       	rcall	.-2742   	; 0x3462 <csp_route_set>
					
	// Start router task
	csp_route_start_task(CSP_ROUTER_STACK, CSP_ROUTER_PRIORITY);
    3f18:	60 e0       	ldi	r22, 0x00	; 0
    3f1a:	70 e0       	ldi	r23, 0x00	; 0
    3f1c:	84 ef       	ldi	r24, 0xF4	; 244
    3f1e:	91 e0       	ldi	r25, 0x01	; 1
    3f20:	36 da       	rcall	.-2964   	; 0x338e <csp_route_start_task>
				
	/* -------------------------------------------------------------------- */
	/*	Starts blinking task - only for debug								*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(blink, (signed char*) "blink", 64, NULL, configNORMAL_PRIORITY, NULL);
    3f22:	a1 2c       	mov	r10, r1
    3f24:	b1 2c       	mov	r11, r1
    3f26:	c1 2c       	mov	r12, r1
    3f28:	d1 2c       	mov	r13, r1
    3f2a:	e1 2c       	mov	r14, r1
    3f2c:	f1 2c       	mov	r15, r1
    3f2e:	00 e0       	ldi	r16, 0x00	; 0
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e4       	ldi	r20, 0x40	; 64
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	68 eb       	ldi	r22, 0xB8	; 184
    3f3a:	70 e2       	ldi	r23, 0x20	; 32
    3f3c:	87 e6       	ldi	r24, 0x67	; 103
    3f3e:	9f e1       	ldi	r25, 0x1F	; 31
    3f40:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	//xTaskCreate(testing, (signed char*) "testing", 256, NULL, configNORMAL_PRIORITY, NULL);	
	/* -------------------------------------------------------------------- */
	/*	Starts task that handles incoming communication		 				*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(cspTask, (signed char*) "cspTask", 512, NULL, configNORMAL_PRIORITY, NULL);
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e0       	ldi	r20, 0x00	; 0
    3f4a:	52 e0       	ldi	r21, 0x02	; 2
    3f4c:	6e eb       	ldi	r22, 0xBE	; 190
    3f4e:	70 e2       	ldi	r23, 0x20	; 32
    3f50:	8d ea       	ldi	r24, 0xAD	; 173
    3f52:	93 e0       	ldi	r25, 0x03	; 3
    3f54:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	/* -------------------------------------------------------------------- */
	/*	Starts task that handles outgoing communication		 				*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(mainTask, (signed char*) "mainTask", 512, NULL, configNORMAL_PRIORITY, NULL);
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	52 e0       	ldi	r21, 0x02	; 2
    3f60:	66 ec       	ldi	r22, 0xC6	; 198
    3f62:	70 e2       	ldi	r23, 0x20	; 32
    3f64:	86 e0       	ldi	r24, 0x06	; 6
    3f66:	91 e2       	ldi	r25, 0x21	; 33
    3f68:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	/* -------------------------------------------------------------------- */
	/*	Starts the scheduler and all previously created tasks				*/
	/* -------------------------------------------------------------------- */
	vTaskStartScheduler();
    3f6c:	0e 94 af 0b 	call	0x175e	; 0x175e <vTaskStartScheduler>
	
	return 0;
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	0f 91       	pop	r16
    3f76:	ff 90       	pop	r15
    3f78:	ef 90       	pop	r14
    3f7a:	df 90       	pop	r13
    3f7c:	cf 90       	pop	r12
    3f7e:	bf 90       	pop	r11
    3f80:	af 90       	pop	r10
    3f82:	08 95       	ret

00003f84 <sendFreeHeapSpace>:
csp_packet_t * outcomingPacket;

/* -------------------------------------------------------------------- */
/*	Reply the free heap space in human readable form					*/
/* -------------------------------------------------------------------- */
int sendFreeHeapSpace(csp_packet_t * inPacket) {
    3f84:	8f 92       	push	r8
    3f86:	9f 92       	push	r9
    3f88:	af 92       	push	r10
    3f8a:	bf 92       	push	r11
    3f8c:	cf 92       	push	r12
    3f8e:	df 92       	push	r13
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	64 97       	sbiw	r28, 0x14	; 20
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	7c 01       	movw	r14, r24
	
	char msg[20];
	itoa(xPortGetFreeHeapSize(), msg, 10);
    3fa8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <xPortGetFreeHeapSize>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3fac:	4a e0       	ldi	r20, 0x0A	; 10
    3fae:	8e 01       	movw	r16, r28
    3fb0:	0f 5f       	subi	r16, 0xFF	; 255
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	b8 01       	movw	r22, r16
    3fb6:	0e 94 2e 2c 	call	0x585c	; 0x585c <__itoa_ncheck>
	
	/* Copy message to packet */
	strcpy(outcomingPacket->data, msg);
    3fba:	80 91 78 3f 	lds	r24, 0x3F78
    3fbe:	90 91 79 3f 	lds	r25, 0x3F79
    3fc2:	b8 01       	movw	r22, r16
    3fc4:	0e 96       	adiw	r24, 0x0e	; 14
    3fc6:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <strcpy>
	outcomingPacket->length = strlen(msg);
    3fca:	c0 90 78 3f 	lds	r12, 0x3F78
    3fce:	d0 90 79 3f 	lds	r13, 0x3F79
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	01 90       	ld	r0, Z+
    3fd6:	00 20       	and	r0, r0
    3fd8:	e9 f7       	brne	.-6      	; 0x3fd4 <sendFreeHeapSpace+0x50>
    3fda:	31 97       	sbiw	r30, 0x01	; 1
    3fdc:	e0 1b       	sub	r30, r16
    3fde:	f1 0b       	sbc	r31, r17
    3fe0:	d6 01       	movw	r26, r12
    3fe2:	18 96       	adiw	r26, 0x08	; 8
    3fe4:	ed 93       	st	X+, r30
    3fe6:	fc 93       	st	X, r31
    3fe8:	19 97       	sbiw	r26, 0x09	; 9

	/* Send packet */
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, outcomingPacket, 1000) == CSP_ERR_NONE) {		
    3fea:	f7 01       	movw	r30, r14
    3fec:	43 85       	ldd	r20, Z+11	; 0x0b
    3fee:	84 2f       	mov	r24, r20
    3ff0:	82 95       	swap	r24
    3ff2:	86 95       	lsr	r24
    3ff4:	86 95       	lsr	r24
    3ff6:	83 70       	andi	r24, 0x03	; 3
    3ff8:	24 85       	ldd	r18, Z+12	; 0x0c
    3ffa:	2f 70       	andi	r18, 0x0F	; 15
    3ffc:	22 0f       	add	r18, r18
    3ffe:	22 0f       	add	r18, r18
    4000:	28 2b       	or	r18, r24
    4002:	4f 73       	andi	r20, 0x3F	; 63
    4004:	65 85       	ldd	r22, Z+13	; 0x0d
    4006:	66 95       	lsr	r22
    4008:	6f 71       	andi	r22, 0x1F	; 31
    400a:	0f 2e       	mov	r0, r31
    400c:	f8 ee       	ldi	r31, 0xE8	; 232
    400e:	8f 2e       	mov	r8, r31
    4010:	f3 e0       	ldi	r31, 0x03	; 3
    4012:	9f 2e       	mov	r9, r31
    4014:	a1 2c       	mov	r10, r1
    4016:	b1 2c       	mov	r11, r1
    4018:	f0 2d       	mov	r31, r0
    401a:	e1 2c       	mov	r14, r1
    401c:	f1 2c       	mov	r15, r1
    401e:	87 01       	movw	r16, r14
    4020:	82 e0       	ldi	r24, 0x02	; 2
    4022:	7a d8       	rcall	.-3852   	; 0x3118 <csp_sendto>
	else {
		/* Send failed */
	}

	return 0;
}
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	64 96       	adiw	r28, 0x14	; 20
    402a:	cd bf       	out	0x3d, r28	; 61
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	1f 91       	pop	r17
    4034:	0f 91       	pop	r16
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
    403a:	df 90       	pop	r13
    403c:	cf 90       	pop	r12
    403e:	bf 90       	pop	r11
    4040:	af 90       	pop	r10
    4042:	9f 90       	pop	r9
    4044:	8f 90       	pop	r8
    4046:	08 95       	ret

00004048 <houseKeeping>:

/* -------------------------------------------------------------------- */
/*	Reply with some status info message									*/
/* -------------------------------------------------------------------- */
int houseKeeping(csp_packet_t * inPacket) {
    4048:	4f 92       	push	r4
    404a:	5f 92       	push	r5
    404c:	6f 92       	push	r6
    404e:	7f 92       	push	r7
    4050:	8f 92       	push	r8
    4052:	9f 92       	push	r9
    4054:	af 92       	push	r10
    4056:	bf 92       	push	r11
    4058:	cf 92       	push	r12
    405a:	df 92       	push	r13
    405c:	ef 92       	push	r14
    405e:	ff 92       	push	r15
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	c0 54       	subi	r28, 0x40	; 64
    406e:	d1 09       	sbc	r29, r1
    4070:	cd bf       	out	0x3d, r28	; 61
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	7c 01       	movw	r14, r24
	
	// put the info message into the packet
	char msg[64];
	sprintf(msg, "*** Board\n\rSoftware HM board v1.0\n\rUptime: %id %ih %im %ds\n\r", (int16_t) hoursTimer/24, (int16_t) hoursTimer%24, (int16_t) secondsTimer/60, (int16_t) secondsTimer%60);
    4076:	80 91 8c 3f 	lds	r24, 0x3F8C
    407a:	90 91 8d 3f 	lds	r25, 0x3F8D
    407e:	a0 91 8e 3f 	lds	r26, 0x3F8E
    4082:	b0 91 8f 3f 	lds	r27, 0x3F8F
    4086:	40 90 8c 3f 	lds	r4, 0x3F8C
    408a:	50 90 8d 3f 	lds	r5, 0x3F8D
    408e:	60 90 8e 3f 	lds	r6, 0x3F8E
    4092:	70 90 8f 3f 	lds	r7, 0x3F8F
    4096:	80 90 82 3f 	lds	r8, 0x3F82
    409a:	90 90 83 3f 	lds	r9, 0x3F83
    409e:	a0 90 84 3f 	lds	r10, 0x3F84
    40a2:	b0 90 85 3f 	lds	r11, 0x3F85
    40a6:	00 91 82 3f 	lds	r16, 0x3F82
    40aa:	10 91 83 3f 	lds	r17, 0x3F83
    40ae:	20 91 84 3f 	lds	r18, 0x3F84
    40b2:	30 91 85 3f 	lds	r19, 0x3F85
    40b6:	ec e3       	ldi	r30, 0x3C	; 60
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	bf 01       	movw	r22, r30
    40bc:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    40c0:	9f 93       	push	r25
    40c2:	8f 93       	push	r24
    40c4:	c2 01       	movw	r24, r4
    40c6:	bf 01       	movw	r22, r30
    40c8:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    40cc:	7f 93       	push	r23
    40ce:	6f 93       	push	r22
    40d0:	e8 e1       	ldi	r30, 0x18	; 24
    40d2:	f0 e0       	ldi	r31, 0x00	; 0
    40d4:	c4 01       	movw	r24, r8
    40d6:	bf 01       	movw	r22, r30
    40d8:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    40dc:	9f 93       	push	r25
    40de:	8f 93       	push	r24
    40e0:	c8 01       	movw	r24, r16
    40e2:	bf 01       	movw	r22, r30
    40e4:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <__divmodhi4>
    40e8:	7f 93       	push	r23
    40ea:	6f 93       	push	r22
    40ec:	8f ec       	ldi	r24, 0xCF	; 207
    40ee:	90 e2       	ldi	r25, 0x20	; 32
    40f0:	9f 93       	push	r25
    40f2:	8f 93       	push	r24
    40f4:	8e 01       	movw	r16, r28
    40f6:	0f 5f       	subi	r16, 0xFF	; 255
    40f8:	1f 4f       	sbci	r17, 0xFF	; 255
    40fa:	1f 93       	push	r17
    40fc:	0f 93       	push	r16
    40fe:	0e 94 83 2c 	call	0x5906	; 0x5906 <sprintf>

	strcpy(outcomingPacket->data, msg);
    4102:	80 91 78 3f 	lds	r24, 0x3F78
    4106:	90 91 79 3f 	lds	r25, 0x3F79
    410a:	b8 01       	movw	r22, r16
    410c:	0e 96       	adiw	r24, 0x0e	; 14
    410e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <strcpy>
	outcomingPacket->length = strlen(msg);
    4112:	c0 90 78 3f 	lds	r12, 0x3F78
    4116:	d0 90 79 3f 	lds	r13, 0x3F79
    411a:	f8 01       	movw	r30, r16
    411c:	01 90       	ld	r0, Z+
    411e:	00 20       	and	r0, r0
    4120:	e9 f7       	brne	.-6      	; 0x411c <houseKeeping+0xd4>
    4122:	31 97       	sbiw	r30, 0x01	; 1
    4124:	e0 1b       	sub	r30, r16
    4126:	f1 0b       	sbc	r31, r17
    4128:	d6 01       	movw	r26, r12
    412a:	18 96       	adiw	r26, 0x08	; 8
    412c:	ed 93       	st	X+, r30
    412e:	fc 93       	st	X, r31
    4130:	19 97       	sbiw	r26, 0x09	; 9

	/* Send packet */
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, outcomingPacket, 1000) == CSP_ERR_NONE) {
    4132:	f7 01       	movw	r30, r14
    4134:	43 85       	ldd	r20, Z+11	; 0x0b
    4136:	84 2f       	mov	r24, r20
    4138:	82 95       	swap	r24
    413a:	86 95       	lsr	r24
    413c:	86 95       	lsr	r24
    413e:	83 70       	andi	r24, 0x03	; 3
    4140:	24 85       	ldd	r18, Z+12	; 0x0c
    4142:	2f 70       	andi	r18, 0x0F	; 15
    4144:	22 0f       	add	r18, r18
    4146:	22 0f       	add	r18, r18
    4148:	28 2b       	or	r18, r24
    414a:	4f 73       	andi	r20, 0x3F	; 63
    414c:	65 85       	ldd	r22, Z+13	; 0x0d
    414e:	66 95       	lsr	r22
    4150:	6f 71       	andi	r22, 0x1F	; 31
    4152:	0f 2e       	mov	r0, r31
    4154:	f8 ee       	ldi	r31, 0xE8	; 232
    4156:	8f 2e       	mov	r8, r31
    4158:	f3 e0       	ldi	r31, 0x03	; 3
    415a:	9f 2e       	mov	r9, r31
    415c:	a1 2c       	mov	r10, r1
    415e:	b1 2c       	mov	r11, r1
    4160:	f0 2d       	mov	r31, r0
    4162:	e1 2c       	mov	r14, r1
    4164:	f1 2c       	mov	r15, r1
    4166:	87 01       	movw	r16, r14
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	0e 94 8c 18 	call	0x3118	; 0x3118 <csp_sendto>
	} 
	else {
		/* Send failed */
	}

	return 0;
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	de bf       	out	0x3e, r29	; 62
}
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	c0 5c       	subi	r28, 0xC0	; 192
    4178:	df 4f       	sbci	r29, 0xFF	; 255
    417a:	cd bf       	out	0x3d, r28	; 61
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	ff 90       	pop	r15
    4188:	ef 90       	pop	r14
    418a:	df 90       	pop	r13
    418c:	cf 90       	pop	r12
    418e:	bf 90       	pop	r11
    4190:	af 90       	pop	r10
    4192:	9f 90       	pop	r9
    4194:	8f 90       	pop	r8
    4196:	7f 90       	pop	r7
    4198:	6f 90       	pop	r6
    419a:	5f 90       	pop	r5
    419c:	4f 90       	pop	r4
    419e:	08 95       	ret

000041a0 <echoBack>:

/* -------------------------------------------------------------------- */
/*	Sends back the incoming packet										*/
/* -------------------------------------------------------------------- */
int echoBack(csp_packet_t * inPacket) {
    41a0:	8f 92       	push	r8
    41a2:	9f 92       	push	r9
    41a4:	af 92       	push	r10
    41a6:	bf 92       	push	r11
    41a8:	cf 92       	push	r12
    41aa:	df 92       	push	r13
    41ac:	ef 92       	push	r14
    41ae:	ff 92       	push	r15
    41b0:	0f 93       	push	r16
    41b2:	1f 93       	push	r17
    41b4:	fc 01       	movw	r30, r24

	/* Send packet */
	// reuses the incoming packet for the response
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, inPacket, 1000) == CSP_ERR_NONE) {
    41b6:	43 85       	ldd	r20, Z+11	; 0x0b
    41b8:	84 2f       	mov	r24, r20
    41ba:	82 95       	swap	r24
    41bc:	86 95       	lsr	r24
    41be:	86 95       	lsr	r24
    41c0:	83 70       	andi	r24, 0x03	; 3
    41c2:	24 85       	ldd	r18, Z+12	; 0x0c
    41c4:	2f 70       	andi	r18, 0x0F	; 15
    41c6:	22 0f       	add	r18, r18
    41c8:	22 0f       	add	r18, r18
    41ca:	28 2b       	or	r18, r24
    41cc:	4f 73       	andi	r20, 0x3F	; 63
    41ce:	65 85       	ldd	r22, Z+13	; 0x0d
    41d0:	66 95       	lsr	r22
    41d2:	6f 71       	andi	r22, 0x1F	; 31
    41d4:	0f 2e       	mov	r0, r31
    41d6:	f8 ee       	ldi	r31, 0xE8	; 232
    41d8:	8f 2e       	mov	r8, r31
    41da:	f3 e0       	ldi	r31, 0x03	; 3
    41dc:	9f 2e       	mov	r9, r31
    41de:	a1 2c       	mov	r10, r1
    41e0:	b1 2c       	mov	r11, r1
    41e2:	f0 2d       	mov	r31, r0
    41e4:	6f 01       	movw	r12, r30
    41e6:	e1 2c       	mov	r14, r1
    41e8:	f1 2c       	mov	r15, r1
    41ea:	87 01       	movw	r16, r14
    41ec:	82 e0       	ldi	r24, 0x02	; 2
    41ee:	0e 94 8c 18 	call	0x3118	; 0x3118 <csp_sendto>
	else {
		/* Send failed */
	}

	return 0;
}
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	ff 90       	pop	r15
    41fc:	ef 90       	pop	r14
    41fe:	df 90       	pop	r13
    4200:	cf 90       	pop	r12
    4202:	bf 90       	pop	r11
    4204:	af 90       	pop	r10
    4206:	9f 90       	pop	r9
    4208:	8f 90       	pop	r8
    420a:	08 95       	ret

0000420c <mainTask>:

/* -------------------------------------------------------------------- */
/*	The main task														*/
/* -------------------------------------------------------------------- */
void mainTask(void *p) {
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	00 d0       	rcall	.+0      	; 0x4212 <mainTask+0x6>
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
	
	/* The variable used to receive from the queue. */
	xCSPStackEvent_t xReceivedEvent;
	
	outcomingPacket = csp_buffer_get(CSP_PACKET_SIZE);
    4216:	88 e4       	ldi	r24, 0x48	; 72
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	0e 94 a6 13 	call	0x274c	; 0x274c <csp_buffer_get>
    421e:	80 93 78 3f 	sts	0x3F78, r24
    4222:	90 93 79 3f 	sts	0x3F79, r25
	// infinite while loop of the program 
	while (1) {
		
		// the queue between cspTask and the main task
		// this is unblocking way how to read from the queue, the last parameter is "ticks to wait"
		if (xQueueReceive(xCSPEventQueue, &xReceivedEvent, 1)) {
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	be 01       	movw	r22, r28
    422e:	6f 5f       	subi	r22, 0xFF	; 255
    4230:	7f 4f       	sbci	r23, 0xFF	; 255
    4232:	80 91 cf 3e 	lds	r24, 0x3ECF
    4236:	90 91 d0 3e 	lds	r25, 0x3ED0
    423a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    423e:	88 23       	and	r24, r24
    4240:	91 f3       	breq	.-28     	; 0x4226 <mainTask+0x1a>
		
			switch( xReceivedEvent.eEventType )
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	81 30       	cpi	r24, 0x01	; 1
    4246:	21 f0       	breq	.+8      	; 0x4250 <mainTask+0x44>
    4248:	38 f0       	brcs	.+14     	; 0x4258 <mainTask+0x4c>
    424a:	82 30       	cpi	r24, 0x02	; 2
    424c:	49 f0       	breq	.+18     	; 0x4260 <mainTask+0x54>
    424e:	eb cf       	rjmp	.-42     	; 0x4226 <mainTask+0x1a>
			{
				// Reply with RTOS free heap space
				// replies in Human Readable form
				case freeHeapEvent :
			
					sendFreeHeapSpace(xReceivedEvent.pvData);
    4250:	8a 81       	ldd	r24, Y+2	; 0x02
    4252:	9b 81       	ldd	r25, Y+3	; 0x03
    4254:	97 de       	rcall	.-722    	; 0x3f84 <sendFreeHeapSpace>
			
				break;
    4256:	e7 cf       	rjmp	.-50     	; 0x4226 <mainTask+0x1a>
			
				// Echo back the whole packet
				// incoming port => outcoming
				case echoBackEvent :
			
					echoBack(xReceivedEvent.pvData);
    4258:	8a 81       	ldd	r24, Y+2	; 0x02
    425a:	9b 81       	ldd	r25, Y+3	; 0x03
    425c:	a1 df       	rcall	.-190    	; 0x41a0 <echoBack>
			
				break;
    425e:	e3 cf       	rjmp	.-58     	; 0x4226 <mainTask+0x1a>
			
				// sends the info about the system
				case housKeepingEvent :
			
					houseKeeping(xReceivedEvent.pvData);
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
    4262:	9b 81       	ldd	r25, Y+3	; 0x03
    4264:	f1 de       	rcall	.-542    	; 0x4048 <houseKeeping>
			
				break;
    4266:	df cf       	rjmp	.-66     	; 0x4226 <mainTask+0x1a>

00004268 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
        uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
        CCPWrite( &CLK.PSCTRL, PSconfig );
    4268:	0f 93       	push	r16
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	1f 92       	push	r1
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    4274:	2f b7       	in	r18, 0x3f	; 63
    4276:	29 83       	std	Y+1, r18	; 0x01
    4278:	f8 94       	cli
    427a:	1b be       	out	0x3b, r1	; 59
    427c:	fc 01       	movw	r30, r24
    427e:	08 ed       	ldi	r16, 0xD8	; 216
    4280:	04 bf       	out	0x34, r16	; 52
    4282:	60 83       	st	Z, r22
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	8f bf       	out	0x3f, r24	; 63
    4288:	0f 90       	pop	r0
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	0f 91       	pop	r16
    4290:	08 95       	ret

00004292 <CLKSYS_XOSC_Config>:
    4292:	66 23       	and	r22, r22
    4294:	11 f0       	breq	.+4      	; 0x429a <CLKSYS_XOSC_Config+0x8>
    4296:	90 e2       	ldi	r25, 0x20	; 32
    4298:	01 c0       	rjmp	.+2      	; 0x429c <CLKSYS_XOSC_Config+0xa>
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	84 2b       	or	r24, r20
    429e:	89 2b       	or	r24, r25
    42a0:	e0 e5       	ldi	r30, 0x50	; 80
    42a2:	f0 e0       	ldi	r31, 0x00	; 0
    42a4:	82 83       	std	Z+2, r24	; 0x02
    42a6:	08 95       	ret

000042a8 <CLKSYS_Disable>:
    42a8:	e0 e5       	ldi	r30, 0x50	; 80
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	90 81       	ld	r25, Z
    42ae:	28 2f       	mov	r18, r24
    42b0:	20 95       	com	r18
    42b2:	92 23       	and	r25, r18
    42b4:	90 83       	st	Z, r25
    42b6:	90 81       	ld	r25, Z
    42b8:	89 23       	and	r24, r25
    42ba:	08 95       	ret

000042bc <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	18 2f       	mov	r17, r24
        uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    42c4:	c0 e4       	ldi	r28, 0x40	; 64
    42c6:	d0 e0       	ldi	r29, 0x00	; 0
    42c8:	68 81       	ld	r22, Y
    42ca:	68 7f       	andi	r22, 0xF8	; 248
    42cc:	68 2b       	or	r22, r24
        CCPWrite( &CLK.CTRL, clkCtrl );
    42ce:	80 e4       	ldi	r24, 0x40	; 64
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	ca df       	rcall	.-108    	; 0x4268 <CCPWrite>
        clkCtrl = ( CLK.CTRL & clockSource );
    42d4:	88 81       	ld	r24, Y
        return clkCtrl;
}
    42d6:	81 23       	and	r24, r17
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	08 95       	ret

000042e0 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    42e0:	fc 01       	movw	r30, r24
    42e2:	20 81       	ld	r18, Z
    42e4:	20 7f       	andi	r18, 0xF0	; 240
    42e6:	62 2b       	or	r22, r18
    42e8:	60 83       	st	Z, r22
    42ea:	08 95       	ret

000042ec <TC0_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    42ec:	fc 01       	movw	r30, r24
    42ee:	26 81       	ldd	r18, Z+6	; 0x06
    42f0:	2c 7f       	andi	r18, 0xFC	; 252
    42f2:	62 2b       	or	r22, r18
    42f4:	66 83       	std	Z+6, r22	; 0x06
    42f6:	08 95       	ret

000042f8 <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    42f8:	fc 01       	movw	r30, r24
    42fa:	60 83       	st	Z, r22
    42fc:	71 83       	std	Z+1, r23	; 0x01
    42fe:	48 63       	ori	r20, 0x38	; 56
    4300:	db 01       	movw	r26, r22
    4302:	11 96       	adiw	r26, 0x01	; 1
    4304:	4c 93       	st	X, r20
    4306:	a0 81       	ld	r26, Z
    4308:	b1 81       	ldd	r27, Z+1	; 0x01
    430a:	15 96       	adiw	r26, 0x05	; 5
    430c:	2c 93       	st	X, r18
    430e:	01 90       	ld	r0, Z+
    4310:	f0 81       	ld	r31, Z
    4312:	e0 2d       	mov	r30, r0
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	84 83       	std	Z+4, r24	; 0x04
    4318:	08 95       	ret

0000431a <TWI_MasterWriteRead>:
    431a:	0f 93       	push	r16
    431c:	cf 93       	push	r28
    431e:	df 93       	push	r29
    4320:	29 34       	cpi	r18, 0x49	; 73
    4322:	08 f0       	brcs	.+2      	; 0x4326 <TWI_MasterWriteRead+0xc>
    4324:	4f c0       	rjmp	.+158    	; 0x43c4 <TWI_MasterWriteRead+0xaa>
    4326:	02 30       	cpi	r16, 0x02	; 2
    4328:	08 f0       	brcs	.+2      	; 0x432c <TWI_MasterWriteRead+0x12>
    432a:	4e c0       	rjmp	.+156    	; 0x43c8 <TWI_MasterWriteRead+0xae>
    432c:	fc 01       	movw	r30, r24
    432e:	e0 5b       	subi	r30, 0xB0	; 176
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	30 81       	ld	r19, Z
    4334:	31 11       	cpse	r19, r1
    4336:	4a c0       	rjmp	.+148    	; 0x43cc <TWI_MasterWriteRead+0xb2>
    4338:	31 e0       	ldi	r19, 0x01	; 1
    433a:	30 83       	st	Z, r19
    433c:	31 96       	adiw	r30, 0x01	; 1
    433e:	10 82       	st	Z, r1
    4340:	66 0f       	add	r22, r22
    4342:	dc 01       	movw	r26, r24
    4344:	12 96       	adiw	r26, 0x02	; 2
    4346:	6c 93       	st	X, r22
    4348:	22 23       	and	r18, r18
    434a:	a1 f0       	breq	.+40     	; 0x4374 <TWI_MasterWriteRead+0x5a>
    434c:	ea 01       	movw	r28, r20
    434e:	ba 01       	movw	r22, r20
    4350:	6f 5f       	subi	r22, 0xFF	; 255
    4352:	7f 4f       	sbci	r23, 0xFF	; 255
    4354:	3f ef       	ldi	r19, 0xFF	; 255
    4356:	32 0f       	add	r19, r18
    4358:	63 0f       	add	r22, r19
    435a:	71 1d       	adc	r23, r1
    435c:	fa 01       	movw	r30, r20
    435e:	df 01       	movw	r26, r30
    4360:	ac 1b       	sub	r26, r28
    4362:	bd 0b       	sbc	r27, r29
    4364:	31 91       	ld	r19, Z+
    4366:	a8 0f       	add	r26, r24
    4368:	b9 1f       	adc	r27, r25
    436a:	13 96       	adiw	r26, 0x03	; 3
    436c:	3c 93       	st	X, r19
    436e:	e6 17       	cp	r30, r22
    4370:	f7 07       	cpc	r31, r23
    4372:	a9 f7       	brne	.-22     	; 0x435e <TWI_MasterWriteRead+0x44>
    4374:	fc 01       	movw	r30, r24
    4376:	e4 5b       	subi	r30, 0xB4	; 180
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	20 83       	st	Z, r18
    437c:	dc 01       	movw	r26, r24
    437e:	a3 5b       	subi	r26, 0xB3	; 179
    4380:	bf 4f       	sbci	r27, 0xFF	; 255
    4382:	0c 93       	st	X, r16
    4384:	11 96       	adiw	r26, 0x01	; 1
    4386:	1c 92       	st	X, r1
    4388:	11 96       	adiw	r26, 0x01	; 1
    438a:	1c 92       	st	X, r1
    438c:	20 81       	ld	r18, Z
    438e:	22 23       	and	r18, r18
    4390:	49 f0       	breq	.+18     	; 0x43a4 <TWI_MasterWriteRead+0x8a>
    4392:	fc 01       	movw	r30, r24
    4394:	22 81       	ldd	r18, Z+2	; 0x02
    4396:	2e 7f       	andi	r18, 0xFE	; 254
    4398:	01 90       	ld	r0, Z+
    439a:	f0 81       	ld	r31, Z
    439c:	e0 2d       	mov	r30, r0
    439e:	26 83       	std	Z+6, r18	; 0x06
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	17 c0       	rjmp	.+46     	; 0x43d2 <TWI_MasterWriteRead+0xb8>
    43a4:	fc 01       	movw	r30, r24
    43a6:	e3 5b       	subi	r30, 0xB3	; 179
    43a8:	ff 4f       	sbci	r31, 0xFF	; 255
    43aa:	20 81       	ld	r18, Z
    43ac:	22 23       	and	r18, r18
    43ae:	81 f0       	breq	.+32     	; 0x43d0 <TWI_MasterWriteRead+0xb6>
    43b0:	dc 01       	movw	r26, r24
    43b2:	12 96       	adiw	r26, 0x02	; 2
    43b4:	2c 91       	ld	r18, X
    43b6:	12 97       	sbiw	r26, 0x02	; 2
    43b8:	21 60       	ori	r18, 0x01	; 1
    43ba:	ed 91       	ld	r30, X+
    43bc:	fc 91       	ld	r31, X
    43be:	26 83       	std	Z+6, r18	; 0x06
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	07 c0       	rjmp	.+14     	; 0x43d2 <TWI_MasterWriteRead+0xb8>
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	05 c0       	rjmp	.+10     	; 0x43d2 <TWI_MasterWriteRead+0xb8>
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	03 c0       	rjmp	.+6      	; 0x43d2 <TWI_MasterWriteRead+0xb8>
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <TWI_MasterWriteRead+0xb8>
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
    43d6:	0f 91       	pop	r16
    43d8:	08 95       	ret

000043da <TWI_MasterWrite>:
    43da:	0f 93       	push	r16
    43dc:	00 e0       	ldi	r16, 0x00	; 0
    43de:	9d df       	rcall	.-198    	; 0x431a <TWI_MasterWriteRead>
    43e0:	0f 91       	pop	r16
    43e2:	08 95       	ret

000043e4 <TWI_MasterArbitrationLostBusErrorHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    43e4:	dc 01       	movw	r26, r24
    43e6:	ed 91       	ld	r30, X+
    43e8:	fc 91       	ld	r31, X
    43ea:	11 97       	sbiw	r26, 0x01	; 1
    43ec:	24 81       	ldd	r18, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    43ee:	22 ff       	sbrs	r18, 2
    43f0:	05 c0       	rjmp	.+10     	; 0x43fc <TWI_MasterArbitrationLostBusErrorHandler+0x18>
		twi->result = TWIM_RESULT_BUS_ERROR;
    43f2:	34 e0       	ldi	r19, 0x04	; 4
    43f4:	af 5a       	subi	r26, 0xAF	; 175
    43f6:	bf 4f       	sbci	r27, 0xFF	; 255
    43f8:	3c 93       	st	X, r19
    43fa:	05 c0       	rjmp	.+10     	; 0x4406 <TWI_MasterArbitrationLostBusErrorHandler+0x22>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    43fc:	33 e0       	ldi	r19, 0x03	; 3
    43fe:	dc 01       	movw	r26, r24
    4400:	af 5a       	subi	r26, 0xAF	; 175
    4402:	bf 4f       	sbci	r27, 0xFF	; 255
    4404:	3c 93       	st	X, r19
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    4406:	28 60       	ori	r18, 0x08	; 8
    4408:	24 83       	std	Z+4, r18	; 0x04

	twi->status = TWIM_STATUS_READY;
    440a:	fc 01       	movw	r30, r24
    440c:	e0 5b       	subi	r30, 0xB0	; 176
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	10 82       	st	Z, r1
    4412:	08 95       	ret

00004414 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    4414:	cf 93       	push	r28
    4416:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    4418:	fc 01       	movw	r30, r24
    441a:	e4 5b       	subi	r30, 0xB4	; 180
    441c:	ff 4f       	sbci	r31, 0xFF	; 255
    441e:	30 81       	ld	r19, Z
	uint8_t bytesToRead   = twi->bytesToRead;
    4420:	31 96       	adiw	r30, 0x01	; 1
    4422:	40 81       	ld	r20, Z

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    4424:	dc 01       	movw	r26, r24
    4426:	ed 91       	ld	r30, X+
    4428:	fc 91       	ld	r31, X
    442a:	24 81       	ldd	r18, Z+4	; 0x04
    442c:	24 ff       	sbrs	r18, 4
    442e:	0a c0       	rjmp	.+20     	; 0x4444 <TWI_MasterWriteHandler+0x30>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4430:	23 e0       	ldi	r18, 0x03	; 3
    4432:	23 83       	std	Z+3, r18	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    4434:	fc 01       	movw	r30, r24
    4436:	ef 5a       	subi	r30, 0xAF	; 175
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	25 e0       	ldi	r18, 0x05	; 5
    443c:	20 83       	st	Z, r18
		twi->status = TWIM_STATUS_READY;
    443e:	31 97       	sbiw	r30, 0x01	; 1
    4440:	10 82       	st	Z, r1
    4442:	25 c0       	rjmp	.+74     	; 0x448e <TWI_MasterWriteHandler+0x7a>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    4444:	dc 01       	movw	r26, r24
    4446:	a2 5b       	subi	r26, 0xB2	; 178
    4448:	bf 4f       	sbci	r27, 0xFF	; 255
    444a:	2c 91       	ld	r18, X
    444c:	23 17       	cp	r18, r19
    444e:	50 f4       	brcc	.+20     	; 0x4464 <TWI_MasterWriteHandler+0x50>
		uint8_t data = twi->writeData[twi->bytesWritten];
    4450:	2c 91       	ld	r18, X
    4452:	ec 01       	movw	r28, r24
    4454:	c2 0f       	add	r28, r18
    4456:	d1 1d       	adc	r29, r1
    4458:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    445a:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    445c:	8c 91       	ld	r24, X
    445e:	8f 5f       	subi	r24, 0xFF	; 255
    4460:	8c 93       	st	X, r24
    4462:	15 c0       	rjmp	.+42     	; 0x448e <TWI_MasterWriteHandler+0x7a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    4464:	dc 01       	movw	r26, r24
    4466:	a1 5b       	subi	r26, 0xB1	; 177
    4468:	bf 4f       	sbci	r27, 0xFF	; 255
    446a:	2c 91       	ld	r18, X
    446c:	24 17       	cp	r18, r20
    446e:	30 f4       	brcc	.+12     	; 0x447c <TWI_MasterWriteHandler+0x68>
		uint8_t readAddress = twi->address | 0x01;
    4470:	dc 01       	movw	r26, r24
    4472:	12 96       	adiw	r26, 0x02	; 2
    4474:	8c 91       	ld	r24, X
    4476:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    4478:	86 83       	std	Z+6, r24	; 0x06
    447a:	09 c0       	rjmp	.+18     	; 0x448e <TWI_MasterWriteHandler+0x7a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    447c:	23 e0       	ldi	r18, 0x03	; 3
    447e:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4480:	fc 01       	movw	r30, r24
    4482:	ef 5a       	subi	r30, 0xAF	; 175
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	21 e0       	ldi	r18, 0x01	; 1
    4488:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    448a:	31 97       	sbiw	r30, 0x01	; 1
    448c:	10 82       	st	Z, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    448e:	df 91       	pop	r29
    4490:	cf 91       	pop	r28
    4492:	08 95       	ret

00004494 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    4494:	fc 01       	movw	r30, r24
    4496:	e1 5b       	subi	r30, 0xB1	; 177
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	20 81       	ld	r18, Z
    449c:	21 11       	cpse	r18, r1
    449e:	12 c0       	rjmp	.+36     	; 0x44c4 <TWI_MasterReadHandler+0x30>
		uint8_t data = twi->interface->MASTER.DATA;
    44a0:	dc 01       	movw	r26, r24
    44a2:	ed 91       	ld	r30, X+
    44a4:	fc 91       	ld	r31, X
    44a6:	11 97       	sbiw	r26, 0x01	; 1
    44a8:	27 81       	ldd	r18, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    44aa:	fc 01       	movw	r30, r24
    44ac:	e1 5b       	subi	r30, 0xB1	; 177
    44ae:	ff 4f       	sbci	r31, 0xFF	; 255
    44b0:	30 81       	ld	r19, Z
    44b2:	a3 0f       	add	r26, r19
    44b4:	b1 1d       	adc	r27, r1
    44b6:	a5 5b       	subi	r26, 0xB5	; 181
    44b8:	bf 4f       	sbci	r27, 0xFF	; 255
    44ba:	2c 93       	st	X, r18
		twi->bytesRead++;
    44bc:	20 81       	ld	r18, Z
    44be:	2f 5f       	subi	r18, 0xFF	; 255
    44c0:	20 83       	st	Z, r18
    44c2:	0c c0       	rjmp	.+24     	; 0x44dc <TWI_MasterReadHandler+0x48>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    44c4:	dc 01       	movw	r26, r24
    44c6:	ed 91       	ld	r30, X+
    44c8:	fc 91       	ld	r31, X
    44ca:	23 e0       	ldi	r18, 0x03	; 3
    44cc:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    44ce:	22 e0       	ldi	r18, 0x02	; 2
    44d0:	fc 01       	movw	r30, r24
    44d2:	ef 5a       	subi	r30, 0xAF	; 175
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    44d8:	31 97       	sbiw	r30, 0x01	; 1
    44da:	10 82       	st	Z, r1
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    44dc:	fc 01       	movw	r30, r24
    44de:	e3 5b       	subi	r30, 0xB3	; 179
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	30 81       	ld	r19, Z

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    44e4:	32 96       	adiw	r30, 0x02	; 2
    44e6:	20 81       	ld	r18, Z
    44e8:	23 17       	cp	r18, r19
    44ea:	30 f4       	brcc	.+12     	; 0x44f8 <TWI_MasterReadHandler+0x64>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    44ec:	dc 01       	movw	r26, r24
    44ee:	ed 91       	ld	r30, X+
    44f0:	fc 91       	ld	r31, X
    44f2:	82 e0       	ldi	r24, 0x02	; 2
    44f4:	83 83       	std	Z+3, r24	; 0x03
    44f6:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    44f8:	dc 01       	movw	r26, r24
    44fa:	ed 91       	ld	r30, X+
    44fc:	fc 91       	ld	r31, X
    44fe:	27 e0       	ldi	r18, 0x07	; 7
    4500:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4502:	fc 01       	movw	r30, r24
    4504:	ef 5a       	subi	r30, 0xAF	; 175
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	21 e0       	ldi	r18, 0x01	; 1
    450a:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    450c:	31 97       	sbiw	r30, 0x01	; 1
    450e:	10 82       	st	Z, r1
    4510:	08 95       	ret

00004512 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4512:	dc 01       	movw	r26, r24
    4514:	ed 91       	ld	r30, X+
    4516:	fc 91       	ld	r31, X
    4518:	24 81       	ldd	r18, Z+4	; 0x04
    451a:	32 2f       	mov	r19, r18
    451c:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    451e:	11 f0       	breq	.+4      	; 0x4524 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    4520:	61 cf       	rjmp	.-318    	; 0x43e4 <TWI_MasterArbitrationLostBusErrorHandler>
    4522:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    4524:	26 ff       	sbrs	r18, 6
    4526:	02 c0       	rjmp	.+4      	; 0x452c <TWI_MasterInterruptHandler+0x1a>
		TWI_MasterWriteHandler(twi);
    4528:	75 cf       	rjmp	.-278    	; 0x4414 <TWI_MasterWriteHandler>
    452a:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    452c:	22 23       	and	r18, r18
    452e:	14 f4       	brge	.+4      	; 0x4534 <TWI_MasterInterruptHandler+0x22>
		TWI_MasterReadHandler(twi);
    4530:	b1 cf       	rjmp	.-158    	; 0x4494 <TWI_MasterReadHandler>
    4532:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4534:	fc 01       	movw	r30, r24
    4536:	ef 5a       	subi	r30, 0xAF	; 175
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	26 e0       	ldi	r18, 0x06	; 6
    453c:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    453e:	31 97       	sbiw	r30, 0x01	; 1
    4540:	10 82       	st	Z, r1
    4542:	08 95       	ret

00004544 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
    4544:	fc 01       	movw	r30, r24
    4546:	60 83       	st	Z, r22
    4548:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
    454a:	42 83       	std	Z+2, r20	; 0x02
    454c:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
    454e:	e3 5b       	subi	r30, 0xB3	; 179
    4550:	ff 4f       	sbci	r31, 0xFF	; 255
    4552:	10 82       	st	Z, r1
	twi->bytesSent = 0;
    4554:	31 96       	adiw	r30, 0x01	; 1
    4556:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
    4558:	31 96       	adiw	r30, 0x01	; 1
    455a:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
    455c:	31 96       	adiw	r30, 0x01	; 1
    455e:	10 82       	st	Z, r1
	twi->abort = false;
    4560:	31 96       	adiw	r30, 0x01	; 1
    4562:	10 82       	st	Z, r1
    4564:	08 95       	ret

00004566 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
    4566:	dc 01       	movw	r26, r24
    4568:	ed 91       	ld	r30, X+
    456a:	fc 91       	ld	r31, X
    456c:	11 97       	sbiw	r26, 0x01	; 1
    456e:	48 63       	ori	r20, 0x38	; 56
    4570:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
    4572:	ed 91       	ld	r30, X+
    4574:	fc 91       	ld	r31, X
    4576:	66 0f       	add	r22, r22
    4578:	63 87       	std	Z+11, r22	; 0x0b
    457a:	08 95       	ret

0000457c <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    457c:	fc 01       	movw	r30, r24
    457e:	e0 5b       	subi	r30, 0xB0	; 176
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
    4584:	31 97       	sbiw	r30, 0x01	; 1
    4586:	10 82       	st	Z, r1
	

	/* Process data. */
	twi->Process_Data();
    4588:	dc 01       	movw	r26, r24
    458a:	12 96       	adiw	r26, 0x02	; 2
    458c:	ed 91       	ld	r30, X+
    458e:	fc 91       	ld	r31, X
    4590:	13 97       	sbiw	r26, 0x03	; 3
    4592:	19 95       	eicall
    4594:	08 95       	ret

00004596 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
    4596:	cf 93       	push	r28
    4598:	df 93       	push	r29
    459a:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
    459c:	fc 01       	movw	r30, r24
    459e:	ef 5a       	subi	r30, 0xAF	; 175
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	80 81       	ld	r24, Z
    45a4:	88 23       	and	r24, r24
    45a6:	59 f0       	breq	.+22     	; 0x45be <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    45a8:	e8 81       	ld	r30, Y
    45aa:	f9 81       	ldd	r31, Y+1	; 0x01
    45ac:	82 e0       	ldi	r24, 0x02	; 2
    45ae:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
    45b0:	66 e0       	ldi	r22, 0x06	; 6
    45b2:	ce 01       	movw	r24, r28
    45b4:	e3 df       	rcall	.-58     	; 0x457c <TWI_SlaveTransactionFinished>
		twi->abort = false;
    45b6:	cf 5a       	subi	r28, 0xAF	; 175
    45b8:	df 4f       	sbci	r29, 0xFF	; 255
    45ba:	18 82       	st	Y, r1
    45bc:	16 c0       	rjmp	.+44     	; 0x45ea <TWI_SlaveAddressMatchHandler+0x54>
	} else {
		twi->status = TWIS_STATUS_BUSY;
    45be:	fe 01       	movw	r30, r28
    45c0:	e1 5b       	subi	r30, 0xB1	; 177
    45c2:	ff 4f       	sbci	r31, 0xFF	; 255
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
    45c8:	31 96       	adiw	r30, 0x01	; 1
    45ca:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    45cc:	e8 81       	ld	r30, Y
    45ce:	f9 81       	ldd	r31, Y+1	; 0x01
    45d0:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    45d2:	8b 7f       	andi	r24, 0xFB	; 251
    45d4:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
    45d6:	fe 01       	movw	r30, r28
    45d8:	e3 5b       	subi	r30, 0xB3	; 179
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    45de:	31 96       	adiw	r30, 0x01	; 1
    45e0:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    45e2:	e8 81       	ld	r30, Y
    45e4:	f9 81       	ldd	r31, Y+1	; 0x01
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	81 87       	std	Z+9, r24	; 0x09
	}
}
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	08 95       	ret

000045f0 <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    45f0:	dc 01       	movw	r26, r24
    45f2:	ed 91       	ld	r30, X+
    45f4:	fc 91       	ld	r31, X
    45f6:	11 97       	sbiw	r26, 0x01	; 1
    45f8:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    45fa:	2b 7f       	andi	r18, 0xFB	; 251
    45fc:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    45fe:	ed 91       	ld	r30, X+
    4600:	fc 91       	ld	r31, X
    4602:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
    4604:	20 64       	ori	r18, 0x40	; 64
    4606:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
    4608:	61 e0       	ldi	r22, 0x01	; 1
    460a:	b8 cf       	rjmp	.-144    	; 0x457c <TWI_SlaveTransactionFinished>
    460c:	08 95       	ret

0000460e <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    4614:	e8 81       	ld	r30, Y
    4616:	f9 81       	ldd	r31, Y+1	; 0x01
    4618:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
    461a:	84 60       	ori	r24, 0x04	; 4
    461c:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
    461e:	fe 01       	movw	r30, r28
    4620:	e3 5b       	subi	r30, 0xB3	; 179
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	80 81       	ld	r24, Z
    4626:	88 34       	cpi	r24, 0x48	; 72
    4628:	10 f5       	brcc	.+68     	; 0x466e <TWI_SlaveReadHandler+0x60>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
    462a:	68 81       	ld	r22, Y
    462c:	79 81       	ldd	r23, Y+1	; 0x01
    462e:	db 01       	movw	r26, r22
    4630:	1c 96       	adiw	r26, 0x0c	; 12
    4632:	2c 91       	ld	r18, X
		twi->receivedData[twi->bytesReceived] = data;
    4634:	80 81       	ld	r24, Z
    4636:	ae 01       	movw	r20, r28
    4638:	48 0f       	add	r20, r24
    463a:	51 1d       	adc	r21, r1
    463c:	da 01       	movw	r26, r20
    463e:	14 96       	adiw	r26, 0x04	; 4
    4640:	2c 93       	st	X, r18

		twi->bytesReceived++;
    4642:	80 81       	ld	r24, Z
    4644:	8f 5f       	subi	r24, 0xFF	; 255
    4646:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
    4648:	34 96       	adiw	r30, 0x04	; 4
    464a:	80 81       	ld	r24, Z
    464c:	88 23       	and	r24, r24
    464e:	51 f0       	breq	.+20     	; 0x4664 <TWI_SlaveReadHandler+0x56>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    4650:	82 e0       	ldi	r24, 0x02	; 2
    4652:	fb 01       	movw	r30, r22
    4654:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
    4656:	66 e0       	ldi	r22, 0x06	; 6
    4658:	ce 01       	movw	r24, r28
    465a:	90 df       	rcall	.-224    	; 0x457c <TWI_SlaveTransactionFinished>
			twi->abort = false;
    465c:	cf 5a       	subi	r28, 0xAF	; 175
    465e:	df 4f       	sbci	r29, 0xFF	; 255
    4660:	18 82       	st	Y, r1
    4662:	0c c0       	rjmp	.+24     	; 0x467c <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    4664:	83 e0       	ldi	r24, 0x03	; 3
    4666:	db 01       	movw	r26, r22
    4668:	19 96       	adiw	r26, 0x09	; 9
    466a:	8c 93       	st	X, r24
    466c:	07 c0       	rjmp	.+14     	; 0x467c <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
    466e:	e8 81       	ld	r30, Y
    4670:	f9 81       	ldd	r31, Y+1	; 0x01
    4672:	86 e0       	ldi	r24, 0x06	; 6
    4674:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
    4676:	62 e0       	ldi	r22, 0x02	; 2
    4678:	ce 01       	movw	r24, r28
    467a:	80 df       	rcall	.-256    	; 0x457c <TWI_SlaveTransactionFinished>
	}
}
    467c:	df 91       	pop	r29
    467e:	cf 91       	pop	r28
    4680:	08 95       	ret

00004682 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
    4682:	cf 93       	push	r28
    4684:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
    4686:	fc 01       	movw	r30, r24
    4688:	e2 5b       	subi	r30, 0xB2	; 178
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	20 81       	ld	r18, Z
    468e:	22 23       	and	r18, r18
    4690:	59 f0       	breq	.+22     	; 0x46a8 <TWI_SlaveWriteHandler+0x26>
    4692:	dc 01       	movw	r26, r24
    4694:	ed 91       	ld	r30, X+
    4696:	fc 91       	ld	r31, X
    4698:	22 85       	ldd	r18, Z+10	; 0x0a
    469a:	24 ff       	sbrs	r18, 4
    469c:	05 c0       	rjmp	.+10     	; 0x46a8 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    469e:	22 e0       	ldi	r18, 0x02	; 2
    46a0:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
    46a2:	61 e0       	ldi	r22, 0x01	; 1
    46a4:	6b df       	rcall	.-298    	; 0x457c <TWI_SlaveTransactionFinished>
    46a6:	21 c0       	rjmp	.+66     	; 0x46ea <TWI_SlaveWriteHandler+0x68>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
    46a8:	fc 01       	movw	r30, r24
    46aa:	e2 5b       	subi	r30, 0xB2	; 178
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	20 81       	ld	r18, Z
    46b0:	21 11       	cpse	r18, r1
    46b2:	14 c0       	rjmp	.+40     	; 0x46dc <TWI_SlaveWriteHandler+0x5a>
			uint8_t data = twi->sendData[twi->bytesSent];
    46b4:	20 81       	ld	r18, Z
    46b6:	dc 01       	movw	r26, r24
    46b8:	a2 0f       	add	r26, r18
    46ba:	b1 1d       	adc	r27, r1
    46bc:	a4 5b       	subi	r26, 0xB4	; 180
    46be:	bf 4f       	sbci	r27, 0xFF	; 255
    46c0:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
    46c2:	ec 01       	movw	r28, r24
    46c4:	a8 81       	ld	r26, Y
    46c6:	b9 81       	ldd	r27, Y+1	; 0x01
    46c8:	1c 96       	adiw	r26, 0x0c	; 12
    46ca:	2c 93       	st	X, r18
			twi->bytesSent++;
    46cc:	20 81       	ld	r18, Z
    46ce:	2f 5f       	subi	r18, 0xFF	; 255
    46d0:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    46d2:	e8 81       	ld	r30, Y
    46d4:	f9 81       	ldd	r31, Y+1	; 0x01
    46d6:	83 e0       	ldi	r24, 0x03	; 3
    46d8:	81 87       	std	Z+9, r24	; 0x09
    46da:	07 c0       	rjmp	.+14     	; 0x46ea <TWI_SlaveWriteHandler+0x68>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    46dc:	dc 01       	movw	r26, r24
    46de:	ed 91       	ld	r30, X+
    46e0:	fc 91       	ld	r31, X
    46e2:	22 e0       	ldi	r18, 0x02	; 2
    46e4:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
    46e6:	62 e0       	ldi	r22, 0x02	; 2
    46e8:	49 df       	rcall	.-366    	; 0x457c <TWI_SlaveTransactionFinished>
		}
	}
}
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	08 95       	ret

000046f0 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
    46f0:	dc 01       	movw	r26, r24
    46f2:	ed 91       	ld	r30, X+
    46f4:	fc 91       	ld	r31, X
    46f6:	22 85       	ldd	r18, Z+10	; 0x0a
    46f8:	21 ff       	sbrs	r18, 1
    46fa:	02 c0       	rjmp	.+4      	; 0x4700 <TWI_SlaveDataHandler+0x10>
		TWI_SlaveWriteHandler(twi);
    46fc:	c2 cf       	rjmp	.-124    	; 0x4682 <TWI_SlaveWriteHandler>
    46fe:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
    4700:	86 cf       	rjmp	.-244    	; 0x460e <TWI_SlaveReadHandler>
    4702:	08 95       	ret

00004704 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    4704:	dc 01       	movw	r26, r24
    4706:	ed 91       	ld	r30, X+
    4708:	fc 91       	ld	r31, X
    470a:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
    470c:	22 ff       	sbrs	r18, 2
    470e:	0c c0       	rjmp	.+24     	; 0x4728 <TWI_SlaveInterruptHandler+0x24>
		twi->bytesReceived = 0;
    4710:	fc 01       	movw	r30, r24
    4712:	e3 5b       	subi	r30, 0xB3	; 179
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    4718:	31 96       	adiw	r30, 0x01	; 1
    471a:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
    471c:	32 96       	adiw	r30, 0x02	; 2
    471e:	24 e0       	ldi	r18, 0x04	; 4
    4720:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
    4722:	31 97       	sbiw	r30, 0x01	; 1
    4724:	10 82       	st	Z, r1
    4726:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
    4728:	23 ff       	sbrs	r18, 3
    472a:	0c c0       	rjmp	.+24     	; 0x4744 <TWI_SlaveInterruptHandler+0x40>
		twi->bytesReceived = 0;
    472c:	fc 01       	movw	r30, r24
    472e:	e3 5b       	subi	r30, 0xB3	; 179
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    4734:	31 96       	adiw	r30, 0x01	; 1
    4736:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
    4738:	32 96       	adiw	r30, 0x02	; 2
    473a:	23 e0       	ldi	r18, 0x03	; 3
    473c:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
    473e:	31 97       	sbiw	r30, 0x01	; 1
    4740:	10 82       	st	Z, r1
    4742:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
    4744:	42 2f       	mov	r20, r18
    4746:	40 74       	andi	r20, 0x40	; 64
    4748:	32 2f       	mov	r19, r18
    474a:	31 74       	andi	r19, 0x41	; 65
    474c:	31 34       	cpi	r19, 0x41	; 65
    474e:	11 f4       	brne	.+4      	; 0x4754 <TWI_SlaveInterruptHandler+0x50>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
    4750:	22 cf       	rjmp	.-444    	; 0x4596 <TWI_SlaveAddressMatchHandler>
    4752:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
    4754:	44 23       	and	r20, r20
    4756:	11 f0       	breq	.+4      	; 0x475c <TWI_SlaveInterruptHandler+0x58>
		TWI_SlaveStopHandler(twi);
    4758:	4b cf       	rjmp	.-362    	; 0x45f0 <TWI_SlaveStopHandler>
    475a:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
    475c:	22 23       	and	r18, r18
    475e:	14 f4       	brge	.+4      	; 0x4764 <TWI_SlaveInterruptHandler+0x60>
		TWI_SlaveDataHandler(twi);
    4760:	c7 cf       	rjmp	.-114    	; 0x46f0 <TWI_SlaveDataHandler>
    4762:	08 95       	ret
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
    4764:	65 e0       	ldi	r22, 0x05	; 5
    4766:	0a cf       	rjmp	.-492    	; 0x457c <TWI_SlaveTransactionFinished>
    4768:	08 95       	ret

0000476a <__vector_25>:
 *  as argument.
 */
ISR(USARTC0_RXC_vect){ if( USART_RXComplete(usartBufferC) ) taskYIELD(); }
ISR(USARTD0_RXC_vect){ if( USART_RXComplete(usartBufferD) ) taskYIELD(); }
ISR(USARTE0_RXC_vect){ if( USART_RXComplete(usartBufferE) ) taskYIELD(); }
ISR(USARTF0_RXC_vect){ if( USART_RXComplete(usartBufferF) ) taskYIELD(); }
    476a:	1f 92       	push	r1
    476c:	0f 92       	push	r0
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	0f 92       	push	r0
    4772:	11 24       	eor	r1, r1
    4774:	08 b6       	in	r0, 0x38	; 56
    4776:	0f 92       	push	r0
    4778:	18 be       	out	0x38, r1	; 56
    477a:	09 b6       	in	r0, 0x39	; 57
    477c:	0f 92       	push	r0
    477e:	19 be       	out	0x39, r1	; 57
    4780:	0a b6       	in	r0, 0x3a	; 58
    4782:	0f 92       	push	r0
    4784:	1a be       	out	0x3a, r1	; 58
    4786:	0b b6       	in	r0, 0x3b	; 59
    4788:	0f 92       	push	r0
    478a:	1b be       	out	0x3b, r1	; 59
    478c:	2f 93       	push	r18
    478e:	3f 93       	push	r19
    4790:	4f 93       	push	r20
    4792:	5f 93       	push	r21
    4794:	6f 93       	push	r22
    4796:	7f 93       	push	r23
    4798:	8f 93       	push	r24
    479a:	9f 93       	push	r25
    479c:	af 93       	push	r26
    479e:	bf 93       	push	r27
    47a0:	ef 93       	push	r30
    47a2:	ff 93       	push	r31
    47a4:	cf 93       	push	r28
    47a6:	df 93       	push	r29
    47a8:	1f 92       	push	r1
    47aa:	1f 92       	push	r1
    47ac:	cd b7       	in	r28, 0x3d	; 61
    47ae:	de b7       	in	r29, 0x3e	; 62
    47b0:	e0 91 80 3f 	lds	r30, 0x3F80
    47b4:	f0 91 81 3f 	lds	r31, 0x3F81
    47b8:	1a 82       	std	Y+2, r1	; 0x02
    47ba:	a0 81       	ld	r26, Z
    47bc:	b1 81       	ldd	r27, Z+1	; 0x01
    47be:	8c 91       	ld	r24, X
    47c0:	89 83       	std	Y+1, r24	; 0x01
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	ae 01       	movw	r20, r28
    47c6:	4e 5f       	subi	r20, 0xFE	; 254
    47c8:	5f 4f       	sbci	r21, 0xFF	; 255
    47ca:	be 01       	movw	r22, r28
    47cc:	6f 5f       	subi	r22, 0xFF	; 255
    47ce:	7f 4f       	sbci	r23, 0xFF	; 255
    47d0:	83 81       	ldd	r24, Z+3	; 0x03
    47d2:	94 81       	ldd	r25, Z+4	; 0x04
    47d4:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    47d8:	8a 81       	ldd	r24, Y+2	; 0x02
    47da:	81 11       	cpse	r24, r1
    47dc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	ff 91       	pop	r31
    47ea:	ef 91       	pop	r30
    47ec:	bf 91       	pop	r27
    47ee:	af 91       	pop	r26
    47f0:	9f 91       	pop	r25
    47f2:	8f 91       	pop	r24
    47f4:	7f 91       	pop	r23
    47f6:	6f 91       	pop	r22
    47f8:	5f 91       	pop	r21
    47fa:	4f 91       	pop	r20
    47fc:	3f 91       	pop	r19
    47fe:	2f 91       	pop	r18
    4800:	0f 90       	pop	r0
    4802:	0b be       	out	0x3b, r0	; 59
    4804:	0f 90       	pop	r0
    4806:	0a be       	out	0x3a, r0	; 58
    4808:	0f 90       	pop	r0
    480a:	09 be       	out	0x39, r0	; 57
    480c:	0f 90       	pop	r0
    480e:	08 be       	out	0x38, r0	; 56
    4810:	0f 90       	pop	r0
    4812:	0f be       	out	0x3f, r0	; 63
    4814:	0f 90       	pop	r0
    4816:	1f 90       	pop	r1
    4818:	18 95       	reti

0000481a <__vector_88>:
    481a:	1f 92       	push	r1
    481c:	0f 92       	push	r0
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	0f 92       	push	r0
    4822:	11 24       	eor	r1, r1
    4824:	08 b6       	in	r0, 0x38	; 56
    4826:	0f 92       	push	r0
    4828:	18 be       	out	0x38, r1	; 56
    482a:	09 b6       	in	r0, 0x39	; 57
    482c:	0f 92       	push	r0
    482e:	19 be       	out	0x39, r1	; 57
    4830:	0a b6       	in	r0, 0x3a	; 58
    4832:	0f 92       	push	r0
    4834:	1a be       	out	0x3a, r1	; 58
    4836:	0b b6       	in	r0, 0x3b	; 59
    4838:	0f 92       	push	r0
    483a:	1b be       	out	0x3b, r1	; 59
    483c:	2f 93       	push	r18
    483e:	3f 93       	push	r19
    4840:	4f 93       	push	r20
    4842:	5f 93       	push	r21
    4844:	6f 93       	push	r22
    4846:	7f 93       	push	r23
    4848:	8f 93       	push	r24
    484a:	9f 93       	push	r25
    484c:	af 93       	push	r26
    484e:	bf 93       	push	r27
    4850:	ef 93       	push	r30
    4852:	ff 93       	push	r31
    4854:	cf 93       	push	r28
    4856:	df 93       	push	r29
    4858:	1f 92       	push	r1
    485a:	1f 92       	push	r1
    485c:	cd b7       	in	r28, 0x3d	; 61
    485e:	de b7       	in	r29, 0x3e	; 62
    4860:	e0 91 7e 3f 	lds	r30, 0x3F7E
    4864:	f0 91 7f 3f 	lds	r31, 0x3F7F
    4868:	1a 82       	std	Y+2, r1	; 0x02
    486a:	a0 81       	ld	r26, Z
    486c:	b1 81       	ldd	r27, Z+1	; 0x01
    486e:	8c 91       	ld	r24, X
    4870:	89 83       	std	Y+1, r24	; 0x01
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	ae 01       	movw	r20, r28
    4876:	4e 5f       	subi	r20, 0xFE	; 254
    4878:	5f 4f       	sbci	r21, 0xFF	; 255
    487a:	be 01       	movw	r22, r28
    487c:	6f 5f       	subi	r22, 0xFF	; 255
    487e:	7f 4f       	sbci	r23, 0xFF	; 255
    4880:	83 81       	ldd	r24, Z+3	; 0x03
    4882:	94 81       	ldd	r25, Z+4	; 0x04
    4884:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    4888:	8a 81       	ldd	r24, Y+2	; 0x02
    488a:	81 11       	cpse	r24, r1
    488c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    4890:	0f 90       	pop	r0
    4892:	0f 90       	pop	r0
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	ff 91       	pop	r31
    489a:	ef 91       	pop	r30
    489c:	bf 91       	pop	r27
    489e:	af 91       	pop	r26
    48a0:	9f 91       	pop	r25
    48a2:	8f 91       	pop	r24
    48a4:	7f 91       	pop	r23
    48a6:	6f 91       	pop	r22
    48a8:	5f 91       	pop	r21
    48aa:	4f 91       	pop	r20
    48ac:	3f 91       	pop	r19
    48ae:	2f 91       	pop	r18
    48b0:	0f 90       	pop	r0
    48b2:	0b be       	out	0x3b, r0	; 59
    48b4:	0f 90       	pop	r0
    48b6:	0a be       	out	0x3a, r0	; 58
    48b8:	0f 90       	pop	r0
    48ba:	09 be       	out	0x39, r0	; 57
    48bc:	0f 90       	pop	r0
    48be:	08 be       	out	0x38, r0	; 56
    48c0:	0f 90       	pop	r0
    48c2:	0f be       	out	0x3f, r0	; 63
    48c4:	0f 90       	pop	r0
    48c6:	1f 90       	pop	r1
    48c8:	18 95       	reti

000048ca <__vector_58>:
    48ca:	1f 92       	push	r1
    48cc:	0f 92       	push	r0
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	0f 92       	push	r0
    48d2:	11 24       	eor	r1, r1
    48d4:	08 b6       	in	r0, 0x38	; 56
    48d6:	0f 92       	push	r0
    48d8:	18 be       	out	0x38, r1	; 56
    48da:	09 b6       	in	r0, 0x39	; 57
    48dc:	0f 92       	push	r0
    48de:	19 be       	out	0x39, r1	; 57
    48e0:	0a b6       	in	r0, 0x3a	; 58
    48e2:	0f 92       	push	r0
    48e4:	1a be       	out	0x3a, r1	; 58
    48e6:	0b b6       	in	r0, 0x3b	; 59
    48e8:	0f 92       	push	r0
    48ea:	1b be       	out	0x3b, r1	; 59
    48ec:	2f 93       	push	r18
    48ee:	3f 93       	push	r19
    48f0:	4f 93       	push	r20
    48f2:	5f 93       	push	r21
    48f4:	6f 93       	push	r22
    48f6:	7f 93       	push	r23
    48f8:	8f 93       	push	r24
    48fa:	9f 93       	push	r25
    48fc:	af 93       	push	r26
    48fe:	bf 93       	push	r27
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	1f 92       	push	r1
    490a:	1f 92       	push	r1
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	e0 91 7c 3f 	lds	r30, 0x3F7C
    4914:	f0 91 7d 3f 	lds	r31, 0x3F7D
    4918:	1a 82       	std	Y+2, r1	; 0x02
    491a:	a0 81       	ld	r26, Z
    491c:	b1 81       	ldd	r27, Z+1	; 0x01
    491e:	8c 91       	ld	r24, X
    4920:	89 83       	std	Y+1, r24	; 0x01
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	ae 01       	movw	r20, r28
    4926:	4e 5f       	subi	r20, 0xFE	; 254
    4928:	5f 4f       	sbci	r21, 0xFF	; 255
    492a:	be 01       	movw	r22, r28
    492c:	6f 5f       	subi	r22, 0xFF	; 255
    492e:	7f 4f       	sbci	r23, 0xFF	; 255
    4930:	83 81       	ldd	r24, Z+3	; 0x03
    4932:	94 81       	ldd	r25, Z+4	; 0x04
    4934:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    4938:	8a 81       	ldd	r24, Y+2	; 0x02
    493a:	81 11       	cpse	r24, r1
    493c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	ff 91       	pop	r31
    494a:	ef 91       	pop	r30
    494c:	bf 91       	pop	r27
    494e:	af 91       	pop	r26
    4950:	9f 91       	pop	r25
    4952:	8f 91       	pop	r24
    4954:	7f 91       	pop	r23
    4956:	6f 91       	pop	r22
    4958:	5f 91       	pop	r21
    495a:	4f 91       	pop	r20
    495c:	3f 91       	pop	r19
    495e:	2f 91       	pop	r18
    4960:	0f 90       	pop	r0
    4962:	0b be       	out	0x3b, r0	; 59
    4964:	0f 90       	pop	r0
    4966:	0a be       	out	0x3a, r0	; 58
    4968:	0f 90       	pop	r0
    496a:	09 be       	out	0x39, r0	; 57
    496c:	0f 90       	pop	r0
    496e:	08 be       	out	0x38, r0	; 56
    4970:	0f 90       	pop	r0
    4972:	0f be       	out	0x3f, r0	; 63
    4974:	0f 90       	pop	r0
    4976:	1f 90       	pop	r1
    4978:	18 95       	reti

0000497a <__vector_26>:
 *
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
    497a:	1f 92       	push	r1
    497c:	0f 92       	push	r0
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	0f 92       	push	r0
    4982:	11 24       	eor	r1, r1
    4984:	08 b6       	in	r0, 0x38	; 56
    4986:	0f 92       	push	r0
    4988:	18 be       	out	0x38, r1	; 56
    498a:	09 b6       	in	r0, 0x39	; 57
    498c:	0f 92       	push	r0
    498e:	19 be       	out	0x39, r1	; 57
    4990:	0a b6       	in	r0, 0x3a	; 58
    4992:	0f 92       	push	r0
    4994:	1a be       	out	0x3a, r1	; 58
    4996:	0b b6       	in	r0, 0x3b	; 59
    4998:	0f 92       	push	r0
    499a:	1b be       	out	0x3b, r1	; 59
    499c:	0f 93       	push	r16
    499e:	1f 93       	push	r17
    49a0:	2f 93       	push	r18
    49a2:	3f 93       	push	r19
    49a4:	4f 93       	push	r20
    49a6:	5f 93       	push	r21
    49a8:	6f 93       	push	r22
    49aa:	7f 93       	push	r23
    49ac:	8f 93       	push	r24
    49ae:	9f 93       	push	r25
    49b0:	af 93       	push	r26
    49b2:	bf 93       	push	r27
    49b4:	ef 93       	push	r30
    49b6:	ff 93       	push	r31
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	1f 92       	push	r1
    49be:	1f 92       	push	r1
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	00 91 80 3f 	lds	r16, 0x3F80
    49c8:	10 91 81 3f 	lds	r17, 0x3F81
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    49cc:	ae 01       	movw	r20, r28
    49ce:	4f 5f       	subi	r20, 0xFF	; 255
    49d0:	5f 4f       	sbci	r21, 0xFF	; 255
    49d2:	be 01       	movw	r22, r28
    49d4:	6e 5f       	subi	r22, 0xFE	; 254
    49d6:	7f 4f       	sbci	r23, 0xFF	; 255
    49d8:	d8 01       	movw	r26, r16
    49da:	15 96       	adiw	r26, 0x05	; 5
    49dc:	8d 91       	ld	r24, X+
    49de:	9c 91       	ld	r25, X
    49e0:	16 97       	sbiw	r26, 0x06	; 6
    49e2:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    49e6:	81 30       	cpi	r24, 0x01	; 1
    49e8:	31 f4       	brne	.+12     	; 0x49f6 <__vector_26+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    49ea:	d8 01       	movw	r26, r16
    49ec:	ed 91       	ld	r30, X+
    49ee:	fc 91       	ld	r31, X
    49f0:	8a 81       	ldd	r24, Y+2	; 0x02
    49f2:	80 83       	st	Z, r24
    49f4:	06 c0       	rjmp	.+12     	; 0x4a02 <__vector_26+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    49f6:	d8 01       	movw	r26, r16
    49f8:	ed 91       	ld	r30, X+
    49fa:	fc 91       	ld	r31, X
    49fc:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    49fe:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4a00:	83 83       	std	Z+3, r24	; 0x03
 *
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
    4a02:	0f 90       	pop	r0
    4a04:	0f 90       	pop	r0
    4a06:	df 91       	pop	r29
    4a08:	cf 91       	pop	r28
    4a0a:	ff 91       	pop	r31
    4a0c:	ef 91       	pop	r30
    4a0e:	bf 91       	pop	r27
    4a10:	af 91       	pop	r26
    4a12:	9f 91       	pop	r25
    4a14:	8f 91       	pop	r24
    4a16:	7f 91       	pop	r23
    4a18:	6f 91       	pop	r22
    4a1a:	5f 91       	pop	r21
    4a1c:	4f 91       	pop	r20
    4a1e:	3f 91       	pop	r19
    4a20:	2f 91       	pop	r18
    4a22:	1f 91       	pop	r17
    4a24:	0f 91       	pop	r16
    4a26:	0f 90       	pop	r0
    4a28:	0b be       	out	0x3b, r0	; 59
    4a2a:	0f 90       	pop	r0
    4a2c:	0a be       	out	0x3a, r0	; 58
    4a2e:	0f 90       	pop	r0
    4a30:	09 be       	out	0x39, r0	; 57
    4a32:	0f 90       	pop	r0
    4a34:	08 be       	out	0x38, r0	; 56
    4a36:	0f 90       	pop	r0
    4a38:	0f be       	out	0x3f, r0	; 63
    4a3a:	0f 90       	pop	r0
    4a3c:	1f 90       	pop	r1
    4a3e:	18 95       	reti

00004a40 <__vector_89>:
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
    4a40:	1f 92       	push	r1
    4a42:	0f 92       	push	r0
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	0f 92       	push	r0
    4a48:	11 24       	eor	r1, r1
    4a4a:	08 b6       	in	r0, 0x38	; 56
    4a4c:	0f 92       	push	r0
    4a4e:	18 be       	out	0x38, r1	; 56
    4a50:	09 b6       	in	r0, 0x39	; 57
    4a52:	0f 92       	push	r0
    4a54:	19 be       	out	0x39, r1	; 57
    4a56:	0a b6       	in	r0, 0x3a	; 58
    4a58:	0f 92       	push	r0
    4a5a:	1a be       	out	0x3a, r1	; 58
    4a5c:	0b b6       	in	r0, 0x3b	; 59
    4a5e:	0f 92       	push	r0
    4a60:	1b be       	out	0x3b, r1	; 59
    4a62:	0f 93       	push	r16
    4a64:	1f 93       	push	r17
    4a66:	2f 93       	push	r18
    4a68:	3f 93       	push	r19
    4a6a:	4f 93       	push	r20
    4a6c:	5f 93       	push	r21
    4a6e:	6f 93       	push	r22
    4a70:	7f 93       	push	r23
    4a72:	8f 93       	push	r24
    4a74:	9f 93       	push	r25
    4a76:	af 93       	push	r26
    4a78:	bf 93       	push	r27
    4a7a:	ef 93       	push	r30
    4a7c:	ff 93       	push	r31
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	1f 92       	push	r1
    4a84:	1f 92       	push	r1
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	00 91 7e 3f 	lds	r16, 0x3F7E
    4a8e:	10 91 7f 3f 	lds	r17, 0x3F7F
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    4a92:	ae 01       	movw	r20, r28
    4a94:	4f 5f       	subi	r20, 0xFF	; 255
    4a96:	5f 4f       	sbci	r21, 0xFF	; 255
    4a98:	be 01       	movw	r22, r28
    4a9a:	6e 5f       	subi	r22, 0xFE	; 254
    4a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9e:	d8 01       	movw	r26, r16
    4aa0:	15 96       	adiw	r26, 0x05	; 5
    4aa2:	8d 91       	ld	r24, X+
    4aa4:	9c 91       	ld	r25, X
    4aa6:	16 97       	sbiw	r26, 0x06	; 6
    4aa8:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    4aac:	81 30       	cpi	r24, 0x01	; 1
    4aae:	31 f4       	brne	.+12     	; 0x4abc <__vector_89+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    4ab0:	d8 01       	movw	r26, r16
    4ab2:	ed 91       	ld	r30, X+
    4ab4:	fc 91       	ld	r31, X
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	80 83       	st	Z, r24
    4aba:	06 c0       	rjmp	.+12     	; 0x4ac8 <__vector_89+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    4abc:	d8 01       	movw	r26, r16
    4abe:	ed 91       	ld	r30, X+
    4ac0:	fc 91       	ld	r31, X
    4ac2:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4ac4:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4ac6:	83 83       	std	Z+3, r24	; 0x03
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	ff 91       	pop	r31
    4ad2:	ef 91       	pop	r30
    4ad4:	bf 91       	pop	r27
    4ad6:	af 91       	pop	r26
    4ad8:	9f 91       	pop	r25
    4ada:	8f 91       	pop	r24
    4adc:	7f 91       	pop	r23
    4ade:	6f 91       	pop	r22
    4ae0:	5f 91       	pop	r21
    4ae2:	4f 91       	pop	r20
    4ae4:	3f 91       	pop	r19
    4ae6:	2f 91       	pop	r18
    4ae8:	1f 91       	pop	r17
    4aea:	0f 91       	pop	r16
    4aec:	0f 90       	pop	r0
    4aee:	0b be       	out	0x3b, r0	; 59
    4af0:	0f 90       	pop	r0
    4af2:	0a be       	out	0x3a, r0	; 58
    4af4:	0f 90       	pop	r0
    4af6:	09 be       	out	0x39, r0	; 57
    4af8:	0f 90       	pop	r0
    4afa:	08 be       	out	0x38, r0	; 56
    4afc:	0f 90       	pop	r0
    4afe:	0f be       	out	0x3f, r0	; 63
    4b00:	0f 90       	pop	r0
    4b02:	1f 90       	pop	r1
    4b04:	18 95       	reti

00004b06 <__vector_59>:
ISR(USARTE0_DRE_vect){USART_DataRegEmpty(usartBufferE);}
    4b06:	1f 92       	push	r1
    4b08:	0f 92       	push	r0
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	0f 92       	push	r0
    4b0e:	11 24       	eor	r1, r1
    4b10:	08 b6       	in	r0, 0x38	; 56
    4b12:	0f 92       	push	r0
    4b14:	18 be       	out	0x38, r1	; 56
    4b16:	09 b6       	in	r0, 0x39	; 57
    4b18:	0f 92       	push	r0
    4b1a:	19 be       	out	0x39, r1	; 57
    4b1c:	0a b6       	in	r0, 0x3a	; 58
    4b1e:	0f 92       	push	r0
    4b20:	1a be       	out	0x3a, r1	; 58
    4b22:	0b b6       	in	r0, 0x3b	; 59
    4b24:	0f 92       	push	r0
    4b26:	1b be       	out	0x3b, r1	; 59
    4b28:	0f 93       	push	r16
    4b2a:	1f 93       	push	r17
    4b2c:	2f 93       	push	r18
    4b2e:	3f 93       	push	r19
    4b30:	4f 93       	push	r20
    4b32:	5f 93       	push	r21
    4b34:	6f 93       	push	r22
    4b36:	7f 93       	push	r23
    4b38:	8f 93       	push	r24
    4b3a:	9f 93       	push	r25
    4b3c:	af 93       	push	r26
    4b3e:	bf 93       	push	r27
    4b40:	ef 93       	push	r30
    4b42:	ff 93       	push	r31
    4b44:	cf 93       	push	r28
    4b46:	df 93       	push	r29
    4b48:	1f 92       	push	r1
    4b4a:	1f 92       	push	r1
    4b4c:	cd b7       	in	r28, 0x3d	; 61
    4b4e:	de b7       	in	r29, 0x3e	; 62
    4b50:	00 91 7c 3f 	lds	r16, 0x3F7C
    4b54:	10 91 7d 3f 	lds	r17, 0x3F7D
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    4b58:	ae 01       	movw	r20, r28
    4b5a:	4f 5f       	subi	r20, 0xFF	; 255
    4b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b5e:	be 01       	movw	r22, r28
    4b60:	6e 5f       	subi	r22, 0xFE	; 254
    4b62:	7f 4f       	sbci	r23, 0xFF	; 255
    4b64:	d8 01       	movw	r26, r16
    4b66:	15 96       	adiw	r26, 0x05	; 5
    4b68:	8d 91       	ld	r24, X+
    4b6a:	9c 91       	ld	r25, X
    4b6c:	16 97       	sbiw	r26, 0x06	; 6
    4b6e:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    4b72:	81 30       	cpi	r24, 0x01	; 1
    4b74:	31 f4       	brne	.+12     	; 0x4b82 <__vector_59+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    4b76:	d8 01       	movw	r26, r16
    4b78:	ed 91       	ld	r30, X+
    4b7a:	fc 91       	ld	r31, X
    4b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7e:	80 83       	st	Z, r24
    4b80:	06 c0       	rjmp	.+12     	; 0x4b8e <__vector_59+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    4b82:	d8 01       	movw	r26, r16
    4b84:	ed 91       	ld	r30, X+
    4b86:	fc 91       	ld	r31, X
    4b88:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4b8a:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4b8c:	83 83       	std	Z+3, r24	; 0x03
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
ISR(USARTE0_DRE_vect){USART_DataRegEmpty(usartBufferE);}
    4b8e:	0f 90       	pop	r0
    4b90:	0f 90       	pop	r0
    4b92:	df 91       	pop	r29
    4b94:	cf 91       	pop	r28
    4b96:	ff 91       	pop	r31
    4b98:	ef 91       	pop	r30
    4b9a:	bf 91       	pop	r27
    4b9c:	af 91       	pop	r26
    4b9e:	9f 91       	pop	r25
    4ba0:	8f 91       	pop	r24
    4ba2:	7f 91       	pop	r23
    4ba4:	6f 91       	pop	r22
    4ba6:	5f 91       	pop	r21
    4ba8:	4f 91       	pop	r20
    4baa:	3f 91       	pop	r19
    4bac:	2f 91       	pop	r18
    4bae:	1f 91       	pop	r17
    4bb0:	0f 91       	pop	r16
    4bb2:	0f 90       	pop	r0
    4bb4:	0b be       	out	0x3b, r0	; 59
    4bb6:	0f 90       	pop	r0
    4bb8:	0a be       	out	0x3a, r0	; 58
    4bba:	0f 90       	pop	r0
    4bbc:	09 be       	out	0x39, r0	; 57
    4bbe:	0f 90       	pop	r0
    4bc0:	08 be       	out	0x38, r0	; 56
    4bc2:	0f 90       	pop	r0
    4bc4:	0f be       	out	0x3f, r0	; 63
    4bc6:	0f 90       	pop	r0
    4bc8:	1f 90       	pop	r1
    4bca:	18 95       	reti

00004bcc <timerRTC>:
/* -------------------------------------------------------------------- */
/*	Timing of the RTC every 1s											*/
/* -------------------------------------------------------------------- */
void timerRTC(void *p)
{
	if (secondsTimer++ == 3600) 
    4bcc:	80 91 8c 3f 	lds	r24, 0x3F8C
    4bd0:	90 91 8d 3f 	lds	r25, 0x3F8D
    4bd4:	a0 91 8e 3f 	lds	r26, 0x3F8E
    4bd8:	b0 91 8f 3f 	lds	r27, 0x3F8F
    4bdc:	ac 01       	movw	r20, r24
    4bde:	bd 01       	movw	r22, r26
    4be0:	4f 5f       	subi	r20, 0xFF	; 255
    4be2:	5f 4f       	sbci	r21, 0xFF	; 255
    4be4:	6f 4f       	sbci	r22, 0xFF	; 255
    4be6:	7f 4f       	sbci	r23, 0xFF	; 255
    4be8:	40 93 8c 3f 	sts	0x3F8C, r20
    4bec:	50 93 8d 3f 	sts	0x3F8D, r21
    4bf0:	60 93 8e 3f 	sts	0x3F8E, r22
    4bf4:	70 93 8f 3f 	sts	0x3F8F, r23
    4bf8:	80 31       	cpi	r24, 0x10	; 16
    4bfa:	9e 40       	sbci	r25, 0x0E	; 14
    4bfc:	a1 05       	cpc	r26, r1
    4bfe:	b1 05       	cpc	r27, r1
    4c00:	d9 f4       	brne	.+54     	; 0x4c38 <timerRTC+0x6c>
	{
		secondsTimer = 0;
    4c02:	10 92 8c 3f 	sts	0x3F8C, r1
    4c06:	10 92 8d 3f 	sts	0x3F8D, r1
    4c0a:	10 92 8e 3f 	sts	0x3F8E, r1
    4c0e:	10 92 8f 3f 	sts	0x3F8F, r1
		hoursTimer++;
    4c12:	80 91 82 3f 	lds	r24, 0x3F82
    4c16:	90 91 83 3f 	lds	r25, 0x3F83
    4c1a:	a0 91 84 3f 	lds	r26, 0x3F84
    4c1e:	b0 91 85 3f 	lds	r27, 0x3F85
    4c22:	01 96       	adiw	r24, 0x01	; 1
    4c24:	a1 1d       	adc	r26, r1
    4c26:	b1 1d       	adc	r27, r1
    4c28:	80 93 82 3f 	sts	0x3F82, r24
    4c2c:	90 93 83 3f 	sts	0x3F83, r25
    4c30:	a0 93 84 3f 	sts	0x3F84, r26
    4c34:	b0 93 85 3f 	sts	0x3F85, r27
    4c38:	08 95       	ret

00004c3a <__vector_20>:

/* -------------------------------------------------------------------- */
/*	Interrupt for sampling input										*/
/* -------------------------------------------------------------------- */

ISR(TCC1_OVF_vect) {
    4c3a:	1f 92       	push	r1
    4c3c:	0f 92       	push	r0
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	0f 92       	push	r0
    4c42:	11 24       	eor	r1, r1
    4c44:	08 b6       	in	r0, 0x38	; 56
    4c46:	0f 92       	push	r0
    4c48:	18 be       	out	0x38, r1	; 56
    4c4a:	0b b6       	in	r0, 0x3b	; 59
    4c4c:	0f 92       	push	r0
    4c4e:	1b be       	out	0x3b, r1	; 59
    4c50:	8f 93       	push	r24
    4c52:	ef 93       	push	r30
    4c54:	ff 93       	push	r31
    4c56:	88 e0       	ldi	r24, 0x08	; 8
    4c58:	e0 e8       	ldi	r30, 0x80	; 128
    4c5a:	f6 e0       	ldi	r31, 0x06	; 6
    4c5c:	87 83       	std	Z+7, r24	; 0x07
	
	power_switch_toggle();
	//asm volatile ( "reti" );

}
    4c5e:	ff 91       	pop	r31
    4c60:	ef 91       	pop	r30
    4c62:	8f 91       	pop	r24
    4c64:	0f 90       	pop	r0
    4c66:	0b be       	out	0x3b, r0	; 59
    4c68:	0f 90       	pop	r0
    4c6a:	08 be       	out	0x38, r0	; 56
    4c6c:	0f 90       	pop	r0
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	0f 90       	pop	r0
    4c72:	1f 90       	pop	r1
    4c74:	18 95       	reti

00004c76 <enable_xtal>:
/* -------------------------------------------------------------------- */
/*	Enable external timing												*/
/* -------------------------------------------------------------------- */
void enable_xtal(void)
{
	PMIC.CTRL = PMIC.CTRL |	PMIC_MEDLVLEN_bm;
    4c76:	e0 ea       	ldi	r30, 0xA0	; 160
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	82 81       	ldd	r24, Z+2	; 0x02
    4c7c:	82 60       	ori	r24, 0x02	; 2
    4c7e:	82 83       	std	Z+2, r24	; 0x02
	// Enable external oscillator 16,470 MHz
	CLKSYS_XOSC_Config(OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_1KCLK_gc);
    4c80:	47 e0       	ldi	r20, 0x07	; 7
    4c82:	60 e0       	ldi	r22, 0x00	; 0
    4c84:	80 ec       	ldi	r24, 0xC0	; 192
    4c86:	05 db       	rcall	.-2550   	; 0x4292 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    4c88:	e0 e5       	ldi	r30, 0x50	; 80
    4c8a:	f0 e0       	ldi	r31, 0x00	; 0
    4c8c:	80 81       	ld	r24, Z
    4c8e:	88 60       	ori	r24, 0x08	; 8
    4c90:	80 83       	st	Z, r24
	while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 ){}
    4c92:	81 81       	ldd	r24, Z+1	; 0x01
    4c94:	83 ff       	sbrs	r24, 3
    4c96:	fd cf       	rjmp	.-6      	; 0x4c92 <enable_xtal+0x1c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_XOSC_gc );
    4c98:	83 e0       	ldi	r24, 0x03	; 3
    4c9a:	10 db       	rcall	.-2528   	; 0x42bc <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	04 cb       	rjmp	.-2552   	; 0x42a8 <CLKSYS_Disable>
    4ca0:	08 95       	ret

00004ca2 <boardInit>:
 

/* -------------------------------------------------------------------- */
/*	Initialize the xMega peripherals									*/
/* -------------------------------------------------------------------- */
void boardInit() {
    4ca2:	0f 93       	push	r16
    4ca4:	1f 93       	push	r17
	
	// prepare i/o
	ioport_init();

	// clock init & enable system clock to all peripheral modules
	sysclk_init();
    4ca6:	53 d0       	rcall	.+166    	; 0x4d4e <sysclk_init>
	
	// enable external oscillator
	enable_xtal();
    4ca8:	e6 df       	rcall	.-52     	; 0x4c76 <enable_xtal>
	
	// enable SPI communication on port C for SPI memory
	//spi_mem_init();	
	
	sysclk_enable_module(SYSCLK_PORT_GEN, 0xff);
    4caa:	6f ef       	ldi	r22, 0xFF	; 255
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	76 d0       	rcall	.+236    	; 0x4d9c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_A, 0xff);
    4cb0:	6f ef       	ldi	r22, 0xFF	; 255
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	73 d0       	rcall	.+230    	; 0x4d9c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_B, 0xff);
    4cb6:	6f ef       	ldi	r22, 0xFF	; 255
    4cb8:	82 e0       	ldi	r24, 0x02	; 2
    4cba:	70 d0       	rcall	.+224    	; 0x4d9c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, 0xff);
    4cbc:	6f ef       	ldi	r22, 0xFF	; 255
    4cbe:	83 e0       	ldi	r24, 0x03	; 3
    4cc0:	6d d0       	rcall	.+218    	; 0x4d9c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, 0xff);
    4cc2:	6f ef       	ldi	r22, 0xFF	; 255
    4cc4:	84 e0       	ldi	r24, 0x04	; 4
    4cc6:	6a d0       	rcall	.+212    	; 0x4d9c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E, 0xff);
    4cc8:	6f ef       	ldi	r22, 0xFF	; 255
    4cca:	85 e0       	ldi	r24, 0x05	; 5
    4ccc:	67 d0       	rcall	.+206    	; 0x4d9c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, 0xff);
    4cce:	6f ef       	ldi	r22, 0xFF	; 255
    4cd0:	86 e0       	ldi	r24, 0x06	; 6
    4cd2:	64 d0       	rcall	.+200    	; 0x4d9c <sysclk_enable_module>
		
/* -------------------------------------------------------------------- */
/*	Timer for RTC - SW timer											*/
/* -------------------------------------------------------------------- */
	
	xTimers[0] = xTimerCreate("timerRTC", 1000, pdTRUE,( void * ) 0, timerRTC);
    4cd4:	06 ee       	ldi	r16, 0xE6	; 230
    4cd6:	15 e2       	ldi	r17, 0x25	; 37
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	41 e0       	ldi	r20, 0x01	; 1
    4cde:	68 ee       	ldi	r22, 0xE8	; 232
    4ce0:	73 e0       	ldi	r23, 0x03	; 3
    4ce2:	8c e0       	ldi	r24, 0x0C	; 12
    4ce4:	91 e2       	ldi	r25, 0x21	; 33
    4ce6:	0e 94 43 10 	call	0x2086	; 0x2086 <xTimerCreate>
    4cea:	80 93 8a 3f 	sts	0x3F8A, r24
    4cee:	90 93 8b 3f 	sts	0x3F8B, r25
	
	xTimerStart(xTimers[0], 0);
    4cf2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xTaskGetTickCount>
    4cf6:	00 e0       	ldi	r16, 0x00	; 0
    4cf8:	10 e0       	ldi	r17, 0x00	; 0
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	ac 01       	movw	r20, r24
    4d00:	60 e0       	ldi	r22, 0x00	; 0
    4d02:	80 91 8a 3f 	lds	r24, 0x3F8A
    4d06:	90 91 8b 3f 	lds	r25, 0x3F8B
    4d0a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <xTimerGenericCommand>
	
	milisecondsTimer = 0;
    4d0e:	10 92 86 3f 	sts	0x3F86, r1
    4d12:	10 92 87 3f 	sts	0x3F87, r1
    4d16:	10 92 88 3f 	sts	0x3F88, r1
    4d1a:	10 92 89 3f 	sts	0x3F89, r1
	secondsTimer = 0;
    4d1e:	10 92 8c 3f 	sts	0x3F8C, r1
    4d22:	10 92 8d 3f 	sts	0x3F8D, r1
    4d26:	10 92 8e 3f 	sts	0x3F8E, r1
    4d2a:	10 92 8f 3f 	sts	0x3F8F, r1
	hoursTimer = 0;
    4d2e:	10 92 82 3f 	sts	0x3F82, r1
    4d32:	10 92 83 3f 	sts	0x3F83, r1
    4d36:	10 92 84 3f 	sts	0x3F84, r1
    4d3a:	10 92 85 3f 	sts	0x3F85, r1
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4d3e:	e0 e8       	ldi	r30, 0x80	; 128
    4d40:	f6 e0       	ldi	r31, 0x06	; 6
    4d42:	88 e0       	ldi	r24, 0x08	; 8
    4d44:	81 83       	std	Z+1, r24	; 0x01
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4d46:	85 83       	std	Z+5, r24	; 0x05
	//ioport_set_pin_dir(MEM_CS,IOPORT_DIR_OUTPUT);
	//ioport_set_pin_dir(MEM_WP,IOPORT_DIR_OUTPUT);
	
	//power_switch_off();
	
}
    4d48:	1f 91       	pop	r17
    4d4a:	0f 91       	pop	r16
    4d4c:	08 95       	ret

00004d4e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    4d4e:	8f ef       	ldi	r24, 0xFF	; 255
    4d50:	80 93 70 00 	sts	0x0070, r24
    4d54:	80 93 71 00 	sts	0x0071, r24
    4d58:	80 93 72 00 	sts	0x0072, r24
    4d5c:	80 93 73 00 	sts	0x0073, r24
    4d60:	80 93 74 00 	sts	0x0074, r24
    4d64:	80 93 75 00 	sts	0x0075, r24
    4d68:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4d6c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4d6e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    4d70:	e0 e5       	ldi	r30, 0x50	; 80
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	90 81       	ld	r25, Z
    4d76:	92 60       	ori	r25, 0x02	; 2
    4d78:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d7a:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    4d7c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    4d7e:	81 ff       	sbrs	r24, 1
    4d80:	fd cf       	rjmp	.-6      	; 0x4d7c <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	80 e4       	ldi	r24, 0x40	; 64
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	15 d0       	rcall	.+42     	; 0x4db4 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4d8a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4d8c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    4d8e:	e0 e5       	ldi	r30, 0x50	; 80
    4d90:	f0 e0       	ldi	r31, 0x00	; 0
    4d92:	90 81       	ld	r25, Z
    4d94:	9e 7f       	andi	r25, 0xFE	; 254
    4d96:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4d98:	8f bf       	out	0x3f, r24	; 63
    4d9a:	08 95       	ret

00004d9c <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4d9c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    4d9e:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    4da0:	e8 2f       	mov	r30, r24
    4da2:	f0 e0       	ldi	r31, 0x00	; 0
    4da4:	e0 59       	subi	r30, 0x90	; 144
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	60 95       	com	r22
    4daa:	80 81       	ld	r24, Z
    4dac:	68 23       	and	r22, r24
    4dae:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4db0:	9f bf       	out	0x3f, r25	; 63
    4db2:	08 95       	ret

00004db4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4db4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4db6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4db8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4dba:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    4dbc:	60 83       	st	Z, r22
	ret                             // Return to caller
    4dbe:	08 95       	ret

00004dc0 <vfprintf>:
    4dc0:	2f 92       	push	r2
    4dc2:	3f 92       	push	r3
    4dc4:	4f 92       	push	r4
    4dc6:	5f 92       	push	r5
    4dc8:	6f 92       	push	r6
    4dca:	7f 92       	push	r7
    4dcc:	8f 92       	push	r8
    4dce:	9f 92       	push	r9
    4dd0:	af 92       	push	r10
    4dd2:	bf 92       	push	r11
    4dd4:	cf 92       	push	r12
    4dd6:	df 92       	push	r13
    4dd8:	ef 92       	push	r14
    4dda:	ff 92       	push	r15
    4ddc:	0f 93       	push	r16
    4dde:	1f 93       	push	r17
    4de0:	cf 93       	push	r28
    4de2:	df 93       	push	r29
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	63 97       	sbiw	r28, 0x13	; 19
    4dea:	cd bf       	out	0x3d, r28	; 61
    4dec:	de bf       	out	0x3e, r29	; 62
    4dee:	7c 01       	movw	r14, r24
    4df0:	1b 01       	movw	r2, r22
    4df2:	6a 01       	movw	r12, r20
    4df4:	fc 01       	movw	r30, r24
    4df6:	16 82       	std	Z+6, r1	; 0x06
    4df8:	17 82       	std	Z+7, r1	; 0x07
    4dfa:	83 81       	ldd	r24, Z+3	; 0x03
    4dfc:	81 ff       	sbrs	r24, 1
    4dfe:	49 c3       	rjmp	.+1682   	; 0x5492 <vfprintf+0x6d2>
    4e00:	be 01       	movw	r22, r28
    4e02:	6f 5f       	subi	r22, 0xFF	; 255
    4e04:	7f 4f       	sbci	r23, 0xFF	; 255
    4e06:	4b 01       	movw	r8, r22
    4e08:	f7 01       	movw	r30, r14
    4e0a:	93 81       	ldd	r25, Z+3	; 0x03
    4e0c:	f1 01       	movw	r30, r2
    4e0e:	93 fd       	sbrc	r25, 3
    4e10:	85 91       	lpm	r24, Z+
    4e12:	93 ff       	sbrs	r25, 3
    4e14:	81 91       	ld	r24, Z+
    4e16:	1f 01       	movw	r2, r30
    4e18:	88 23       	and	r24, r24
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <vfprintf+0x5e>
    4e1c:	36 c3       	rjmp	.+1644   	; 0x548a <vfprintf+0x6ca>
    4e1e:	85 32       	cpi	r24, 0x25	; 37
    4e20:	39 f4       	brne	.+14     	; 0x4e30 <vfprintf+0x70>
    4e22:	93 fd       	sbrc	r25, 3
    4e24:	85 91       	lpm	r24, Z+
    4e26:	93 ff       	sbrs	r25, 3
    4e28:	81 91       	ld	r24, Z+
    4e2a:	1f 01       	movw	r2, r30
    4e2c:	85 32       	cpi	r24, 0x25	; 37
    4e2e:	31 f4       	brne	.+12     	; 0x4e3c <vfprintf+0x7c>
    4e30:	b7 01       	movw	r22, r14
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	36 d5       	rcall	.+2668   	; 0x58a2 <fputc>
    4e36:	56 01       	movw	r10, r12
    4e38:	65 01       	movw	r12, r10
    4e3a:	e6 cf       	rjmp	.-52     	; 0x4e08 <vfprintf+0x48>
    4e3c:	10 e0       	ldi	r17, 0x00	; 0
    4e3e:	51 2c       	mov	r5, r1
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	20 32       	cpi	r18, 0x20	; 32
    4e44:	a0 f4       	brcc	.+40     	; 0x4e6e <vfprintf+0xae>
    4e46:	8b 32       	cpi	r24, 0x2B	; 43
    4e48:	69 f0       	breq	.+26     	; 0x4e64 <vfprintf+0xa4>
    4e4a:	30 f4       	brcc	.+12     	; 0x4e58 <vfprintf+0x98>
    4e4c:	80 32       	cpi	r24, 0x20	; 32
    4e4e:	59 f0       	breq	.+22     	; 0x4e66 <vfprintf+0xa6>
    4e50:	83 32       	cpi	r24, 0x23	; 35
    4e52:	69 f4       	brne	.+26     	; 0x4e6e <vfprintf+0xae>
    4e54:	20 61       	ori	r18, 0x10	; 16
    4e56:	2c c0       	rjmp	.+88     	; 0x4eb0 <vfprintf+0xf0>
    4e58:	8d 32       	cpi	r24, 0x2D	; 45
    4e5a:	39 f0       	breq	.+14     	; 0x4e6a <vfprintf+0xaa>
    4e5c:	80 33       	cpi	r24, 0x30	; 48
    4e5e:	39 f4       	brne	.+14     	; 0x4e6e <vfprintf+0xae>
    4e60:	21 60       	ori	r18, 0x01	; 1
    4e62:	26 c0       	rjmp	.+76     	; 0x4eb0 <vfprintf+0xf0>
    4e64:	22 60       	ori	r18, 0x02	; 2
    4e66:	24 60       	ori	r18, 0x04	; 4
    4e68:	23 c0       	rjmp	.+70     	; 0x4eb0 <vfprintf+0xf0>
    4e6a:	28 60       	ori	r18, 0x08	; 8
    4e6c:	21 c0       	rjmp	.+66     	; 0x4eb0 <vfprintf+0xf0>
    4e6e:	27 fd       	sbrc	r18, 7
    4e70:	27 c0       	rjmp	.+78     	; 0x4ec0 <vfprintf+0x100>
    4e72:	30 ed       	ldi	r19, 0xD0	; 208
    4e74:	38 0f       	add	r19, r24
    4e76:	3a 30       	cpi	r19, 0x0A	; 10
    4e78:	78 f4       	brcc	.+30     	; 0x4e98 <vfprintf+0xd8>
    4e7a:	26 ff       	sbrs	r18, 6
    4e7c:	06 c0       	rjmp	.+12     	; 0x4e8a <vfprintf+0xca>
    4e7e:	fa e0       	ldi	r31, 0x0A	; 10
    4e80:	1f 9f       	mul	r17, r31
    4e82:	30 0d       	add	r19, r0
    4e84:	11 24       	eor	r1, r1
    4e86:	13 2f       	mov	r17, r19
    4e88:	13 c0       	rjmp	.+38     	; 0x4eb0 <vfprintf+0xf0>
    4e8a:	6a e0       	ldi	r22, 0x0A	; 10
    4e8c:	56 9e       	mul	r5, r22
    4e8e:	30 0d       	add	r19, r0
    4e90:	11 24       	eor	r1, r1
    4e92:	53 2e       	mov	r5, r19
    4e94:	20 62       	ori	r18, 0x20	; 32
    4e96:	0c c0       	rjmp	.+24     	; 0x4eb0 <vfprintf+0xf0>
    4e98:	8e 32       	cpi	r24, 0x2E	; 46
    4e9a:	21 f4       	brne	.+8      	; 0x4ea4 <vfprintf+0xe4>
    4e9c:	26 fd       	sbrc	r18, 6
    4e9e:	f5 c2       	rjmp	.+1514   	; 0x548a <vfprintf+0x6ca>
    4ea0:	20 64       	ori	r18, 0x40	; 64
    4ea2:	06 c0       	rjmp	.+12     	; 0x4eb0 <vfprintf+0xf0>
    4ea4:	8c 36       	cpi	r24, 0x6C	; 108
    4ea6:	11 f4       	brne	.+4      	; 0x4eac <vfprintf+0xec>
    4ea8:	20 68       	ori	r18, 0x80	; 128
    4eaa:	02 c0       	rjmp	.+4      	; 0x4eb0 <vfprintf+0xf0>
    4eac:	88 36       	cpi	r24, 0x68	; 104
    4eae:	41 f4       	brne	.+16     	; 0x4ec0 <vfprintf+0x100>
    4eb0:	f1 01       	movw	r30, r2
    4eb2:	93 fd       	sbrc	r25, 3
    4eb4:	85 91       	lpm	r24, Z+
    4eb6:	93 ff       	sbrs	r25, 3
    4eb8:	81 91       	ld	r24, Z+
    4eba:	1f 01       	movw	r2, r30
    4ebc:	81 11       	cpse	r24, r1
    4ebe:	c1 cf       	rjmp	.-126    	; 0x4e42 <vfprintf+0x82>
    4ec0:	9b eb       	ldi	r25, 0xBB	; 187
    4ec2:	98 0f       	add	r25, r24
    4ec4:	93 30       	cpi	r25, 0x03	; 3
    4ec6:	18 f4       	brcc	.+6      	; 0x4ece <vfprintf+0x10e>
    4ec8:	20 61       	ori	r18, 0x10	; 16
    4eca:	80 5e       	subi	r24, 0xE0	; 224
    4ecc:	06 c0       	rjmp	.+12     	; 0x4eda <vfprintf+0x11a>
    4ece:	9b e9       	ldi	r25, 0x9B	; 155
    4ed0:	98 0f       	add	r25, r24
    4ed2:	93 30       	cpi	r25, 0x03	; 3
    4ed4:	08 f0       	brcs	.+2      	; 0x4ed8 <vfprintf+0x118>
    4ed6:	9a c1       	rjmp	.+820    	; 0x520c <vfprintf+0x44c>
    4ed8:	2f 7e       	andi	r18, 0xEF	; 239
    4eda:	26 ff       	sbrs	r18, 6
    4edc:	16 e0       	ldi	r17, 0x06	; 6
    4ede:	2f 73       	andi	r18, 0x3F	; 63
    4ee0:	72 2e       	mov	r7, r18
    4ee2:	85 36       	cpi	r24, 0x65	; 101
    4ee4:	21 f4       	brne	.+8      	; 0x4eee <vfprintf+0x12e>
    4ee6:	f2 2f       	mov	r31, r18
    4ee8:	f0 64       	ori	r31, 0x40	; 64
    4eea:	7f 2e       	mov	r7, r31
    4eec:	08 c0       	rjmp	.+16     	; 0x4efe <vfprintf+0x13e>
    4eee:	86 36       	cpi	r24, 0x66	; 102
    4ef0:	21 f4       	brne	.+8      	; 0x4efa <vfprintf+0x13a>
    4ef2:	62 2f       	mov	r22, r18
    4ef4:	60 68       	ori	r22, 0x80	; 128
    4ef6:	76 2e       	mov	r7, r22
    4ef8:	02 c0       	rjmp	.+4      	; 0x4efe <vfprintf+0x13e>
    4efa:	11 11       	cpse	r17, r1
    4efc:	11 50       	subi	r17, 0x01	; 1
    4efe:	77 fe       	sbrs	r7, 7
    4f00:	07 c0       	rjmp	.+14     	; 0x4f10 <vfprintf+0x150>
    4f02:	1c 33       	cpi	r17, 0x3C	; 60
    4f04:	48 f4       	brcc	.+18     	; 0x4f18 <vfprintf+0x158>
    4f06:	44 24       	eor	r4, r4
    4f08:	43 94       	inc	r4
    4f0a:	41 0e       	add	r4, r17
    4f0c:	27 e0       	ldi	r18, 0x07	; 7
    4f0e:	0b c0       	rjmp	.+22     	; 0x4f26 <vfprintf+0x166>
    4f10:	18 30       	cpi	r17, 0x08	; 8
    4f12:	30 f4       	brcc	.+12     	; 0x4f20 <vfprintf+0x160>
    4f14:	21 2f       	mov	r18, r17
    4f16:	06 c0       	rjmp	.+12     	; 0x4f24 <vfprintf+0x164>
    4f18:	27 e0       	ldi	r18, 0x07	; 7
    4f1a:	4c e3       	ldi	r20, 0x3C	; 60
    4f1c:	44 2e       	mov	r4, r20
    4f1e:	03 c0       	rjmp	.+6      	; 0x4f26 <vfprintf+0x166>
    4f20:	27 e0       	ldi	r18, 0x07	; 7
    4f22:	17 e0       	ldi	r17, 0x07	; 7
    4f24:	41 2c       	mov	r4, r1
    4f26:	56 01       	movw	r10, r12
    4f28:	74 e0       	ldi	r23, 0x04	; 4
    4f2a:	a7 0e       	add	r10, r23
    4f2c:	b1 1c       	adc	r11, r1
    4f2e:	f6 01       	movw	r30, r12
    4f30:	60 81       	ld	r22, Z
    4f32:	71 81       	ldd	r23, Z+1	; 0x01
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	04 2d       	mov	r16, r4
    4f3a:	a4 01       	movw	r20, r8
    4f3c:	55 d3       	rcall	.+1706   	; 0x55e8 <__ftoa_engine>
    4f3e:	6c 01       	movw	r12, r24
    4f40:	09 81       	ldd	r16, Y+1	; 0x01
    4f42:	00 ff       	sbrs	r16, 0
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <vfprintf+0x18a>
    4f46:	03 ff       	sbrs	r16, 3
    4f48:	06 c0       	rjmp	.+12     	; 0x4f56 <vfprintf+0x196>
    4f4a:	71 fc       	sbrc	r7, 1
    4f4c:	07 c0       	rjmp	.+14     	; 0x4f5c <vfprintf+0x19c>
    4f4e:	72 fc       	sbrc	r7, 2
    4f50:	08 c0       	rjmp	.+16     	; 0x4f62 <vfprintf+0x1a2>
    4f52:	61 2c       	mov	r6, r1
    4f54:	08 c0       	rjmp	.+16     	; 0x4f66 <vfprintf+0x1a6>
    4f56:	3d e2       	ldi	r19, 0x2D	; 45
    4f58:	63 2e       	mov	r6, r19
    4f5a:	05 c0       	rjmp	.+10     	; 0x4f66 <vfprintf+0x1a6>
    4f5c:	2b e2       	ldi	r18, 0x2B	; 43
    4f5e:	62 2e       	mov	r6, r18
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <vfprintf+0x1a6>
    4f62:	90 e2       	ldi	r25, 0x20	; 32
    4f64:	69 2e       	mov	r6, r25
    4f66:	80 2f       	mov	r24, r16
    4f68:	8c 70       	andi	r24, 0x0C	; 12
    4f6a:	81 f1       	breq	.+96     	; 0x4fcc <vfprintf+0x20c>
    4f6c:	66 20       	and	r6, r6
    4f6e:	11 f0       	breq	.+4      	; 0x4f74 <vfprintf+0x1b4>
    4f70:	84 e0       	ldi	r24, 0x04	; 4
    4f72:	01 c0       	rjmp	.+2      	; 0x4f76 <vfprintf+0x1b6>
    4f74:	83 e0       	ldi	r24, 0x03	; 3
    4f76:	85 15       	cp	r24, r5
    4f78:	10 f0       	brcs	.+4      	; 0x4f7e <vfprintf+0x1be>
    4f7a:	51 2c       	mov	r5, r1
    4f7c:	0a c0       	rjmp	.+20     	; 0x4f92 <vfprintf+0x1d2>
    4f7e:	58 1a       	sub	r5, r24
    4f80:	73 fc       	sbrc	r7, 3
    4f82:	07 c0       	rjmp	.+14     	; 0x4f92 <vfprintf+0x1d2>
    4f84:	b7 01       	movw	r22, r14
    4f86:	80 e2       	ldi	r24, 0x20	; 32
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	8b d4       	rcall	.+2326   	; 0x58a2 <fputc>
    4f8c:	5a 94       	dec	r5
    4f8e:	d1 f7       	brne	.-12     	; 0x4f84 <vfprintf+0x1c4>
    4f90:	f4 cf       	rjmp	.-24     	; 0x4f7a <vfprintf+0x1ba>
    4f92:	66 20       	and	r6, r6
    4f94:	21 f0       	breq	.+8      	; 0x4f9e <vfprintf+0x1de>
    4f96:	b7 01       	movw	r22, r14
    4f98:	86 2d       	mov	r24, r6
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	82 d4       	rcall	.+2308   	; 0x58a2 <fputc>
    4f9e:	03 fd       	sbrc	r16, 3
    4fa0:	03 c0       	rjmp	.+6      	; 0x4fa8 <vfprintf+0x1e8>
    4fa2:	0e e0       	ldi	r16, 0x0E	; 14
    4fa4:	16 e0       	ldi	r17, 0x06	; 6
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <vfprintf+0x1ec>
    4fa8:	0a e0       	ldi	r16, 0x0A	; 10
    4faa:	16 e0       	ldi	r17, 0x06	; 6
    4fac:	f7 2d       	mov	r31, r7
    4fae:	f0 71       	andi	r31, 0x10	; 16
    4fb0:	7f 2e       	mov	r7, r31
    4fb2:	f8 01       	movw	r30, r16
    4fb4:	84 91       	lpm	r24, Z
    4fb6:	88 23       	and	r24, r24
    4fb8:	09 f4       	brne	.+2      	; 0x4fbc <vfprintf+0x1fc>
    4fba:	5e c2       	rjmp	.+1212   	; 0x5478 <vfprintf+0x6b8>
    4fbc:	71 10       	cpse	r7, r1
    4fbe:	80 52       	subi	r24, 0x20	; 32
    4fc0:	b7 01       	movw	r22, r14
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	6e d4       	rcall	.+2268   	; 0x58a2 <fputc>
    4fc6:	0f 5f       	subi	r16, 0xFF	; 255
    4fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fca:	f3 cf       	rjmp	.-26     	; 0x4fb2 <vfprintf+0x1f2>
    4fcc:	77 fe       	sbrs	r7, 7
    4fce:	0f c0       	rjmp	.+30     	; 0x4fee <vfprintf+0x22e>
    4fd0:	4c 0c       	add	r4, r12
    4fd2:	04 ff       	sbrs	r16, 4
    4fd4:	04 c0       	rjmp	.+8      	; 0x4fde <vfprintf+0x21e>
    4fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd8:	81 33       	cpi	r24, 0x31	; 49
    4fda:	09 f4       	brne	.+2      	; 0x4fde <vfprintf+0x21e>
    4fdc:	4a 94       	dec	r4
    4fde:	14 14       	cp	r1, r4
    4fe0:	74 f5       	brge	.+92     	; 0x503e <vfprintf+0x27e>
    4fe2:	f8 e0       	ldi	r31, 0x08	; 8
    4fe4:	f4 15       	cp	r31, r4
    4fe6:	78 f5       	brcc	.+94     	; 0x5046 <vfprintf+0x286>
    4fe8:	88 e0       	ldi	r24, 0x08	; 8
    4fea:	48 2e       	mov	r4, r24
    4fec:	2c c0       	rjmp	.+88     	; 0x5046 <vfprintf+0x286>
    4fee:	76 fc       	sbrc	r7, 6
    4ff0:	2a c0       	rjmp	.+84     	; 0x5046 <vfprintf+0x286>
    4ff2:	81 2f       	mov	r24, r17
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	8c 15       	cp	r24, r12
    4ff8:	9d 05       	cpc	r25, r13
    4ffa:	9c f0       	brlt	.+38     	; 0x5022 <vfprintf+0x262>
    4ffc:	6c ef       	ldi	r22, 0xFC	; 252
    4ffe:	c6 16       	cp	r12, r22
    5000:	6f ef       	ldi	r22, 0xFF	; 255
    5002:	d6 06       	cpc	r13, r22
    5004:	74 f0       	brlt	.+28     	; 0x5022 <vfprintf+0x262>
    5006:	77 2d       	mov	r23, r7
    5008:	70 68       	ori	r23, 0x80	; 128
    500a:	77 2e       	mov	r7, r23
    500c:	0a c0       	rjmp	.+20     	; 0x5022 <vfprintf+0x262>
    500e:	e2 e0       	ldi	r30, 0x02	; 2
    5010:	f0 e0       	ldi	r31, 0x00	; 0
    5012:	ec 0f       	add	r30, r28
    5014:	fd 1f       	adc	r31, r29
    5016:	e1 0f       	add	r30, r17
    5018:	f1 1d       	adc	r31, r1
    501a:	80 81       	ld	r24, Z
    501c:	80 33       	cpi	r24, 0x30	; 48
    501e:	19 f4       	brne	.+6      	; 0x5026 <vfprintf+0x266>
    5020:	11 50       	subi	r17, 0x01	; 1
    5022:	11 11       	cpse	r17, r1
    5024:	f4 cf       	rjmp	.-24     	; 0x500e <vfprintf+0x24e>
    5026:	77 fe       	sbrs	r7, 7
    5028:	0e c0       	rjmp	.+28     	; 0x5046 <vfprintf+0x286>
    502a:	44 24       	eor	r4, r4
    502c:	43 94       	inc	r4
    502e:	41 0e       	add	r4, r17
    5030:	81 2f       	mov	r24, r17
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	c8 16       	cp	r12, r24
    5036:	d9 06       	cpc	r13, r25
    5038:	2c f4       	brge	.+10     	; 0x5044 <vfprintf+0x284>
    503a:	1c 19       	sub	r17, r12
    503c:	04 c0       	rjmp	.+8      	; 0x5046 <vfprintf+0x286>
    503e:	44 24       	eor	r4, r4
    5040:	43 94       	inc	r4
    5042:	01 c0       	rjmp	.+2      	; 0x5046 <vfprintf+0x286>
    5044:	10 e0       	ldi	r17, 0x00	; 0
    5046:	77 fe       	sbrs	r7, 7
    5048:	07 c0       	rjmp	.+14     	; 0x5058 <vfprintf+0x298>
    504a:	1c 14       	cp	r1, r12
    504c:	1d 04       	cpc	r1, r13
    504e:	3c f4       	brge	.+14     	; 0x505e <vfprintf+0x29e>
    5050:	96 01       	movw	r18, r12
    5052:	2f 5f       	subi	r18, 0xFF	; 255
    5054:	3f 4f       	sbci	r19, 0xFF	; 255
    5056:	05 c0       	rjmp	.+10     	; 0x5062 <vfprintf+0x2a2>
    5058:	25 e0       	ldi	r18, 0x05	; 5
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	02 c0       	rjmp	.+4      	; 0x5062 <vfprintf+0x2a2>
    505e:	21 e0       	ldi	r18, 0x01	; 1
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	66 20       	and	r6, r6
    5064:	11 f0       	breq	.+4      	; 0x506a <vfprintf+0x2aa>
    5066:	2f 5f       	subi	r18, 0xFF	; 255
    5068:	3f 4f       	sbci	r19, 0xFF	; 255
    506a:	11 23       	and	r17, r17
    506c:	31 f0       	breq	.+12     	; 0x507a <vfprintf+0x2ba>
    506e:	41 2f       	mov	r20, r17
    5070:	50 e0       	ldi	r21, 0x00	; 0
    5072:	4f 5f       	subi	r20, 0xFF	; 255
    5074:	5f 4f       	sbci	r21, 0xFF	; 255
    5076:	24 0f       	add	r18, r20
    5078:	35 1f       	adc	r19, r21
    507a:	45 2d       	mov	r20, r5
    507c:	50 e0       	ldi	r21, 0x00	; 0
    507e:	24 17       	cp	r18, r20
    5080:	35 07       	cpc	r19, r21
    5082:	14 f4       	brge	.+4      	; 0x5088 <vfprintf+0x2c8>
    5084:	52 1a       	sub	r5, r18
    5086:	01 c0       	rjmp	.+2      	; 0x508a <vfprintf+0x2ca>
    5088:	51 2c       	mov	r5, r1
    508a:	87 2d       	mov	r24, r7
    508c:	89 70       	andi	r24, 0x09	; 9
    508e:	41 f4       	brne	.+16     	; 0x50a0 <vfprintf+0x2e0>
    5090:	55 20       	and	r5, r5
    5092:	31 f0       	breq	.+12     	; 0x50a0 <vfprintf+0x2e0>
    5094:	b7 01       	movw	r22, r14
    5096:	80 e2       	ldi	r24, 0x20	; 32
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	03 d4       	rcall	.+2054   	; 0x58a2 <fputc>
    509c:	5a 94       	dec	r5
    509e:	f8 cf       	rjmp	.-16     	; 0x5090 <vfprintf+0x2d0>
    50a0:	66 20       	and	r6, r6
    50a2:	21 f0       	breq	.+8      	; 0x50ac <vfprintf+0x2ec>
    50a4:	b7 01       	movw	r22, r14
    50a6:	86 2d       	mov	r24, r6
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	fb d3       	rcall	.+2038   	; 0x58a2 <fputc>
    50ac:	73 fc       	sbrc	r7, 3
    50ae:	08 c0       	rjmp	.+16     	; 0x50c0 <vfprintf+0x300>
    50b0:	55 20       	and	r5, r5
    50b2:	31 f0       	breq	.+12     	; 0x50c0 <vfprintf+0x300>
    50b4:	b7 01       	movw	r22, r14
    50b6:	80 e3       	ldi	r24, 0x30	; 48
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	f3 d3       	rcall	.+2022   	; 0x58a2 <fputc>
    50bc:	5a 94       	dec	r5
    50be:	f8 cf       	rjmp	.-16     	; 0x50b0 <vfprintf+0x2f0>
    50c0:	77 fe       	sbrs	r7, 7
    50c2:	5d c0       	rjmp	.+186    	; 0x517e <vfprintf+0x3be>
    50c4:	9c 2d       	mov	r25, r12
    50c6:	8d 2d       	mov	r24, r13
    50c8:	d7 fe       	sbrs	r13, 7
    50ca:	02 c0       	rjmp	.+4      	; 0x50d0 <vfprintf+0x310>
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	69 2e       	mov	r6, r25
    50d2:	78 2e       	mov	r7, r24
    50d4:	40 e0       	ldi	r20, 0x00	; 0
    50d6:	50 e0       	ldi	r21, 0x00	; 0
    50d8:	c6 01       	movw	r24, r12
    50da:	84 19       	sub	r24, r4
    50dc:	91 09       	sbc	r25, r1
    50de:	8c 87       	std	Y+12, r24	; 0x0c
    50e0:	9d 87       	std	Y+13, r25	; 0x0d
    50e2:	96 01       	movw	r18, r12
    50e4:	26 19       	sub	r18, r6
    50e6:	37 09       	sbc	r19, r7
    50e8:	28 0d       	add	r18, r8
    50ea:	39 1d       	adc	r19, r9
    50ec:	81 2f       	mov	r24, r17
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	ee 27       	eor	r30, r30
    50f2:	ff 27       	eor	r31, r31
    50f4:	e8 1b       	sub	r30, r24
    50f6:	f9 0b       	sbc	r31, r25
    50f8:	ee 87       	std	Y+14, r30	; 0x0e
    50fa:	ff 87       	std	Y+15, r31	; 0x0f
    50fc:	ff ef       	ldi	r31, 0xFF	; 255
    50fe:	6f 16       	cp	r6, r31
    5100:	7f 06       	cpc	r7, r31
    5102:	61 f4       	brne	.+24     	; 0x511c <vfprintf+0x35c>
    5104:	b7 01       	movw	r22, r14
    5106:	8e e2       	ldi	r24, 0x2E	; 46
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	2b 8b       	std	Y+19, r18	; 0x13
    510c:	3a 8b       	std	Y+18, r19	; 0x12
    510e:	48 8b       	std	Y+16, r20	; 0x10
    5110:	59 8b       	std	Y+17, r21	; 0x11
    5112:	c7 d3       	rcall	.+1934   	; 0x58a2 <fputc>
    5114:	59 89       	ldd	r21, Y+17	; 0x11
    5116:	48 89       	ldd	r20, Y+16	; 0x10
    5118:	3a 89       	ldd	r19, Y+18	; 0x12
    511a:	2b 89       	ldd	r18, Y+19	; 0x13
    511c:	c6 14       	cp	r12, r6
    511e:	d7 04       	cpc	r13, r7
    5120:	54 f0       	brlt	.+20     	; 0x5136 <vfprintf+0x376>
    5122:	6c 85       	ldd	r22, Y+12	; 0x0c
    5124:	7d 85       	ldd	r23, Y+13	; 0x0d
    5126:	66 15       	cp	r22, r6
    5128:	77 05       	cpc	r23, r7
    512a:	2c f4       	brge	.+10     	; 0x5136 <vfprintf+0x376>
    512c:	f9 01       	movw	r30, r18
    512e:	e4 0f       	add	r30, r20
    5130:	f5 1f       	adc	r31, r21
    5132:	81 81       	ldd	r24, Z+1	; 0x01
    5134:	01 c0       	rjmp	.+2      	; 0x5138 <vfprintf+0x378>
    5136:	80 e3       	ldi	r24, 0x30	; 48
    5138:	71 e0       	ldi	r23, 0x01	; 1
    513a:	67 1a       	sub	r6, r23
    513c:	71 08       	sbc	r7, r1
    513e:	4f 5f       	subi	r20, 0xFF	; 255
    5140:	5f 4f       	sbci	r21, 0xFF	; 255
    5142:	ee 85       	ldd	r30, Y+14	; 0x0e
    5144:	ff 85       	ldd	r31, Y+15	; 0x0f
    5146:	6e 16       	cp	r6, r30
    5148:	7f 06       	cpc	r7, r31
    514a:	64 f0       	brlt	.+24     	; 0x5164 <vfprintf+0x3a4>
    514c:	b7 01       	movw	r22, r14
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	2b 8b       	std	Y+19, r18	; 0x13
    5152:	3a 8b       	std	Y+18, r19	; 0x12
    5154:	48 8b       	std	Y+16, r20	; 0x10
    5156:	59 8b       	std	Y+17, r21	; 0x11
    5158:	a4 d3       	rcall	.+1864   	; 0x58a2 <fputc>
    515a:	2b 89       	ldd	r18, Y+19	; 0x13
    515c:	3a 89       	ldd	r19, Y+18	; 0x12
    515e:	48 89       	ldd	r20, Y+16	; 0x10
    5160:	59 89       	ldd	r21, Y+17	; 0x11
    5162:	cc cf       	rjmp	.-104    	; 0x50fc <vfprintf+0x33c>
    5164:	6c 14       	cp	r6, r12
    5166:	7d 04       	cpc	r7, r13
    5168:	39 f4       	brne	.+14     	; 0x5178 <vfprintf+0x3b8>
    516a:	9a 81       	ldd	r25, Y+2	; 0x02
    516c:	96 33       	cpi	r25, 0x36	; 54
    516e:	18 f4       	brcc	.+6      	; 0x5176 <vfprintf+0x3b6>
    5170:	95 33       	cpi	r25, 0x35	; 53
    5172:	11 f4       	brne	.+4      	; 0x5178 <vfprintf+0x3b8>
    5174:	04 ff       	sbrs	r16, 4
    5176:	81 e3       	ldi	r24, 0x31	; 49
    5178:	b7 01       	movw	r22, r14
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	45 c0       	rjmp	.+138    	; 0x5208 <vfprintf+0x448>
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	81 33       	cpi	r24, 0x31	; 49
    5182:	09 f0       	breq	.+2      	; 0x5186 <vfprintf+0x3c6>
    5184:	0f 7e       	andi	r16, 0xEF	; 239
    5186:	b7 01       	movw	r22, r14
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	8b d3       	rcall	.+1814   	; 0x58a2 <fputc>
    518c:	11 11       	cpse	r17, r1
    518e:	05 c0       	rjmp	.+10     	; 0x519a <vfprintf+0x3da>
    5190:	74 fe       	sbrs	r7, 4
    5192:	16 c0       	rjmp	.+44     	; 0x51c0 <vfprintf+0x400>
    5194:	85 e4       	ldi	r24, 0x45	; 69
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	15 c0       	rjmp	.+42     	; 0x51c4 <vfprintf+0x404>
    519a:	b7 01       	movw	r22, r14
    519c:	8e e2       	ldi	r24, 0x2E	; 46
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	80 d3       	rcall	.+1792   	; 0x58a2 <fputc>
    51a2:	82 e0       	ldi	r24, 0x02	; 2
    51a4:	66 24       	eor	r6, r6
    51a6:	63 94       	inc	r6
    51a8:	68 0e       	add	r6, r24
    51aa:	f4 01       	movw	r30, r8
    51ac:	e8 0f       	add	r30, r24
    51ae:	f1 1d       	adc	r31, r1
    51b0:	80 81       	ld	r24, Z
    51b2:	b7 01       	movw	r22, r14
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	75 d3       	rcall	.+1770   	; 0x58a2 <fputc>
    51b8:	11 50       	subi	r17, 0x01	; 1
    51ba:	51 f3       	breq	.-44     	; 0x5190 <vfprintf+0x3d0>
    51bc:	86 2d       	mov	r24, r6
    51be:	f2 cf       	rjmp	.-28     	; 0x51a4 <vfprintf+0x3e4>
    51c0:	85 e6       	ldi	r24, 0x65	; 101
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	b7 01       	movw	r22, r14
    51c6:	6d d3       	rcall	.+1754   	; 0x58a2 <fputc>
    51c8:	d7 fc       	sbrc	r13, 7
    51ca:	05 c0       	rjmp	.+10     	; 0x51d6 <vfprintf+0x416>
    51cc:	c1 14       	cp	r12, r1
    51ce:	d1 04       	cpc	r13, r1
    51d0:	39 f4       	brne	.+14     	; 0x51e0 <vfprintf+0x420>
    51d2:	04 ff       	sbrs	r16, 4
    51d4:	05 c0       	rjmp	.+10     	; 0x51e0 <vfprintf+0x420>
    51d6:	d1 94       	neg	r13
    51d8:	c1 94       	neg	r12
    51da:	d1 08       	sbc	r13, r1
    51dc:	8d e2       	ldi	r24, 0x2D	; 45
    51de:	01 c0       	rjmp	.+2      	; 0x51e2 <vfprintf+0x422>
    51e0:	8b e2       	ldi	r24, 0x2B	; 43
    51e2:	b7 01       	movw	r22, r14
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	5d d3       	rcall	.+1722   	; 0x58a2 <fputc>
    51e8:	80 e3       	ldi	r24, 0x30	; 48
    51ea:	6a e0       	ldi	r22, 0x0A	; 10
    51ec:	c6 16       	cp	r12, r22
    51ee:	d1 04       	cpc	r13, r1
    51f0:	2c f0       	brlt	.+10     	; 0x51fc <vfprintf+0x43c>
    51f2:	8f 5f       	subi	r24, 0xFF	; 255
    51f4:	fa e0       	ldi	r31, 0x0A	; 10
    51f6:	cf 1a       	sub	r12, r31
    51f8:	d1 08       	sbc	r13, r1
    51fa:	f7 cf       	rjmp	.-18     	; 0x51ea <vfprintf+0x42a>
    51fc:	b7 01       	movw	r22, r14
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	50 d3       	rcall	.+1696   	; 0x58a2 <fputc>
    5202:	b7 01       	movw	r22, r14
    5204:	c6 01       	movw	r24, r12
    5206:	c0 96       	adiw	r24, 0x30	; 48
    5208:	4c d3       	rcall	.+1688   	; 0x58a2 <fputc>
    520a:	36 c1       	rjmp	.+620    	; 0x5478 <vfprintf+0x6b8>
    520c:	83 36       	cpi	r24, 0x63	; 99
    520e:	31 f0       	breq	.+12     	; 0x521c <vfprintf+0x45c>
    5210:	83 37       	cpi	r24, 0x73	; 115
    5212:	79 f0       	breq	.+30     	; 0x5232 <vfprintf+0x472>
    5214:	83 35       	cpi	r24, 0x53	; 83
    5216:	09 f0       	breq	.+2      	; 0x521a <vfprintf+0x45a>
    5218:	54 c0       	rjmp	.+168    	; 0x52c2 <vfprintf+0x502>
    521a:	20 c0       	rjmp	.+64     	; 0x525c <vfprintf+0x49c>
    521c:	56 01       	movw	r10, r12
    521e:	72 e0       	ldi	r23, 0x02	; 2
    5220:	a7 0e       	add	r10, r23
    5222:	b1 1c       	adc	r11, r1
    5224:	f6 01       	movw	r30, r12
    5226:	80 81       	ld	r24, Z
    5228:	89 83       	std	Y+1, r24	; 0x01
    522a:	01 e0       	ldi	r16, 0x01	; 1
    522c:	10 e0       	ldi	r17, 0x00	; 0
    522e:	64 01       	movw	r12, r8
    5230:	13 c0       	rjmp	.+38     	; 0x5258 <vfprintf+0x498>
    5232:	56 01       	movw	r10, r12
    5234:	f2 e0       	ldi	r31, 0x02	; 2
    5236:	af 0e       	add	r10, r31
    5238:	b1 1c       	adc	r11, r1
    523a:	f6 01       	movw	r30, r12
    523c:	c0 80       	ld	r12, Z
    523e:	d1 80       	ldd	r13, Z+1	; 0x01
    5240:	26 ff       	sbrs	r18, 6
    5242:	03 c0       	rjmp	.+6      	; 0x524a <vfprintf+0x48a>
    5244:	61 2f       	mov	r22, r17
    5246:	70 e0       	ldi	r23, 0x00	; 0
    5248:	02 c0       	rjmp	.+4      	; 0x524e <vfprintf+0x48e>
    524a:	6f ef       	ldi	r22, 0xFF	; 255
    524c:	7f ef       	ldi	r23, 0xFF	; 255
    524e:	c6 01       	movw	r24, r12
    5250:	2b 8b       	std	Y+19, r18	; 0x13
    5252:	f9 d2       	rcall	.+1522   	; 0x5846 <strnlen>
    5254:	8c 01       	movw	r16, r24
    5256:	2b 89       	ldd	r18, Y+19	; 0x13
    5258:	2f 77       	andi	r18, 0x7F	; 127
    525a:	14 c0       	rjmp	.+40     	; 0x5284 <vfprintf+0x4c4>
    525c:	56 01       	movw	r10, r12
    525e:	f2 e0       	ldi	r31, 0x02	; 2
    5260:	af 0e       	add	r10, r31
    5262:	b1 1c       	adc	r11, r1
    5264:	f6 01       	movw	r30, r12
    5266:	c0 80       	ld	r12, Z
    5268:	d1 80       	ldd	r13, Z+1	; 0x01
    526a:	26 ff       	sbrs	r18, 6
    526c:	03 c0       	rjmp	.+6      	; 0x5274 <vfprintf+0x4b4>
    526e:	61 2f       	mov	r22, r17
    5270:	70 e0       	ldi	r23, 0x00	; 0
    5272:	02 c0       	rjmp	.+4      	; 0x5278 <vfprintf+0x4b8>
    5274:	6f ef       	ldi	r22, 0xFF	; 255
    5276:	7f ef       	ldi	r23, 0xFF	; 255
    5278:	c6 01       	movw	r24, r12
    527a:	2b 8b       	std	Y+19, r18	; 0x13
    527c:	8d d2       	rcall	.+1306   	; 0x5798 <strnlen_P>
    527e:	8c 01       	movw	r16, r24
    5280:	2b 89       	ldd	r18, Y+19	; 0x13
    5282:	20 68       	ori	r18, 0x80	; 128
    5284:	72 2e       	mov	r7, r18
    5286:	23 fd       	sbrc	r18, 3
    5288:	18 c0       	rjmp	.+48     	; 0x52ba <vfprintf+0x4fa>
    528a:	85 2d       	mov	r24, r5
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	08 17       	cp	r16, r24
    5290:	19 07       	cpc	r17, r25
    5292:	98 f4       	brcc	.+38     	; 0x52ba <vfprintf+0x4fa>
    5294:	b7 01       	movw	r22, r14
    5296:	80 e2       	ldi	r24, 0x20	; 32
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	03 d3       	rcall	.+1542   	; 0x58a2 <fputc>
    529c:	5a 94       	dec	r5
    529e:	f5 cf       	rjmp	.-22     	; 0x528a <vfprintf+0x4ca>
    52a0:	f6 01       	movw	r30, r12
    52a2:	77 fc       	sbrc	r7, 7
    52a4:	85 91       	lpm	r24, Z+
    52a6:	77 fe       	sbrs	r7, 7
    52a8:	81 91       	ld	r24, Z+
    52aa:	6f 01       	movw	r12, r30
    52ac:	b7 01       	movw	r22, r14
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	f8 d2       	rcall	.+1520   	; 0x58a2 <fputc>
    52b2:	51 10       	cpse	r5, r1
    52b4:	5a 94       	dec	r5
    52b6:	01 50       	subi	r16, 0x01	; 1
    52b8:	11 09       	sbc	r17, r1
    52ba:	01 15       	cp	r16, r1
    52bc:	11 05       	cpc	r17, r1
    52be:	81 f7       	brne	.-32     	; 0x52a0 <vfprintf+0x4e0>
    52c0:	db c0       	rjmp	.+438    	; 0x5478 <vfprintf+0x6b8>
    52c2:	84 36       	cpi	r24, 0x64	; 100
    52c4:	11 f0       	breq	.+4      	; 0x52ca <vfprintf+0x50a>
    52c6:	89 36       	cpi	r24, 0x69	; 105
    52c8:	49 f5       	brne	.+82     	; 0x531c <vfprintf+0x55c>
    52ca:	56 01       	movw	r10, r12
    52cc:	27 ff       	sbrs	r18, 7
    52ce:	09 c0       	rjmp	.+18     	; 0x52e2 <vfprintf+0x522>
    52d0:	f4 e0       	ldi	r31, 0x04	; 4
    52d2:	af 0e       	add	r10, r31
    52d4:	b1 1c       	adc	r11, r1
    52d6:	f6 01       	movw	r30, r12
    52d8:	60 81       	ld	r22, Z
    52da:	71 81       	ldd	r23, Z+1	; 0x01
    52dc:	82 81       	ldd	r24, Z+2	; 0x02
    52de:	93 81       	ldd	r25, Z+3	; 0x03
    52e0:	0a c0       	rjmp	.+20     	; 0x52f6 <vfprintf+0x536>
    52e2:	f2 e0       	ldi	r31, 0x02	; 2
    52e4:	af 0e       	add	r10, r31
    52e6:	b1 1c       	adc	r11, r1
    52e8:	f6 01       	movw	r30, r12
    52ea:	60 81       	ld	r22, Z
    52ec:	71 81       	ldd	r23, Z+1	; 0x01
    52ee:	88 27       	eor	r24, r24
    52f0:	77 fd       	sbrc	r23, 7
    52f2:	80 95       	com	r24
    52f4:	98 2f       	mov	r25, r24
    52f6:	02 2f       	mov	r16, r18
    52f8:	0f 76       	andi	r16, 0x6F	; 111
    52fa:	97 ff       	sbrs	r25, 7
    52fc:	08 c0       	rjmp	.+16     	; 0x530e <vfprintf+0x54e>
    52fe:	90 95       	com	r25
    5300:	80 95       	com	r24
    5302:	70 95       	com	r23
    5304:	61 95       	neg	r22
    5306:	7f 4f       	sbci	r23, 0xFF	; 255
    5308:	8f 4f       	sbci	r24, 0xFF	; 255
    530a:	9f 4f       	sbci	r25, 0xFF	; 255
    530c:	00 68       	ori	r16, 0x80	; 128
    530e:	2a e0       	ldi	r18, 0x0A	; 10
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	a4 01       	movw	r20, r8
    5314:	20 d3       	rcall	.+1600   	; 0x5956 <__ultoa_invert>
    5316:	c8 2e       	mov	r12, r24
    5318:	c8 18       	sub	r12, r8
    531a:	3d c0       	rjmp	.+122    	; 0x5396 <vfprintf+0x5d6>
    531c:	02 2f       	mov	r16, r18
    531e:	85 37       	cpi	r24, 0x75	; 117
    5320:	21 f4       	brne	.+8      	; 0x532a <vfprintf+0x56a>
    5322:	0f 7e       	andi	r16, 0xEF	; 239
    5324:	2a e0       	ldi	r18, 0x0A	; 10
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	1d c0       	rjmp	.+58     	; 0x5364 <vfprintf+0x5a4>
    532a:	09 7f       	andi	r16, 0xF9	; 249
    532c:	8f 36       	cpi	r24, 0x6F	; 111
    532e:	91 f0       	breq	.+36     	; 0x5354 <vfprintf+0x594>
    5330:	18 f4       	brcc	.+6      	; 0x5338 <vfprintf+0x578>
    5332:	88 35       	cpi	r24, 0x58	; 88
    5334:	59 f0       	breq	.+22     	; 0x534c <vfprintf+0x58c>
    5336:	a9 c0       	rjmp	.+338    	; 0x548a <vfprintf+0x6ca>
    5338:	80 37       	cpi	r24, 0x70	; 112
    533a:	19 f0       	breq	.+6      	; 0x5342 <vfprintf+0x582>
    533c:	88 37       	cpi	r24, 0x78	; 120
    533e:	11 f0       	breq	.+4      	; 0x5344 <vfprintf+0x584>
    5340:	a4 c0       	rjmp	.+328    	; 0x548a <vfprintf+0x6ca>
    5342:	00 61       	ori	r16, 0x10	; 16
    5344:	04 ff       	sbrs	r16, 4
    5346:	09 c0       	rjmp	.+18     	; 0x535a <vfprintf+0x59a>
    5348:	04 60       	ori	r16, 0x04	; 4
    534a:	07 c0       	rjmp	.+14     	; 0x535a <vfprintf+0x59a>
    534c:	24 ff       	sbrs	r18, 4
    534e:	08 c0       	rjmp	.+16     	; 0x5360 <vfprintf+0x5a0>
    5350:	06 60       	ori	r16, 0x06	; 6
    5352:	06 c0       	rjmp	.+12     	; 0x5360 <vfprintf+0x5a0>
    5354:	28 e0       	ldi	r18, 0x08	; 8
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	05 c0       	rjmp	.+10     	; 0x5364 <vfprintf+0x5a4>
    535a:	20 e1       	ldi	r18, 0x10	; 16
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	02 c0       	rjmp	.+4      	; 0x5364 <vfprintf+0x5a4>
    5360:	20 e1       	ldi	r18, 0x10	; 16
    5362:	32 e0       	ldi	r19, 0x02	; 2
    5364:	56 01       	movw	r10, r12
    5366:	07 ff       	sbrs	r16, 7
    5368:	09 c0       	rjmp	.+18     	; 0x537c <vfprintf+0x5bc>
    536a:	f4 e0       	ldi	r31, 0x04	; 4
    536c:	af 0e       	add	r10, r31
    536e:	b1 1c       	adc	r11, r1
    5370:	f6 01       	movw	r30, r12
    5372:	60 81       	ld	r22, Z
    5374:	71 81       	ldd	r23, Z+1	; 0x01
    5376:	82 81       	ldd	r24, Z+2	; 0x02
    5378:	93 81       	ldd	r25, Z+3	; 0x03
    537a:	08 c0       	rjmp	.+16     	; 0x538c <vfprintf+0x5cc>
    537c:	f2 e0       	ldi	r31, 0x02	; 2
    537e:	af 0e       	add	r10, r31
    5380:	b1 1c       	adc	r11, r1
    5382:	f6 01       	movw	r30, r12
    5384:	60 81       	ld	r22, Z
    5386:	71 81       	ldd	r23, Z+1	; 0x01
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	a4 01       	movw	r20, r8
    538e:	e3 d2       	rcall	.+1478   	; 0x5956 <__ultoa_invert>
    5390:	c8 2e       	mov	r12, r24
    5392:	c8 18       	sub	r12, r8
    5394:	0f 77       	andi	r16, 0x7F	; 127
    5396:	06 ff       	sbrs	r16, 6
    5398:	0b c0       	rjmp	.+22     	; 0x53b0 <vfprintf+0x5f0>
    539a:	20 2f       	mov	r18, r16
    539c:	2e 7f       	andi	r18, 0xFE	; 254
    539e:	c1 16       	cp	r12, r17
    53a0:	50 f4       	brcc	.+20     	; 0x53b6 <vfprintf+0x5f6>
    53a2:	04 ff       	sbrs	r16, 4
    53a4:	0a c0       	rjmp	.+20     	; 0x53ba <vfprintf+0x5fa>
    53a6:	02 fd       	sbrc	r16, 2
    53a8:	08 c0       	rjmp	.+16     	; 0x53ba <vfprintf+0x5fa>
    53aa:	20 2f       	mov	r18, r16
    53ac:	2e 7e       	andi	r18, 0xEE	; 238
    53ae:	05 c0       	rjmp	.+10     	; 0x53ba <vfprintf+0x5fa>
    53b0:	dc 2c       	mov	r13, r12
    53b2:	20 2f       	mov	r18, r16
    53b4:	03 c0       	rjmp	.+6      	; 0x53bc <vfprintf+0x5fc>
    53b6:	dc 2c       	mov	r13, r12
    53b8:	01 c0       	rjmp	.+2      	; 0x53bc <vfprintf+0x5fc>
    53ba:	d1 2e       	mov	r13, r17
    53bc:	24 ff       	sbrs	r18, 4
    53be:	0d c0       	rjmp	.+26     	; 0x53da <vfprintf+0x61a>
    53c0:	fe 01       	movw	r30, r28
    53c2:	ec 0d       	add	r30, r12
    53c4:	f1 1d       	adc	r31, r1
    53c6:	80 81       	ld	r24, Z
    53c8:	80 33       	cpi	r24, 0x30	; 48
    53ca:	11 f4       	brne	.+4      	; 0x53d0 <vfprintf+0x610>
    53cc:	29 7e       	andi	r18, 0xE9	; 233
    53ce:	09 c0       	rjmp	.+18     	; 0x53e2 <vfprintf+0x622>
    53d0:	22 ff       	sbrs	r18, 2
    53d2:	06 c0       	rjmp	.+12     	; 0x53e0 <vfprintf+0x620>
    53d4:	d3 94       	inc	r13
    53d6:	d3 94       	inc	r13
    53d8:	04 c0       	rjmp	.+8      	; 0x53e2 <vfprintf+0x622>
    53da:	82 2f       	mov	r24, r18
    53dc:	86 78       	andi	r24, 0x86	; 134
    53de:	09 f0       	breq	.+2      	; 0x53e2 <vfprintf+0x622>
    53e0:	d3 94       	inc	r13
    53e2:	23 fd       	sbrc	r18, 3
    53e4:	12 c0       	rjmp	.+36     	; 0x540a <vfprintf+0x64a>
    53e6:	20 ff       	sbrs	r18, 0
    53e8:	06 c0       	rjmp	.+12     	; 0x53f6 <vfprintf+0x636>
    53ea:	1c 2d       	mov	r17, r12
    53ec:	d5 14       	cp	r13, r5
    53ee:	18 f4       	brcc	.+6      	; 0x53f6 <vfprintf+0x636>
    53f0:	15 0d       	add	r17, r5
    53f2:	1d 19       	sub	r17, r13
    53f4:	d5 2c       	mov	r13, r5
    53f6:	d5 14       	cp	r13, r5
    53f8:	60 f4       	brcc	.+24     	; 0x5412 <vfprintf+0x652>
    53fa:	b7 01       	movw	r22, r14
    53fc:	80 e2       	ldi	r24, 0x20	; 32
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	2b 8b       	std	Y+19, r18	; 0x13
    5402:	4f d2       	rcall	.+1182   	; 0x58a2 <fputc>
    5404:	d3 94       	inc	r13
    5406:	2b 89       	ldd	r18, Y+19	; 0x13
    5408:	f6 cf       	rjmp	.-20     	; 0x53f6 <vfprintf+0x636>
    540a:	d5 14       	cp	r13, r5
    540c:	10 f4       	brcc	.+4      	; 0x5412 <vfprintf+0x652>
    540e:	5d 18       	sub	r5, r13
    5410:	01 c0       	rjmp	.+2      	; 0x5414 <vfprintf+0x654>
    5412:	51 2c       	mov	r5, r1
    5414:	24 ff       	sbrs	r18, 4
    5416:	11 c0       	rjmp	.+34     	; 0x543a <vfprintf+0x67a>
    5418:	b7 01       	movw	r22, r14
    541a:	80 e3       	ldi	r24, 0x30	; 48
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	2b 8b       	std	Y+19, r18	; 0x13
    5420:	40 d2       	rcall	.+1152   	; 0x58a2 <fputc>
    5422:	2b 89       	ldd	r18, Y+19	; 0x13
    5424:	22 ff       	sbrs	r18, 2
    5426:	16 c0       	rjmp	.+44     	; 0x5454 <vfprintf+0x694>
    5428:	21 ff       	sbrs	r18, 1
    542a:	03 c0       	rjmp	.+6      	; 0x5432 <vfprintf+0x672>
    542c:	88 e5       	ldi	r24, 0x58	; 88
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	02 c0       	rjmp	.+4      	; 0x5436 <vfprintf+0x676>
    5432:	88 e7       	ldi	r24, 0x78	; 120
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	b7 01       	movw	r22, r14
    5438:	0c c0       	rjmp	.+24     	; 0x5452 <vfprintf+0x692>
    543a:	82 2f       	mov	r24, r18
    543c:	86 78       	andi	r24, 0x86	; 134
    543e:	51 f0       	breq	.+20     	; 0x5454 <vfprintf+0x694>
    5440:	21 fd       	sbrc	r18, 1
    5442:	02 c0       	rjmp	.+4      	; 0x5448 <vfprintf+0x688>
    5444:	80 e2       	ldi	r24, 0x20	; 32
    5446:	01 c0       	rjmp	.+2      	; 0x544a <vfprintf+0x68a>
    5448:	8b e2       	ldi	r24, 0x2B	; 43
    544a:	27 fd       	sbrc	r18, 7
    544c:	8d e2       	ldi	r24, 0x2D	; 45
    544e:	b7 01       	movw	r22, r14
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	27 d2       	rcall	.+1102   	; 0x58a2 <fputc>
    5454:	c1 16       	cp	r12, r17
    5456:	30 f4       	brcc	.+12     	; 0x5464 <vfprintf+0x6a4>
    5458:	b7 01       	movw	r22, r14
    545a:	80 e3       	ldi	r24, 0x30	; 48
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	21 d2       	rcall	.+1090   	; 0x58a2 <fputc>
    5460:	11 50       	subi	r17, 0x01	; 1
    5462:	f8 cf       	rjmp	.-16     	; 0x5454 <vfprintf+0x694>
    5464:	ca 94       	dec	r12
    5466:	f4 01       	movw	r30, r8
    5468:	ec 0d       	add	r30, r12
    546a:	f1 1d       	adc	r31, r1
    546c:	80 81       	ld	r24, Z
    546e:	b7 01       	movw	r22, r14
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	17 d2       	rcall	.+1070   	; 0x58a2 <fputc>
    5474:	c1 10       	cpse	r12, r1
    5476:	f6 cf       	rjmp	.-20     	; 0x5464 <vfprintf+0x6a4>
    5478:	55 20       	and	r5, r5
    547a:	09 f4       	brne	.+2      	; 0x547e <vfprintf+0x6be>
    547c:	dd cc       	rjmp	.-1606   	; 0x4e38 <vfprintf+0x78>
    547e:	b7 01       	movw	r22, r14
    5480:	80 e2       	ldi	r24, 0x20	; 32
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	0e d2       	rcall	.+1052   	; 0x58a2 <fputc>
    5486:	5a 94       	dec	r5
    5488:	f7 cf       	rjmp	.-18     	; 0x5478 <vfprintf+0x6b8>
    548a:	f7 01       	movw	r30, r14
    548c:	86 81       	ldd	r24, Z+6	; 0x06
    548e:	97 81       	ldd	r25, Z+7	; 0x07
    5490:	02 c0       	rjmp	.+4      	; 0x5496 <vfprintf+0x6d6>
    5492:	8f ef       	ldi	r24, 0xFF	; 255
    5494:	9f ef       	ldi	r25, 0xFF	; 255
    5496:	63 96       	adiw	r28, 0x13	; 19
    5498:	cd bf       	out	0x3d, r28	; 61
    549a:	de bf       	out	0x3e, r29	; 62
    549c:	df 91       	pop	r29
    549e:	cf 91       	pop	r28
    54a0:	1f 91       	pop	r17
    54a2:	0f 91       	pop	r16
    54a4:	ff 90       	pop	r15
    54a6:	ef 90       	pop	r14
    54a8:	df 90       	pop	r13
    54aa:	cf 90       	pop	r12
    54ac:	bf 90       	pop	r11
    54ae:	af 90       	pop	r10
    54b0:	9f 90       	pop	r9
    54b2:	8f 90       	pop	r8
    54b4:	7f 90       	pop	r7
    54b6:	6f 90       	pop	r6
    54b8:	5f 90       	pop	r5
    54ba:	4f 90       	pop	r4
    54bc:	3f 90       	pop	r3
    54be:	2f 90       	pop	r2
    54c0:	08 95       	ret

000054c2 <__divmodhi4>:
    54c2:	97 fb       	bst	r25, 7
    54c4:	07 2e       	mov	r0, r23
    54c6:	16 f4       	brtc	.+4      	; 0x54cc <__divmodhi4+0xa>
    54c8:	00 94       	com	r0
    54ca:	06 d0       	rcall	.+12     	; 0x54d8 <__divmodhi4_neg1>
    54cc:	77 fd       	sbrc	r23, 7
    54ce:	08 d0       	rcall	.+16     	; 0x54e0 <__divmodhi4_neg2>
    54d0:	20 d0       	rcall	.+64     	; 0x5512 <__udivmodhi4>
    54d2:	07 fc       	sbrc	r0, 7
    54d4:	05 d0       	rcall	.+10     	; 0x54e0 <__divmodhi4_neg2>
    54d6:	3e f4       	brtc	.+14     	; 0x54e6 <__divmodhi4_exit>

000054d8 <__divmodhi4_neg1>:
    54d8:	90 95       	com	r25
    54da:	81 95       	neg	r24
    54dc:	9f 4f       	sbci	r25, 0xFF	; 255
    54de:	08 95       	ret

000054e0 <__divmodhi4_neg2>:
    54e0:	70 95       	com	r23
    54e2:	61 95       	neg	r22
    54e4:	7f 4f       	sbci	r23, 0xFF	; 255

000054e6 <__divmodhi4_exit>:
    54e6:	08 95       	ret

000054e8 <__tablejump2__>:
    54e8:	ee 0f       	add	r30, r30
    54ea:	ff 1f       	adc	r31, r31

000054ec <__tablejump__>:
    54ec:	05 90       	lpm	r0, Z+
    54ee:	f4 91       	lpm	r31, Z
    54f0:	e0 2d       	mov	r30, r0
    54f2:	19 94       	eijmp

000054f4 <__umulhisi3>:
    54f4:	a2 9f       	mul	r26, r18
    54f6:	b0 01       	movw	r22, r0
    54f8:	b3 9f       	mul	r27, r19
    54fa:	c0 01       	movw	r24, r0
    54fc:	a3 9f       	mul	r26, r19
    54fe:	70 0d       	add	r23, r0
    5500:	81 1d       	adc	r24, r1
    5502:	11 24       	eor	r1, r1
    5504:	91 1d       	adc	r25, r1
    5506:	b2 9f       	mul	r27, r18
    5508:	70 0d       	add	r23, r0
    550a:	81 1d       	adc	r24, r1
    550c:	11 24       	eor	r1, r1
    550e:	91 1d       	adc	r25, r1
    5510:	08 95       	ret

00005512 <__udivmodhi4>:
    5512:	aa 1b       	sub	r26, r26
    5514:	bb 1b       	sub	r27, r27
    5516:	51 e1       	ldi	r21, 0x11	; 17
    5518:	07 c0       	rjmp	.+14     	; 0x5528 <__udivmodhi4_ep>

0000551a <__udivmodhi4_loop>:
    551a:	aa 1f       	adc	r26, r26
    551c:	bb 1f       	adc	r27, r27
    551e:	a6 17       	cp	r26, r22
    5520:	b7 07       	cpc	r27, r23
    5522:	10 f0       	brcs	.+4      	; 0x5528 <__udivmodhi4_ep>
    5524:	a6 1b       	sub	r26, r22
    5526:	b7 0b       	sbc	r27, r23

00005528 <__udivmodhi4_ep>:
    5528:	88 1f       	adc	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	5a 95       	dec	r21
    552e:	a9 f7       	brne	.-22     	; 0x551a <__udivmodhi4_loop>
    5530:	80 95       	com	r24
    5532:	90 95       	com	r25
    5534:	bc 01       	movw	r22, r24
    5536:	cd 01       	movw	r24, r26
    5538:	08 95       	ret

0000553a <do_rand>:
    553a:	8f 92       	push	r8
    553c:	9f 92       	push	r9
    553e:	af 92       	push	r10
    5540:	bf 92       	push	r11
    5542:	cf 92       	push	r12
    5544:	df 92       	push	r13
    5546:	ef 92       	push	r14
    5548:	ff 92       	push	r15
    554a:	cf 93       	push	r28
    554c:	df 93       	push	r29
    554e:	ec 01       	movw	r28, r24
    5550:	68 81       	ld	r22, Y
    5552:	79 81       	ldd	r23, Y+1	; 0x01
    5554:	8a 81       	ldd	r24, Y+2	; 0x02
    5556:	9b 81       	ldd	r25, Y+3	; 0x03
    5558:	61 15       	cp	r22, r1
    555a:	71 05       	cpc	r23, r1
    555c:	81 05       	cpc	r24, r1
    555e:	91 05       	cpc	r25, r1
    5560:	21 f4       	brne	.+8      	; 0x556a <do_rand+0x30>
    5562:	64 e2       	ldi	r22, 0x24	; 36
    5564:	79 ed       	ldi	r23, 0xD9	; 217
    5566:	8b e5       	ldi	r24, 0x5B	; 91
    5568:	97 e0       	ldi	r25, 0x07	; 7
    556a:	2d e1       	ldi	r18, 0x1D	; 29
    556c:	33 ef       	ldi	r19, 0xF3	; 243
    556e:	41 e0       	ldi	r20, 0x01	; 1
    5570:	50 e0       	ldi	r21, 0x00	; 0
    5572:	5f d2       	rcall	.+1214   	; 0x5a32 <__divmodsi4>
    5574:	49 01       	movw	r8, r18
    5576:	5a 01       	movw	r10, r20
    5578:	9b 01       	movw	r18, r22
    557a:	ac 01       	movw	r20, r24
    557c:	a7 ea       	ldi	r26, 0xA7	; 167
    557e:	b1 e4       	ldi	r27, 0x41	; 65
    5580:	74 d2       	rcall	.+1256   	; 0x5a6a <__muluhisi3>
    5582:	6b 01       	movw	r12, r22
    5584:	7c 01       	movw	r14, r24
    5586:	ac ee       	ldi	r26, 0xEC	; 236
    5588:	b4 ef       	ldi	r27, 0xF4	; 244
    558a:	a5 01       	movw	r20, r10
    558c:	94 01       	movw	r18, r8
    558e:	79 d2       	rcall	.+1266   	; 0x5a82 <__mulohisi3>
    5590:	c6 0e       	add	r12, r22
    5592:	d7 1e       	adc	r13, r23
    5594:	e8 1e       	adc	r14, r24
    5596:	f9 1e       	adc	r15, r25
    5598:	f7 fe       	sbrs	r15, 7
    559a:	06 c0       	rjmp	.+12     	; 0x55a8 <do_rand+0x6e>
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	c8 1a       	sub	r12, r24
    55a0:	d1 08       	sbc	r13, r1
    55a2:	e1 08       	sbc	r14, r1
    55a4:	80 e8       	ldi	r24, 0x80	; 128
    55a6:	f8 0a       	sbc	r15, r24
    55a8:	c8 82       	st	Y, r12
    55aa:	d9 82       	std	Y+1, r13	; 0x01
    55ac:	ea 82       	std	Y+2, r14	; 0x02
    55ae:	fb 82       	std	Y+3, r15	; 0x03
    55b0:	c6 01       	movw	r24, r12
    55b2:	9f 77       	andi	r25, 0x7F	; 127
    55b4:	df 91       	pop	r29
    55b6:	cf 91       	pop	r28
    55b8:	ff 90       	pop	r15
    55ba:	ef 90       	pop	r14
    55bc:	df 90       	pop	r13
    55be:	cf 90       	pop	r12
    55c0:	bf 90       	pop	r11
    55c2:	af 90       	pop	r10
    55c4:	9f 90       	pop	r9
    55c6:	8f 90       	pop	r8
    55c8:	08 95       	ret

000055ca <rand_r>:
    55ca:	b7 cf       	rjmp	.-146    	; 0x553a <do_rand>

000055cc <rand>:
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	90 e2       	ldi	r25, 0x20	; 32
    55d0:	b4 cf       	rjmp	.-152    	; 0x553a <do_rand>

000055d2 <srand>:
    55d2:	a0 e0       	ldi	r26, 0x00	; 0
    55d4:	b0 e0       	ldi	r27, 0x00	; 0
    55d6:	80 93 00 20 	sts	0x2000, r24
    55da:	90 93 01 20 	sts	0x2001, r25
    55de:	a0 93 02 20 	sts	0x2002, r26
    55e2:	b0 93 03 20 	sts	0x2003, r27
    55e6:	08 95       	ret

000055e8 <__ftoa_engine>:
    55e8:	28 30       	cpi	r18, 0x08	; 8
    55ea:	08 f0       	brcs	.+2      	; 0x55ee <__ftoa_engine+0x6>
    55ec:	27 e0       	ldi	r18, 0x07	; 7
    55ee:	33 27       	eor	r19, r19
    55f0:	da 01       	movw	r26, r20
    55f2:	99 0f       	add	r25, r25
    55f4:	31 1d       	adc	r19, r1
    55f6:	87 fd       	sbrc	r24, 7
    55f8:	91 60       	ori	r25, 0x01	; 1
    55fa:	00 96       	adiw	r24, 0x00	; 0
    55fc:	61 05       	cpc	r22, r1
    55fe:	71 05       	cpc	r23, r1
    5600:	39 f4       	brne	.+14     	; 0x5610 <__ftoa_engine+0x28>
    5602:	32 60       	ori	r19, 0x02	; 2
    5604:	2e 5f       	subi	r18, 0xFE	; 254
    5606:	3d 93       	st	X+, r19
    5608:	30 e3       	ldi	r19, 0x30	; 48
    560a:	2a 95       	dec	r18
    560c:	e1 f7       	brne	.-8      	; 0x5606 <__ftoa_engine+0x1e>
    560e:	08 95       	ret
    5610:	9f 3f       	cpi	r25, 0xFF	; 255
    5612:	30 f0       	brcs	.+12     	; 0x5620 <__ftoa_engine+0x38>
    5614:	80 38       	cpi	r24, 0x80	; 128
    5616:	71 05       	cpc	r23, r1
    5618:	61 05       	cpc	r22, r1
    561a:	09 f0       	breq	.+2      	; 0x561e <__ftoa_engine+0x36>
    561c:	3c 5f       	subi	r19, 0xFC	; 252
    561e:	3c 5f       	subi	r19, 0xFC	; 252
    5620:	3d 93       	st	X+, r19
    5622:	91 30       	cpi	r25, 0x01	; 1
    5624:	08 f0       	brcs	.+2      	; 0x5628 <__ftoa_engine+0x40>
    5626:	80 68       	ori	r24, 0x80	; 128
    5628:	91 1d       	adc	r25, r1
    562a:	df 93       	push	r29
    562c:	cf 93       	push	r28
    562e:	1f 93       	push	r17
    5630:	0f 93       	push	r16
    5632:	ff 92       	push	r15
    5634:	ef 92       	push	r14
    5636:	19 2f       	mov	r17, r25
    5638:	98 7f       	andi	r25, 0xF8	; 248
    563a:	96 95       	lsr	r25
    563c:	e9 2f       	mov	r30, r25
    563e:	96 95       	lsr	r25
    5640:	96 95       	lsr	r25
    5642:	e9 0f       	add	r30, r25
    5644:	ff 27       	eor	r31, r31
    5646:	e4 59       	subi	r30, 0x94	; 148
    5648:	f9 4f       	sbci	r31, 0xF9	; 249
    564a:	99 27       	eor	r25, r25
    564c:	33 27       	eor	r19, r19
    564e:	ee 24       	eor	r14, r14
    5650:	ff 24       	eor	r15, r15
    5652:	a7 01       	movw	r20, r14
    5654:	e7 01       	movw	r28, r14
    5656:	05 90       	lpm	r0, Z+
    5658:	08 94       	sec
    565a:	07 94       	ror	r0
    565c:	28 f4       	brcc	.+10     	; 0x5668 <__ftoa_engine+0x80>
    565e:	36 0f       	add	r19, r22
    5660:	e7 1e       	adc	r14, r23
    5662:	f8 1e       	adc	r15, r24
    5664:	49 1f       	adc	r20, r25
    5666:	51 1d       	adc	r21, r1
    5668:	66 0f       	add	r22, r22
    566a:	77 1f       	adc	r23, r23
    566c:	88 1f       	adc	r24, r24
    566e:	99 1f       	adc	r25, r25
    5670:	06 94       	lsr	r0
    5672:	a1 f7       	brne	.-24     	; 0x565c <__ftoa_engine+0x74>
    5674:	05 90       	lpm	r0, Z+
    5676:	07 94       	ror	r0
    5678:	28 f4       	brcc	.+10     	; 0x5684 <__ftoa_engine+0x9c>
    567a:	e7 0e       	add	r14, r23
    567c:	f8 1e       	adc	r15, r24
    567e:	49 1f       	adc	r20, r25
    5680:	56 1f       	adc	r21, r22
    5682:	c1 1d       	adc	r28, r1
    5684:	77 0f       	add	r23, r23
    5686:	88 1f       	adc	r24, r24
    5688:	99 1f       	adc	r25, r25
    568a:	66 1f       	adc	r22, r22
    568c:	06 94       	lsr	r0
    568e:	a1 f7       	brne	.-24     	; 0x5678 <__ftoa_engine+0x90>
    5690:	05 90       	lpm	r0, Z+
    5692:	07 94       	ror	r0
    5694:	28 f4       	brcc	.+10     	; 0x56a0 <__ftoa_engine+0xb8>
    5696:	f8 0e       	add	r15, r24
    5698:	49 1f       	adc	r20, r25
    569a:	56 1f       	adc	r21, r22
    569c:	c7 1f       	adc	r28, r23
    569e:	d1 1d       	adc	r29, r1
    56a0:	88 0f       	add	r24, r24
    56a2:	99 1f       	adc	r25, r25
    56a4:	66 1f       	adc	r22, r22
    56a6:	77 1f       	adc	r23, r23
    56a8:	06 94       	lsr	r0
    56aa:	a1 f7       	brne	.-24     	; 0x5694 <__ftoa_engine+0xac>
    56ac:	05 90       	lpm	r0, Z+
    56ae:	07 94       	ror	r0
    56b0:	20 f4       	brcc	.+8      	; 0x56ba <__ftoa_engine+0xd2>
    56b2:	49 0f       	add	r20, r25
    56b4:	56 1f       	adc	r21, r22
    56b6:	c7 1f       	adc	r28, r23
    56b8:	d8 1f       	adc	r29, r24
    56ba:	99 0f       	add	r25, r25
    56bc:	66 1f       	adc	r22, r22
    56be:	77 1f       	adc	r23, r23
    56c0:	88 1f       	adc	r24, r24
    56c2:	06 94       	lsr	r0
    56c4:	a9 f7       	brne	.-22     	; 0x56b0 <__ftoa_engine+0xc8>
    56c6:	84 91       	lpm	r24, Z
    56c8:	10 95       	com	r17
    56ca:	17 70       	andi	r17, 0x07	; 7
    56cc:	41 f0       	breq	.+16     	; 0x56de <__ftoa_engine+0xf6>
    56ce:	d6 95       	lsr	r29
    56d0:	c7 95       	ror	r28
    56d2:	57 95       	ror	r21
    56d4:	47 95       	ror	r20
    56d6:	f7 94       	ror	r15
    56d8:	e7 94       	ror	r14
    56da:	1a 95       	dec	r17
    56dc:	c1 f7       	brne	.-16     	; 0x56ce <__ftoa_engine+0xe6>
    56de:	e2 e1       	ldi	r30, 0x12	; 18
    56e0:	f6 e0       	ldi	r31, 0x06	; 6
    56e2:	68 94       	set
    56e4:	15 90       	lpm	r1, Z+
    56e6:	15 91       	lpm	r17, Z+
    56e8:	35 91       	lpm	r19, Z+
    56ea:	65 91       	lpm	r22, Z+
    56ec:	95 91       	lpm	r25, Z+
    56ee:	05 90       	lpm	r0, Z+
    56f0:	7f e2       	ldi	r23, 0x2F	; 47
    56f2:	73 95       	inc	r23
    56f4:	e1 18       	sub	r14, r1
    56f6:	f1 0a       	sbc	r15, r17
    56f8:	43 0b       	sbc	r20, r19
    56fa:	56 0b       	sbc	r21, r22
    56fc:	c9 0b       	sbc	r28, r25
    56fe:	d0 09       	sbc	r29, r0
    5700:	c0 f7       	brcc	.-16     	; 0x56f2 <__ftoa_engine+0x10a>
    5702:	e1 0c       	add	r14, r1
    5704:	f1 1e       	adc	r15, r17
    5706:	43 1f       	adc	r20, r19
    5708:	56 1f       	adc	r21, r22
    570a:	c9 1f       	adc	r28, r25
    570c:	d0 1d       	adc	r29, r0
    570e:	7e f4       	brtc	.+30     	; 0x572e <__ftoa_engine+0x146>
    5710:	70 33       	cpi	r23, 0x30	; 48
    5712:	11 f4       	brne	.+4      	; 0x5718 <__ftoa_engine+0x130>
    5714:	8a 95       	dec	r24
    5716:	e6 cf       	rjmp	.-52     	; 0x56e4 <__ftoa_engine+0xfc>
    5718:	e8 94       	clt
    571a:	01 50       	subi	r16, 0x01	; 1
    571c:	30 f0       	brcs	.+12     	; 0x572a <__ftoa_engine+0x142>
    571e:	08 0f       	add	r16, r24
    5720:	0a f4       	brpl	.+2      	; 0x5724 <__ftoa_engine+0x13c>
    5722:	00 27       	eor	r16, r16
    5724:	02 17       	cp	r16, r18
    5726:	08 f4       	brcc	.+2      	; 0x572a <__ftoa_engine+0x142>
    5728:	20 2f       	mov	r18, r16
    572a:	23 95       	inc	r18
    572c:	02 2f       	mov	r16, r18
    572e:	7a 33       	cpi	r23, 0x3A	; 58
    5730:	28 f0       	brcs	.+10     	; 0x573c <__ftoa_engine+0x154>
    5732:	79 e3       	ldi	r23, 0x39	; 57
    5734:	7d 93       	st	X+, r23
    5736:	2a 95       	dec	r18
    5738:	e9 f7       	brne	.-6      	; 0x5734 <__ftoa_engine+0x14c>
    573a:	10 c0       	rjmp	.+32     	; 0x575c <__ftoa_engine+0x174>
    573c:	7d 93       	st	X+, r23
    573e:	2a 95       	dec	r18
    5740:	89 f6       	brne	.-94     	; 0x56e4 <__ftoa_engine+0xfc>
    5742:	06 94       	lsr	r0
    5744:	97 95       	ror	r25
    5746:	67 95       	ror	r22
    5748:	37 95       	ror	r19
    574a:	17 95       	ror	r17
    574c:	17 94       	ror	r1
    574e:	e1 18       	sub	r14, r1
    5750:	f1 0a       	sbc	r15, r17
    5752:	43 0b       	sbc	r20, r19
    5754:	56 0b       	sbc	r21, r22
    5756:	c9 0b       	sbc	r28, r25
    5758:	d0 09       	sbc	r29, r0
    575a:	98 f0       	brcs	.+38     	; 0x5782 <__ftoa_engine+0x19a>
    575c:	23 95       	inc	r18
    575e:	7e 91       	ld	r23, -X
    5760:	73 95       	inc	r23
    5762:	7a 33       	cpi	r23, 0x3A	; 58
    5764:	08 f0       	brcs	.+2      	; 0x5768 <__ftoa_engine+0x180>
    5766:	70 e3       	ldi	r23, 0x30	; 48
    5768:	7c 93       	st	X, r23
    576a:	20 13       	cpse	r18, r16
    576c:	b8 f7       	brcc	.-18     	; 0x575c <__ftoa_engine+0x174>
    576e:	7e 91       	ld	r23, -X
    5770:	70 61       	ori	r23, 0x10	; 16
    5772:	7d 93       	st	X+, r23
    5774:	30 f0       	brcs	.+12     	; 0x5782 <__ftoa_engine+0x19a>
    5776:	83 95       	inc	r24
    5778:	71 e3       	ldi	r23, 0x31	; 49
    577a:	7d 93       	st	X+, r23
    577c:	70 e3       	ldi	r23, 0x30	; 48
    577e:	2a 95       	dec	r18
    5780:	e1 f7       	brne	.-8      	; 0x577a <__ftoa_engine+0x192>
    5782:	11 24       	eor	r1, r1
    5784:	ef 90       	pop	r14
    5786:	ff 90       	pop	r15
    5788:	0f 91       	pop	r16
    578a:	1f 91       	pop	r17
    578c:	cf 91       	pop	r28
    578e:	df 91       	pop	r29
    5790:	99 27       	eor	r25, r25
    5792:	87 fd       	sbrc	r24, 7
    5794:	90 95       	com	r25
    5796:	08 95       	ret

00005798 <strnlen_P>:
    5798:	fc 01       	movw	r30, r24
    579a:	05 90       	lpm	r0, Z+
    579c:	61 50       	subi	r22, 0x01	; 1
    579e:	70 40       	sbci	r23, 0x00	; 0
    57a0:	01 10       	cpse	r0, r1
    57a2:	d8 f7       	brcc	.-10     	; 0x579a <strnlen_P+0x2>
    57a4:	80 95       	com	r24
    57a6:	90 95       	com	r25
    57a8:	8e 0f       	add	r24, r30
    57aa:	9f 1f       	adc	r25, r31
    57ac:	08 95       	ret

000057ae <memcmp>:
    57ae:	fb 01       	movw	r30, r22
    57b0:	dc 01       	movw	r26, r24
    57b2:	04 c0       	rjmp	.+8      	; 0x57bc <memcmp+0xe>
    57b4:	8d 91       	ld	r24, X+
    57b6:	01 90       	ld	r0, Z+
    57b8:	80 19       	sub	r24, r0
    57ba:	21 f4       	brne	.+8      	; 0x57c4 <memcmp+0x16>
    57bc:	41 50       	subi	r20, 0x01	; 1
    57be:	50 40       	sbci	r21, 0x00	; 0
    57c0:	c8 f7       	brcc	.-14     	; 0x57b4 <memcmp+0x6>
    57c2:	88 1b       	sub	r24, r24
    57c4:	99 0b       	sbc	r25, r25
    57c6:	08 95       	ret

000057c8 <memcpy>:
    57c8:	fb 01       	movw	r30, r22
    57ca:	dc 01       	movw	r26, r24
    57cc:	02 c0       	rjmp	.+4      	; 0x57d2 <memcpy+0xa>
    57ce:	01 90       	ld	r0, Z+
    57d0:	0d 92       	st	X+, r0
    57d2:	41 50       	subi	r20, 0x01	; 1
    57d4:	50 40       	sbci	r21, 0x00	; 0
    57d6:	d8 f7       	brcc	.-10     	; 0x57ce <memcpy+0x6>
    57d8:	08 95       	ret

000057da <memset>:
    57da:	dc 01       	movw	r26, r24
    57dc:	01 c0       	rjmp	.+2      	; 0x57e0 <memset+0x6>
    57de:	6d 93       	st	X+, r22
    57e0:	41 50       	subi	r20, 0x01	; 1
    57e2:	50 40       	sbci	r21, 0x00	; 0
    57e4:	e0 f7       	brcc	.-8      	; 0x57de <memset+0x4>
    57e6:	08 95       	ret

000057e8 <strcat>:
    57e8:	fb 01       	movw	r30, r22
    57ea:	dc 01       	movw	r26, r24
    57ec:	0d 90       	ld	r0, X+
    57ee:	00 20       	and	r0, r0
    57f0:	e9 f7       	brne	.-6      	; 0x57ec <strcat+0x4>
    57f2:	11 97       	sbiw	r26, 0x01	; 1
    57f4:	01 90       	ld	r0, Z+
    57f6:	0d 92       	st	X+, r0
    57f8:	00 20       	and	r0, r0
    57fa:	e1 f7       	brne	.-8      	; 0x57f4 <strcat+0xc>
    57fc:	08 95       	ret

000057fe <strcpy>:
    57fe:	fb 01       	movw	r30, r22
    5800:	dc 01       	movw	r26, r24
    5802:	01 90       	ld	r0, Z+
    5804:	0d 92       	st	X+, r0
    5806:	00 20       	and	r0, r0
    5808:	e1 f7       	brne	.-8      	; 0x5802 <strcpy+0x4>
    580a:	08 95       	ret

0000580c <strncmp>:
    580c:	fb 01       	movw	r30, r22
    580e:	dc 01       	movw	r26, r24
    5810:	41 50       	subi	r20, 0x01	; 1
    5812:	50 40       	sbci	r21, 0x00	; 0
    5814:	30 f0       	brcs	.+12     	; 0x5822 <strncmp+0x16>
    5816:	8d 91       	ld	r24, X+
    5818:	01 90       	ld	r0, Z+
    581a:	80 19       	sub	r24, r0
    581c:	19 f4       	brne	.+6      	; 0x5824 <strncmp+0x18>
    581e:	00 20       	and	r0, r0
    5820:	b9 f7       	brne	.-18     	; 0x5810 <strncmp+0x4>
    5822:	88 1b       	sub	r24, r24
    5824:	99 0b       	sbc	r25, r25
    5826:	08 95       	ret

00005828 <strncpy>:
    5828:	fb 01       	movw	r30, r22
    582a:	dc 01       	movw	r26, r24
    582c:	41 50       	subi	r20, 0x01	; 1
    582e:	50 40       	sbci	r21, 0x00	; 0
    5830:	48 f0       	brcs	.+18     	; 0x5844 <strncpy+0x1c>
    5832:	01 90       	ld	r0, Z+
    5834:	0d 92       	st	X+, r0
    5836:	00 20       	and	r0, r0
    5838:	c9 f7       	brne	.-14     	; 0x582c <strncpy+0x4>
    583a:	01 c0       	rjmp	.+2      	; 0x583e <strncpy+0x16>
    583c:	1d 92       	st	X+, r1
    583e:	41 50       	subi	r20, 0x01	; 1
    5840:	50 40       	sbci	r21, 0x00	; 0
    5842:	e0 f7       	brcc	.-8      	; 0x583c <strncpy+0x14>
    5844:	08 95       	ret

00005846 <strnlen>:
    5846:	fc 01       	movw	r30, r24
    5848:	61 50       	subi	r22, 0x01	; 1
    584a:	70 40       	sbci	r23, 0x00	; 0
    584c:	01 90       	ld	r0, Z+
    584e:	01 10       	cpse	r0, r1
    5850:	d8 f7       	brcc	.-10     	; 0x5848 <strnlen+0x2>
    5852:	80 95       	com	r24
    5854:	90 95       	com	r25
    5856:	8e 0f       	add	r24, r30
    5858:	9f 1f       	adc	r25, r31
    585a:	08 95       	ret

0000585c <__itoa_ncheck>:
    585c:	bb 27       	eor	r27, r27
    585e:	4a 30       	cpi	r20, 0x0A	; 10
    5860:	31 f4       	brne	.+12     	; 0x586e <__itoa_ncheck+0x12>
    5862:	99 23       	and	r25, r25
    5864:	22 f4       	brpl	.+8      	; 0x586e <__itoa_ncheck+0x12>
    5866:	bd e2       	ldi	r27, 0x2D	; 45
    5868:	90 95       	com	r25
    586a:	81 95       	neg	r24
    586c:	9f 4f       	sbci	r25, 0xFF	; 255
    586e:	01 c0       	rjmp	.+2      	; 0x5872 <__utoa_common>

00005870 <__utoa_ncheck>:
    5870:	bb 27       	eor	r27, r27

00005872 <__utoa_common>:
    5872:	fb 01       	movw	r30, r22
    5874:	55 27       	eor	r21, r21
    5876:	aa 27       	eor	r26, r26
    5878:	88 0f       	add	r24, r24
    587a:	99 1f       	adc	r25, r25
    587c:	aa 1f       	adc	r26, r26
    587e:	a4 17       	cp	r26, r20
    5880:	10 f0       	brcs	.+4      	; 0x5886 <__utoa_common+0x14>
    5882:	a4 1b       	sub	r26, r20
    5884:	83 95       	inc	r24
    5886:	50 51       	subi	r21, 0x10	; 16
    5888:	b9 f7       	brne	.-18     	; 0x5878 <__utoa_common+0x6>
    588a:	a0 5d       	subi	r26, 0xD0	; 208
    588c:	aa 33       	cpi	r26, 0x3A	; 58
    588e:	08 f0       	brcs	.+2      	; 0x5892 <__utoa_common+0x20>
    5890:	a9 5d       	subi	r26, 0xD9	; 217
    5892:	a1 93       	st	Z+, r26
    5894:	00 97       	sbiw	r24, 0x00	; 0
    5896:	79 f7       	brne	.-34     	; 0x5876 <__utoa_common+0x4>
    5898:	b1 11       	cpse	r27, r1
    589a:	b1 93       	st	Z+, r27
    589c:	11 92       	st	Z+, r1
    589e:	cb 01       	movw	r24, r22
    58a0:	b8 c0       	rjmp	.+368    	; 0x5a12 <strrev>

000058a2 <fputc>:
    58a2:	0f 93       	push	r16
    58a4:	1f 93       	push	r17
    58a6:	cf 93       	push	r28
    58a8:	df 93       	push	r29
    58aa:	18 2f       	mov	r17, r24
    58ac:	09 2f       	mov	r16, r25
    58ae:	eb 01       	movw	r28, r22
    58b0:	8b 81       	ldd	r24, Y+3	; 0x03
    58b2:	81 fd       	sbrc	r24, 1
    58b4:	03 c0       	rjmp	.+6      	; 0x58bc <fputc+0x1a>
    58b6:	8f ef       	ldi	r24, 0xFF	; 255
    58b8:	9f ef       	ldi	r25, 0xFF	; 255
    58ba:	20 c0       	rjmp	.+64     	; 0x58fc <fputc+0x5a>
    58bc:	82 ff       	sbrs	r24, 2
    58be:	10 c0       	rjmp	.+32     	; 0x58e0 <fputc+0x3e>
    58c0:	4e 81       	ldd	r20, Y+6	; 0x06
    58c2:	5f 81       	ldd	r21, Y+7	; 0x07
    58c4:	2c 81       	ldd	r18, Y+4	; 0x04
    58c6:	3d 81       	ldd	r19, Y+5	; 0x05
    58c8:	42 17       	cp	r20, r18
    58ca:	53 07       	cpc	r21, r19
    58cc:	7c f4       	brge	.+30     	; 0x58ec <fputc+0x4a>
    58ce:	e8 81       	ld	r30, Y
    58d0:	f9 81       	ldd	r31, Y+1	; 0x01
    58d2:	9f 01       	movw	r18, r30
    58d4:	2f 5f       	subi	r18, 0xFF	; 255
    58d6:	3f 4f       	sbci	r19, 0xFF	; 255
    58d8:	28 83       	st	Y, r18
    58da:	39 83       	std	Y+1, r19	; 0x01
    58dc:	10 83       	st	Z, r17
    58de:	06 c0       	rjmp	.+12     	; 0x58ec <fputc+0x4a>
    58e0:	e8 85       	ldd	r30, Y+8	; 0x08
    58e2:	f9 85       	ldd	r31, Y+9	; 0x09
    58e4:	81 2f       	mov	r24, r17
    58e6:	19 95       	eicall
    58e8:	89 2b       	or	r24, r25
    58ea:	29 f7       	brne	.-54     	; 0x58b6 <fputc+0x14>
    58ec:	2e 81       	ldd	r18, Y+6	; 0x06
    58ee:	3f 81       	ldd	r19, Y+7	; 0x07
    58f0:	2f 5f       	subi	r18, 0xFF	; 255
    58f2:	3f 4f       	sbci	r19, 0xFF	; 255
    58f4:	2e 83       	std	Y+6, r18	; 0x06
    58f6:	3f 83       	std	Y+7, r19	; 0x07
    58f8:	81 2f       	mov	r24, r17
    58fa:	90 2f       	mov	r25, r16
    58fc:	df 91       	pop	r29
    58fe:	cf 91       	pop	r28
    5900:	1f 91       	pop	r17
    5902:	0f 91       	pop	r16
    5904:	08 95       	ret

00005906 <sprintf>:
    5906:	0f 93       	push	r16
    5908:	1f 93       	push	r17
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
    590e:	cd b7       	in	r28, 0x3d	; 61
    5910:	de b7       	in	r29, 0x3e	; 62
    5912:	2e 97       	sbiw	r28, 0x0e	; 14
    5914:	cd bf       	out	0x3d, r28	; 61
    5916:	de bf       	out	0x3e, r29	; 62
    5918:	0e 89       	ldd	r16, Y+22	; 0x16
    591a:	1f 89       	ldd	r17, Y+23	; 0x17
    591c:	86 e0       	ldi	r24, 0x06	; 6
    591e:	8c 83       	std	Y+4, r24	; 0x04
    5920:	09 83       	std	Y+1, r16	; 0x01
    5922:	1a 83       	std	Y+2, r17	; 0x02
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	9f e7       	ldi	r25, 0x7F	; 127
    5928:	8d 83       	std	Y+5, r24	; 0x05
    592a:	9e 83       	std	Y+6, r25	; 0x06
    592c:	ae 01       	movw	r20, r28
    592e:	46 5e       	subi	r20, 0xE6	; 230
    5930:	5f 4f       	sbci	r21, 0xFF	; 255
    5932:	68 8d       	ldd	r22, Y+24	; 0x18
    5934:	79 8d       	ldd	r23, Y+25	; 0x19
    5936:	ce 01       	movw	r24, r28
    5938:	01 96       	adiw	r24, 0x01	; 1
    593a:	42 da       	rcall	.-2940   	; 0x4dc0 <vfprintf>
    593c:	ef 81       	ldd	r30, Y+7	; 0x07
    593e:	f8 85       	ldd	r31, Y+8	; 0x08
    5940:	e0 0f       	add	r30, r16
    5942:	f1 1f       	adc	r31, r17
    5944:	10 82       	st	Z, r1
    5946:	2e 96       	adiw	r28, 0x0e	; 14
    5948:	cd bf       	out	0x3d, r28	; 61
    594a:	de bf       	out	0x3e, r29	; 62
    594c:	df 91       	pop	r29
    594e:	cf 91       	pop	r28
    5950:	1f 91       	pop	r17
    5952:	0f 91       	pop	r16
    5954:	08 95       	ret

00005956 <__ultoa_invert>:
    5956:	fa 01       	movw	r30, r20
    5958:	aa 27       	eor	r26, r26
    595a:	28 30       	cpi	r18, 0x08	; 8
    595c:	51 f1       	breq	.+84     	; 0x59b2 <__ultoa_invert+0x5c>
    595e:	20 31       	cpi	r18, 0x10	; 16
    5960:	81 f1       	breq	.+96     	; 0x59c2 <__ultoa_invert+0x6c>
    5962:	e8 94       	clt
    5964:	6f 93       	push	r22
    5966:	6e 7f       	andi	r22, 0xFE	; 254
    5968:	6e 5f       	subi	r22, 0xFE	; 254
    596a:	7f 4f       	sbci	r23, 0xFF	; 255
    596c:	8f 4f       	sbci	r24, 0xFF	; 255
    596e:	9f 4f       	sbci	r25, 0xFF	; 255
    5970:	af 4f       	sbci	r26, 0xFF	; 255
    5972:	b1 e0       	ldi	r27, 0x01	; 1
    5974:	3e d0       	rcall	.+124    	; 0x59f2 <__ultoa_invert+0x9c>
    5976:	b4 e0       	ldi	r27, 0x04	; 4
    5978:	3c d0       	rcall	.+120    	; 0x59f2 <__ultoa_invert+0x9c>
    597a:	67 0f       	add	r22, r23
    597c:	78 1f       	adc	r23, r24
    597e:	89 1f       	adc	r24, r25
    5980:	9a 1f       	adc	r25, r26
    5982:	a1 1d       	adc	r26, r1
    5984:	68 0f       	add	r22, r24
    5986:	79 1f       	adc	r23, r25
    5988:	8a 1f       	adc	r24, r26
    598a:	91 1d       	adc	r25, r1
    598c:	a1 1d       	adc	r26, r1
    598e:	6a 0f       	add	r22, r26
    5990:	71 1d       	adc	r23, r1
    5992:	81 1d       	adc	r24, r1
    5994:	91 1d       	adc	r25, r1
    5996:	a1 1d       	adc	r26, r1
    5998:	20 d0       	rcall	.+64     	; 0x59da <__ultoa_invert+0x84>
    599a:	09 f4       	brne	.+2      	; 0x599e <__ultoa_invert+0x48>
    599c:	68 94       	set
    599e:	3f 91       	pop	r19
    59a0:	2a e0       	ldi	r18, 0x0A	; 10
    59a2:	26 9f       	mul	r18, r22
    59a4:	11 24       	eor	r1, r1
    59a6:	30 19       	sub	r19, r0
    59a8:	30 5d       	subi	r19, 0xD0	; 208
    59aa:	31 93       	st	Z+, r19
    59ac:	de f6       	brtc	.-74     	; 0x5964 <__ultoa_invert+0xe>
    59ae:	cf 01       	movw	r24, r30
    59b0:	08 95       	ret
    59b2:	46 2f       	mov	r20, r22
    59b4:	47 70       	andi	r20, 0x07	; 7
    59b6:	40 5d       	subi	r20, 0xD0	; 208
    59b8:	41 93       	st	Z+, r20
    59ba:	b3 e0       	ldi	r27, 0x03	; 3
    59bc:	0f d0       	rcall	.+30     	; 0x59dc <__ultoa_invert+0x86>
    59be:	c9 f7       	brne	.-14     	; 0x59b2 <__ultoa_invert+0x5c>
    59c0:	f6 cf       	rjmp	.-20     	; 0x59ae <__ultoa_invert+0x58>
    59c2:	46 2f       	mov	r20, r22
    59c4:	4f 70       	andi	r20, 0x0F	; 15
    59c6:	40 5d       	subi	r20, 0xD0	; 208
    59c8:	4a 33       	cpi	r20, 0x3A	; 58
    59ca:	18 f0       	brcs	.+6      	; 0x59d2 <__ultoa_invert+0x7c>
    59cc:	49 5d       	subi	r20, 0xD9	; 217
    59ce:	31 fd       	sbrc	r19, 1
    59d0:	40 52       	subi	r20, 0x20	; 32
    59d2:	41 93       	st	Z+, r20
    59d4:	02 d0       	rcall	.+4      	; 0x59da <__ultoa_invert+0x84>
    59d6:	a9 f7       	brne	.-22     	; 0x59c2 <__ultoa_invert+0x6c>
    59d8:	ea cf       	rjmp	.-44     	; 0x59ae <__ultoa_invert+0x58>
    59da:	b4 e0       	ldi	r27, 0x04	; 4
    59dc:	a6 95       	lsr	r26
    59de:	97 95       	ror	r25
    59e0:	87 95       	ror	r24
    59e2:	77 95       	ror	r23
    59e4:	67 95       	ror	r22
    59e6:	ba 95       	dec	r27
    59e8:	c9 f7       	brne	.-14     	; 0x59dc <__ultoa_invert+0x86>
    59ea:	00 97       	sbiw	r24, 0x00	; 0
    59ec:	61 05       	cpc	r22, r1
    59ee:	71 05       	cpc	r23, r1
    59f0:	08 95       	ret
    59f2:	9b 01       	movw	r18, r22
    59f4:	ac 01       	movw	r20, r24
    59f6:	0a 2e       	mov	r0, r26
    59f8:	06 94       	lsr	r0
    59fa:	57 95       	ror	r21
    59fc:	47 95       	ror	r20
    59fe:	37 95       	ror	r19
    5a00:	27 95       	ror	r18
    5a02:	ba 95       	dec	r27
    5a04:	c9 f7       	brne	.-14     	; 0x59f8 <__ultoa_invert+0xa2>
    5a06:	62 0f       	add	r22, r18
    5a08:	73 1f       	adc	r23, r19
    5a0a:	84 1f       	adc	r24, r20
    5a0c:	95 1f       	adc	r25, r21
    5a0e:	a0 1d       	adc	r26, r0
    5a10:	08 95       	ret

00005a12 <strrev>:
    5a12:	dc 01       	movw	r26, r24
    5a14:	fc 01       	movw	r30, r24
    5a16:	67 2f       	mov	r22, r23
    5a18:	71 91       	ld	r23, Z+
    5a1a:	77 23       	and	r23, r23
    5a1c:	e1 f7       	brne	.-8      	; 0x5a16 <strrev+0x4>
    5a1e:	32 97       	sbiw	r30, 0x02	; 2
    5a20:	04 c0       	rjmp	.+8      	; 0x5a2a <strrev+0x18>
    5a22:	7c 91       	ld	r23, X
    5a24:	6d 93       	st	X+, r22
    5a26:	70 83       	st	Z, r23
    5a28:	62 91       	ld	r22, -Z
    5a2a:	ae 17       	cp	r26, r30
    5a2c:	bf 07       	cpc	r27, r31
    5a2e:	c8 f3       	brcs	.-14     	; 0x5a22 <strrev+0x10>
    5a30:	08 95       	ret

00005a32 <__divmodsi4>:
    5a32:	05 2e       	mov	r0, r21
    5a34:	97 fb       	bst	r25, 7
    5a36:	16 f4       	brtc	.+4      	; 0x5a3c <__divmodsi4+0xa>
    5a38:	00 94       	com	r0
    5a3a:	0f d0       	rcall	.+30     	; 0x5a5a <__negsi2>
    5a3c:	57 fd       	sbrc	r21, 7
    5a3e:	05 d0       	rcall	.+10     	; 0x5a4a <__divmodsi4_neg2>
    5a40:	24 d0       	rcall	.+72     	; 0x5a8a <__udivmodsi4>
    5a42:	07 fc       	sbrc	r0, 7
    5a44:	02 d0       	rcall	.+4      	; 0x5a4a <__divmodsi4_neg2>
    5a46:	46 f4       	brtc	.+16     	; 0x5a58 <__divmodsi4_exit>
    5a48:	08 c0       	rjmp	.+16     	; 0x5a5a <__negsi2>

00005a4a <__divmodsi4_neg2>:
    5a4a:	50 95       	com	r21
    5a4c:	40 95       	com	r20
    5a4e:	30 95       	com	r19
    5a50:	21 95       	neg	r18
    5a52:	3f 4f       	sbci	r19, 0xFF	; 255
    5a54:	4f 4f       	sbci	r20, 0xFF	; 255
    5a56:	5f 4f       	sbci	r21, 0xFF	; 255

00005a58 <__divmodsi4_exit>:
    5a58:	08 95       	ret

00005a5a <__negsi2>:
    5a5a:	90 95       	com	r25
    5a5c:	80 95       	com	r24
    5a5e:	70 95       	com	r23
    5a60:	61 95       	neg	r22
    5a62:	7f 4f       	sbci	r23, 0xFF	; 255
    5a64:	8f 4f       	sbci	r24, 0xFF	; 255
    5a66:	9f 4f       	sbci	r25, 0xFF	; 255
    5a68:	08 95       	ret

00005a6a <__muluhisi3>:
    5a6a:	44 dd       	rcall	.-1400   	; 0x54f4 <__umulhisi3>
    5a6c:	a5 9f       	mul	r26, r21
    5a6e:	90 0d       	add	r25, r0
    5a70:	b4 9f       	mul	r27, r20
    5a72:	90 0d       	add	r25, r0
    5a74:	a4 9f       	mul	r26, r20
    5a76:	80 0d       	add	r24, r0
    5a78:	91 1d       	adc	r25, r1
    5a7a:	11 24       	eor	r1, r1
    5a7c:	08 95       	ret

00005a7e <__mulshisi3>:
    5a7e:	b7 ff       	sbrs	r27, 7
    5a80:	f4 cf       	rjmp	.-24     	; 0x5a6a <__muluhisi3>

00005a82 <__mulohisi3>:
    5a82:	f3 df       	rcall	.-26     	; 0x5a6a <__muluhisi3>
    5a84:	82 1b       	sub	r24, r18
    5a86:	93 0b       	sbc	r25, r19
    5a88:	08 95       	ret

00005a8a <__udivmodsi4>:
    5a8a:	a1 e2       	ldi	r26, 0x21	; 33
    5a8c:	1a 2e       	mov	r1, r26
    5a8e:	aa 1b       	sub	r26, r26
    5a90:	bb 1b       	sub	r27, r27
    5a92:	fd 01       	movw	r30, r26
    5a94:	0d c0       	rjmp	.+26     	; 0x5ab0 <__udivmodsi4_ep>

00005a96 <__udivmodsi4_loop>:
    5a96:	aa 1f       	adc	r26, r26
    5a98:	bb 1f       	adc	r27, r27
    5a9a:	ee 1f       	adc	r30, r30
    5a9c:	ff 1f       	adc	r31, r31
    5a9e:	a2 17       	cp	r26, r18
    5aa0:	b3 07       	cpc	r27, r19
    5aa2:	e4 07       	cpc	r30, r20
    5aa4:	f5 07       	cpc	r31, r21
    5aa6:	20 f0       	brcs	.+8      	; 0x5ab0 <__udivmodsi4_ep>
    5aa8:	a2 1b       	sub	r26, r18
    5aaa:	b3 0b       	sbc	r27, r19
    5aac:	e4 0b       	sbc	r30, r20
    5aae:	f5 0b       	sbc	r31, r21

00005ab0 <__udivmodsi4_ep>:
    5ab0:	66 1f       	adc	r22, r22
    5ab2:	77 1f       	adc	r23, r23
    5ab4:	88 1f       	adc	r24, r24
    5ab6:	99 1f       	adc	r25, r25
    5ab8:	1a 94       	dec	r1
    5aba:	69 f7       	brne	.-38     	; 0x5a96 <__udivmodsi4_loop>
    5abc:	60 95       	com	r22
    5abe:	70 95       	com	r23
    5ac0:	80 95       	com	r24
    5ac2:	90 95       	com	r25
    5ac4:	9b 01       	movw	r18, r22
    5ac6:	ac 01       	movw	r20, r24
    5ac8:	bd 01       	movw	r22, r26
    5aca:	cf 01       	movw	r24, r30
    5acc:	08 95       	ret

00005ace <_exit>:
    5ace:	f8 94       	cli

00005ad0 <__stop_program>:
    5ad0:	ff cf       	rjmp	.-2      	; 0x5ad0 <__stop_program>
