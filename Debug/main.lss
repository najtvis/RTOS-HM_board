
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  000059f6  00005a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001c86  00802100  00802100  00005b8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b8a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000b98  00000000  00000000  00005be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001159e  00000000  00000000  00006780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004454  00000000  00000000  00017d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007648  00000000  00000000  0001c172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002450  00000000  00000000  000237bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004651  00000000  00000000  00025c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a473  00000000  00000000  0002a25d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009f8  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c3       	rjmp	.+1802   	; 0x70c <__ctors_end>
       2:	00 00       	nop
       4:	a9 c3       	rjmp	.+1874   	; 0x758 <__bad_interrupt>
       6:	00 00       	nop
       8:	a7 c3       	rjmp	.+1870   	; 0x758 <__bad_interrupt>
       a:	00 00       	nop
       c:	a5 c3       	rjmp	.+1866   	; 0x758 <__bad_interrupt>
       e:	00 00       	nop
      10:	a3 c3       	rjmp	.+1862   	; 0x758 <__bad_interrupt>
      12:	00 00       	nop
      14:	a1 c3       	rjmp	.+1858   	; 0x758 <__bad_interrupt>
      16:	00 00       	nop
      18:	9f c3       	rjmp	.+1854   	; 0x758 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9d c3       	rjmp	.+1850   	; 0x758 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9b c3       	rjmp	.+1846   	; 0x758 <__bad_interrupt>
      22:	00 00       	nop
      24:	99 c3       	rjmp	.+1842   	; 0x758 <__bad_interrupt>
      26:	00 00       	nop
      28:	97 c3       	rjmp	.+1838   	; 0x758 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	95 c3       	rjmp	.+1834   	; 0x758 <__bad_interrupt>
      2e:	00 00       	nop
      30:	93 c3       	rjmp	.+1830   	; 0x758 <__bad_interrupt>
      32:	00 00       	nop
      34:	91 c3       	rjmp	.+1826   	; 0x758 <__bad_interrupt>
      36:	00 00       	nop
      38:	13 c6       	rjmp	.+3110   	; 0xc60 <__vector_14>
      3a:	00 00       	nop
      3c:	8d c3       	rjmp	.+1818   	; 0x758 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8b c3       	rjmp	.+1814   	; 0x758 <__bad_interrupt>
      42:	00 00       	nop
      44:	89 c3       	rjmp	.+1810   	; 0x758 <__bad_interrupt>
      46:	00 00       	nop
      48:	87 c3       	rjmp	.+1806   	; 0x758 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	85 c3       	rjmp	.+1802   	; 0x758 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <__vector_20>
      54:	81 c3       	rjmp	.+1794   	; 0x758 <__bad_interrupt>
      56:	00 00       	nop
      58:	7f c3       	rjmp	.+1790   	; 0x758 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7d c3       	rjmp	.+1786   	; 0x758 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7b c3       	rjmp	.+1782   	; 0x758 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <__vector_25>
      68:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__vector_26>
      6c:	75 c3       	rjmp	.+1770   	; 0x758 <__bad_interrupt>
      6e:	00 00       	nop
      70:	73 c3       	rjmp	.+1766   	; 0x758 <__bad_interrupt>
      72:	00 00       	nop
      74:	71 c3       	rjmp	.+1762   	; 0x758 <__bad_interrupt>
      76:	00 00       	nop
      78:	6f c3       	rjmp	.+1758   	; 0x758 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6d c3       	rjmp	.+1754   	; 0x758 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6b c3       	rjmp	.+1750   	; 0x758 <__bad_interrupt>
      82:	00 00       	nop
      84:	69 c3       	rjmp	.+1746   	; 0x758 <__bad_interrupt>
      86:	00 00       	nop
      88:	67 c3       	rjmp	.+1742   	; 0x758 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	65 c3       	rjmp	.+1738   	; 0x758 <__bad_interrupt>
      8e:	00 00       	nop
      90:	63 c3       	rjmp	.+1734   	; 0x758 <__bad_interrupt>
      92:	00 00       	nop
      94:	61 c3       	rjmp	.+1730   	; 0x758 <__bad_interrupt>
      96:	00 00       	nop
      98:	5f c3       	rjmp	.+1726   	; 0x758 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5d c3       	rjmp	.+1722   	; 0x758 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5b c3       	rjmp	.+1718   	; 0x758 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	59 c3       	rjmp	.+1714   	; 0x758 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	57 c3       	rjmp	.+1710   	; 0x758 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	55 c3       	rjmp	.+1706   	; 0x758 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	53 c3       	rjmp	.+1702   	; 0x758 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6a c4       	rjmp	.+2260   	; 0x98a <__vector_45>
      b6:	00 00       	nop
      b8:	33 c4       	rjmp	.+2150   	; 0x920 <__vector_46>
      ba:	00 00       	nop
      bc:	4d c3       	rjmp	.+1690   	; 0x758 <__bad_interrupt>
      be:	00 00       	nop
      c0:	4b c3       	rjmp	.+1686   	; 0x758 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	49 c3       	rjmp	.+1682   	; 0x758 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	47 c3       	rjmp	.+1678   	; 0x758 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	45 c3       	rjmp	.+1674   	; 0x758 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	43 c3       	rjmp	.+1670   	; 0x758 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	41 c3       	rjmp	.+1666   	; 0x758 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3f c3       	rjmp	.+1662   	; 0x758 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3d c3       	rjmp	.+1658   	; 0x758 <__bad_interrupt>
      de:	00 00       	nop
      e0:	3b c3       	rjmp	.+1654   	; 0x758 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	39 c3       	rjmp	.+1650   	; 0x758 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 04 24 	jmp	0x4808	; 0x4808 <__vector_58>
      ec:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <__vector_59>
      f0:	33 c3       	rjmp	.+1638   	; 0x758 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	31 c3       	rjmp	.+1634   	; 0x758 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	2f c3       	rjmp	.+1630   	; 0x758 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2d c3       	rjmp	.+1626   	; 0x758 <__bad_interrupt>
      fe:	00 00       	nop
     100:	2b c3       	rjmp	.+1622   	; 0x758 <__bad_interrupt>
     102:	00 00       	nop
     104:	29 c3       	rjmp	.+1618   	; 0x758 <__bad_interrupt>
     106:	00 00       	nop
     108:	27 c3       	rjmp	.+1614   	; 0x758 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	25 c3       	rjmp	.+1610   	; 0x758 <__bad_interrupt>
     10e:	00 00       	nop
     110:	23 c3       	rjmp	.+1606   	; 0x758 <__bad_interrupt>
     112:	00 00       	nop
     114:	21 c3       	rjmp	.+1602   	; 0x758 <__bad_interrupt>
     116:	00 00       	nop
     118:	1f c3       	rjmp	.+1598   	; 0x758 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1d c3       	rjmp	.+1594   	; 0x758 <__bad_interrupt>
     11e:	00 00       	nop
     120:	1b c3       	rjmp	.+1590   	; 0x758 <__bad_interrupt>
     122:	00 00       	nop
     124:	19 c3       	rjmp	.+1586   	; 0x758 <__bad_interrupt>
     126:	00 00       	nop
     128:	17 c3       	rjmp	.+1582   	; 0x758 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	15 c3       	rjmp	.+1578   	; 0x758 <__bad_interrupt>
     12e:	00 00       	nop
     130:	13 c3       	rjmp	.+1574   	; 0x758 <__bad_interrupt>
     132:	00 00       	nop
     134:	11 c3       	rjmp	.+1570   	; 0x758 <__bad_interrupt>
     136:	00 00       	nop
     138:	0f c3       	rjmp	.+1566   	; 0x758 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	0d c3       	rjmp	.+1562   	; 0x758 <__bad_interrupt>
     13e:	00 00       	nop
     140:	0b c3       	rjmp	.+1558   	; 0x758 <__bad_interrupt>
     142:	00 00       	nop
     144:	09 c3       	rjmp	.+1554   	; 0x758 <__bad_interrupt>
     146:	00 00       	nop
     148:	07 c3       	rjmp	.+1550   	; 0x758 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	05 c3       	rjmp	.+1546   	; 0x758 <__bad_interrupt>
     14e:	00 00       	nop
     150:	03 c3       	rjmp	.+1542   	; 0x758 <__bad_interrupt>
     152:	00 00       	nop
     154:	01 c3       	rjmp	.+1538   	; 0x758 <__bad_interrupt>
     156:	00 00       	nop
     158:	ff c2       	rjmp	.+1534   	; 0x758 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	fd c2       	rjmp	.+1530   	; 0x758 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <__vector_88>
     164:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__vector_89>
     168:	f7 c2       	rjmp	.+1518   	; 0x758 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	f5 c2       	rjmp	.+1514   	; 0x758 <__bad_interrupt>
     16e:	00 00       	nop
     170:	f3 c2       	rjmp	.+1510   	; 0x758 <__bad_interrupt>
     172:	00 00       	nop
     174:	f1 c2       	rjmp	.+1506   	; 0x758 <__bad_interrupt>
     176:	00 00       	nop
     178:	ef c2       	rjmp	.+1502   	; 0x758 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ed c2       	rjmp	.+1498   	; 0x758 <__bad_interrupt>
     17e:	00 00       	nop
     180:	eb c2       	rjmp	.+1494   	; 0x758 <__bad_interrupt>
     182:	00 00       	nop
     184:	e9 c2       	rjmp	.+1490   	; 0x758 <__bad_interrupt>
     186:	00 00       	nop
     188:	e7 c2       	rjmp	.+1486   	; 0x758 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e5 c2       	rjmp	.+1482   	; 0x758 <__bad_interrupt>
     18e:	00 00       	nop
     190:	e3 c2       	rjmp	.+1478   	; 0x758 <__bad_interrupt>
     192:	00 00       	nop
     194:	e1 c2       	rjmp	.+1474   	; 0x758 <__bad_interrupt>
     196:	00 00       	nop
     198:	df c2       	rjmp	.+1470   	; 0x758 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	dd c2       	rjmp	.+1466   	; 0x758 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	db c2       	rjmp	.+1462   	; 0x758 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d9 c2       	rjmp	.+1458   	; 0x758 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d7 c2       	rjmp	.+1454   	; 0x758 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d5 c2       	rjmp	.+1450   	; 0x758 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	d3 c2       	rjmp	.+1446   	; 0x758 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d1 c2       	rjmp	.+1442   	; 0x758 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	cf c2       	rjmp	.+1438   	; 0x758 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	cd c2       	rjmp	.+1434   	; 0x758 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	cb c2       	rjmp	.+1430   	; 0x758 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c9 c2       	rjmp	.+1426   	; 0x758 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c7 c2       	rjmp	.+1422   	; 0x758 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c5 c2       	rjmp	.+1418   	; 0x758 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	c3 c2       	rjmp	.+1414   	; 0x758 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c1 c2       	rjmp	.+1410   	; 0x758 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	bf c2       	rjmp	.+1406   	; 0x758 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	bd c2       	rjmp	.+1402   	; 0x758 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	bb c2       	rjmp	.+1398   	; 0x758 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b9 c2       	rjmp	.+1394   	; 0x758 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b7 c2       	rjmp	.+1390   	; 0x758 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	b5 c2       	rjmp	.+1386   	; 0x758 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	b3 c2       	rjmp	.+1382   	; 0x758 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	b1 c2       	rjmp	.+1378   	; 0x758 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	af c2       	rjmp	.+1374   	; 0x758 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	b4 1d       	adc	r27, r4
     1fe:	43 1e       	adc	r4, r19
     200:	be 1d       	adc	r27, r14
     202:	02 1e       	adc	r0, r18
     204:	0e 1e       	adc	r0, r30
     206:	22 1e       	adc	r2, r18
     208:	33 1e       	adc	r3, r19

0000020a <__trampolines_end>:
     20a:	00 00       	nop
     20c:	00 00       	nop
     20e:	03 83       	std	Z+3, r16	; 0x03
     210:	6b f2       	brvs	.-102    	; 0x1ac <__SREG__+0x16d>
     212:	f7 70       	andi	r31, 0x07	; 7
     214:	3b e1       	ldi	r19, 0x1B	; 27
     216:	f4 f3       	brlt	.-4      	; 0x214 <__trampolines_end+0xa>
     218:	50 13       	cpse	r21, r16
     21a:	1f 97       	sbiw	r26, 0x0f	; 15
     21c:	9a c7       	rjmp	.+3892   	; 0x1152 <xQueueCreateMutex+0x10>
     21e:	1c 14       	cp	r1, r12
     220:	f1 35       	cpi	r31, 0x51	; 81
     222:	e8 e7       	ldi	r30, 0x78	; 120
     224:	a1 26       	eor	r10, r17
     226:	eb 64       	ori	r30, 0x4B	; 75
     228:	ca d4       	rcall	.+2452   	; 0xbbe <vPortYield+0xe>
     22a:	cf 58       	subi	r28, 0x8F	; 143
     22c:	d9 8a       	std	Y+17, r13	; 0x11
     22e:	cc db       	rcall	.-2152   	; 0xfffff9c8 <__eeprom_end+0xff7ef9c8>
     230:	b2 78       	andi	r27, 0x82	; 130
     232:	38 28       	or	r3, r8
     234:	e2 6b       	ori	r30, 0xB2	; 178
     236:	3b ab       	std	Y+51, r19	; 0x33
     238:	89 99       	sbic	0x11, 1	; 17
     23a:	d0 cf       	rjmp	.-96     	; 0x1dc <__SREG__+0x19d>
     23c:	43 4d       	sbci	r20, 0xD3	; 211
     23e:	d3 4c       	sbci	r29, 0xC3	; 195
     240:	28 bf       	out	0x38, r18	; 56
     242:	27 bf       	out	0x37, r18	; 55
     244:	78 ac       	ldd	r7, Y+56	; 0x38
     246:	24 3c       	cpi	r18, 0xC4	; 196
     248:	13 5e       	subi	r17, 0xE3	; 227
     24a:	6f c7       	rjmp	.+3806   	; 0x112a <xQueueGenericSend+0xf8>
     24c:	5e 10       	cpse	r5, r14
     24e:	6c 44       	sbci	r22, 0x4C	; 76
     250:	35 e2       	ldi	r19, 0x25	; 37
     252:	98 b7       	in	r25, 0x38	; 56
     254:	65 f1       	brhs	.+88     	; 0x2ae <__trampolines_end+0xa4>
     256:	9b 34       	cpi	r25, 0x4B	; 75
     258:	0e 03       	fmul	r16, r22
     25a:	70 50       	subi	r23, 0x00	; 0
     25c:	c4 d7       	rcall	.+3976   	; 0x11e6 <xQueueGenericReceive>
     25e:	73 d3       	rcall	.+1766   	; 0x946 <__vector_46+0x26>
     260:	af 25       	eor	r26, r15
     262:	87 20       	and	r8, r7
     264:	ff 36       	cpi	r31, 0x6F	; 111
     266:	84 a3       	std	Z+36, r24	; 0x24
     268:	94 c4       	rjmp	.+2344   	; 0xb92 <xPortStartScheduler+0x66>
     26a:	a0 9f       	mul	r26, r16
     26c:	87 9a       	sbi	0x10, 7	; 16
     26e:	a3 1c       	adc	r10, r3
     270:	ec 68       	ori	r30, 0x8C	; 140
     272:	57 ef       	ldi	r21, 0xF7	; 247
     274:	bc 7b       	andi	r27, 0xBC	; 188
     276:	54 6c       	ori	r21, 0xC4	; 196
     278:	d7 89       	ldd	r29, Z+23	; 0x17
     27a:	bf 08       	sbc	r11, r15
     27c:	1d 5d       	subi	r17, 0xDD	; 221
     27e:	bc 8b       	std	Y+20, r27	; 0x14
     280:	76 af       	std	Z+62, r23	; 0x3e
     282:	48 78       	andi	r20, 0x88	; 136
     284:	26 bc       	out	0x26, r2	; 38
     286:	4b fb       	.word	0xfb4b	; ????
     288:	4d 4e       	sbci	r20, 0xED	; 237
     28a:	de 8e       	std	Y+30, r13	; 0x1e
     28c:	bd 20       	and	r11, r13
     28e:	dd 0d       	add	r29, r13
     290:	d6 d2       	rcall	.+1452   	; 0x83e <TWI_CSP_SlaveProcessData+0x4>
     292:	29 fe       	.word	0xfe29	; ????
     294:	86 c1       	rjmp	.+780    	; 0x5a2 <__trampolines_end+0x398>
     296:	2a 7d       	andi	r18, 0xDA	; 218
     298:	ed 33       	cpi	r30, 0x3D	; 61
     29a:	c1 19       	sub	r28, r1
     29c:	27 e7       	ldi	r18, 0x77	; 119
     29e:	c2 9a       	sbi	0x18, 2	; 24
     2a0:	4c 15       	cp	r20, r12
     2a2:	36 69       	ori	r19, 0x96	; 150
     2a4:	1c 06       	cpc	r1, r28
     2a6:	35 ea       	ldi	r19, 0xA5	; 165
     2a8:	77 f4       	brid	.+28     	; 0x2c6 <__trampolines_end+0xbc>
     2aa:	11 d6       	rcall	.+3106   	; 0xece <prvCopyDataToQueue+0x88>
     2ac:	64 aa       	std	Z+52, r6	; 0x34
     2ae:	12 55       	subi	r17, 0x52	; 82
     2b0:	0f 58       	subi	r16, 0x8F	; 143
     2b2:	e6 a6       	std	Z+46, r14	; 0x2e
     2b4:	5f 4b       	sbci	r21, 0xBF	; 191
     2b6:	e5 25       	eor	r30, r5
     2b8:	34 b9       	out	0x04, r19	; 4
     2ba:	0e 41       	sbci	r16, 0x1E	; 30
     2bc:	fe 6d       	ori	r31, 0xDE	; 222
     2be:	0d c2       	rjmp	.+1050   	; 0x6da <__c.2159+0xcc>
     2c0:	95 9f       	mul	r25, r21
     2c2:	f9 31       	cpi	r31, 0x19	; 25
     2c4:	c5 8c       	ldd	r12, Z+29	; 0x1d
     2c6:	fa b2       	in	r15, 0x1a	; 26
     2c8:	ae 7e       	andi	r26, 0xEE	; 238
     2ca:	b1 49       	sbci	r27, 0x91	; 145
     2cc:	e3 30       	cpi	r30, 0x03	; 3
     2ce:	b2 ca       	rjmp	.-2716   	; 0xfffff834 <__eeprom_end+0xff7ef834>
     2d0:	88 c2       	rjmp	.+1296   	; 0x7e2 <cspTask+0x88>
     2d2:	46 39       	cpi	r20, 0x96	; 150
     2d4:	d8 d1       	rcall	.+944    	; 0x686 <__c.2159+0x78>
     2d6:	45 ba       	out	0x15, r4	; 21
     2d8:	b3 23       	and	r27, r19
     2da:	ae de       	rcall	.-676    	; 0x38 <__RAMPD__>
     2dc:	79 f7       	brne	.-34     	; 0x2bc <__trampolines_end+0xb2>
     2de:	ad 5d       	subi	r26, 0xDD	; 221
     2e0:	12 05       	cpc	r17, r2
     2e2:	59 ae       	std	Y+57, r5	; 0x39
     2e4:	42 16       	cp	r4, r18
     2e6:	5a 2d       	mov	r21, r10
     2e8:	29 e4       	ldi	r18, 0x49	; 73
     2ea:	7e 11       	cpse	r23, r14
     2ec:	3a ba       	out	0x1a, r3	; 26
     2ee:	7d 92       	st	X+, r7
     2f0:	51 48       	sbci	r21, 0x81	; 129
     2f2:	89 61       	ori	r24, 0x19	; 25
     2f4:	01 5b       	subi	r16, 0xB1	; 177
     2f6:	8a e2       	ldi	r24, 0x2A	; 42
     2f8:	6a a9       	ldd	r22, Y+50	; 0x32
     2fa:	61 86       	std	Z+9, r6	; 0x09
     2fc:	a0 7d       	andi	r26, 0xD0	; 208
     2fe:	62 05       	cpc	r22, r2
     300:	cb 8f       	std	Y+27, r28	; 0x1b
     302:	96 f6       	brtc	.-92     	; 0x2a8 <__trampolines_end+0x9e>
     304:	9b 9c       	mul	r9, r11
     306:	95 75       	andi	r25, 0x55	; 85
     308:	f0 6e       	ori	r31, 0xE0	; 224
     30a:	bc 1d       	adc	r27, r12
     30c:	7b 41       	sbci	r23, 0x1B	; 27
     30e:	bf 9e       	mul	r11, r31
     310:	10 b3       	in	r17, 0x10	; 16
     312:	4b 6d       	ori	r20, 0xDB	; 219
     314:	40 a0       	ldd	r4, Z+32	; 0x20
     316:	48 ee       	ldi	r20, 0xE8	; 232
     318:	2b 52       	subi	r18, 0x2B	; 43
     31a:	a3 8a       	std	Z+19, r10	; 0x13
     31c:	e1 86       	std	Z+9, r14	; 0x09
     31e:	a0 09       	sbc	r26, r0
     320:	8a 74       	andi	r24, 0x4A	; 74
     322:	54 fa       	bst	r5, 4
     324:	da 67       	ori	r29, 0x7A	; 122
     326:	57 79       	andi	r21, 0x97	; 151
     328:	b1 95       	neg	r27
     32a:	73 45       	sbci	r23, 0x53	; 83
     32c:	a2 cb       	rjmp	.-2236   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     32e:	70 c6       	rjmp	.+3296   	; 0x1010 <xQueueCreate+0x76>
     330:	c9 39       	cpi	r28, 0x99	; 153
     332:	84 35       	cpi	r24, 0x54	; 84
     334:	99 2a       	or	r9, r25
     336:	87 b6       	in	r8, 0x37	; 55
     338:	f2 d8       	rcall	.-3612   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
     33a:	6c d2       	rcall	.+1240   	; 0x814 <cspTask+0xba>
     33c:	38 0c       	add	r3, r8
     33e:	6f 51       	subi	r22, 0x1F	; 31
     340:	53 fe       	sbrs	r5, 3
     342:	9b a2       	std	Y+35, r9	; 0x23
     344:	03 ed       	ldi	r16, 0xD3	; 211
     346:	98 21       	and	r25, r8
     348:	68 1f       	adc	r22, r24
     34a:	d3 da       	rcall	.-2650   	; 0xfffff8f2 <__eeprom_end+0xff7ef8f2>
     34c:	25 51       	subi	r18, 0x15	; 21
     34e:	d0 59       	subi	r29, 0x90	; 144
     350:	4e a3       	std	Y+38, r20	; 0x26
     352:	24 aa       	std	Z+52, r2	; 0x34
     354:	1e b0       	in	r1, 0x0e	; 14
     356:	27 29       	or	r18, r7
     358:	75 42       	sbci	r23, 0x25	; 37
     35a:	cc 4d       	sbci	r28, 0xDC	; 220
     35c:	bf 96       	adiw	r30, 0x2f	; 47
     35e:	cf ce       	rjmp	.-610    	; 0xfe <__SREG__+0xbf>
     360:	d4 64       	ori	r29, 0x44	; 68
     362:	3b 3d       	cpi	r19, 0xDB	; 219
     364:	84 77       	andi	r24, 0x74	; 116
     366:	38 be       	out	0x38, r3	; 56
     368:	ef 85       	ldd	r30, Y+15	; 0x0f
     36a:	1c 82       	std	Y+4, r1	; 0x04
     36c:	fc db       	rcall	.-2056   	; 0xfffffb66 <__eeprom_end+0xff7efb66>
     36e:	1f 01       	movw	r2, r30
     370:	97 29       	or	r25, r7
     372:	eb f2       	brvs	.-70     	; 0x32e <__trampolines_end+0x124>
     374:	c7 3a       	cpi	r28, 0xA7	; 167
     376:	e8 71       	andi	r30, 0x18	; 24
     378:	ac c8       	rjmp	.-3752   	; 0xfffff4d2 <__eeprom_end+0xff7ef4d2>
     37a:	03 15       	cp	r16, r3
     37c:	66 1c       	adc	r6, r6
     37e:	00 96       	adiw	r24, 0x00	; 0
     380:	0d ee       	ldi	r16, 0xED	; 237
     382:	f4 65       	ori	r31, 0x54	; 84
     384:	5d fd       	.word	0xfd5d	; ????
     386:	f7 e6       	ldi	r31, 0x67	; 103
     388:	36 0f       	add	r19, r22
     38a:	62 93       	st	-Z, r22
     38c:	c6 61       	ori	r28, 0x16	; 22
     38e:	61 10       	cpse	r6, r1
     390:	ad 93       	st	X+, r26	; undefined
     392:	95 e3       	ldi	r25, 0x35	; 53
     394:	fd 80       	ldd	r15, Y+5	; 0x05
     396:	96 60       	ori	r25, 0x06	; 6
     398:	96 72       	andi	r25, 0x26	; 38
     39a:	7d 04       	cpc	r7, r13
     39c:	5c a6       	std	Y+44, r5	; 0x2c
     39e:	7e 87       	std	Y+14, r23	; 0x0e
     3a0:	37 54       	subi	r19, 0x47	; 71
     3a2:	8a 74       	andi	r24, 0x4A	; 74
     3a4:	67 47       	sbci	r22, 0x77	; 119
     3a6:	89 f7       	brne	.-30     	; 0x38a <__trampolines_end+0x180>
     3a8:	0c b5       	in	r16, 0x2c	; 44
     3aa:	ad cb       	rjmp	.-2214   	; 0xfffffb06 <__eeprom_end+0xff7efb06>
     3ac:	1f eb       	ldi	r17, 0xBF	; 191
     3ae:	ae 48       	sbci	r26, 0x8E	; 142
     3b0:	74 19       	sub	r23, r4
     3b2:	5a bb       	out	0x1a, r21	; 26
     3b4:	24 0a       	sbc	r2, r20
     3b6:	59 38       	cpi	r21, 0x89	; 137
     3b8:	4f f8       	.word	0xf84f	; ????
     3ba:	b2 5c       	subi	r27, 0xC2	; 194
     3bc:	85 2c       	mov	r8, r5
     3be:	b1 df       	rcall	.-158    	; 0x322 <__trampolines_end+0x118>
     3c0:	ee de       	rcall	.-548    	; 0x19e <__SREG__+0x15f>
     3c2:	45 2c       	mov	r4, r5
     3c4:	be cd       	rjmp	.-1156   	; 0xffffff42 <__eeprom_end+0xff7eff42>
     3c6:	46 af       	std	Z+62, r20	; 0x3e
     3c8:	d5 3f       	cpi	r29, 0xF5	; 245
     3ca:	0d 54       	subi	r16, 0x4D	; 77
     3cc:	98 71       	andi	r25, 0x18	; 24
     3ce:	0e d7       	rcall	.+3612   	; 0x11ec <xQueueGenericReceive+0x6>
     3d0:	f3 83       	std	Z+3, r31	; 0x03
     3d2:	fa 24       	eor	r15, r10
     3d4:	a3 90       	.word	0x90a3	; ????
     3d6:	f9 a7       	std	Y+41, r31	; 0x29
     3d8:	c8 62       	ori	r28, 0x28	; 40
     3da:	12 c3       	rjmp	.+1572   	; 0xa00 <pvPortMalloc+0xc>
     3dc:	02 b6       	in	r0, 0x32	; 50
     3de:	11 40       	sbci	r17, 0x01	; 1
     3e0:	69 44       	sbci	r22, 0x49	; 73
     3e2:	e5 b3       	in	r30, 0x15	; 21
     3e4:	39 57       	subi	r19, 0x79	; 121
     3e6:	e6 30       	cpi	r30, 0x06	; 6
     3e8:	52 a5       	ldd	r21, Z+42	; 0x2a
     3ea:	c2 0c       	add	r12, r2
     3ec:	41 fb       	bst	r20, 1
     3ee:	c1 8f       	std	Z+25, r28	; 0x19
     3f0:	2a 09       	sbc	r18, r10
     3f2:	35 7c       	andi	r19, 0xC5	; 197
     3f4:	7a 1a       	sub	r7, r26
     3f6:	36 ff       	sbrs	r19, 6
     3f8:	11 e8       	ldi	r17, 0x81	; 129
     3fa:	dd 9b       	sbis	0x1b, 5	; 27
     3fc:	db 3c       	cpi	r29, 0xCB	; 203
     3fe:	de 18       	sub	r13, r14
     400:	b0 ce       	rjmp	.-672    	; 0x162 <__SREG__+0x123>
     402:	2a eb       	ldi	r18, 0xBA	; 186
     404:	e0 dd       	rcall	.-1088   	; 0xffffffc6 <__eeprom_end+0xff7effc6>
     406:	29 68       	ori	r18, 0x89	; 137
     408:	8b 2f       	mov	r24, r27
     40a:	78 3b       	cpi	r23, 0xB8	; 184
     40c:	f6 82       	std	Z+6, r15	; 0x06
     40e:	7b b8       	out	0x0b, r7	; 11
     410:	9d 70       	andi	r25, 0x0D	; 13
     412:	8f 4b       	sbci	r24, 0xBF	; 191
     414:	cd 63       	ori	r28, 0x3D	; 61
     416:	8c c8       	rjmp	.-3816   	; 0xfffff530 <__eeprom_end+0xff7ef530>
     418:	a6 91       	elpm	r26, Z
     41a:	67 ac       	ldd	r6, Z+63	; 0x3f
     41c:	6c 45       	sbci	r22, 0x5C	; 92
     41e:	64 2f       	mov	r22, r20
     420:	07 b7       	in	r16, 0x37	; 55
     422:	90 dc       	rcall	.-1760   	; 0xfffffd44 <__eeprom_end+0xff7efd44>
     424:	57 a4       	ldd	r5, Z+47	; 0x2f
     426:	93 5f       	subi	r25, 0xF3	; 243
     428:	3c 56       	subi	r19, 0x6C	; 108
     42a:	b7 63       	ori	r27, 0x37	; 55
     42c:	2f 08       	sbc	r2, r15
     42e:	b4 e0       	ldi	r27, 0x04	; 4
     430:	44 fa       	bst	r4, 4
     432:	40 13       	cpse	r20, r16
     434:	14 e9       	ldi	r17, 0x94	; 148
     436:	43 90       	.word	0x9043	; ????
     438:	7f 1b       	sub	r23, r31
     43a:	a8 f4       	brcc	.+42     	; 0x466 <__trampolines_end+0x25c>
     43c:	b5 cf       	rjmp	.-150    	; 0x3a8 <__trampolines_end+0x19e>
     43e:	ab 77       	andi	r26, 0x7B	; 123
     440:	de 3d       	cpi	r29, 0xDE	; 222
     442:	5f 84       	ldd	r5, Y+15	; 0x0f
     444:	8e 2e       	mov	r8, r30
     446:	5c 07       	cpc	r21, r28
     448:	e5 dc       	rcall	.-1590   	; 0xfffffe14 <__eeprom_end+0xff7efe14>
     44a:	17 fc       	sbrc	r1, 7
     44c:	a8 92       	.word	0x92a8	; ????
     44e:	14 7f       	andi	r17, 0xF4	; 244
     450:	c3 60       	ori	r28, 0x03	; 3
     452:	e0 8c       	ldd	r14, Z+24	; 0x18
     454:	93 73       	andi	r25, 0x33	; 51
     456:	e3 0f       	add	r30, r19
     458:	f8 81       	ld	r31, Y
     45a:	08 6b       	ori	r16, 0xB8	; 184
     45c:	32 55       	subi	r19, 0x52	; 82
     45e:	0b e8       	ldi	r16, 0x8B	; 139
     460:	59 a7       	std	Y+41, r21	; 0x29
     462:	ff 1b       	sub	r31, r31
     464:	09 b4       	in	r0, 0x29	; 41
     466:	fc 98       	cbi	0x1f, 4	; 31
     468:	62 46       	sbci	r22, 0x62	; 98
     46a:	d8 a4       	ldd	r13, Y+40	; 0x28
     46c:	71 18       	sub	r7, r1
     46e:	db 27       	eor	r29, r27
     470:	1a ea       	ldi	r17, 0xAA	; 170
     472:	2f d4       	rcall	.+2142   	; 0xcd2 <__vector_14+0x72>
     474:	4a f9       	.word	0xf94a	; ????
     476:	2c 57       	subi	r18, 0x7C	; 124
     478:	21 0b       	sbc	r18, r17
     47a:	c7 33       	cpi	r28, 0x37	; 55
     47c:	eb df       	rcall	.-42     	; 0x454 <__trampolines_end+0x24a>
     47e:	c4 b0       	in	r12, 0x04	; 4
     480:	80 2d       	mov	r24, r0
     482:	30 43       	sbci	r19, 0x30	; 48
     484:	d0 3e       	cpi	r29, 0xE0	; 224
     486:	33 c0       	rjmp	.+102    	; 0x4ee <__trampolines_end+0x2e4>
     488:	bb cc       	rjmp	.-1674   	; 0xfffffe00 <__eeprom_end+0xff7efe00>
     48a:	a6 b5       	in	r26, 0x26	; 38
     48c:	4b a2       	std	Y+35, r4	; 0x23
     48e:	a5 36       	cpi	r26, 0x65	; 101
     490:	20 50       	subi	r18, 0x00	; 0
     492:	51 c5       	rjmp	.+2722   	; 0xf36 <prvUnlockQueue+0x24>
     494:	70 43       	sbci	r23, 0x30	; 48
     496:	52 46       	sbci	r21, 0x62	; 98
     498:	1b b1       	in	r17, 0x0b	; 11
     49a:	b9 22       	and	r11, r25
     49c:	d1 65       	ori	r29, 0x51	; 81
     49e:	ba a1       	ldd	r27, Y+34	; 0x22
     4a0:	ba 97       	sbiw	r30, 0x2a	; 42
     4a2:	4e 52       	subi	r20, 0x2E	; 46
     4a4:	ea 84       	ldd	r14, Y+10	; 0x0a
     4a6:	4d d1       	rcall	.+666    	; 0x742 <__do_clear_bss+0x2>
     4a8:	81 76       	andi	r24, 0x61	; 97
     4aa:	69 ed       	ldi	r22, 0xD9	; 217
     4ac:	92 28       	or	r9, r2
     4ae:	6a 6e       	ori	r22, 0xEA	; 234
     4b0:	f9 da       	rcall	.-2574   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     4b2:	9e 9d       	mul	r25, r14
     4b4:	a9 c9       	rjmp	.-3246   	; 0xfffff808 <__eeprom_end+0xff7ef808>
     4b6:	9d 1e       	adc	r9, r29
     4b8:	c2 3b       	cpi	r28, 0xB2	; 178
     4ba:	76 7a       	andi	r23, 0xA6	; 166
     4bc:	08 ef       	ldi	r16, 0xF8	; 248
     4be:	75 f9       	bld	r23, 5
     4c0:	63 1d       	adc	r22, r3
     4c2:	81 0a       	sbc	r8, r17
     4c4:	33 0e       	add	r3, r19
     4c6:	82 89       	ldd	r24, Z+18	; 0x12
     4c8:	58 fc       	.word	0xfc58	; ????
     4ca:	c9 72       	andi	r28, 0x29	; 41
     4cc:	15 b2       	in	r1, 0x15	; 21
     4ce:	ca f1       	brmi	.+114    	; 0x542 <__trampolines_end+0x338>
     4d0:	7e 40       	sbci	r23, 0x0E	; 14
     4d2:	3e 02       	muls	r19, r30
     4d4:	2e 53       	subi	r18, 0x3E	; 62
     4d6:	3d 81       	ldd	r19, Y+5	; 0x05
     4d8:	45 a1       	ldd	r20, Z+37	; 0x25
     4da:	d6 e5       	ldi	r29, 0x56	; 86
     4dc:	8f 75       	andi	r24, 0x5F	; 95
     4de:	d5 66       	ori	r29, 0x65	; 101
     4e0:	e4 87       	std	Z+12, r30	; 0x0c
     4e2:	21 95       	neg	r18
     4e4:	b4 94       	.word	0x94b4	; ????
     4e6:	22 16       	cp	r2, r18
     4e8:	df 66       	ori	r29, 0x6F	; 111
     4ea:	06 2a       	or	r0, r22
     4ec:	cc 38       	cpi	r28, 0x8C	; 140
     4ee:	05 a9       	ldd	r16, Z+53	; 0x35
     4f0:	a7 ca       	rjmp	.-2738   	; 0xfffffa40 <__eeprom_end+0xff7efa40>
     4f2:	f1 5a       	subi	r31, 0xA1	; 161
     4f4:	f7 d9       	rcall	.-3090   	; 0xfffff8e4 <__eeprom_end+0xff7ef8e4>
     4f6:	f2 d9       	rcall	.-3100   	; 0xfffff8dc <__eeprom_end+0xff7ef8dc>
     4f8:	9c 2b       	or	r25, r28
     4fa:	19 bd       	out	0x29, r17	; 41
     4fc:	56 ff       	sbrs	r21, 6
     4fe:	1a 3e       	cpi	r17, 0xEA	; 234
     500:	3d 0d       	add	r19, r13
     502:	ee cd       	rjmp	.-1060   	; 0xe0 <__SREG__+0xa1>
     504:	6d 1e       	adc	r6, r29
     506:	ed 4e       	sbci	r30, 0xED	; 237
     508:	06 ec       	ldi	r16, 0xC6	; 198
     50a:	c4 26       	eor	r12, r20
     50c:	8d c3       	rjmp	.+1818   	; 0xc28 <vPortYield+0x78>
     50e:	c7 a5       	ldd	r28, Z+47	; 0x2f
     510:	e6 31       	cpi	r30, 0x16	; 22
     512:	33 56       	subi	r19, 0x63	; 99
     514:	b6 22       	and	r11, r22
     516:	30 d5       	rcall	.+2656   	; 0xf78 <prvUnlockQueue+0x66>
     518:	dd d0       	rcall	.+442    	; 0x6d4 <__c.2159+0xc6>
     51a:	db b1       	in	r29, 0x0b	; 11
     51c:	17 04       	cpc	r1, r7
     51e:	d8 32       	cpi	r29, 0x28	; 40
     520:	7c f6       	brge	.-98     	; 0x4c0 <__trampolines_end+0x2b6>
     522:	2c c1       	rjmp	.+600    	; 0x77c <cspTask+0x22>
     524:	2c e5       	ldi	r18, 0x5C	; 92
     526:	2f 42       	sbci	r18, 0x2F	; 47
     528:	47 17       	cp	r20, r23
     52a:	0b 7e       	andi	r16, 0xEB	; 235
     52c:	54 49       	sbci	r21, 0x94	; 148
     52e:	08 fd       	.word	0xfd08	; ????
     530:	3f bb       	out	0x1f, r19	; 31
     532:	fc 0e       	add	r15, r28
     534:	6f a8       	ldd	r6, Y+55	; 0x37
     536:	ff 8d       	ldd	r31, Y+31	; 0x1f
     538:	04 5a       	subi	r16, 0xA4	; 164
     53a:	14 e9       	ldi	r17, 0x94	; 148
     53c:	ce 8e       	std	Y+30, r12	; 0x1e
     53e:	17 6a       	ori	r17, 0xA7	; 167
     540:	a5 7c       	andi	r26, 0xC5	; 197
     542:	e3 99       	sbic	0x1c, 3	; 28
     544:	f5 6f       	ori	r31, 0xF5	; 245
     546:	e0 1a       	sub	r14, r16
     548:	9e 9d       	mul	r25, r14
     54a:	ab e1       	ldi	r26, 0x1B	; 27
     54c:	d3 d3       	rcall	.+1958   	; 0xcf4 <__vector_14+0x94>
     54e:	a8 62       	ori	r26, 0x28	; 40
     550:	b8 21       	and	r27, r8
     552:	5c 91       	ld	r21, X
     554:	e8 32       	cpi	r30, 0x28	; 40
     556:	5f 12       	cpse	r5, r31
     558:	83 c0       	rjmp	.+262    	; 0x660 <__c.2159+0x52>
     55a:	b4 76       	andi	r27, 0x64	; 100
     55c:	49 14       	cp	r4, r9
     55e:	b7 f5       	brid	.+108    	; 0x5cc <__trampolines_end+0x3c2>
     560:	22 e6       	ldi	r18, 0x62	; 98
     562:	43 06       	cpc	r4, r19
     564:	72 f5       	brpl	.+92     	; 0x5c2 <__trampolines_end+0x3b8>
     566:	40 85       	ldd	r20, Z+8	; 0x08
     568:	19 07       	cpc	r17, r25
     56a:	64 b9       	out	0x04, r22	; 4
     56c:	0a 59       	subi	r16, 0x9A	; 154
     56e:	67 3a       	cpi	r22, 0xA7	; 167
     570:	61 ab       	std	Z+49, r22	; 0x31
     572:	93 c9       	rjmp	.-3290   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
     574:	31 b8       	out	0x01, r3	; 1
     576:	90 4a       	sbci	r25, 0xA0	; 160
     578:	5a 4a       	sbci	r21, 0xAA	; 170
     57a:	7b 2e       	mov	r7, r27
     57c:	90 9e       	mul	r9, r16
     57e:	78 ad       	ldd	r23, Y+56	; 0x38
     580:	fb 6c       	ori	r31, 0xCB	; 203
     582:	8c 5e       	subi	r24, 0xEC	; 236
     584:	ab 7f       	andi	r26, 0xFB	; 251
     586:	8f dd       	rcall	.-1250   	; 0xa6 <__SREG__+0x67>
     588:	c0 8d       	ldd	r28, Z+24	; 0x18
     58a:	1a a8       	ldd	r1, Y+50	; 0x32
     58c:	30 e3       	ldi	r19, 0x30	; 48
     58e:	19 2b       	or	r17, r25
     590:	5b 11       	cpse	r21, r11
     592:	ed d8       	rcall	.-3622   	; 0xfffff76e <__eeprom_end+0xff7ef76e>
     594:	0b 02       	muls	r16, r27
     596:	ee 5b       	subi	r30, 0xBE	; 190
     598:	60 f0       	brcs	.+24     	; 0x5b2 <__trampolines_end+0x3a8>
     59a:	05 3f       	cpi	r16, 0xF5	; 245
     59c:	aa 24       	eor	r10, r10
     59e:	06 bc       	out	0x26, r0	; 38
     5a0:	c1 d6       	rcall	.+3458   	; 0x1324 <xQueueGenericReceive+0x13e>
     5a2:	f2 4f       	sbci	r31, 0xF2	; 242
     5a4:	91 c5       	rjmp	.+2850   	; 0x10c8 <xQueueGenericSend+0x96>
     5a6:	f1 cc       	rjmp	.-1566   	; 0xffffff8a <__eeprom_end+0xff7eff8a>
     5a8:	fa 37       	cpi	r31, 0x7A	; 122
     5aa:	d5 f0       	brhs	.+52     	; 0x5e0 <__trampolines_end+0x3d6>
     5ac:	e9 69       	ori	r30, 0x99	; 153
     5ae:	d6 73       	andi	r29, 0x36	; 54
     5b0:	82 9b       	sbis	0x10, 2	; 16
     5b2:	22 80       	ldd	r2, Z+2	; 0x02
     5b4:	d2 88       	ldd	r13, Z+18	; 0x12
     5b6:	21 03       	mulsu	r18, r17
     5b8:	b9 7a       	andi	r27, 0xA9	; 169
     5ba:	ca 67       	ori	r28, 0x7A	; 122
     5bc:	73 ae       	std	Z+59, r7	; 0x3b
     5be:	c9 e4       	ldi	r28, 0x49	; 73
     5c0:	18 5c       	subi	r17, 0xC8	; 200
     5c2:	3d 17       	cp	r19, r29
     5c4:	48 4f       	sbci	r20, 0xF8	; 248
     5c6:	3e 94 23 bd 	call	0xd7a46	; 0xd7a46 <__data_load_end+0xd1f50>
     5ca:	75 6f       	ori	r23, 0xF5	; 245
     5cc:	6e f3       	brts	.-38     	; 0x5a8 <__trampolines_end+0x39e>
     5ce:	76 ec       	ldi	r23, 0xC6	; 198
     5d0:	05 01       	movw	r0, r10
     5d2:	82 1f       	adc	r24, r18
     5d4:	55 12       	cpse	r5, r21
     5d6:	81 9c       	mul	r8, r1
     5d8:	3e e0       	ldi	r19, 0x0E	; 14
     5da:	6a f8       	.word	0xf86a	; ????
     5dc:	f4 34       	cpi	r31, 0x44	; 68
     5de:	69 7b       	andi	r22, 0xB9	; 185
     5e0:	9f c6       	rjmp	.+3390   	; 0x1320 <xQueueGenericReceive+0x13a>
     5e2:	9d 88       	ldd	r9, Y+21	; 0x15
     5e4:	cf d5       	rcall	.+2974   	; 0x1184 <xQueueCreateMutex+0x42>
     5e6:	9e 0b       	sbc	r25, r30
     5e8:	a4 27       	eor	r26, r20
     5ea:	ba 37       	cpi	r27, 0x7A	; 122
     5ec:	b7 79       	andi	r27, 0x97	; 151
     5ee:	b9 b4       	in	r11, 0x29	; 41
     5f0:	dc 8b       	std	Y+20, r29	; 0x14
     5f2:	4d 47       	sbci	r20, 0x7D	; 125
     5f4:	8c 98       	cbi	0x11, 4	; 17
     5f6:	4e c4       	rjmp	.+2204   	; 0xe94 <prvCopyDataToQueue+0x4e>
     5f8:	e7 6a       	ori	r30, 0xA7	; 167
     5fa:	a5 a0       	ldd	r10, Z+37	; 0x25
     5fc:	2d be       	out	0x3d, r2	; 61
     5fe:	a6 23       	and	r26, r22
     600:	46 4c       	sbci	r20, 0xC6	; 198
     602:	52 d0       	rcall	.+164    	; 0x6a8 <__c.2159+0x9a>
     604:	16 5f       	subi	r17, 0xF6	; 246
     606:	51 53       	subi	r21, 0x31	; 49
     608:	7d ad       	ldd	r23, Y+61	; 0x3d

0000060a <__c.2161>:
     60a:	6e 61 6e 00                                         nan.

0000060e <__c.2159>:
     60e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     61e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     62e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     63e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     64e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     65e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     66e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     67e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     68e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     69e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     6ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     6be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     6ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     6de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     6ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000070c <__ctors_end>:
     70c:	11 24       	eor	r1, r1
     70e:	1f be       	out	0x3f, r1	; 63
     710:	cf ef       	ldi	r28, 0xFF	; 255
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df e3       	ldi	r29, 0x3F	; 63
     716:	de bf       	out	0x3e, r29	; 62
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	0c bf       	out	0x3c, r16	; 60
     71c:	18 be       	out	0x38, r1	; 56
     71e:	19 be       	out	0x39, r1	; 57
     720:	1a be       	out	0x3a, r1	; 58
     722:	1b be       	out	0x3b, r1	; 59

00000724 <__do_copy_data>:
     724:	11 e2       	ldi	r17, 0x21	; 33
     726:	a0 e0       	ldi	r26, 0x00	; 0
     728:	b0 e2       	ldi	r27, 0x20	; 32
     72a:	e6 ef       	ldi	r30, 0xF6	; 246
     72c:	f9 e5       	ldi	r31, 0x59	; 89
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	0b bf       	out	0x3b, r16	; 59
     732:	02 c0       	rjmp	.+4      	; 0x738 <__do_copy_data+0x14>
     734:	07 90       	elpm	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	a0 30       	cpi	r26, 0x00	; 0
     73a:	b1 07       	cpc	r27, r17
     73c:	d9 f7       	brne	.-10     	; 0x734 <__do_copy_data+0x10>
     73e:	1b be       	out	0x3b, r1	; 59

00000740 <__do_clear_bss>:
     740:	2d e3       	ldi	r18, 0x3D	; 61
     742:	a0 e0       	ldi	r26, 0x00	; 0
     744:	b1 e2       	ldi	r27, 0x21	; 33
     746:	01 c0       	rjmp	.+2      	; 0x74a <.do_clear_bss_start>

00000748 <.do_clear_bss_loop>:
     748:	1d 92       	st	X+, r1

0000074a <.do_clear_bss_start>:
     74a:	a6 38       	cpi	r26, 0x86	; 134
     74c:	b2 07       	cpc	r27, r18
     74e:	e1 f7       	brne	.-8      	; 0x748 <.do_clear_bss_loop>
     750:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <main>
     754:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <_exit>

00000758 <__bad_interrupt>:
     758:	53 cc       	rjmp	.-1882   	; 0x0 <__vectors>

0000075a <cspTask>:
/*	Task that handles CSP incoming packets								*/
/* -------------------------------------------------------------------- */
void cspTask(void *p) {
	
	/* Create socket without any socket options */
	csp_socket_t * sock = csp_socket(CSP_SO_NONE);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	cb 01       	movw	r24, r22
     760:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <csp_socket>
     764:	7c 01       	movw	r14, r24

	/* Bind all ports to socket */
	csp_bind(sock, CSP_ANY);
     766:	60 e2       	ldi	r22, 0x20	; 32
     768:	0e 94 2e 19 	call	0x325c	; 0x325c <csp_bind>

	/* Create 10 connections backlog queue */
	csp_listen(sock, 10);
     76c:	6a e0       	ldi	r22, 0x0A	; 10
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	c7 01       	movw	r24, r14
     772:	0e 94 13 19 	call	0x3226	; 0x3226 <csp_listen>

	/* Pointer to current connection and packet */
	csp_conn_t * conn;
	csp_packet_t * packet;
	
	xCSPEventQueue = xQueueCreate(10, (portBASE_TYPE) sizeof(xCSPStackEvent_t));
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	8a e0       	ldi	r24, 0x0A	; 10
     77a:	0f d4       	rcall	.+2078   	; 0xf9a <xQueueCreate>
     77c:	80 93 c5 3c 	sts	0x3CC5, r24
     780:	90 93 c6 3c 	sts	0x3CC6, r25
					
				/* if Port 16 packet received */
				// Free Heap space in Human readable form
				case 16:
				
					newEvent->eEventType = freeHeapEvent;
     784:	cc 24       	eor	r12, r12
     786:	c3 94       	inc	r12
				
				/* if Port 17 packet received */
				// Return info status message
				case 17:
				
					newEvent->eEventType = housKeepingEvent;
     788:	68 94       	set
     78a:	dd 24       	eor	r13, r13
     78c:	d1 f8       	bld	r13, 1

	/* Process incoming connections */
	while (1) {
		
		/* Wait for connection, 10000 ms timeout */
		if ((conn = csp_accept(sock, 10000)) == NULL)
     78e:	40 e1       	ldi	r20, 0x10	; 16
     790:	57 e2       	ldi	r21, 0x27	; 39
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	c7 01       	movw	r24, r14
     798:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <csp_accept>
     79c:	8c 01       	movw	r16, r24
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	b1 f3       	breq	.-20     	; 0x78e <cspTask+0x34>
     7a2:	3c c0       	rjmp	.+120    	; 0x81c <cspTask+0xc2>
		continue;

		/* Read packets. Timout is 1000 ms */
		while ((packet = csp_read(conn, 10)) != NULL) {
			switch (csp_conn_dport(conn)) {
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <csp_conn_dport>
     7aa:	80 31       	cpi	r24, 0x10	; 16
     7ac:	91 05       	cpc	r25, r1
     7ae:	a1 f0       	breq	.+40     	; 0x7d8 <cspTask+0x7e>
     7b0:	81 31       	cpi	r24, 0x11	; 17
     7b2:	91 05       	cpc	r25, r1
     7b4:	01 f1       	breq	.+64     	; 0x7f6 <cspTask+0x9c>
     7b6:	0f 97       	sbiw	r24, 0x0f	; 15
     7b8:	69 f5       	brne	.+90     	; 0x814 <cspTask+0xba>
				
				/* if Port 15 packet received */
				// Echo back the incoming packet
				case 15:
				
					newEvent->eEventType = echoBackEvent;
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	fb 01       	movw	r30, r22
     7c0:	10 82       	st	Z, r1
					newEvent->pvData = packet;
     7c2:	c1 83       	std	Z+1, r28	; 0x01
     7c4:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	4a e0       	ldi	r20, 0x0A	; 10
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	80 91 c5 3c 	lds	r24, 0x3CC5
     7d0:	90 91 c6 3c 	lds	r25, 0x3CC6
     7d4:	2e d4       	rcall	.+2140   	; 0x1032 <xQueueGenericSend>
					
				break;
     7d6:	22 c0       	rjmp	.+68     	; 0x81c <cspTask+0xc2>
					
				/* if Port 16 packet received */
				// Free Heap space in Human readable form
				case 16:
				
					newEvent->eEventType = freeHeapEvent;
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	fb 01       	movw	r30, r22
     7de:	c0 82       	st	Z, r12
					newEvent->pvData = packet;
     7e0:	c1 83       	std	Z+1, r28	; 0x01
     7e2:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);	
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	4a e0       	ldi	r20, 0x0A	; 10
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 91 c5 3c 	lds	r24, 0x3CC5
     7ee:	90 91 c6 3c 	lds	r25, 0x3CC6
     7f2:	1f d4       	rcall	.+2110   	; 0x1032 <xQueueGenericSend>
					
				break;	
     7f4:	13 c0       	rjmp	.+38     	; 0x81c <cspTask+0xc2>
				
				/* if Port 17 packet received */
				// Return info status message
				case 17:
				
					newEvent->eEventType = housKeepingEvent;
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	fb 01       	movw	r30, r22
     7fc:	d0 82       	st	Z, r13
					newEvent->pvData = packet;
     7fe:	c1 83       	std	Z+1, r28	; 0x01
     800:	d2 83       	std	Z+2, r29	; 0x02
					xQueueSend(xCSPEventQueue, newEvent, 10);
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	4a e0       	ldi	r20, 0x0A	; 10
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	80 91 c5 3c 	lds	r24, 0x3CC5
     80c:	90 91 c6 3c 	lds	r25, 0x3CC6
     810:	10 d4       	rcall	.+2080   	; 0x1032 <xQueueGenericSend>
				
				break;		
     812:	04 c0       	rjmp	.+8      	; 0x81c <cspTask+0xc2>
				
				/* Process packet here */
				default:
				
				/* Let the service handler reply pings, buffer use, etc. */
				csp_service_handler(conn, packet);
     814:	be 01       	movw	r22, r28
     816:	c8 01       	movw	r24, r16
     818:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <csp_service_handler>
		/* Wait for connection, 10000 ms timeout */
		if ((conn = csp_accept(sock, 10000)) == NULL)
		continue;

		/* Read packets. Timout is 1000 ms */
		while ((packet = csp_read(conn, 10)) != NULL) {
     81c:	4a e0       	ldi	r20, 0x0A	; 10
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	c8 01       	movw	r24, r16
     826:	0e 94 75 17 	call	0x2eea	; 0x2eea <csp_read>
     82a:	ec 01       	movw	r28, r24
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	09 f0       	breq	.+2      	; 0x832 <cspTask+0xd8>
     830:	b9 cf       	rjmp	.-142    	; 0x7a4 <cspTask+0x4a>
				break;
			}
		}

		/* Close current connection, and handle next */
		csp_close(conn);
     832:	c8 01       	movw	r24, r16
     834:	0e 94 98 15 	call	0x2b30	; 0x2b30 <csp_close>
     838:	aa cf       	rjmp	.-172    	; 0x78e <cspTask+0x34>

0000083a <TWI_CSP_SlaveProcessData>:
TWI_Slave_t twi_csp_slave;			/*!< TWI slave module. */
i2c_callback_t callbackFunction;

// this function processes received data on the I2C Slave line
// It is call by the I2C driver
void TWI_CSP_SlaveProcessData(void) {
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	ca 50       	subi	r28, 0x0A	; 10
     844:	d1 40       	sbci	r29, 0x01	; 1
     846:	cd bf       	out	0x3d, r28	; 61
     848:	de bf       	out	0x3e, r29	; 62
	
	if (twi_csp_slave.result == TWIS_RESULT_OK) {
     84a:	80 91 17 3d 	lds	r24, 0x3D17
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	49 f5       	brne	.+82     	; 0x8a4 <TWI_CSP_SlaveProcessData+0x6a>
		
		i2c_frame_t newFrame;
		
		if (twi_csp_slave.bytesReceived > 0) {
     852:	80 91 14 3d 	lds	r24, 0x3D14
     856:	88 23       	and	r24, r24
     858:	e1 f0       	breq	.+56     	; 0x892 <TWI_CSP_SlaveProcessData+0x58>
			
			// set the data len
			newFrame.len = twi_csp_slave.bytesReceived;
     85a:	e4 e1       	ldi	r30, 0x14	; 20
     85c:	fd e3       	ldi	r31, 0x3D	; 61
     85e:	80 81       	ld	r24, Z
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	89 87       	std	Y+9, r24	; 0x09
     864:	9a 87       	std	Y+10, r25	; 0x0a
			
			// copy the data
			int i;
			for (i = 0; i < twi_csp_slave.bytesReceived; i++) {
     866:	80 81       	ld	r24, Z
     868:	88 23       	and	r24, r24
     86a:	99 f0       	breq	.+38     	; 0x892 <TWI_CSP_SlaveProcessData+0x58>
     86c:	fe 01       	movw	r30, r28
     86e:	3b 96       	adiw	r30, 0x0b	; 11
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	44 e1       	ldi	r20, 0x14	; 20
     876:	5d e3       	ldi	r21, 0x3D	; 61
				
				newFrame.data[i] = twi_csp_slave.receivedData[i];
     878:	dc 01       	movw	r26, r24
     87a:	a9 53       	subi	r26, 0x39	; 57
     87c:	b3 4c       	sbci	r27, 0xC3	; 195
     87e:	14 96       	adiw	r26, 0x04	; 4
     880:	2c 91       	ld	r18, X
     882:	21 93       	st	Z+, r18
			// set the data len
			newFrame.len = twi_csp_slave.bytesReceived;
			
			// copy the data
			int i;
			for (i = 0; i < twi_csp_slave.bytesReceived; i++) {
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	da 01       	movw	r26, r20
     888:	2c 91       	ld	r18, X
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	9c f3       	brlt	.-26     	; 0x878 <TWI_CSP_SlaveProcessData+0x3e>
				
				newFrame.data[i] = twi_csp_slave.receivedData[i];
			}
		}
		
		callbackFunction(&newFrame, false);
     892:	e0 91 6b 3d 	lds	r30, 0x3D6B
     896:	f0 91 6c 3d 	lds	r31, 0x3D6C
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	19 95       	eicall
		
	}
}
     8a4:	c6 5f       	subi	r28, 0xF6	; 246
     8a6:	de 4f       	sbci	r29, 0xFE	; 254
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <i2c_init>:

// Initialize the i2c interface for CSP
int i2c_init(int handle, int mode, uint8_t addr, uint16_t speed, int queue_len_tx, int queue_len_rx, i2c_callback_t callback) {
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	cf 93       	push	r28
     8b8:	c4 2f       	mov	r28, r20
	
	// Initialize TWI master for CSP
	TWI_MasterInit(&twi_csp_master, &CSP_I2C_INTERFACE, TWI_MASTER_INTLVL_LO_gc, speed);
     8ba:	40 e4       	ldi	r20, 0x40	; 64
     8bc:	60 ea       	ldi	r22, 0xA0	; 160
     8be:	74 e0       	ldi	r23, 0x04	; 4
     8c0:	89 e1       	ldi	r24, 0x19	; 25
     8c2:	9d e3       	ldi	r25, 0x3D	; 61
     8c4:	0e 94 1b 21 	call	0x4236	; 0x4236 <TWI_MasterInit>
			
	// Initialize TWI slave for CSP
	TWI_SlaveInitializeDriver(&twi_csp_slave, &CSP_I2C_INTERFACE, TWI_CSP_SlaveProcessData);
     8c8:	4d e1       	ldi	r20, 0x1D	; 29
     8ca:	54 e0       	ldi	r21, 0x04	; 4
     8cc:	60 ea       	ldi	r22, 0xA0	; 160
     8ce:	74 e0       	ldi	r23, 0x04	; 4
     8d0:	87 ec       	ldi	r24, 0xC7	; 199
     8d2:	9c e3       	ldi	r25, 0x3C	; 60
     8d4:	0e 94 41 22 	call	0x4482	; 0x4482 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twi_csp_slave, addr, TWI_SLAVE_INTLVL_LO_gc);
     8d8:	40 e4       	ldi	r20, 0x40	; 64
     8da:	6c 2f       	mov	r22, r28
     8dc:	87 ec       	ldi	r24, 0xC7	; 199
     8de:	9c e3       	ldi	r25, 0x3C	; 60
     8e0:	0e 94 52 22 	call	0x44a4	; 0x44a4 <TWI_SlaveInitializeModule>
	
	callbackFunction = callback;
     8e4:	c0 92 6b 3d 	sts	0x3D6B, r12
     8e8:	d0 92 6c 3d 	sts	0x3D6C, r13
	
	return E_NO_ERR;
}
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	cf 91       	pop	r28
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <i2c_send>:
 * @param timeout Ticks to wait
 * @return Error code
 */
int i2c_send(int handle, i2c_frame_t * frame, uint16_t timeout) {
		
	if (TWI_MasterWrite(&twi_csp_master, frame->dest, (uint8_t *) frame->data, frame->len)) {
     8f8:	ab 01       	movw	r20, r22
     8fa:	46 5f       	subi	r20, 0xF6	; 246
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	fb 01       	movw	r30, r22
     900:	20 85       	ldd	r18, Z+8	; 0x08
     902:	66 81       	ldd	r22, Z+6	; 0x06
     904:	89 e1       	ldi	r24, 0x19	; 25
     906:	9d e3       	ldi	r25, 0x3D	; 61
     908:	0e 94 8c 21 	call	0x4318	; 0x4318 <TWI_MasterWrite>
     90c:	88 23       	and	r24, r24
     90e:	19 f0       	breq	.+6      	; 0x916 <i2c_send+0x1e>
		
		return E_NO_ERR;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	08 95       	ret
	} else {
		
		return 1;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     91a:	08 95       	ret

0000091c <clock_get_time>:

/* User functions required */
void clock_get_time(csp_timestamp_t * time) {
     91c:	08 95       	ret

0000091e <clock_set_time>:
	
	
}

extern void clock_set_time(csp_timestamp_t * time) {
     91e:	08 95       	ret

00000920 <__vector_46>:
	
}

/*! CSP Master Interrupt vector. */
ISR(CSP_I2C_TWIM)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	08 b6       	in	r0, 0x38	; 56
     92c:	0f 92       	push	r0
     92e:	18 be       	out	0x38, r1	; 56
     930:	09 b6       	in	r0, 0x39	; 57
     932:	0f 92       	push	r0
     934:	19 be       	out	0x39, r1	; 57
     936:	0b b6       	in	r0, 0x3b	; 59
     938:	0f 92       	push	r0
     93a:	1b be       	out	0x3b, r1	; 59
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twi_csp_master);
     954:	89 e1       	ldi	r24, 0x19	; 25
     956:	9d e3       	ldi	r25, 0x3D	; 61
     958:	0e 94 28 22 	call	0x4450	; 0x4450 <TWI_MasterInterruptHandler>
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	09 be       	out	0x39, r0	; 57
     97c:	0f 90       	pop	r0
     97e:	08 be       	out	0x38, r0	; 56
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_45>:

/*! CPS Slave Interrupt vector. */
ISR(CSP_I2C_TWIS)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	08 b6       	in	r0, 0x38	; 56
     996:	0f 92       	push	r0
     998:	18 be       	out	0x38, r1	; 56
     99a:	09 b6       	in	r0, 0x39	; 57
     99c:	0f 92       	push	r0
     99e:	19 be       	out	0x39, r1	; 57
     9a0:	0b b6       	in	r0, 0x3b	; 59
     9a2:	0f 92       	push	r0
     9a4:	1b be       	out	0x3b, r1	; 59
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twi_csp_slave);
     9be:	87 ec       	ldi	r24, 0xC7	; 199
     9c0:	9c e3       	ldi	r25, 0x3C	; 60
     9c2:	0e 94 21 23 	call	0x4642	; 0x4642 <TWI_SlaveInterruptHandler>
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0b be       	out	0x3b, r0	; 59
     9e2:	0f 90       	pop	r0
     9e4:	09 be       	out	0x39, r0	; 57
     9e6:	0f 90       	pop	r0
     9e8:	08 be       	out	0x38, r0	; 56
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	dd d6       	rcall	.+3514   	; 0x17b6 <vTaskSuspendAll>
     9fc:	40 91 00 21 	lds	r20, 0x2100
     a00:	50 91 01 21 	lds	r21, 0x2101
     a04:	9e 01       	movw	r18, r28
     a06:	24 0f       	add	r18, r20
     a08:	35 1f       	adc	r19, r21
     a0a:	24 36       	cpi	r18, 0x64	; 100
     a0c:	89 e1       	ldi	r24, 0x19	; 25
     a0e:	38 07       	cpc	r19, r24
     a10:	58 f4       	brcc	.+22     	; 0xa28 <pvPortMalloc+0x34>
     a12:	42 17       	cp	r20, r18
     a14:	53 07       	cpc	r21, r19
     a16:	58 f4       	brcc	.+22     	; 0xa2e <pvPortMalloc+0x3a>
     a18:	ea 01       	movw	r28, r20
     a1a:	ce 5f       	subi	r28, 0xFE	; 254
     a1c:	de 4d       	sbci	r29, 0xDE	; 222
     a1e:	20 93 00 21 	sts	0x2100, r18
     a22:	30 93 01 21 	sts	0x2101, r19
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <pvPortMalloc+0x3e>
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	d0 e0       	ldi	r29, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <pvPortMalloc+0x3e>
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	95 d7       	rcall	.+3882   	; 0x195e <xTaskResumeAll>
     a34:	ce 01       	movw	r24, r28
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <vPortFree>:
     a3c:	08 95       	ret

00000a3e <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     a3e:	20 91 00 21 	lds	r18, 0x2100
     a42:	30 91 01 21 	lds	r19, 0x2101
}
     a46:	84 e6       	ldi	r24, 0x64	; 100
     a48:	99 e1       	ldi	r25, 0x19	; 25
     a4a:	82 1b       	sub	r24, r18
     a4c:	93 0b       	sbc	r25, r19
     a4e:	08 95       	ret

00000a50 <pxPortInitialiseStack>:
    /* Should not get here. */
    return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler(void) {
     a50:	31 e1       	ldi	r19, 0x11	; 17
     a52:	fc 01       	movw	r30, r24
     a54:	30 83       	st	Z, r19
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	22 e2       	ldi	r18, 0x22	; 34
     a5a:	20 83       	st	Z, r18
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	a3 e3       	ldi	r26, 0x33	; 51
     a60:	a0 83       	st	Z, r26
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	60 83       	st	Z, r22
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	70 83       	st	Z, r23
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	10 82       	st	Z, r1
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	10 82       	st	Z, r1
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	60 e8       	ldi	r22, 0x80	; 128
     a76:	60 83       	st	Z, r22
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	10 82       	st	Z, r1
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	62 e0       	ldi	r22, 0x02	; 2
     a80:	60 83       	st	Z, r22
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	60 83       	st	Z, r22
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	60 83       	st	Z, r22
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	65 e0       	ldi	r22, 0x05	; 5
     a92:	60 83       	st	Z, r22
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	66 e0       	ldi	r22, 0x06	; 6
     a98:	60 83       	st	Z, r22
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	60 83       	st	Z, r22
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	68 e0       	ldi	r22, 0x08	; 8
     aa4:	60 83       	st	Z, r22
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	69 e0       	ldi	r22, 0x09	; 9
     aaa:	60 83       	st	Z, r22
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	60 e1       	ldi	r22, 0x10	; 16
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	30 83       	st	Z, r19
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	32 e1       	ldi	r19, 0x12	; 18
     aba:	30 83       	st	Z, r19
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	33 e1       	ldi	r19, 0x13	; 19
     ac0:	30 83       	st	Z, r19
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	34 e1       	ldi	r19, 0x14	; 20
     ac6:	30 83       	st	Z, r19
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	35 e1       	ldi	r19, 0x15	; 21
     acc:	30 83       	st	Z, r19
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	36 e1       	ldi	r19, 0x16	; 22
     ad2:	30 83       	st	Z, r19
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	37 e1       	ldi	r19, 0x17	; 23
     ad8:	30 83       	st	Z, r19
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	38 e1       	ldi	r19, 0x18	; 24
     ade:	30 83       	st	Z, r19
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	39 e1       	ldi	r19, 0x19	; 25
     ae4:	30 83       	st	Z, r19
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	30 e2       	ldi	r19, 0x20	; 32
     aea:	30 83       	st	Z, r19
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	31 e2       	ldi	r19, 0x21	; 33
     af0:	30 83       	st	Z, r19
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	20 83       	st	Z, r18
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	23 e2       	ldi	r18, 0x23	; 35
     afa:	20 83       	st	Z, r18
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	40 83       	st	Z, r20
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	50 83       	st	Z, r21
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	26 e2       	ldi	r18, 0x26	; 38
     b08:	20 83       	st	Z, r18
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	27 e2       	ldi	r18, 0x27	; 39
     b0e:	20 83       	st	Z, r18
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	28 e2       	ldi	r18, 0x28	; 40
     b14:	20 83       	st	Z, r18
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	29 e2       	ldi	r18, 0x29	; 41
     b1a:	20 83       	st	Z, r18
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	20 e3       	ldi	r18, 0x30	; 48
     b20:	20 83       	st	Z, r18
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	21 e3       	ldi	r18, 0x31	; 49
     b26:	20 83       	st	Z, r18
     b28:	87 97       	sbiw	r24, 0x27	; 39
     b2a:	08 95       	ret

00000b2c <xPortStartScheduler>:
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	98 e0       	ldi	r25, 0x08	; 8
     b32:	0e 94 0f 21 	call	0x421e	; 0x421e <TC0_ConfigClockSource>
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9c e7       	ldi	r25, 0x7C	; 124
     b3a:	e0 e0       	ldi	r30, 0x00	; 0
     b3c:	f8 e0       	ldi	r31, 0x08	; 8
     b3e:	86 a3       	std	Z+38, r24	; 0x26
     b40:	97 a3       	std	Z+39, r25	; 0x27
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	98 e0       	ldi	r25, 0x08	; 8
     b48:	0e 94 15 21 	call	0x422a	; 0x422a <TC0_SetOverflowIntLevel>
     b4c:	e0 ea       	ldi	r30, 0xA0	; 160
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	81 60       	ori	r24, 0x01	; 1
     b54:	82 83       	std	Z+2, r24	; 0x02
     b56:	a0 91 d9 3a 	lds	r26, 0x3AD9
     b5a:	b0 91 da 3a 	lds	r27, 0x3ADA
     b5e:	cd 91       	ld	r28, X+
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	dd 91       	ld	r29, X+
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	cf 90       	pop	r12
     b8e:	bf 90       	pop	r11
     b90:	af 90       	pop	r10
     b92:	9f 90       	pop	r9
     b94:	8f 90       	pop	r8
     b96:	7f 90       	pop	r7
     b98:	6f 90       	pop	r6
     b9a:	5f 90       	pop	r5
     b9c:	4f 90       	pop	r4
     b9e:	3f 90       	pop	r3
     ba0:	2f 90       	pop	r2
     ba2:	1f 90       	pop	r1
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	08 95       	ret
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	08 95       	ret

00000bb0 <vPortYield>:
 * Manual context switch.  The first thing we do is save the registers so we
 * can use a naked attribute.
 */
void vPortYield(void) __attribute__ ( ( naked ) );
void vPortYield(void) {
    portSAVE_CONTEXT();
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	0f 92       	push	r0
     bb8:	1f 92       	push	r1
     bba:	11 24       	eor	r1, r1
     bbc:	2f 92       	push	r2
     bbe:	3f 92       	push	r3
     bc0:	4f 92       	push	r4
     bc2:	5f 92       	push	r5
     bc4:	6f 92       	push	r6
     bc6:	7f 92       	push	r7
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
     bf8:	a0 91 d9 3a 	lds	r26, 0x3AD9
     bfc:	b0 91 da 3a 	lds	r27, 0x3ADA
     c00:	0d b6       	in	r0, 0x3d	; 61
     c02:	0d 92       	st	X+, r0
     c04:	0e b6       	in	r0, 0x3e	; 62
     c06:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c08:	87 d7       	rcall	.+3854   	; 0x1b18 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c0a:	a0 91 d9 3a 	lds	r26, 0x3AD9
     c0e:	b0 91 da 3a 	lds	r27, 0x3ADA
     c12:	cd 91       	ld	r28, X+
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	dd 91       	ld	r29, X+
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	af 90       	pop	r10
     c46:	9f 90       	pop	r9
     c48:	8f 90       	pop	r8
     c4a:	7f 90       	pop	r7
     c4c:	6f 90       	pop	r6
     c4e:	5f 90       	pop	r5
     c50:	4f 90       	pop	r4
     c52:	3f 90       	pop	r3
     c54:	2f 90       	pop	r2
     c56:	1f 90       	pop	r1
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0

    asm volatile ( "ret" );
     c5e:	08 95       	ret

00000c60 <__vector_14>:
     * Context switch function used by the tick.  This must be identical to
     * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
     * difference from vPortYield() is the tick count is incremented as the
     * call comes from the tick ISR.
     */
    portSAVE_CONTEXT();
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	0f 92       	push	r0
     c68:	1f 92       	push	r1
     c6a:	11 24       	eor	r1, r1
     c6c:	2f 92       	push	r2
     c6e:	3f 92       	push	r3
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
     ca8:	a0 91 d9 3a 	lds	r26, 0x3AD9
     cac:	b0 91 da 3a 	lds	r27, 0x3ADA
     cb0:	0d b6       	in	r0, 0x3d	; 61
     cb2:	0d 92       	st	X+, r0
     cb4:	0e b6       	in	r0, 0x3e	; 62
     cb6:	0d 92       	st	X+, r0
    vTaskIncrementTick();
     cb8:	91 d5       	rcall	.+2850   	; 0x17dc <vTaskIncrementTick>
    vTaskSwitchContext();
     cba:	2e d7       	rcall	.+3676   	; 0x1b18 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     cbc:	a0 91 d9 3a 	lds	r26, 0x3AD9
     cc0:	b0 91 da 3a 	lds	r27, 0x3ADA
     cc4:	cd 91       	ld	r28, X+
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	dd 91       	ld	r29, X+
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	bf 91       	pop	r27
     cd6:	af 91       	pop	r26
     cd8:	9f 91       	pop	r25
     cda:	8f 91       	pop	r24
     cdc:	7f 91       	pop	r23
     cde:	6f 91       	pop	r22
     ce0:	5f 91       	pop	r21
     ce2:	4f 91       	pop	r20
     ce4:	3f 91       	pop	r19
     ce6:	2f 91       	pop	r18
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	5f 90       	pop	r5
     d02:	4f 90       	pop	r4
     d04:	3f 90       	pop	r3
     d06:	2f 90       	pop	r2
     d08:	1f 90       	pop	r1
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
    asm volatile ( "reti" );
     d10:	18 95       	reti

00000d12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     d12:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     d14:	03 96       	adiw	r24, 0x03	; 3
     d16:	81 83       	std	Z+1, r24	; 0x01
     d18:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d1a:	2f ef       	ldi	r18, 0xFF	; 255
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	23 83       	std	Z+3, r18	; 0x03
     d20:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     d22:	85 83       	std	Z+5, r24	; 0x05
     d24:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     d26:	87 83       	std	Z+7, r24	; 0x07
     d28:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     d2a:	10 82       	st	Z, r1
     d2c:	08 95       	ret

00000d2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d2e:	fc 01       	movw	r30, r24
     d30:	10 86       	std	Z+8, r1	; 0x08
     d32:	11 86       	std	Z+9, r1	; 0x09
     d34:	08 95       	ret

00000d36 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	fc 01       	movw	r30, r24
     d3c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d3e:	21 81       	ldd	r18, Z+1	; 0x01
     d40:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     d42:	e9 01       	movw	r28, r18
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	12 96       	adiw	r26, 0x02	; 2
     d4a:	8d 93       	st	X+, r24
     d4c:	9c 93       	st	X, r25
     d4e:	13 97       	sbiw	r26, 0x03	; 3
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	92 81       	ldd	r25, Z+2	; 0x02
     d54:	14 96       	adiw	r26, 0x04	; 4
     d56:	8d 93       	st	X+, r24
     d58:	9c 93       	st	X, r25
     d5a:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	ec 01       	movw	r28, r24
     d62:	6c 83       	std	Y+4, r22	; 0x04
     d64:	7d 83       	std	Y+5, r23	; 0x05
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     d66:	e9 01       	movw	r28, r18
     d68:	6a 83       	std	Y+2, r22	; 0x02
     d6a:	7b 83       	std	Y+3, r23	; 0x03
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     d6c:	61 83       	std	Z+1, r22	; 0x01
     d6e:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d70:	18 96       	adiw	r26, 0x08	; 8
     d72:	ed 93       	st	X+, r30
     d74:	fc 93       	st	X, r31
     d76:	19 97       	sbiw	r26, 0x09	; 9

	( pxList->uxNumberOfItems )++;
     d78:	80 81       	ld	r24, Z
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 83       	st	Z, r24
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	08 95       	ret

00000d84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     d8a:	48 81       	ld	r20, Y
     d8c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d8e:	4f 3f       	cpi	r20, 0xFF	; 255
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	52 07       	cpc	r21, r18
     d94:	31 f4       	brne	.+12     	; 0xda2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d96:	dc 01       	movw	r26, r24
     d98:	17 96       	adiw	r26, 0x07	; 7
     d9a:	ed 91       	ld	r30, X+
     d9c:	fc 91       	ld	r31, X
     d9e:	18 97       	sbiw	r26, 0x08	; 8
     da0:	17 c0       	rjmp	.+46     	; 0xdd0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     da2:	fc 01       	movw	r30, r24
     da4:	33 96       	adiw	r30, 0x03	; 3
     da6:	dc 01       	movw	r26, r24
     da8:	15 96       	adiw	r26, 0x05	; 5
     daa:	2d 91       	ld	r18, X+
     dac:	3c 91       	ld	r19, X
     dae:	16 97       	sbiw	r26, 0x06	; 6
     db0:	d9 01       	movw	r26, r18
     db2:	2d 91       	ld	r18, X+
     db4:	3c 91       	ld	r19, X
     db6:	42 17       	cp	r20, r18
     db8:	53 07       	cpc	r21, r19
     dba:	50 f0       	brcs	.+20     	; 0xdd0 <vListInsert+0x4c>
     dbc:	02 80       	ldd	r0, Z+2	; 0x02
     dbe:	f3 81       	ldd	r31, Z+3	; 0x03
     dc0:	e0 2d       	mov	r30, r0
     dc2:	a2 81       	ldd	r26, Z+2	; 0x02
     dc4:	b3 81       	ldd	r27, Z+3	; 0x03
     dc6:	2d 91       	ld	r18, X+
     dc8:	3c 91       	ld	r19, X
     dca:	42 17       	cp	r20, r18
     dcc:	53 07       	cpc	r21, r19
     dce:	b0 f7       	brcc	.-20     	; 0xdbc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dd0:	a2 81       	ldd	r26, Z+2	; 0x02
     dd2:	b3 81       	ldd	r27, Z+3	; 0x03
     dd4:	aa 83       	std	Y+2, r26	; 0x02
     dd6:	bb 83       	std	Y+3, r27	; 0x03
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	cd 93       	st	X+, r28
     ddc:	dc 93       	st	X, r29
     dde:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxIterator;
     de0:	ec 83       	std	Y+4, r30	; 0x04
     de2:	fd 83       	std	Y+5, r31	; 0x05
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     de4:	c2 83       	std	Z+2, r28	; 0x02
     de6:	d3 83       	std	Z+3, r29	; 0x03

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     de8:	88 87       	std	Y+8, r24	; 0x08
     dea:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     dec:	fc 01       	movw	r30, r24
     dee:	20 81       	ld	r18, Z
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	20 83       	st	Z, r18
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     dfa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     dfc:	a2 81       	ldd	r26, Z+2	; 0x02
     dfe:	b3 81       	ldd	r27, Z+3	; 0x03
     e00:	84 81       	ldd	r24, Z+4	; 0x04
     e02:	95 81       	ldd	r25, Z+5	; 0x05
     e04:	14 96       	adiw	r26, 0x04	; 4
     e06:	8d 93       	st	X+, r24
     e08:	9c 93       	st	X, r25
     e0a:	15 97       	sbiw	r26, 0x05	; 5
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e0c:	a4 81       	ldd	r26, Z+4	; 0x04
     e0e:	b5 81       	ldd	r27, Z+5	; 0x05
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	8d 93       	st	X+, r24
     e18:	9c 93       	st	X, r25
     e1a:	13 97       	sbiw	r26, 0x03	; 3
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     e1c:	a0 85       	ldd	r26, Z+8	; 0x08
     e1e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	8d 91       	ld	r24, X+
     e24:	9c 91       	ld	r25, X
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	8e 17       	cp	r24, r30
     e2a:	9f 07       	cpc	r25, r31
     e2c:	31 f4       	brne	.+12     	; 0xe3a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	8d 93       	st	X+, r24
     e36:	9c 93       	st	X, r25
     e38:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
     e3a:	10 86       	std	Z+8, r1	; 0x08
     e3c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     e3e:	8c 91       	ld	r24, X
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	8c 93       	st	X, r24
     e44:	08 95       	ret

00000e46 <prvCopyDataToQueue>:

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );

	return xReturn;
}
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e4e:	81 11       	cpse	r24, r1
     e50:	0b c0       	rjmp	.+22     	; 0xe68 <prvCopyDataToQueue+0x22>
     e52:	88 81       	ld	r24, Y
     e54:	99 81       	ldd	r25, Y+1	; 0x01
     e56:	89 2b       	or	r24, r25
     e58:	e1 f5       	brne	.+120    	; 0xed2 <prvCopyDataToQueue+0x8c>
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <vTaskPriorityDisinherit>
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	1b 82       	std	Y+3, r1	; 0x03
     e66:	35 c0       	rjmp	.+106    	; 0xed2 <prvCopyDataToQueue+0x8c>
     e68:	41 11       	cpse	r20, r1
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <prvCopyDataToQueue+0x54>
     e6c:	48 2f       	mov	r20, r24
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
     e78:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	82 0f       	add	r24, r18
     e80:	91 1d       	adc	r25, r1
     e82:	8c 83       	std	Y+4, r24	; 0x04
     e84:	9d 83       	std	Y+5, r25	; 0x05
     e86:	2a 81       	ldd	r18, Y+2	; 0x02
     e88:	3b 81       	ldd	r19, Y+3	; 0x03
     e8a:	82 17       	cp	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	08 f1       	brcs	.+66     	; 0xed2 <prvCopyDataToQueue+0x8c>
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	8c 83       	std	Y+4, r24	; 0x04
     e96:	9d 83       	std	Y+5, r25	; 0x05
     e98:	1c c0       	rjmp	.+56     	; 0xed2 <prvCopyDataToQueue+0x8c>
     e9a:	48 2f       	mov	r20, r24
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
     ea6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	31 95       	neg	r19
     eac:	21 95       	neg	r18
     eae:	31 09       	sbc	r19, r1
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	8e 83       	std	Y+6, r24	; 0x06
     eba:	9f 83       	std	Y+7, r25	; 0x07
     ebc:	48 81       	ld	r20, Y
     ebe:	59 81       	ldd	r21, Y+1	; 0x01
     ec0:	84 17       	cp	r24, r20
     ec2:	95 07       	cpc	r25, r21
     ec4:	30 f4       	brcc	.+12     	; 0xed2 <prvCopyDataToQueue+0x8c>
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	28 0f       	add	r18, r24
     ecc:	39 1f       	adc	r19, r25
     ece:	2e 83       	std	Y+6, r18	; 0x06
     ed0:	3f 83       	std	Y+7, r19	; 0x07
     ed2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8a 8f       	std	Y+26, r24	; 0x1a
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <prvCopyDataFromQueue>:
     ede:	fc 01       	movw	r30, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	a0 81       	ld	r26, Z
     ee4:	b1 81       	ldd	r27, Z+1	; 0x01
     ee6:	10 97       	sbiw	r26, 0x00	; 0
     ee8:	99 f0       	breq	.+38     	; 0xf10 <prvCopyDataFromQueue+0x32>
     eea:	44 8d       	ldd	r20, Z+28	; 0x1c
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	26 81       	ldd	r18, Z+6	; 0x06
     ef0:	37 81       	ldd	r19, Z+7	; 0x07
     ef2:	24 0f       	add	r18, r20
     ef4:	35 1f       	adc	r19, r21
     ef6:	26 83       	std	Z+6, r18	; 0x06
     ef8:	37 83       	std	Z+7, r19	; 0x07
     efa:	62 81       	ldd	r22, Z+2	; 0x02
     efc:	73 81       	ldd	r23, Z+3	; 0x03
     efe:	26 17       	cp	r18, r22
     f00:	37 07       	cpc	r19, r23
     f02:	10 f0       	brcs	.+4      	; 0xf08 <prvCopyDataFromQueue+0x2a>
     f04:	a6 83       	std	Z+6, r26	; 0x06
     f06:	b7 83       	std	Z+7, r27	; 0x07
     f08:	66 81       	ldd	r22, Z+6	; 0x06
     f0a:	77 81       	ldd	r23, Z+7	; 0x07
     f0c:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <memcpy>
     f10:	08 95       	ret

00000f12 <prvUnlockQueue>:
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	0f 92       	push	r0
     f22:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f24:	18 16       	cp	r1, r24
     f26:	9c f4       	brge	.+38     	; 0xf4e <prvUnlockQueue+0x3c>
     f28:	89 89       	ldd	r24, Y+17	; 0x11
     f2a:	88 23       	and	r24, r24
     f2c:	81 f0       	breq	.+32     	; 0xf4e <prvUnlockQueue+0x3c>
     f2e:	8e 01       	movw	r16, r28
     f30:	0f 5e       	subi	r16, 0xEF	; 239
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <prvUnlockQueue+0x2a>
     f36:	89 89       	ldd	r24, Y+17	; 0x11
     f38:	88 23       	and	r24, r24
     f3a:	49 f0       	breq	.+18     	; 0xf4e <prvUnlockQueue+0x3c>
     f3c:	c8 01       	movw	r24, r16
     f3e:	dc d6       	rcall	.+3512   	; 0x1cf8 <xTaskRemoveFromEventList>
     f40:	81 11       	cpse	r24, r1
     f42:	66 d7       	rcall	.+3788   	; 0x1e10 <vTaskMissedYield>
     f44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	8e 8f       	std	Y+30, r24	; 0x1e
     f4a:	18 16       	cp	r1, r24
     f4c:	a4 f3       	brlt	.-24     	; 0xf36 <prvUnlockQueue+0x24>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	8e 8f       	std	Y+30, r24	; 0x1e
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5e:	18 16       	cp	r1, r24
     f60:	9c f4       	brge	.+38     	; 0xf88 <prvUnlockQueue+0x76>
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	88 23       	and	r24, r24
     f66:	81 f0       	breq	.+32     	; 0xf88 <prvUnlockQueue+0x76>
     f68:	8e 01       	movw	r16, r28
     f6a:	08 5f       	subi	r16, 0xF8	; 248
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <prvUnlockQueue+0x64>
     f70:	88 85       	ldd	r24, Y+8	; 0x08
     f72:	88 23       	and	r24, r24
     f74:	49 f0       	breq	.+18     	; 0xf88 <prvUnlockQueue+0x76>
     f76:	c8 01       	movw	r24, r16
     f78:	bf d6       	rcall	.+3454   	; 0x1cf8 <xTaskRemoveFromEventList>
     f7a:	81 11       	cpse	r24, r1
     f7c:	49 d7       	rcall	.+3730   	; 0x1e10 <vTaskMissedYield>
     f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f80:	81 50       	subi	r24, 0x01	; 1
     f82:	8d 8f       	std	Y+29, r24	; 0x1d
     f84:	18 16       	cp	r1, r24
     f86:	a4 f3       	brlt	.-24     	; 0xf70 <prvUnlockQueue+0x5e>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	8d 8f       	std	Y+29, r24	; 0x1d
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <xQueueCreate>:
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	d8 2e       	mov	r13, r24
     fac:	c6 2e       	mov	r12, r22
     fae:	88 23       	and	r24, r24
     fb0:	a1 f1       	breq	.+104    	; 0x101a <xQueueCreate+0x80>
     fb2:	8f e1       	ldi	r24, 0x1F	; 31
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	1e dd       	rcall	.-1476   	; 0x9f4 <pvPortMalloc>
     fb8:	ec 01       	movw	r28, r24
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	81 f1       	breq	.+96     	; 0x101e <xQueueCreate+0x84>
     fbe:	ec 2c       	mov	r14, r12
     fc0:	f1 2c       	mov	r15, r1
     fc2:	de 9c       	mul	r13, r14
     fc4:	80 01       	movw	r16, r0
     fc6:	df 9c       	mul	r13, r15
     fc8:	10 0d       	add	r17, r0
     fca:	11 24       	eor	r1, r1
     fcc:	c8 01       	movw	r24, r16
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	11 dd       	rcall	.-1502   	; 0x9f4 <pvPortMalloc>
     fd2:	88 83       	st	Y, r24
     fd4:	99 83       	std	Y+1, r25	; 0x01
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d9 f0       	breq	.+54     	; 0x1010 <xQueueCreate+0x76>
     fda:	ac 01       	movw	r20, r24
     fdc:	40 0f       	add	r20, r16
     fde:	51 1f       	adc	r21, r17
     fe0:	4a 83       	std	Y+2, r20	; 0x02
     fe2:	5b 83       	std	Y+3, r21	; 0x03
     fe4:	1a 8e       	std	Y+26, r1	; 0x1a
     fe6:	8c 83       	std	Y+4, r24	; 0x04
     fe8:	9d 83       	std	Y+5, r25	; 0x05
     fea:	0e 19       	sub	r16, r14
     fec:	1f 09       	sbc	r17, r15
     fee:	9c 01       	movw	r18, r24
     ff0:	20 0f       	add	r18, r16
     ff2:	31 1f       	adc	r19, r17
     ff4:	2e 83       	std	Y+6, r18	; 0x06
     ff6:	3f 83       	std	Y+7, r19	; 0x07
     ff8:	db 8e       	std	Y+27, r13	; 0x1b
     ffa:	cc 8e       	std	Y+28, r12	; 0x1c
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
    1002:	ce 01       	movw	r24, r28
    1004:	08 96       	adiw	r24, 0x08	; 8
    1006:	85 de       	rcall	.-758    	; 0xd12 <vListInitialise>
    1008:	ce 01       	movw	r24, r28
    100a:	41 96       	adiw	r24, 0x11	; 17
    100c:	82 de       	rcall	.-764    	; 0xd12 <vListInitialise>
    100e:	07 c0       	rjmp	.+14     	; 0x101e <xQueueCreate+0x84>
    1010:	ce 01       	movw	r24, r28
    1012:	14 dd       	rcall	.-1496   	; 0xa3c <vPortFree>
    1014:	c0 e0       	ldi	r28, 0x00	; 0
    1016:	d0 e0       	ldi	r29, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <xQueueCreate+0x84>
    101a:	c0 e0       	ldi	r28, 0x00	; 0
    101c:	d0 e0       	ldi	r29, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <xQueueGenericSend>:
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	25 97       	sbiw	r28, 0x05	; 5
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	8c 01       	movw	r16, r24
    1052:	6b 01       	movw	r12, r22
    1054:	4c 83       	std	Y+4, r20	; 0x04
    1056:	5d 83       	std	Y+5, r21	; 0x05
    1058:	a2 2e       	mov	r10, r18
    105a:	b1 2c       	mov	r11, r1
    105c:	7c 01       	movw	r14, r24
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	e8 0e       	add	r14, r24
    1062:	f1 1c       	adc	r15, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	f8 01       	movw	r30, r16
    106c:	92 8d       	ldd	r25, Z+26	; 0x1a
    106e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1070:	98 17       	cp	r25, r24
    1072:	90 f4       	brcc	.+36     	; 0x1098 <xQueueGenericSend+0x66>
    1074:	4a 2d       	mov	r20, r10
    1076:	b6 01       	movw	r22, r12
    1078:	c8 01       	movw	r24, r16
    107a:	e5 de       	rcall	.-566    	; 0xe46 <prvCopyDataToQueue>
    107c:	f8 01       	movw	r30, r16
    107e:	81 89       	ldd	r24, Z+17	; 0x11
    1080:	88 23       	and	r24, r24
    1082:	31 f0       	breq	.+12     	; 0x1090 <xQueueGenericSend+0x5e>
    1084:	c8 01       	movw	r24, r16
    1086:	41 96       	adiw	r24, 0x11	; 17
    1088:	37 d6       	rcall	.+3182   	; 0x1cf8 <xTaskRemoveFromEventList>
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f4       	brne	.+2      	; 0x1090 <xQueueGenericSend+0x5e>
    108e:	90 dd       	rcall	.-1248   	; 0xbb0 <vPortYield>
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	47 c0       	rjmp	.+142    	; 0x1126 <xQueueGenericSend+0xf4>
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	ef 2b       	or	r30, r31
    109e:	21 f4       	brne	.+8      	; 0x10a8 <xQueueGenericSend+0x76>
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <xQueueGenericSend+0xf4>
    10a8:	b1 10       	cpse	r11, r1
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <xQueueGenericSend+0x84>
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	66 d6       	rcall	.+3276   	; 0x1d7e <vTaskSetTimeOutState>
    10b2:	bb 24       	eor	r11, r11
    10b4:	b3 94       	inc	r11
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	7d d3       	rcall	.+1786   	; 0x17b6 <vTaskSuspendAll>
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	0f 92       	push	r0
    10c2:	f8 01       	movw	r30, r16
    10c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    10c6:	8f 3f       	cpi	r24, 0xFF	; 255
    10c8:	09 f4       	brne	.+2      	; 0x10cc <xQueueGenericSend+0x9a>
    10ca:	15 8e       	std	Z+29, r1	; 0x1d
    10cc:	f8 01       	movw	r30, r16
    10ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    10d0:	8f 3f       	cpi	r24, 0xFF	; 255
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <xQueueGenericSend+0xa4>
    10d4:	16 8e       	std	Z+30, r1	; 0x1e
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	be 01       	movw	r22, r28
    10dc:	6c 5f       	subi	r22, 0xFC	; 252
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	57 d6       	rcall	.+3246   	; 0x1d94 <xTaskCheckForTimeOut>
    10e6:	81 11       	cpse	r24, r1
    10e8:	1a c0       	rjmp	.+52     	; 0x111e <xQueueGenericSend+0xec>
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	0f 92       	push	r0
    10f0:	f8 01       	movw	r30, r16
    10f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	f8 01       	movw	r30, r16
    10fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    10fc:	98 13       	cpse	r25, r24
    10fe:	0b c0       	rjmp	.+22     	; 0x1116 <xQueueGenericSend+0xe4>
    1100:	6c 81       	ldd	r22, Y+4	; 0x04
    1102:	7d 81       	ldd	r23, Y+5	; 0x05
    1104:	c7 01       	movw	r24, r14
    1106:	b6 d5       	rcall	.+2924   	; 0x1c74 <vTaskPlaceOnEventList>
    1108:	c8 01       	movw	r24, r16
    110a:	03 df       	rcall	.-506    	; 0xf12 <prvUnlockQueue>
    110c:	28 d4       	rcall	.+2128   	; 0x195e <xTaskResumeAll>
    110e:	81 11       	cpse	r24, r1
    1110:	a9 cf       	rjmp	.-174    	; 0x1064 <xQueueGenericSend+0x32>
    1112:	4e dd       	rcall	.-1380   	; 0xbb0 <vPortYield>
    1114:	a7 cf       	rjmp	.-178    	; 0x1064 <xQueueGenericSend+0x32>
    1116:	c8 01       	movw	r24, r16
    1118:	fc de       	rcall	.-520    	; 0xf12 <prvUnlockQueue>
    111a:	21 d4       	rcall	.+2114   	; 0x195e <xTaskResumeAll>
    111c:	a3 cf       	rjmp	.-186    	; 0x1064 <xQueueGenericSend+0x32>
    111e:	c8 01       	movw	r24, r16
    1120:	f8 de       	rcall	.-528    	; 0xf12 <prvUnlockQueue>
    1122:	1d d4       	rcall	.+2106   	; 0x195e <xTaskResumeAll>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	25 96       	adiw	r28, 0x05	; 5
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret

00001142 <xQueueCreateMutex>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	8f e1       	ldi	r24, 0x1F	; 31
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	54 dc       	rcall	.-1880   	; 0x9f4 <pvPortMalloc>
    114c:	ec 01       	movw	r28, r24
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	e1 f0       	breq	.+56     	; 0x118a <xQueueCreateMutex+0x48>
    1152:	1a 82       	std	Y+2, r1	; 0x02
    1154:	1b 82       	std	Y+3, r1	; 0x03
    1156:	18 82       	st	Y, r1
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	1c 82       	std	Y+4, r1	; 0x04
    115c:	1d 82       	std	Y+5, r1	; 0x05
    115e:	1e 82       	std	Y+6, r1	; 0x06
    1160:	1f 82       	std	Y+7, r1	; 0x07
    1162:	1a 8e       	std	Y+26, r1	; 0x1a
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	8b 8f       	std	Y+27, r24	; 0x1b
    1168:	1c 8e       	std	Y+28, r1	; 0x1c
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	8d 8f       	std	Y+29, r24	; 0x1d
    116e:	8e 8f       	std	Y+30, r24	; 0x1e
    1170:	ce 01       	movw	r24, r28
    1172:	08 96       	adiw	r24, 0x08	; 8
    1174:	ce dd       	rcall	.-1124   	; 0xd12 <vListInitialise>
    1176:	ce 01       	movw	r24, r28
    1178:	41 96       	adiw	r24, 0x11	; 17
    117a:	cb dd       	rcall	.-1130   	; 0xd12 <vListInitialise>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	54 df       	rcall	.-344    	; 0x1032 <xQueueGenericSend>
    118a:	ce 01       	movw	r24, r28
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <xQueueGenericSendFromISR>:
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	ec 01       	movw	r28, r24
    119c:	8a 01       	movw	r16, r20
    119e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a2:	98 17       	cp	r25, r24
    11a4:	b0 f4       	brcc	.+44     	; 0x11d2 <xQueueGenericSendFromISR+0x40>
    11a6:	42 2f       	mov	r20, r18
    11a8:	ce 01       	movw	r24, r28
    11aa:	4d de       	rcall	.-870    	; 0xe46 <prvCopyDataToQueue>
    11ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ae:	8f 3f       	cpi	r24, 0xFF	; 255
    11b0:	61 f4       	brne	.+24     	; 0x11ca <xQueueGenericSendFromISR+0x38>
    11b2:	89 89       	ldd	r24, Y+17	; 0x11
    11b4:	88 23       	and	r24, r24
    11b6:	79 f0       	breq	.+30     	; 0x11d6 <xQueueGenericSendFromISR+0x44>
    11b8:	ce 01       	movw	r24, r28
    11ba:	41 96       	adiw	r24, 0x11	; 17
    11bc:	9d d5       	rcall	.+2874   	; 0x1cf8 <xTaskRemoveFromEventList>
    11be:	88 23       	and	r24, r24
    11c0:	61 f0       	breq	.+24     	; 0x11da <xQueueGenericSendFromISR+0x48>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	f8 01       	movw	r30, r16
    11c6:	80 83       	st	Z, r24
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	8e 8f       	std	Y+30, r24	; 0x1e
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <xQueueGenericSendFromISR+0x4a>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <xQueueGenericReceive>:
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	25 97       	sbiw	r28, 0x05	; 5
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	8c 01       	movw	r16, r24
    1206:	6b 01       	movw	r12, r22
    1208:	4c 83       	std	Y+4, r20	; 0x04
    120a:	5d 83       	std	Y+5, r21	; 0x05
    120c:	b2 2e       	mov	r11, r18
    120e:	a1 2c       	mov	r10, r1
    1210:	7c 01       	movw	r14, r24
    1212:	81 e1       	ldi	r24, 0x11	; 17
    1214:	e8 0e       	add	r14, r24
    1216:	f1 1c       	adc	r15, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	f8 01       	movw	r30, r16
    1220:	82 8d       	ldd	r24, Z+26	; 0x1a
    1222:	88 23       	and	r24, r24
    1224:	69 f1       	breq	.+90     	; 0x1280 <xQueueGenericReceive+0x9a>
    1226:	e6 80       	ldd	r14, Z+6	; 0x06
    1228:	f7 80       	ldd	r15, Z+7	; 0x07
    122a:	b6 01       	movw	r22, r12
    122c:	c8 01       	movw	r24, r16
    122e:	57 de       	rcall	.-850    	; 0xede <prvCopyDataFromQueue>
    1230:	b1 10       	cpse	r11, r1
    1232:	17 c0       	rjmp	.+46     	; 0x1262 <xQueueGenericReceive+0x7c>
    1234:	f8 01       	movw	r30, r16
    1236:	82 8d       	ldd	r24, Z+26	; 0x1a
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	82 8f       	std	Z+26, r24	; 0x1a
    123c:	80 81       	ld	r24, Z
    123e:	91 81       	ldd	r25, Z+1	; 0x01
    1240:	89 2b       	or	r24, r25
    1242:	21 f4       	brne	.+8      	; 0x124c <xQueueGenericReceive+0x66>
    1244:	e9 d5       	rcall	.+3026   	; 0x1e18 <xTaskGetCurrentTaskHandle>
    1246:	f8 01       	movw	r30, r16
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	93 83       	std	Z+3, r25	; 0x03
    124c:	f8 01       	movw	r30, r16
    124e:	80 85       	ldd	r24, Z+8	; 0x08
    1250:	88 23       	and	r24, r24
    1252:	91 f0       	breq	.+36     	; 0x1278 <xQueueGenericReceive+0x92>
    1254:	c8 01       	movw	r24, r16
    1256:	08 96       	adiw	r24, 0x08	; 8
    1258:	4f d5       	rcall	.+2718   	; 0x1cf8 <xTaskRemoveFromEventList>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	69 f4       	brne	.+26     	; 0x1278 <xQueueGenericReceive+0x92>
    125e:	a8 dc       	rcall	.-1712   	; 0xbb0 <vPortYield>
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <xQueueGenericReceive+0x92>
    1262:	f8 01       	movw	r30, r16
    1264:	e6 82       	std	Z+6, r14	; 0x06
    1266:	f7 82       	std	Z+7, r15	; 0x07
    1268:	81 89       	ldd	r24, Z+17	; 0x11
    126a:	88 23       	and	r24, r24
    126c:	29 f0       	breq	.+10     	; 0x1278 <xQueueGenericReceive+0x92>
    126e:	c8 01       	movw	r24, r16
    1270:	41 96       	adiw	r24, 0x11	; 17
    1272:	42 d5       	rcall	.+2692   	; 0x1cf8 <xTaskRemoveFromEventList>
    1274:	81 11       	cpse	r24, r1
    1276:	9c dc       	rcall	.-1736   	; 0xbb0 <vPortYield>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	53 c0       	rjmp	.+166    	; 0x1326 <xQueueGenericReceive+0x140>
    1280:	4c 81       	ldd	r20, Y+4	; 0x04
    1282:	5d 81       	ldd	r21, Y+5	; 0x05
    1284:	45 2b       	or	r20, r21
    1286:	21 f4       	brne	.+8      	; 0x1290 <xQueueGenericReceive+0xaa>
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	4b c0       	rjmp	.+150    	; 0x1326 <xQueueGenericReceive+0x140>
    1290:	a1 10       	cpse	r10, r1
    1292:	05 c0       	rjmp	.+10     	; 0x129e <xQueueGenericReceive+0xb8>
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	72 d5       	rcall	.+2788   	; 0x1d7e <vTaskSetTimeOutState>
    129a:	aa 24       	eor	r10, r10
    129c:	a3 94       	inc	r10
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	89 d2       	rcall	.+1298   	; 0x17b6 <vTaskSuspendAll>
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	0f 92       	push	r0
    12aa:	f8 01       	movw	r30, r16
    12ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <xQueueGenericReceive+0xce>
    12b2:	15 8e       	std	Z+29, r1	; 0x1d
    12b4:	f8 01       	movw	r30, r16
    12b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	09 f4       	brne	.+2      	; 0x12be <xQueueGenericReceive+0xd8>
    12bc:	16 8e       	std	Z+30, r1	; 0x1e
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	be 01       	movw	r22, r28
    12c4:	6c 5f       	subi	r22, 0xFC	; 252
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	63 d5       	rcall	.+2758   	; 0x1d94 <xTaskCheckForTimeOut>
    12ce:	81 11       	cpse	r24, r1
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <xQueueGenericReceive+0x138>
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	0f 92       	push	r0
    12d8:	f8 01       	movw	r30, r16
    12da:	82 8d       	ldd	r24, Z+26	; 0x1a
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	81 11       	cpse	r24, r1
    12e2:	19 c0       	rjmp	.+50     	; 0x1316 <xQueueGenericReceive+0x130>
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	89 2b       	or	r24, r25
    12ec:	49 f4       	brne	.+18     	; 0x1300 <xQueueGenericReceive+0x11a>
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	0f 92       	push	r0
    12f4:	f8 01       	movw	r30, r16
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	a1 d5       	rcall	.+2882   	; 0x1e3e <vTaskPriorityInherit>
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	6c 81       	ldd	r22, Y+4	; 0x04
    1302:	7d 81       	ldd	r23, Y+5	; 0x05
    1304:	c7 01       	movw	r24, r14
    1306:	b6 d4       	rcall	.+2412   	; 0x1c74 <vTaskPlaceOnEventList>
    1308:	c8 01       	movw	r24, r16
    130a:	03 de       	rcall	.-1018   	; 0xf12 <prvUnlockQueue>
    130c:	28 d3       	rcall	.+1616   	; 0x195e <xTaskResumeAll>
    130e:	81 11       	cpse	r24, r1
    1310:	83 cf       	rjmp	.-250    	; 0x1218 <xQueueGenericReceive+0x32>
    1312:	4e dc       	rcall	.-1892   	; 0xbb0 <vPortYield>
    1314:	81 cf       	rjmp	.-254    	; 0x1218 <xQueueGenericReceive+0x32>
    1316:	c8 01       	movw	r24, r16
    1318:	fc dd       	rcall	.-1032   	; 0xf12 <prvUnlockQueue>
    131a:	21 d3       	rcall	.+1602   	; 0x195e <xTaskResumeAll>
    131c:	7d cf       	rjmp	.-262    	; 0x1218 <xQueueGenericReceive+0x32>
    131e:	c8 01       	movw	r24, r16
    1320:	f8 dd       	rcall	.-1040   	; 0xf12 <prvUnlockQueue>
    1322:	1d d3       	rcall	.+1594   	; 0x195e <xTaskResumeAll>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	25 96       	adiw	r28, 0x05	; 5
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	08 95       	ret

00001342 <xQueueReceiveFromISR>:
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
    134c:	8a 01       	movw	r16, r20
    134e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1350:	88 23       	and	r24, r24
    1352:	c1 f0       	breq	.+48     	; 0x1384 <xQueueReceiveFromISR+0x42>
    1354:	ce 01       	movw	r24, r28
    1356:	c3 dd       	rcall	.-1146   	; 0xede <prvCopyDataFromQueue>
    1358:	8a 8d       	ldd	r24, Y+26	; 0x1a
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	8a 8f       	std	Y+26, r24	; 0x1a
    135e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	61 f4       	brne	.+24     	; 0x137c <xQueueReceiveFromISR+0x3a>
    1364:	88 85       	ldd	r24, Y+8	; 0x08
    1366:	88 23       	and	r24, r24
    1368:	79 f0       	breq	.+30     	; 0x1388 <xQueueReceiveFromISR+0x46>
    136a:	ce 01       	movw	r24, r28
    136c:	08 96       	adiw	r24, 0x08	; 8
    136e:	c4 d4       	rcall	.+2440   	; 0x1cf8 <xTaskRemoveFromEventList>
    1370:	88 23       	and	r24, r24
    1372:	61 f0       	breq	.+24     	; 0x138c <xQueueReceiveFromISR+0x4a>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	f8 01       	movw	r30, r16
    1378:	80 83       	st	Z, r24
    137a:	09 c0       	rjmp	.+18     	; 0x138e <xQueueReceiveFromISR+0x4c>
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	8d 8f       	std	Y+29, r24	; 0x1d
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	05 c0       	rjmp	.+10     	; 0x138e <xQueueReceiveFromISR+0x4c>
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	03 c0       	rjmp	.+6      	; 0x138e <xQueueReceiveFromISR+0x4c>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	01 c0       	rjmp	.+2      	; 0x138e <xQueueReceiveFromISR+0x4c>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <uxQueueMessagesWaiting>:
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	0f 92       	push	r0
    139e:	fc 01       	movw	r30, r24
    13a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	08 95       	ret

000013a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	0f 92       	push	r0
    13b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	09 f4       	brne	.+2      	; 0x13bc <vQueueWaitForMessageRestricted+0x14>
    13ba:	1d 8e       	std	Y+29, r1	; 0x1d
    13bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <vQueueWaitForMessageRestricted+0x1c>
    13c2:	1e 8e       	std	Y+30, r1	; 0x1e
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
    13c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13ca:	81 11       	cpse	r24, r1
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <vQueueWaitForMessageRestricted+0x2c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13ce:	ce 01       	movw	r24, r28
    13d0:	41 96       	adiw	r24, 0x11	; 17
    13d2:	78 d4       	rcall	.+2288   	; 0x1cc4 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
    13d4:	ce 01       	movw	r24, r28
    13d6:	9d dd       	rcall	.-1222   	; 0xf12 <prvUnlockQueue>
	}
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <prvIdleTask>:
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    13de:	c0 ed       	ldi	r28, 0xD0	; 208
    13e0:	da e3       	ldi	r29, 0x3A	; 58
    13e2:	88 81       	ld	r24, Y
    13e4:	82 30       	cpi	r24, 0x02	; 2
    13e6:	e8 f3       	brcs	.-6      	; 0x13e2 <prvIdleTask+0x4>
    13e8:	e3 db       	rcall	.-2106   	; 0xbb0 <vPortYield>
    13ea:	fb cf       	rjmp	.-10     	; 0x13e2 <prvIdleTask+0x4>

000013ec <prvAddCurrentTaskToDelayedList>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	e0 91 d9 3a 	lds	r30, 0x3AD9
    13f6:	f0 91 da 3a 	lds	r31, 0x3ADA
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	93 83       	std	Z+3, r25	; 0x03
    13fe:	80 91 a5 3a 	lds	r24, 0x3AA5
    1402:	90 91 a6 3a 	lds	r25, 0x3AA6
    1406:	c8 17       	cp	r28, r24
    1408:	d9 07       	cpc	r29, r25
    140a:	60 f4       	brcc	.+24     	; 0x1424 <prvAddCurrentTaskToDelayedList+0x38>
    140c:	60 91 d9 3a 	lds	r22, 0x3AD9
    1410:	70 91 da 3a 	lds	r23, 0x3ADA
    1414:	80 91 ba 3a 	lds	r24, 0x3ABA
    1418:	90 91 bb 3a 	lds	r25, 0x3ABB
    141c:	6e 5f       	subi	r22, 0xFE	; 254
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	b1 dc       	rcall	.-1694   	; 0xd84 <vListInsert>
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <prvAddCurrentTaskToDelayedList+0x64>
    1424:	60 91 d9 3a 	lds	r22, 0x3AD9
    1428:	70 91 da 3a 	lds	r23, 0x3ADA
    142c:	80 91 bc 3a 	lds	r24, 0x3ABC
    1430:	90 91 bd 3a 	lds	r25, 0x3ABD
    1434:	6e 5f       	subi	r22, 0xFE	; 254
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	a5 dc       	rcall	.-1718   	; 0xd84 <vListInsert>
    143a:	80 91 05 20 	lds	r24, 0x2005
    143e:	90 91 06 20 	lds	r25, 0x2006
    1442:	c8 17       	cp	r28, r24
    1444:	d9 07       	cpc	r29, r25
    1446:	20 f4       	brcc	.+8      	; 0x1450 <prvAddCurrentTaskToDelayedList+0x64>
    1448:	c0 93 05 20 	sts	0x2005, r28
    144c:	d0 93 06 20 	sts	0x2006, r29
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <prvListTaskWithinSingleList>:
    1456:	3f 92       	push	r3
    1458:	4f 92       	push	r4
    145a:	5f 92       	push	r5
    145c:	6f 92       	push	r6
    145e:	7f 92       	push	r7
    1460:	8f 92       	push	r8
    1462:	9f 92       	push	r9
    1464:	af 92       	push	r10
    1466:	bf 92       	push	r11
    1468:	cf 92       	push	r12
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	5c 01       	movw	r10, r24
    147a:	4b 01       	movw	r8, r22
    147c:	34 2e       	mov	r3, r20
    147e:	db 01       	movw	r26, r22
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	ed 91       	ld	r30, X+
    1484:	fc 91       	ld	r31, X
    1486:	12 97       	sbiw	r26, 0x02	; 2
    1488:	02 80       	ldd	r0, Z+2	; 0x02
    148a:	f3 81       	ldd	r31, Z+3	; 0x03
    148c:	e0 2d       	mov	r30, r0
    148e:	11 96       	adiw	r26, 0x01	; 1
    1490:	ed 93       	st	X+, r30
    1492:	fc 93       	st	X, r31
    1494:	12 97       	sbiw	r26, 0x02	; 2
    1496:	7b 01       	movw	r14, r22
    1498:	b3 e0       	ldi	r27, 0x03	; 3
    149a:	eb 0e       	add	r14, r27
    149c:	f1 1c       	adc	r15, r1
    149e:	ee 15       	cp	r30, r14
    14a0:	ff 05       	cpc	r31, r15
    14a2:	29 f4       	brne	.+10     	; 0x14ae <prvListTaskWithinSingleList+0x58>
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	fb 01       	movw	r30, r22
    14aa:	81 83       	std	Z+1, r24	; 0x01
    14ac:	92 83       	std	Z+2, r25	; 0x02
    14ae:	d4 01       	movw	r26, r8
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	c6 80       	ldd	r12, Z+6	; 0x06
    14ba:	d7 80       	ldd	r13, Z+7	; 0x07
    14bc:	43 2c       	mov	r4, r3
    14be:	55 24       	eor	r5, r5
    14c0:	47 fc       	sbrc	r4, 7
    14c2:	50 94       	com	r5
    14c4:	0f 2e       	mov	r0, r31
    14c6:	ff e6       	ldi	r31, 0x6F	; 111
    14c8:	6f 2e       	mov	r6, r31
    14ca:	f0 e2       	ldi	r31, 0x20	; 32
    14cc:	7f 2e       	mov	r7, r31
    14ce:	f0 2d       	mov	r31, r0
    14d0:	06 e6       	ldi	r16, 0x66	; 102
    14d2:	1a e3       	ldi	r17, 0x3A	; 58
    14d4:	d4 01       	movw	r26, r8
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	8d 93       	st	X+, r24
    14e6:	9c 93       	st	X, r25
    14e8:	12 97       	sbiw	r26, 0x02	; 2
    14ea:	e8 16       	cp	r14, r24
    14ec:	f9 06       	cpc	r15, r25
    14ee:	39 f4       	brne	.+14     	; 0x14fe <prvListTaskWithinSingleList+0xa8>
    14f0:	f7 01       	movw	r30, r14
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	8d 93       	st	X+, r24
    14fa:	9c 93       	st	X, r25
    14fc:	12 97       	sbiw	r26, 0x02	; 2
    14fe:	d4 01       	movw	r26, r8
    1500:	11 96       	adiw	r26, 0x01	; 1
    1502:	ed 91       	ld	r30, X+
    1504:	fc 91       	ld	r31, X
    1506:	12 97       	sbiw	r26, 0x02	; 2
    1508:	c6 81       	ldd	r28, Z+6	; 0x06
    150a:	d7 81       	ldd	r29, Z+7	; 0x07
    150c:	ef 89       	ldd	r30, Y+23	; 0x17
    150e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1510:	80 81       	ld	r24, Z
    1512:	85 3a       	cpi	r24, 0xA5	; 165
    1514:	41 f4       	brne	.+16     	; 0x1526 <prvListTaskWithinSingleList+0xd0>
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	21 91       	ld	r18, Z+
    1520:	25 3a       	cpi	r18, 0xA5	; 165
    1522:	e1 f3       	breq	.-8      	; 0x151c <prvListTaskWithinSingleList+0xc6>
    1524:	02 c0       	rjmp	.+4      	; 0x152a <prvListTaskWithinSingleList+0xd4>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	39 a1       	ldd	r19, Y+33	; 0x21
    152c:	2e 89       	ldd	r18, Y+22	; 0x16
    152e:	1f 92       	push	r1
    1530:	3f 93       	push	r19
    1532:	9f 93       	push	r25
    1534:	8f 93       	push	r24
    1536:	1f 92       	push	r1
    1538:	2f 93       	push	r18
    153a:	5f 92       	push	r5
    153c:	3f 92       	push	r3
    153e:	ce 01       	movw	r24, r28
    1540:	49 96       	adiw	r24, 0x19	; 25
    1542:	9f 93       	push	r25
    1544:	8f 93       	push	r24
    1546:	7f 92       	push	r7
    1548:	6f 92       	push	r6
    154a:	1f 93       	push	r17
    154c:	0f 93       	push	r16
    154e:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>
    1552:	b8 01       	movw	r22, r16
    1554:	c5 01       	movw	r24, r10
    1556:	0e 94 86 2b 	call	0x570c	; 0x570c <strcat>
    155a:	ed b7       	in	r30, 0x3d	; 61
    155c:	fe b7       	in	r31, 0x3e	; 62
    155e:	3e 96       	adiw	r30, 0x0e	; 14
    1560:	ed bf       	out	0x3d, r30	; 61
    1562:	fe bf       	out	0x3e, r31	; 62
    1564:	cc 15       	cp	r28, r12
    1566:	dd 05       	cpc	r29, r13
    1568:	09 f0       	breq	.+2      	; 0x156c <prvListTaskWithinSingleList+0x116>
    156a:	b4 cf       	rjmp	.-152    	; 0x14d4 <prvListTaskWithinSingleList+0x7e>
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	df 90       	pop	r13
    157a:	cf 90       	pop	r12
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	7f 90       	pop	r7
    1586:	6f 90       	pop	r6
    1588:	5f 90       	pop	r5
    158a:	4f 90       	pop	r4
    158c:	3f 90       	pop	r3
    158e:	08 95       	ret

00001590 <xTaskGenericCreate>:
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	4c 01       	movw	r8, r24
    15b0:	3b 01       	movw	r6, r22
    15b2:	5a 01       	movw	r10, r20
    15b4:	29 01       	movw	r4, r18
    15b6:	83 e2       	ldi	r24, 0x23	; 35
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	1c da       	rcall	.-3016   	; 0x9f4 <pvPortMalloc>
    15bc:	ec 01       	movw	r28, r24
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <xTaskGenericCreate+0x34>
    15c2:	9f c0       	rjmp	.+318    	; 0x1702 <xTaskGenericCreate+0x172>
    15c4:	c1 14       	cp	r12, r1
    15c6:	d1 04       	cpc	r13, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <xTaskGenericCreate+0x3c>
    15ca:	97 c0       	rjmp	.+302    	; 0x16fa <xTaskGenericCreate+0x16a>
    15cc:	c5 01       	movw	r24, r10
    15ce:	12 da       	rcall	.-3036   	; 0x9f4 <pvPortMalloc>
    15d0:	8f 8b       	std	Y+23, r24	; 0x17
    15d2:	98 8f       	std	Y+24, r25	; 0x18
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	19 f4       	brne	.+6      	; 0x15de <xTaskGenericCreate+0x4e>
    15d8:	ce 01       	movw	r24, r28
    15da:	30 da       	rcall	.-2976   	; 0xa3c <vPortFree>
    15dc:	92 c0       	rjmp	.+292    	; 0x1702 <xTaskGenericCreate+0x172>
    15de:	a5 01       	movw	r20, r10
    15e0:	65 ea       	ldi	r22, 0xA5	; 165
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <memset>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	a8 1a       	sub	r10, r24
    15ec:	b1 08       	sbc	r11, r1
    15ee:	8f 89       	ldd	r24, Y+23	; 0x17
    15f0:	98 8d       	ldd	r25, Y+24	; 0x18
    15f2:	a8 0e       	add	r10, r24
    15f4:	b9 1e       	adc	r11, r25
    15f6:	48 e0       	ldi	r20, 0x08	; 8
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	b3 01       	movw	r22, r6
    15fc:	ce 01       	movw	r24, r28
    15fe:	49 96       	adiw	r24, 0x19	; 25
    1600:	0e 94 a6 2b 	call	0x574c	; 0x574c <strncpy>
    1604:	18 a2       	std	Y+32, r1	; 0x20
    1606:	1e 8a       	std	Y+22, r1	; 0x16
    1608:	1a a2       	std	Y+34, r1	; 0x22
    160a:	6e 01       	movw	r12, r28
    160c:	e2 e0       	ldi	r30, 0x02	; 2
    160e:	ce 0e       	add	r12, r30
    1610:	d1 1c       	adc	r13, r1
    1612:	c6 01       	movw	r24, r12
    1614:	8c db       	rcall	.-2280   	; 0xd2e <vListInitialiseItem>
    1616:	ce 01       	movw	r24, r28
    1618:	0c 96       	adiw	r24, 0x0c	; 12
    161a:	89 db       	rcall	.-2286   	; 0xd2e <vListInitialiseItem>
    161c:	c8 87       	std	Y+8, r28	; 0x08
    161e:	d9 87       	std	Y+9, r29	; 0x09
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	8c 87       	std	Y+12, r24	; 0x0c
    1626:	9d 87       	std	Y+13, r25	; 0x0d
    1628:	ca 8b       	std	Y+18, r28	; 0x12
    162a:	db 8b       	std	Y+19, r29	; 0x13
    162c:	a2 01       	movw	r20, r4
    162e:	b4 01       	movw	r22, r8
    1630:	c5 01       	movw	r24, r10
    1632:	0e da       	rcall	.-3044   	; 0xa50 <pxPortInitialiseStack>
    1634:	88 83       	st	Y, r24
    1636:	99 83       	std	Y+1, r25	; 0x01
    1638:	e1 14       	cp	r14, r1
    163a:	f1 04       	cpc	r15, r1
    163c:	19 f0       	breq	.+6      	; 0x1644 <xTaskGenericCreate+0xb4>
    163e:	f7 01       	movw	r30, r14
    1640:	c0 83       	st	Z, r28
    1642:	d1 83       	std	Z+1, r29	; 0x01
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	0f 92       	push	r0
    164a:	80 91 a7 3a 	lds	r24, 0x3AA7
    164e:	8f 5f       	subi	r24, 0xFF	; 255
    1650:	80 93 a7 3a 	sts	0x3AA7, r24
    1654:	80 91 d9 3a 	lds	r24, 0x3AD9
    1658:	90 91 da 3a 	lds	r25, 0x3ADA
    165c:	89 2b       	or	r24, r25
    165e:	49 f4       	brne	.+18     	; 0x1672 <xTaskGenericCreate+0xe2>
    1660:	c0 93 d9 3a 	sts	0x3AD9, r28
    1664:	d0 93 da 3a 	sts	0x3ADA, r29
    1668:	80 91 a7 3a 	lds	r24, 0x3AA7
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	81 f4       	brne	.+32     	; 0x1690 <xTaskGenericCreate+0x100>
    1670:	4a c0       	rjmp	.+148    	; 0x1706 <xTaskGenericCreate+0x176>
    1672:	80 91 a2 3a 	lds	r24, 0x3AA2
    1676:	81 11       	cpse	r24, r1
    1678:	0b c0       	rjmp	.+22     	; 0x1690 <xTaskGenericCreate+0x100>
    167a:	e0 91 d9 3a 	lds	r30, 0x3AD9
    167e:	f0 91 da 3a 	lds	r31, 0x3ADA
    1682:	86 89       	ldd	r24, Z+22	; 0x16
    1684:	08 17       	cp	r16, r24
    1686:	20 f0       	brcs	.+8      	; 0x1690 <xTaskGenericCreate+0x100>
    1688:	c0 93 d9 3a 	sts	0x3AD9, r28
    168c:	d0 93 da 3a 	sts	0x3ADA, r29
    1690:	8e 89       	ldd	r24, Y+22	; 0x16
    1692:	90 91 a4 3a 	lds	r25, 0x3AA4
    1696:	98 17       	cp	r25, r24
    1698:	10 f4       	brcc	.+4      	; 0x169e <xTaskGenericCreate+0x10e>
    169a:	80 93 a4 3a 	sts	0x3AA4, r24
    169e:	90 91 9d 3a 	lds	r25, 0x3A9D
    16a2:	99 a3       	std	Y+33, r25	; 0x21
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	90 93 9d 3a 	sts	0x3A9D, r25
    16aa:	90 91 a3 3a 	lds	r25, 0x3AA3
    16ae:	98 17       	cp	r25, r24
    16b0:	10 f4       	brcc	.+4      	; 0x16b6 <xTaskGenericCreate+0x126>
    16b2:	80 93 a3 3a 	sts	0x3AA3, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	b6 01       	movw	r22, r12
    16cc:	80 53       	subi	r24, 0x30	; 48
    16ce:	95 4c       	sbci	r25, 0xC5	; 197
    16d0:	32 db       	rcall	.-2460   	; 0xd36 <vListInsertEnd>
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	80 91 a2 3a 	lds	r24, 0x3AA2
    16da:	88 23       	and	r24, r24
    16dc:	51 f0       	breq	.+20     	; 0x16f2 <xTaskGenericCreate+0x162>
    16de:	e0 91 d9 3a 	lds	r30, 0x3AD9
    16e2:	f0 91 da 3a 	lds	r31, 0x3ADA
    16e6:	86 89       	ldd	r24, Z+22	; 0x16
    16e8:	80 17       	cp	r24, r16
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <xTaskGenericCreate+0x166>
    16ec:	61 da       	rcall	.-2878   	; 0xbb0 <vPortYield>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	26 c0       	rjmp	.+76     	; 0x173e <xTaskGenericCreate+0x1ae>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	24 c0       	rjmp	.+72     	; 0x173e <xTaskGenericCreate+0x1ae>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	22 c0       	rjmp	.+68     	; 0x173e <xTaskGenericCreate+0x1ae>
    16fa:	cf 8a       	std	Y+23, r12	; 0x17
    16fc:	d8 8e       	std	Y+24, r13	; 0x18
    16fe:	c6 01       	movw	r24, r12
    1700:	6e cf       	rjmp	.-292    	; 0x15de <xTaskGenericCreate+0x4e>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	1c c0       	rjmp	.+56     	; 0x173e <xTaskGenericCreate+0x1ae>
    1706:	80 ed       	ldi	r24, 0xD0	; 208
    1708:	9a e3       	ldi	r25, 0x3A	; 58
    170a:	03 db       	rcall	.-2554   	; 0xd12 <vListInitialise>
    170c:	87 ec       	ldi	r24, 0xC7	; 199
    170e:	9a e3       	ldi	r25, 0x3A	; 58
    1710:	00 db       	rcall	.-2560   	; 0xd12 <vListInitialise>
    1712:	8e eb       	ldi	r24, 0xBE	; 190
    1714:	9a e3       	ldi	r25, 0x3A	; 58
    1716:	fd da       	rcall	.-2566   	; 0xd12 <vListInitialise>
    1718:	81 eb       	ldi	r24, 0xB1	; 177
    171a:	9a e3       	ldi	r25, 0x3A	; 58
    171c:	fa da       	rcall	.-2572   	; 0xd12 <vListInitialise>
    171e:	88 ea       	ldi	r24, 0xA8	; 168
    1720:	9a e3       	ldi	r25, 0x3A	; 58
    1722:	f7 da       	rcall	.-2578   	; 0xd12 <vListInitialise>
    1724:	87 ec       	ldi	r24, 0xC7	; 199
    1726:	9a e3       	ldi	r25, 0x3A	; 58
    1728:	80 93 bc 3a 	sts	0x3ABC, r24
    172c:	90 93 bd 3a 	sts	0x3ABD, r25
    1730:	8e eb       	ldi	r24, 0xBE	; 190
    1732:	9a e3       	ldi	r25, 0x3A	; 58
    1734:	80 93 ba 3a 	sts	0x3ABA, r24
    1738:	90 93 bb 3a 	sts	0x3ABB, r25
    173c:	a9 cf       	rjmp	.-174    	; 0x1690 <xTaskGenericCreate+0x100>
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	bf 90       	pop	r11
    174e:	af 90       	pop	r10
    1750:	9f 90       	pop	r9
    1752:	8f 90       	pop	r8
    1754:	7f 90       	pop	r7
    1756:	6f 90       	pop	r6
    1758:	5f 90       	pop	r5
    175a:	4f 90       	pop	r4
    175c:	08 95       	ret

0000175e <vTaskStartScheduler>:
    175e:	af 92       	push	r10
    1760:	bf 92       	push	r11
    1762:	cf 92       	push	r12
    1764:	df 92       	push	r13
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	0f 93       	push	r16
    176c:	a1 2c       	mov	r10, r1
    176e:	b1 2c       	mov	r11, r1
    1770:	c1 2c       	mov	r12, r1
    1772:	d1 2c       	mov	r13, r1
    1774:	e1 2c       	mov	r14, r1
    1776:	f1 2c       	mov	r15, r1
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e4       	ldi	r20, 0x40	; 64
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	61 e8       	ldi	r22, 0x81	; 129
    1784:	70 e2       	ldi	r23, 0x20	; 32
    1786:	8f ee       	ldi	r24, 0xEF	; 239
    1788:	99 e0       	ldi	r25, 0x09	; 9
    178a:	02 df       	rcall	.-508    	; 0x1590 <xTaskGenericCreate>
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	59 f4       	brne	.+22     	; 0x17a6 <vTaskStartScheduler+0x48>
    1790:	37 d4       	rcall	.+2158   	; 0x2000 <xTimerCreateTimerTask>
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	41 f4       	brne	.+16     	; 0x17a6 <vTaskStartScheduler+0x48>
    1796:	f8 94       	cli
    1798:	80 93 a2 3a 	sts	0x3AA2, r24
    179c:	10 92 a5 3a 	sts	0x3AA5, r1
    17a0:	10 92 a6 3a 	sts	0x3AA6, r1
    17a4:	c3 d9       	rcall	.-3194   	; 0xb2c <xPortStartScheduler>
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	08 95       	ret

000017b6 <vTaskSuspendAll>:
    17b6:	80 91 a1 3a 	lds	r24, 0x3AA1
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 a1 3a 	sts	0x3AA1, r24
    17c0:	08 95       	ret

000017c2 <xTaskGetTickCount>:
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	0f 92       	push	r0
    17c8:	80 91 a5 3a 	lds	r24, 0x3AA5
    17cc:	90 91 a6 3a 	lds	r25, 0x3AA6
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	08 95       	ret

000017d6 <uxTaskGetNumberOfTasks>:
    17d6:	80 91 a7 3a 	lds	r24, 0x3AA7
    17da:	08 95       	ret

000017dc <vTaskIncrementTick>:
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	80 91 a1 3a 	lds	r24, 0x3AA1
    17e8:	81 11       	cpse	r24, r1
    17ea:	af c0       	rjmp	.+350    	; 0x194a <vTaskIncrementTick+0x16e>
    17ec:	80 91 a5 3a 	lds	r24, 0x3AA5
    17f0:	90 91 a6 3a 	lds	r25, 0x3AA6
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	80 93 a5 3a 	sts	0x3AA5, r24
    17fa:	90 93 a6 3a 	sts	0x3AA6, r25
    17fe:	80 91 a5 3a 	lds	r24, 0x3AA5
    1802:	90 91 a6 3a 	lds	r25, 0x3AA6
    1806:	89 2b       	or	r24, r25
    1808:	99 f5       	brne	.+102    	; 0x1870 <vTaskIncrementTick+0x94>
    180a:	80 91 bc 3a 	lds	r24, 0x3ABC
    180e:	90 91 bd 3a 	lds	r25, 0x3ABD
    1812:	20 91 ba 3a 	lds	r18, 0x3ABA
    1816:	30 91 bb 3a 	lds	r19, 0x3ABB
    181a:	20 93 bc 3a 	sts	0x3ABC, r18
    181e:	30 93 bd 3a 	sts	0x3ABD, r19
    1822:	80 93 ba 3a 	sts	0x3ABA, r24
    1826:	90 93 bb 3a 	sts	0x3ABB, r25
    182a:	80 91 9e 3a 	lds	r24, 0x3A9E
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	80 93 9e 3a 	sts	0x3A9E, r24
    1834:	e0 91 bc 3a 	lds	r30, 0x3ABC
    1838:	f0 91 bd 3a 	lds	r31, 0x3ABD
    183c:	80 81       	ld	r24, Z
    183e:	81 11       	cpse	r24, r1
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <vTaskIncrementTick+0x74>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	80 93 05 20 	sts	0x2005, r24
    184a:	90 93 06 20 	sts	0x2006, r25
    184e:	10 c0       	rjmp	.+32     	; 0x1870 <vTaskIncrementTick+0x94>
    1850:	e0 91 bc 3a 	lds	r30, 0x3ABC
    1854:	f0 91 bd 3a 	lds	r31, 0x3ABD
    1858:	05 80       	ldd	r0, Z+5	; 0x05
    185a:	f6 81       	ldd	r31, Z+6	; 0x06
    185c:	e0 2d       	mov	r30, r0
    185e:	06 80       	ldd	r0, Z+6	; 0x06
    1860:	f7 81       	ldd	r31, Z+7	; 0x07
    1862:	e0 2d       	mov	r30, r0
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	80 93 05 20 	sts	0x2005, r24
    186c:	90 93 06 20 	sts	0x2006, r25
    1870:	20 91 a5 3a 	lds	r18, 0x3AA5
    1874:	30 91 a6 3a 	lds	r19, 0x3AA6
    1878:	80 91 05 20 	lds	r24, 0x2005
    187c:	90 91 06 20 	lds	r25, 0x2006
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	08 f4       	brcc	.+2      	; 0x1888 <vTaskIncrementTick+0xac>
    1886:	66 c0       	rjmp	.+204    	; 0x1954 <vTaskIncrementTick+0x178>
    1888:	e0 91 bc 3a 	lds	r30, 0x3ABC
    188c:	f0 91 bd 3a 	lds	r31, 0x3ABD
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	99 f0       	breq	.+38     	; 0x18bc <vTaskIncrementTick+0xe0>
    1896:	e0 91 bc 3a 	lds	r30, 0x3ABC
    189a:	f0 91 bd 3a 	lds	r31, 0x3ABD
    189e:	05 80       	ldd	r0, Z+5	; 0x05
    18a0:	f6 81       	ldd	r31, Z+6	; 0x06
    18a2:	e0 2d       	mov	r30, r0
    18a4:	c6 81       	ldd	r28, Z+6	; 0x06
    18a6:	d7 81       	ldd	r29, Z+7	; 0x07
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	20 91 a5 3a 	lds	r18, 0x3AA5
    18b0:	30 91 a6 3a 	lds	r19, 0x3AA6
    18b4:	28 17       	cp	r18, r24
    18b6:	39 07       	cpc	r19, r25
    18b8:	f8 f4       	brcc	.+62     	; 0x18f8 <vTaskIncrementTick+0x11c>
    18ba:	19 c0       	rjmp	.+50     	; 0x18ee <vTaskIncrementTick+0x112>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	80 93 05 20 	sts	0x2005, r24
    18c4:	90 93 06 20 	sts	0x2006, r25
    18c8:	45 c0       	rjmp	.+138    	; 0x1954 <vTaskIncrementTick+0x178>
    18ca:	e0 91 bc 3a 	lds	r30, 0x3ABC
    18ce:	f0 91 bd 3a 	lds	r31, 0x3ABD
    18d2:	05 80       	ldd	r0, Z+5	; 0x05
    18d4:	f6 81       	ldd	r31, Z+6	; 0x06
    18d6:	e0 2d       	mov	r30, r0
    18d8:	c6 81       	ldd	r28, Z+6	; 0x06
    18da:	d7 81       	ldd	r29, Z+7	; 0x07
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	20 91 a5 3a 	lds	r18, 0x3AA5
    18e4:	30 91 a6 3a 	lds	r19, 0x3AA6
    18e8:	28 17       	cp	r18, r24
    18ea:	39 07       	cpc	r19, r25
    18ec:	28 f4       	brcc	.+10     	; 0x18f8 <vTaskIncrementTick+0x11c>
    18ee:	80 93 05 20 	sts	0x2005, r24
    18f2:	90 93 06 20 	sts	0x2006, r25
    18f6:	2e c0       	rjmp	.+92     	; 0x1954 <vTaskIncrementTick+0x178>
    18f8:	8e 01       	movw	r16, r28
    18fa:	0e 5f       	subi	r16, 0xFE	; 254
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	c8 01       	movw	r24, r16
    1900:	7c da       	rcall	.-2824   	; 0xdfa <vListRemove>
    1902:	8c 89       	ldd	r24, Y+20	; 0x14
    1904:	9d 89       	ldd	r25, Y+21	; 0x15
    1906:	89 2b       	or	r24, r25
    1908:	19 f0       	breq	.+6      	; 0x1910 <vTaskIncrementTick+0x134>
    190a:	ce 01       	movw	r24, r28
    190c:	0c 96       	adiw	r24, 0x0c	; 12
    190e:	75 da       	rcall	.-2838   	; 0xdfa <vListRemove>
    1910:	8e 89       	ldd	r24, Y+22	; 0x16
    1912:	90 91 a3 3a 	lds	r25, 0x3AA3
    1916:	98 17       	cp	r25, r24
    1918:	10 f4       	brcc	.+4      	; 0x191e <vTaskIncrementTick+0x142>
    191a:	80 93 a3 3a 	sts	0x3AA3, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	22 0f       	add	r18, r18
    1928:	33 1f       	adc	r19, r19
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	b8 01       	movw	r22, r16
    1934:	80 53       	subi	r24, 0x30	; 48
    1936:	95 4c       	sbci	r25, 0xC5	; 197
    1938:	fe d9       	rcall	.-3076   	; 0xd36 <vListInsertEnd>
    193a:	e0 91 bc 3a 	lds	r30, 0x3ABC
    193e:	f0 91 bd 3a 	lds	r31, 0x3ABD
    1942:	80 81       	ld	r24, Z
    1944:	81 11       	cpse	r24, r1
    1946:	c1 cf       	rjmp	.-126    	; 0x18ca <vTaskIncrementTick+0xee>
    1948:	b9 cf       	rjmp	.-142    	; 0x18bc <vTaskIncrementTick+0xe0>
    194a:	80 91 a0 3a 	lds	r24, 0x3AA0
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	80 93 a0 3a 	sts	0x3AA0, r24
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <xTaskResumeAll>:
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	80 91 a1 3a 	lds	r24, 0x3AA1
    197a:	81 50       	subi	r24, 0x01	; 1
    197c:	80 93 a1 3a 	sts	0x3AA1, r24
    1980:	80 91 a1 3a 	lds	r24, 0x3AA1
    1984:	81 11       	cpse	r24, r1
    1986:	62 c0       	rjmp	.+196    	; 0x1a4c <xTaskResumeAll+0xee>
    1988:	80 91 a7 3a 	lds	r24, 0x3AA7
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <xTaskResumeAll+0x34>
    1990:	5f c0       	rjmp	.+190    	; 0x1a50 <xTaskResumeAll+0xf2>
    1992:	b1 2c       	mov	r11, r1
    1994:	0f 2e       	mov	r0, r31
    1996:	f1 eb       	ldi	r31, 0xB1	; 177
    1998:	ef 2e       	mov	r14, r31
    199a:	fa e3       	ldi	r31, 0x3A	; 58
    199c:	ff 2e       	mov	r15, r31
    199e:	f0 2d       	mov	r31, r0
    19a0:	0f 2e       	mov	r0, r31
    19a2:	f6 eb       	ldi	r31, 0xB6	; 182
    19a4:	cf 2e       	mov	r12, r31
    19a6:	fa e3       	ldi	r31, 0x3A	; 58
    19a8:	df 2e       	mov	r13, r31
    19aa:	f0 2d       	mov	r31, r0
    19ac:	2c c0       	rjmp	.+88     	; 0x1a06 <xTaskResumeAll+0xa8>
    19ae:	d6 01       	movw	r26, r12
    19b0:	ed 91       	ld	r30, X+
    19b2:	fc 91       	ld	r31, X
    19b4:	c6 81       	ldd	r28, Z+6	; 0x06
    19b6:	d7 81       	ldd	r29, Z+7	; 0x07
    19b8:	ce 01       	movw	r24, r28
    19ba:	0c 96       	adiw	r24, 0x0c	; 12
    19bc:	1e da       	rcall	.-3012   	; 0xdfa <vListRemove>
    19be:	8e 01       	movw	r16, r28
    19c0:	0e 5f       	subi	r16, 0xFE	; 254
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	c8 01       	movw	r24, r16
    19c6:	19 da       	rcall	.-3022   	; 0xdfa <vListRemove>
    19c8:	8e 89       	ldd	r24, Y+22	; 0x16
    19ca:	90 91 a3 3a 	lds	r25, 0x3AA3
    19ce:	98 17       	cp	r25, r24
    19d0:	10 f4       	brcc	.+4      	; 0x19d6 <xTaskResumeAll+0x78>
    19d2:	80 93 a3 3a 	sts	0x3AA3, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 01       	movw	r18, r24
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	b8 01       	movw	r22, r16
    19ec:	80 53       	subi	r24, 0x30	; 48
    19ee:	95 4c       	sbci	r25, 0xC5	; 197
    19f0:	a2 d9       	rcall	.-3260   	; 0xd36 <vListInsertEnd>
    19f2:	e0 91 d9 3a 	lds	r30, 0x3AD9
    19f6:	f0 91 da 3a 	lds	r31, 0x3ADA
    19fa:	9e 89       	ldd	r25, Y+22	; 0x16
    19fc:	86 89       	ldd	r24, Z+22	; 0x16
    19fe:	98 17       	cp	r25, r24
    1a00:	10 f0       	brcs	.+4      	; 0x1a06 <xTaskResumeAll+0xa8>
    1a02:	bb 24       	eor	r11, r11
    1a04:	b3 94       	inc	r11
    1a06:	f7 01       	movw	r30, r14
    1a08:	80 81       	ld	r24, Z
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	d0 cf       	rjmp	.-96     	; 0x19ae <xTaskResumeAll+0x50>
    1a0e:	80 91 a0 3a 	lds	r24, 0x3AA0
    1a12:	88 23       	and	r24, r24
    1a14:	79 f0       	breq	.+30     	; 0x1a34 <xTaskResumeAll+0xd6>
    1a16:	80 91 a0 3a 	lds	r24, 0x3AA0
    1a1a:	88 23       	and	r24, r24
    1a1c:	91 f0       	breq	.+36     	; 0x1a42 <xTaskResumeAll+0xe4>
    1a1e:	de de       	rcall	.-580    	; 0x17dc <vTaskIncrementTick>
    1a20:	80 91 a0 3a 	lds	r24, 0x3AA0
    1a24:	81 50       	subi	r24, 0x01	; 1
    1a26:	80 93 a0 3a 	sts	0x3AA0, r24
    1a2a:	80 91 a0 3a 	lds	r24, 0x3AA0
    1a2e:	81 11       	cpse	r24, r1
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <xTaskResumeAll+0xc0>
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <xTaskResumeAll+0xe4>
    1a34:	f1 e0       	ldi	r31, 0x01	; 1
    1a36:	bf 16       	cp	r11, r31
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <xTaskResumeAll+0xe4>
    1a3a:	80 91 9f 3a 	lds	r24, 0x3A9F
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	49 f4       	brne	.+18     	; 0x1a54 <xTaskResumeAll+0xf6>
    1a42:	10 92 9f 3a 	sts	0x3A9F, r1
    1a46:	b4 d8       	rcall	.-3736   	; 0xbb0 <vPortYield>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <xTaskResumeAll+0xf8>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <xTaskResumeAll+0xf8>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <xTaskResumeAll+0xf8>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	bf 90       	pop	r11
    1a6c:	08 95       	ret

00001a6e <vTaskList>:
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ec 01       	movw	r28, r24
    1a76:	9f de       	rcall	.-706    	; 0x17b6 <vTaskSuspendAll>
    1a78:	18 82       	st	Y, r1
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	01 90       	ld	r0, Z+
    1a7e:	00 20       	and	r0, r0
    1a80:	e9 f7       	brne	.-6      	; 0x1a7c <vTaskList+0xe>
    1a82:	31 97       	sbiw	r30, 0x01	; 1
    1a84:	2d e0       	ldi	r18, 0x0D	; 13
    1a86:	3a e0       	ldi	r19, 0x0A	; 10
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	20 83       	st	Z, r18
    1a8c:	31 83       	std	Z+1, r19	; 0x01
    1a8e:	42 83       	std	Z+2, r20	; 0x02
    1a90:	10 91 a4 3a 	lds	r17, 0x3AA4
    1a94:	1f 5f       	subi	r17, 0xFF	; 255
    1a96:	11 50       	subi	r17, 0x01	; 1
    1a98:	21 2f       	mov	r18, r17
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	e2 0f       	add	r30, r18
    1aac:	f3 1f       	adc	r31, r19
    1aae:	e0 53       	subi	r30, 0x30	; 48
    1ab0:	f5 4c       	sbci	r31, 0xC5	; 197
    1ab2:	80 81       	ld	r24, Z
    1ab4:	88 23       	and	r24, r24
    1ab6:	21 f0       	breq	.+8      	; 0x1ac0 <vTaskList+0x52>
    1ab8:	bf 01       	movw	r22, r30
    1aba:	42 e5       	ldi	r20, 0x52	; 82
    1abc:	ce 01       	movw	r24, r28
    1abe:	cb dc       	rcall	.-1642   	; 0x1456 <prvListTaskWithinSingleList>
    1ac0:	11 11       	cpse	r17, r1
    1ac2:	e9 cf       	rjmp	.-46     	; 0x1a96 <vTaskList+0x28>
    1ac4:	e0 91 bc 3a 	lds	r30, 0x3ABC
    1ac8:	f0 91 bd 3a 	lds	r31, 0x3ABD
    1acc:	80 81       	ld	r24, Z
    1ace:	88 23       	and	r24, r24
    1ad0:	39 f0       	breq	.+14     	; 0x1ae0 <vTaskList+0x72>
    1ad2:	60 91 bc 3a 	lds	r22, 0x3ABC
    1ad6:	70 91 bd 3a 	lds	r23, 0x3ABD
    1ada:	42 e4       	ldi	r20, 0x42	; 66
    1adc:	ce 01       	movw	r24, r28
    1ade:	bb dc       	rcall	.-1674   	; 0x1456 <prvListTaskWithinSingleList>
    1ae0:	e0 91 ba 3a 	lds	r30, 0x3ABA
    1ae4:	f0 91 bb 3a 	lds	r31, 0x3ABB
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	39 f0       	breq	.+14     	; 0x1afc <vTaskList+0x8e>
    1aee:	60 91 ba 3a 	lds	r22, 0x3ABA
    1af2:	70 91 bb 3a 	lds	r23, 0x3ABB
    1af6:	42 e4       	ldi	r20, 0x42	; 66
    1af8:	ce 01       	movw	r24, r28
    1afa:	ad dc       	rcall	.-1702   	; 0x1456 <prvListTaskWithinSingleList>
    1afc:	80 91 a8 3a 	lds	r24, 0x3AA8
    1b00:	88 23       	and	r24, r24
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <vTaskList+0xa0>
    1b04:	43 e5       	ldi	r20, 0x53	; 83
    1b06:	68 ea       	ldi	r22, 0xA8	; 168
    1b08:	7a e3       	ldi	r23, 0x3A	; 58
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	a4 dc       	rcall	.-1720   	; 0x1456 <prvListTaskWithinSingleList>
    1b0e:	27 df       	rcall	.-434    	; 0x195e <xTaskResumeAll>
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	08 95       	ret

00001b18 <vTaskSwitchContext>:
    1b18:	80 91 a1 3a 	lds	r24, 0x3AA1
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	13 c0       	rjmp	.+38     	; 0x1b46 <vTaskSwitchContext+0x2e>
    1b20:	80 91 a3 3a 	lds	r24, 0x3AA3
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	fc 01       	movw	r30, r24
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	ee 0f       	add	r30, r30
    1b2e:	ff 1f       	adc	r31, r31
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	8e 0f       	add	r24, r30
    1b36:	9f 1f       	adc	r25, r31
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e0 53       	subi	r30, 0x30	; 48
    1b3c:	f5 4c       	sbci	r31, 0xC5	; 197
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 23       	and	r24, r24
    1b42:	29 f0       	breq	.+10     	; 0x1b4e <vTaskSwitchContext+0x36>
    1b44:	1b c0       	rjmp	.+54     	; 0x1b7c <vTaskSwitchContext+0x64>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	80 93 9f 3a 	sts	0x3A9F, r24
    1b4c:	08 95       	ret
    1b4e:	80 91 a3 3a 	lds	r24, 0x3AA3
    1b52:	81 50       	subi	r24, 0x01	; 1
    1b54:	80 93 a3 3a 	sts	0x3AA3, r24
    1b58:	80 91 a3 3a 	lds	r24, 0x3AA3
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	fc 01       	movw	r30, r24
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	8e 0f       	add	r24, r30
    1b6e:	9f 1f       	adc	r25, r31
    1b70:	fc 01       	movw	r30, r24
    1b72:	e0 53       	subi	r30, 0x30	; 48
    1b74:	f5 4c       	sbci	r31, 0xC5	; 197
    1b76:	80 81       	ld	r24, Z
    1b78:	88 23       	and	r24, r24
    1b7a:	49 f3       	breq	.-46     	; 0x1b4e <vTaskSwitchContext+0x36>
    1b7c:	e0 91 a3 3a 	lds	r30, 0x3AA3
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	cf 01       	movw	r24, r30
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	e8 0f       	add	r30, r24
    1b92:	f9 1f       	adc	r31, r25
    1b94:	e0 53       	subi	r30, 0x30	; 48
    1b96:	f5 4c       	sbci	r31, 0xC5	; 197
    1b98:	a1 81       	ldd	r26, Z+1	; 0x01
    1b9a:	b2 81       	ldd	r27, Z+2	; 0x02
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	0d 90       	ld	r0, X+
    1ba0:	bc 91       	ld	r27, X
    1ba2:	a0 2d       	mov	r26, r0
    1ba4:	a1 83       	std	Z+1, r26	; 0x01
    1ba6:	b2 83       	std	Z+2, r27	; 0x02
    1ba8:	cf 01       	movw	r24, r30
    1baa:	03 96       	adiw	r24, 0x03	; 3
    1bac:	a8 17       	cp	r26, r24
    1bae:	b9 07       	cpc	r27, r25
    1bb0:	31 f4       	brne	.+12     	; 0x1bbe <vTaskSwitchContext+0xa6>
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	8d 91       	ld	r24, X+
    1bb6:	9c 91       	ld	r25, X
    1bb8:	13 97       	sbiw	r26, 0x03	; 3
    1bba:	81 83       	std	Z+1, r24	; 0x01
    1bbc:	92 83       	std	Z+2, r25	; 0x02
    1bbe:	01 80       	ldd	r0, Z+1	; 0x01
    1bc0:	f2 81       	ldd	r31, Z+2	; 0x02
    1bc2:	e0 2d       	mov	r30, r0
    1bc4:	86 81       	ldd	r24, Z+6	; 0x06
    1bc6:	97 81       	ldd	r25, Z+7	; 0x07
    1bc8:	80 93 d9 3a 	sts	0x3AD9, r24
    1bcc:	90 93 da 3a 	sts	0x3ADA, r25
    1bd0:	80 91 98 3a 	lds	r24, 0x3A98
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <vTaskSwitchContext+0xc2>
    1bd8:	4c c0       	rjmp	.+152    	; 0x1c72 <vTaskSwitchContext+0x15a>
    1bda:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1bde:	f0 91 da 3a 	lds	r31, 0x3ADA
    1be2:	91 a1       	ldd	r25, Z+33	; 0x21
    1be4:	80 91 04 20 	lds	r24, 0x2004
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <vTaskSwitchContext+0xd6>
    1bec:	42 c0       	rjmp	.+132    	; 0x1c72 <vTaskSwitchContext+0x15a>
    1bee:	80 91 9b 3a 	lds	r24, 0x3A9B
    1bf2:	90 91 9c 3a 	lds	r25, 0x3A9C
    1bf6:	08 96       	adiw	r24, 0x08	; 8
    1bf8:	20 91 99 3a 	lds	r18, 0x3A99
    1bfc:	30 91 9a 3a 	lds	r19, 0x3A9A
    1c00:	82 17       	cp	r24, r18
    1c02:	93 07       	cpc	r25, r19
    1c04:	a0 f5       	brcc	.+104    	; 0x1c6e <vTaskSwitchContext+0x156>
    1c06:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1c0a:	f0 91 da 3a 	lds	r31, 0x3ADA
    1c0e:	81 a1       	ldd	r24, Z+33	; 0x21
    1c10:	80 93 04 20 	sts	0x2004, r24
    1c14:	e0 91 9b 3a 	lds	r30, 0x3A9B
    1c18:	f0 91 9c 3a 	lds	r31, 0x3A9C
    1c1c:	40 91 a5 3a 	lds	r20, 0x3AA5
    1c20:	50 91 a6 3a 	lds	r21, 0x3AA6
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	40 83       	st	Z, r20
    1c2a:	51 83       	std	Z+1, r21	; 0x01
    1c2c:	62 83       	std	Z+2, r22	; 0x02
    1c2e:	73 83       	std	Z+3, r23	; 0x03
    1c30:	20 91 9b 3a 	lds	r18, 0x3A9B
    1c34:	30 91 9c 3a 	lds	r19, 0x3A9C
    1c38:	2c 5f       	subi	r18, 0xFC	; 252
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	20 93 9b 3a 	sts	0x3A9B, r18
    1c40:	30 93 9c 3a 	sts	0x3A9C, r19
    1c44:	e0 91 9b 3a 	lds	r30, 0x3A9B
    1c48:	f0 91 9c 3a 	lds	r31, 0x3A9C
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e0       	ldi	r26, 0x00	; 0
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	80 83       	st	Z, r24
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	a2 83       	std	Z+2, r26	; 0x02
    1c58:	b3 83       	std	Z+3, r27	; 0x03
    1c5a:	80 91 9b 3a 	lds	r24, 0x3A9B
    1c5e:	90 91 9c 3a 	lds	r25, 0x3A9C
    1c62:	04 96       	adiw	r24, 0x04	; 4
    1c64:	80 93 9b 3a 	sts	0x3A9B, r24
    1c68:	90 93 9c 3a 	sts	0x3A9C, r25
    1c6c:	08 95       	ret
    1c6e:	10 92 98 3a 	sts	0x3A98, r1
    1c72:	08 95       	ret

00001c74 <vTaskPlaceOnEventList>:
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	eb 01       	movw	r28, r22
    1c7a:	60 91 d9 3a 	lds	r22, 0x3AD9
    1c7e:	70 91 da 3a 	lds	r23, 0x3ADA
    1c82:	64 5f       	subi	r22, 0xF4	; 244
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	7e d8       	rcall	.-3844   	; 0xd84 <vListInsert>
    1c88:	80 91 d9 3a 	lds	r24, 0x3AD9
    1c8c:	90 91 da 3a 	lds	r25, 0x3ADA
    1c90:	02 96       	adiw	r24, 0x02	; 2
    1c92:	b3 d8       	rcall	.-3738   	; 0xdfa <vListRemove>
    1c94:	cf 3f       	cpi	r28, 0xFF	; 255
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	d8 07       	cpc	r29, r24
    1c9a:	51 f4       	brne	.+20     	; 0x1cb0 <vTaskPlaceOnEventList+0x3c>
    1c9c:	60 91 d9 3a 	lds	r22, 0x3AD9
    1ca0:	70 91 da 3a 	lds	r23, 0x3ADA
    1ca4:	6e 5f       	subi	r22, 0xFE	; 254
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	88 ea       	ldi	r24, 0xA8	; 168
    1caa:	9a e3       	ldi	r25, 0x3A	; 58
    1cac:	44 d8       	rcall	.-3960   	; 0xd36 <vListInsertEnd>
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <vTaskPlaceOnEventList+0x4a>
    1cb0:	80 91 a5 3a 	lds	r24, 0x3AA5
    1cb4:	90 91 a6 3a 	lds	r25, 0x3AA6
    1cb8:	8c 0f       	add	r24, r28
    1cba:	9d 1f       	adc	r25, r29
    1cbc:	97 db       	rcall	.-2258   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <vTaskPlaceOnEventListRestricted>:
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	eb 01       	movw	r28, r22
    1cca:	60 91 d9 3a 	lds	r22, 0x3AD9
    1cce:	70 91 da 3a 	lds	r23, 0x3ADA
    1cd2:	64 5f       	subi	r22, 0xF4	; 244
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	2f d8       	rcall	.-4002   	; 0xd36 <vListInsertEnd>
    1cd8:	80 91 d9 3a 	lds	r24, 0x3AD9
    1cdc:	90 91 da 3a 	lds	r25, 0x3ADA
    1ce0:	02 96       	adiw	r24, 0x02	; 2
    1ce2:	8b d8       	rcall	.-3818   	; 0xdfa <vListRemove>
    1ce4:	80 91 a5 3a 	lds	r24, 0x3AA5
    1ce8:	90 91 a6 3a 	lds	r25, 0x3AA6
    1cec:	8c 0f       	add	r24, r28
    1cee:	9d 1f       	adc	r25, r29
    1cf0:	7d db       	rcall	.-2310   	; 0x13ec <prvAddCurrentTaskToDelayedList>
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <xTaskRemoveFromEventList>:
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	dc 01       	movw	r26, r24
    1d02:	15 96       	adiw	r26, 0x05	; 5
    1d04:	ed 91       	ld	r30, X+
    1d06:	fc 91       	ld	r31, X
    1d08:	16 97       	sbiw	r26, 0x06	; 6
    1d0a:	c6 81       	ldd	r28, Z+6	; 0x06
    1d0c:	d7 81       	ldd	r29, Z+7	; 0x07
    1d0e:	8e 01       	movw	r16, r28
    1d10:	04 5f       	subi	r16, 0xF4	; 244
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	c8 01       	movw	r24, r16
    1d16:	71 d8       	rcall	.-3870   	; 0xdfa <vListRemove>
    1d18:	80 91 a1 3a 	lds	r24, 0x3AA1
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	1b c0       	rjmp	.+54     	; 0x1d56 <xTaskRemoveFromEventList+0x5e>
    1d20:	0a 50       	subi	r16, 0x0A	; 10
    1d22:	11 09       	sbc	r17, r1
    1d24:	c8 01       	movw	r24, r16
    1d26:	69 d8       	rcall	.-3886   	; 0xdfa <vListRemove>
    1d28:	8e 89       	ldd	r24, Y+22	; 0x16
    1d2a:	90 91 a3 3a 	lds	r25, 0x3AA3
    1d2e:	98 17       	cp	r25, r24
    1d30:	10 f4       	brcc	.+4      	; 0x1d36 <xTaskRemoveFromEventList+0x3e>
    1d32:	80 93 a3 3a 	sts	0x3AA3, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9c 01       	movw	r18, r24
    1d3a:	22 0f       	add	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	22 0f       	add	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	82 0f       	add	r24, r18
    1d48:	93 1f       	adc	r25, r19
    1d4a:	b8 01       	movw	r22, r16
    1d4c:	80 53       	subi	r24, 0x30	; 48
    1d4e:	95 4c       	sbci	r25, 0xC5	; 197
    1d50:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <xTaskRemoveFromEventList+0x68>
    1d56:	b8 01       	movw	r22, r16
    1d58:	81 eb       	ldi	r24, 0xB1	; 177
    1d5a:	9a e3       	ldi	r25, 0x3A	; 58
    1d5c:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1d60:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1d64:	f0 91 da 3a 	lds	r31, 0x3ADA
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	2e 89       	ldd	r18, Y+22	; 0x16
    1d6c:	96 89       	ldd	r25, Z+22	; 0x16
    1d6e:	29 17       	cp	r18, r25
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <xTaskRemoveFromEventList+0x7c>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	08 95       	ret

00001d7e <vTaskSetTimeOutState>:
    1d7e:	20 91 9e 3a 	lds	r18, 0x3A9E
    1d82:	fc 01       	movw	r30, r24
    1d84:	20 83       	st	Z, r18
    1d86:	20 91 a5 3a 	lds	r18, 0x3AA5
    1d8a:	30 91 a6 3a 	lds	r19, 0x3AA6
    1d8e:	21 83       	std	Z+1, r18	; 0x01
    1d90:	32 83       	std	Z+2, r19	; 0x02
    1d92:	08 95       	ret

00001d94 <xTaskCheckForTimeOut>:
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	0f 92       	push	r0
    1d9a:	db 01       	movw	r26, r22
    1d9c:	2d 91       	ld	r18, X+
    1d9e:	3c 91       	ld	r19, X
    1da0:	2f 3f       	cpi	r18, 0xFF	; 255
    1da2:	bf ef       	ldi	r27, 0xFF	; 255
    1da4:	3b 07       	cpc	r19, r27
    1da6:	61 f1       	breq	.+88     	; 0x1e00 <xTaskCheckForTimeOut+0x6c>
    1da8:	40 91 9e 3a 	lds	r20, 0x3A9E
    1dac:	fc 01       	movw	r30, r24
    1dae:	50 81       	ld	r21, Z
    1db0:	54 17       	cp	r21, r20
    1db2:	51 f0       	breq	.+20     	; 0x1dc8 <xTaskCheckForTimeOut+0x34>
    1db4:	40 91 a5 3a 	lds	r20, 0x3AA5
    1db8:	50 91 a6 3a 	lds	r21, 0x3AA6
    1dbc:	01 80       	ldd	r0, Z+1	; 0x01
    1dbe:	f2 81       	ldd	r31, Z+2	; 0x02
    1dc0:	e0 2d       	mov	r30, r0
    1dc2:	4e 17       	cp	r20, r30
    1dc4:	5f 07       	cpc	r21, r31
    1dc6:	f0 f4       	brcc	.+60     	; 0x1e04 <xTaskCheckForTimeOut+0x70>
    1dc8:	e0 91 a5 3a 	lds	r30, 0x3AA5
    1dcc:	f0 91 a6 3a 	lds	r31, 0x3AA6
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	11 96       	adiw	r26, 0x01	; 1
    1dd4:	4d 91       	ld	r20, X+
    1dd6:	5c 91       	ld	r21, X
    1dd8:	12 97       	sbiw	r26, 0x02	; 2
    1dda:	e4 1b       	sub	r30, r20
    1ddc:	f5 0b       	sbc	r31, r21
    1dde:	e2 17       	cp	r30, r18
    1de0:	f3 07       	cpc	r31, r19
    1de2:	90 f4       	brcc	.+36     	; 0x1e08 <xTaskCheckForTimeOut+0x74>
    1de4:	e0 91 a5 3a 	lds	r30, 0x3AA5
    1de8:	f0 91 a6 3a 	lds	r31, 0x3AA6
    1dec:	4e 1b       	sub	r20, r30
    1dee:	5f 0b       	sbc	r21, r31
    1df0:	24 0f       	add	r18, r20
    1df2:	35 1f       	adc	r19, r21
    1df4:	fb 01       	movw	r30, r22
    1df6:	20 83       	st	Z, r18
    1df8:	31 83       	std	Z+1, r19	; 0x01
    1dfa:	c1 df       	rcall	.-126    	; 0x1d7e <vTaskSetTimeOutState>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <xTaskCheckForTimeOut+0x76>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <xTaskCheckForTimeOut+0x76>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <xTaskCheckForTimeOut+0x76>
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	08 95       	ret

00001e10 <vTaskMissedYield>:
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 9f 3a 	sts	0x3A9F, r24
    1e16:	08 95       	ret

00001e18 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1e18:	80 91 d9 3a 	lds	r24, 0x3AD9
    1e1c:	90 91 da 3a 	lds	r25, 0x3ADA

		return xReturn;
	}
    1e20:	08 95       	ret

00001e22 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e22:	80 91 a2 3a 	lds	r24, 0x3AA2
    1e26:	88 23       	and	r24, r24
    1e28:	31 f0       	breq	.+12     	; 0x1e36 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e2a:	80 91 a1 3a 	lds	r24, 0x3AA1
    1e2e:	81 11       	cpse	r24, r1
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	08 95       	ret
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
			}
		}

		return xReturn;
	}
    1e3c:	08 95       	ret

00001e3e <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1e48:	8e 89       	ldd	r24, Y+22	; 0x16
    1e4a:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1e4e:	f0 91 da 3a 	lds	r31, 0x3ADA
    1e52:	96 89       	ldd	r25, Z+22	; 0x16
    1e54:	89 17       	cp	r24, r25
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <vTaskPriorityInherit+0x1c>
    1e58:	44 c0       	rjmp	.+136    	; 0x1ee2 <vTaskPriorityInherit+0xa4>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1e5a:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1e5e:	f0 91 da 3a 	lds	r31, 0x3ADA
    1e62:	96 89       	ldd	r25, Z+22	; 0x16
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	29 1b       	sub	r18, r25
    1e6a:	31 09       	sbc	r19, r1
    1e6c:	2c 87       	std	Y+12, r18	; 0x0c
    1e6e:	3d 87       	std	Y+13, r19	; 0x0d

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 01       	movw	r18, r24
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	80 53       	subi	r24, 0x30	; 48
    1e86:	95 4c       	sbci	r25, 0xC5	; 197
    1e88:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e8a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e8c:	28 17       	cp	r18, r24
    1e8e:	39 07       	cpc	r19, r25
    1e90:	11 f5       	brne	.+68     	; 0x1ed6 <vTaskPriorityInherit+0x98>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    1e92:	8e 01       	movw	r16, r28
    1e94:	0e 5f       	subi	r16, 0xFE	; 254
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	c8 01       	movw	r24, r16
    1e9a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1e9e:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1ea2:	f0 91 da 3a 	lds	r31, 0x3ADA
    1ea6:	86 89       	ldd	r24, Z+22	; 0x16
    1ea8:	8e 8b       	std	Y+22, r24	; 0x16
				prvAddTaskToReadyQueue( pxTCB );
    1eaa:	90 91 a3 3a 	lds	r25, 0x3AA3
    1eae:	98 17       	cp	r25, r24
    1eb0:	10 f4       	brcc	.+4      	; 0x1eb6 <vTaskPriorityInherit+0x78>
    1eb2:	80 93 a3 3a 	sts	0x3AA3, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 01       	movw	r18, r24
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	22 0f       	add	r18, r18
    1ec0:	33 1f       	adc	r19, r19
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	b8 01       	movw	r22, r16
    1ecc:	80 53       	subi	r24, 0x30	; 48
    1ece:	95 4c       	sbci	r25, 0xC5	; 197
    1ed0:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <vTaskPriorityInherit+0xa4>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1ed6:	e0 91 d9 3a 	lds	r30, 0x3AD9
    1eda:	f0 91 da 3a 	lds	r31, 0x3ADA
    1ede:	86 89       	ldd	r24, Z+22	; 0x16
    1ee0:	8e 8b       	std	Y+22, r24	; 0x16
			}
		}
	}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	08 95       	ret

00001eec <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	39 f1       	breq	.+78     	; 0x1f48 <vTaskPriorityDisinherit+0x5c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1efa:	9e 89       	ldd	r25, Y+22	; 0x16
    1efc:	8a a1       	ldd	r24, Y+34	; 0x22
    1efe:	98 17       	cp	r25, r24
    1f00:	19 f1       	breq	.+70     	; 0x1f48 <vTaskPriorityDisinherit+0x5c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    1f02:	8e 01       	movw	r16, r28
    1f04:	0e 5f       	subi	r16, 0xFE	; 254
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	c8 01       	movw	r24, r16
    1f0a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1f0e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f10:	8e 8b       	std	Y+22, r24	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	28 1b       	sub	r18, r24
    1f18:	31 09       	sbc	r19, r1
    1f1a:	2c 87       	std	Y+12, r18	; 0x0c
    1f1c:	3d 87       	std	Y+13, r19	; 0x0d
				prvAddTaskToReadyQueue( pxTCB );
    1f1e:	90 91 a3 3a 	lds	r25, 0x3AA3
    1f22:	98 17       	cp	r25, r24
    1f24:	10 f4       	brcc	.+4      	; 0x1f2a <vTaskPriorityDisinherit+0x3e>
    1f26:	80 93 a3 3a 	sts	0x3AA3, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9c 01       	movw	r18, r24
    1f2e:	22 0f       	add	r18, r18
    1f30:	33 1f       	adc	r19, r19
    1f32:	22 0f       	add	r18, r18
    1f34:	33 1f       	adc	r19, r19
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	82 0f       	add	r24, r18
    1f3c:	93 1f       	adc	r25, r19
    1f3e:	b8 01       	movw	r22, r16
    1f40:	80 53       	subi	r24, 0x30	; 48
    1f42:	95 4c       	sbci	r25, 0xC5	; 197
    1f44:	0e 94 9b 06 	call	0xd36	; 0xd36 <vListInsertEnd>
			}
		}
	}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
    1f52:	fc 01       	movw	r30, r24
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1f54:	62 83       	std	Z+2, r22	; 0x02
    1f56:	73 83       	std	Z+3, r23	; 0x03
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1f58:	80 87       	std	Z+8, r24	; 0x08
    1f5a:	91 87       	std	Z+9, r25	; 0x09
	
	if( xNextExpiryTime <= xTimeNow )
    1f5c:	46 17       	cp	r20, r22
    1f5e:	57 07       	cpc	r21, r23
    1f60:	90 f0       	brcs	.+36     	; 0x1f86 <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    1f62:	42 1b       	sub	r20, r18
    1f64:	53 0b       	sbc	r21, r19
    1f66:	84 85       	ldd	r24, Z+12	; 0x0c
    1f68:	95 85       	ldd	r25, Z+13	; 0x0d
    1f6a:	48 17       	cp	r20, r24
    1f6c:	59 07       	cpc	r21, r25
    1f6e:	e0 f4       	brcc	.+56     	; 0x1fa8 <prvInsertTimerInActiveList+0x56>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1f70:	bf 01       	movw	r22, r30
    1f72:	6e 5f       	subi	r22, 0xFE	; 254
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	80 91 df 3a 	lds	r24, 0x3ADF
    1f7a:	90 91 e0 3a 	lds	r25, 0x3AE0
    1f7e:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	08 95       	ret
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1f86:	42 17       	cp	r20, r18
    1f88:	53 07       	cpc	r21, r19
    1f8a:	18 f4       	brcc	.+6      	; 0x1f92 <prvInsertTimerInActiveList+0x40>
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	68 f4       	brcc	.+26     	; 0x1fac <prvInsertTimerInActiveList+0x5a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1f92:	bf 01       	movw	r22, r30
    1f94:	6e 5f       	subi	r22, 0xFE	; 254
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	80 91 e1 3a 	lds	r24, 0x3AE1
    1f9c:	90 91 e2 3a 	lds	r25, 0x3AE2
    1fa0:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	08 95       	ret
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	08 95       	ret
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    1fae:	08 95       	ret

00001fb0 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	0f 92       	push	r0
	{
		if( xTimerQueue == NULL )
    1fb6:	80 91 dd 3a 	lds	r24, 0x3ADD
    1fba:	90 91 de 3a 	lds	r25, 0x3ADE
    1fbe:	89 2b       	or	r24, r25
    1fc0:	e1 f4       	brne	.+56     	; 0x1ffa <prvCheckForValidListAndQueue+0x4a>
		{
			vListInitialise( &xActiveTimerList1 );
    1fc2:	8c ee       	ldi	r24, 0xEC	; 236
    1fc4:	9a e3       	ldi	r25, 0x3A	; 58
    1fc6:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    1fca:	83 ee       	ldi	r24, 0xE3	; 227
    1fcc:	9a e3       	ldi	r25, 0x3A	; 58
    1fce:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    1fd2:	8c ee       	ldi	r24, 0xEC	; 236
    1fd4:	9a e3       	ldi	r25, 0x3A	; 58
    1fd6:	80 93 e1 3a 	sts	0x3AE1, r24
    1fda:	90 93 e2 3a 	sts	0x3AE2, r25
			pxOverflowTimerList = &xActiveTimerList2;
    1fde:	83 ee       	ldi	r24, 0xE3	; 227
    1fe0:	9a e3       	ldi	r25, 0x3A	; 58
    1fe2:	80 93 df 3a 	sts	0x3ADF, r24
    1fe6:	90 93 e0 3a 	sts	0x3AE0, r25
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
    1fea:	65 e0       	ldi	r22, 0x05	; 5
    1fec:	80 e1       	ldi	r24, 0x10	; 16
    1fee:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueCreate>
    1ff2:	80 93 dd 3a 	sts	0x3ADD, r24
    1ff6:	90 93 de 3a 	sts	0x3ADE, r25
		}
	}
	taskEXIT_CRITICAL();
    1ffa:	0f 90       	pop	r0
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	08 95       	ret

00002000 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    200e:	d0 df       	rcall	.-96     	; 0x1fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    2010:	80 91 dd 3a 	lds	r24, 0x3ADD
    2014:	90 91 de 3a 	lds	r25, 0x3ADE
    2018:	89 2b       	or	r24, r25
    201a:	89 f0       	breq	.+34     	; 0x203e <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
    201c:	a1 2c       	mov	r10, r1
    201e:	b1 2c       	mov	r11, r1
    2020:	c1 2c       	mov	r12, r1
    2022:	d1 2c       	mov	r13, r1
    2024:	e1 2c       	mov	r14, r1
    2026:	f1 2c       	mov	r15, r1
    2028:	00 e0       	ldi	r16, 0x00	; 0
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e4       	ldi	r20, 0x40	; 64
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	66 e8       	ldi	r22, 0x86	; 134
    2034:	70 e2       	ldi	r23, 0x20	; 32
    2036:	83 e1       	ldi	r24, 0x13	; 19
    2038:	91 e1       	ldi	r25, 0x11	; 17
    203a:	aa da       	rcall	.-2732   	; 0x1590 <xTaskGenericCreate>
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <xTimerCreateTimerTask+0x40>

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
portBASE_TYPE xReturn = pdFAIL;
    203e:	80 e0       	ldi	r24, 0x00	; 0
		#endif
	}

	configASSERT( xReturn );
	return xReturn;
}
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	cf 90       	pop	r12
    204a:	bf 90       	pop	r11
    204c:	af 90       	pop	r10
    204e:	08 95       	ret

00002050 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	5c 01       	movw	r10, r24
    2068:	7b 01       	movw	r14, r22
    206a:	94 2e       	mov	r9, r20
    206c:	69 01       	movw	r12, r18
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
    206e:	61 15       	cp	r22, r1
    2070:	71 05       	cpc	r23, r1
    2072:	b1 f0       	breq	.+44     	; 0x20a0 <xTimerCreate+0x50>
		pxNewTimer = NULL;
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
    2074:	83 e1       	ldi	r24, 0x13	; 19
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pvPortMalloc>
    207c:	ec 01       	movw	r28, r24
		if( pxNewTimer != NULL )
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	89 f0       	breq	.+34     	; 0x20a4 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    2082:	96 df       	rcall	.-212    	; 0x1fb0 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    2084:	a8 82       	st	Y, r10
    2086:	b9 82       	std	Y+1, r11	; 0x01
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2088:	ec 86       	std	Y+12, r14	; 0x0c
    208a:	fd 86       	std	Y+13, r15	; 0x0d
			pxNewTimer->uxAutoReload = uxAutoReload;
    208c:	9e 86       	std	Y+14, r9	; 0x0e
			pxNewTimer->pvTimerID = pvTimerID;
    208e:	cf 86       	std	Y+15, r12	; 0x0f
    2090:	d8 8a       	std	Y+16, r13	; 0x10
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2092:	09 8b       	std	Y+17, r16	; 0x11
    2094:	1a 8b       	std	Y+18, r17	; 0x12
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2096:	ce 01       	movw	r24, r28
    2098:	02 96       	adiw	r24, 0x02	; 2
    209a:	0e 94 97 06 	call	0xd2e	; 0xd2e <vListInitialiseItem>
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <xTimerCreate+0x54>
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
	{
		pxNewTimer = NULL;
    20a0:	c0 e0       	ldi	r28, 0x00	; 0
    20a2:	d0 e0       	ldi	r29, 0x00	; 0
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
}
    20a4:	ce 01       	movw	r24, r28
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	af 90       	pop	r10
    20ba:	9f 90       	pop	r9
    20bc:	08 95       	ret

000020be <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	25 97       	sbiw	r28, 0x05	; 5
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	d9 01       	movw	r26, r18
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    20d2:	e0 91 dd 3a 	lds	r30, 0x3ADD
    20d6:	f0 91 de 3a 	lds	r31, 0x3ADE
    20da:	30 97       	sbiw	r30, 0x00	; 0
    20dc:	59 f1       	breq	.+86     	; 0x2134 <xTimerGenericCommand+0x76>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    20de:	69 83       	std	Y+1, r22	; 0x01
		xMessage.xMessageValue = xOptionalValue;
    20e0:	4a 83       	std	Y+2, r20	; 0x02
    20e2:	5b 83       	std	Y+3, r21	; 0x03
		xMessage.pxTimer = ( xTIMER * ) xTimer;
    20e4:	8c 83       	std	Y+4, r24	; 0x04
    20e6:	9d 83       	std	Y+5, r25	; 0x05

		if( pxHigherPriorityTaskWoken == NULL )
    20e8:	10 97       	sbiw	r26, 0x00	; 0
    20ea:	e1 f4       	brne	.+56     	; 0x2124 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    20ec:	9a de       	rcall	.-716    	; 0x1e22 <xTaskGetSchedulerState>
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	61 f4       	brne	.+24     	; 0x210a <xTimerGenericCommand+0x4c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	a8 01       	movw	r20, r16
    20f6:	be 01       	movw	r22, r28
    20f8:	6f 5f       	subi	r22, 0xFF	; 255
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	80 91 dd 3a 	lds	r24, 0x3ADD
    2100:	90 91 de 3a 	lds	r25, 0x3ADE
    2104:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2108:	16 c0       	rjmp	.+44     	; 0x2136 <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	be 01       	movw	r22, r28
    2112:	6f 5f       	subi	r22, 0xFF	; 255
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	80 91 dd 3a 	lds	r24, 0x3ADD
    211a:	90 91 de 3a 	lds	r25, 0x3ADE
    211e:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	ad 01       	movw	r20, r26
    2128:	be 01       	movw	r22, r28
    212a:	6f 5f       	subi	r22, 0xFF	; 255
    212c:	7f 4f       	sbci	r23, 0xFF	; 255
    212e:	cf 01       	movw	r24, r30
    2130:	30 d8       	rcall	.-4000   	; 0x1192 <xQueueGenericSendFromISR>
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
    2134:	80 e0       	ldi	r24, 0x00	; 0
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
}
    2136:	25 96       	adiw	r28, 0x05	; 5
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	5c 01       	movw	r10, r24
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
    215c:	32 db       	rcall	.-2460   	; 0x17c2 <xTaskGetTickCount>
    215e:	6c 01       	movw	r12, r24
	
	if( xTimeNow < xLastTime )
    2160:	80 91 db 3a 	lds	r24, 0x3ADB
    2164:	90 91 dc 3a 	lds	r25, 0x3ADC
    2168:	c8 16       	cp	r12, r24
    216a:	d9 06       	cpc	r13, r25
    216c:	08 f0       	brcs	.+2      	; 0x2170 <prvSampleTimeNow+0x2a>
    216e:	49 c0       	rjmp	.+146    	; 0x2202 <prvSampleTimeNow+0xbc>
    2170:	31 c0       	rjmp	.+98     	; 0x21d4 <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2172:	a5 81       	ldd	r26, Z+5	; 0x05
    2174:	b6 81       	ldd	r27, Z+6	; 0x06
    2176:	ed 90       	ld	r14, X+
    2178:	fc 90       	ld	r15, X

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    217a:	05 80       	ldd	r0, Z+5	; 0x05
    217c:	f6 81       	ldd	r31, Z+6	; 0x06
    217e:	e0 2d       	mov	r30, r0
    2180:	c6 81       	ldd	r28, Z+6	; 0x06
    2182:	d7 81       	ldd	r29, Z+7	; 0x07
		vListRemove( &( pxTimer->xTimerListItem ) );
    2184:	8e 01       	movw	r16, r28
    2186:	0e 5f       	subi	r16, 0xFE	; 254
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	c8 01       	movw	r24, r16
    218c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    2190:	e9 89       	ldd	r30, Y+17	; 0x11
    2192:	fa 89       	ldd	r31, Y+18	; 0x12
    2194:	ce 01       	movw	r24, r28
    2196:	19 95       	eicall

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    2198:	8e 85       	ldd	r24, Y+14	; 0x0e
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	d9 f4       	brne	.+54     	; 0x21d4 <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    219e:	8c 85       	ldd	r24, Y+12	; 0x0c
    21a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    21a2:	8e 0d       	add	r24, r14
    21a4:	9f 1d       	adc	r25, r15
			if( xReloadTime > xNextExpireTime )
    21a6:	e8 16       	cp	r14, r24
    21a8:	f9 06       	cpc	r15, r25
    21aa:	60 f4       	brcc	.+24     	; 0x21c4 <prvSampleTimeNow+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    21ae:	9b 83       	std	Y+3, r25	; 0x03
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    21b0:	c8 87       	std	Y+8, r28	; 0x08
    21b2:	d9 87       	std	Y+9, r29	; 0x09
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    21b4:	b8 01       	movw	r22, r16
    21b6:	80 91 e1 3a 	lds	r24, 0x3AE1
    21ba:	90 91 e2 3a 	lds	r25, 0x3AE2
    21be:	0e 94 c2 06 	call	0xd84	; 0xd84 <vListInsert>
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    21c4:	00 e0       	ldi	r16, 0x00	; 0
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	a7 01       	movw	r20, r14
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	ce 01       	movw	r24, r28
    21d2:	75 df       	rcall	.-278    	; 0x20be <xTimerGenericCommand>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    21d4:	e0 91 e1 3a 	lds	r30, 0x3AE1
    21d8:	f0 91 e2 3a 	lds	r31, 0x3AE2
    21dc:	80 81       	ld	r24, Z
    21de:	81 11       	cpse	r24, r1
    21e0:	c8 cf       	rjmp	.-112    	; 0x2172 <prvSampleTimeNow+0x2c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    21e2:	80 91 df 3a 	lds	r24, 0x3ADF
    21e6:	90 91 e0 3a 	lds	r25, 0x3AE0
    21ea:	80 93 e1 3a 	sts	0x3AE1, r24
    21ee:	90 93 e2 3a 	sts	0x3AE2, r25
	pxOverflowTimerList = pxTemp;
    21f2:	e0 93 df 3a 	sts	0x3ADF, r30
    21f6:	f0 93 e0 3a 	sts	0x3AE0, r31
	xTimeNow = xTaskGetTickCount();
	
	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	f5 01       	movw	r30, r10
    21fe:	80 83       	st	Z, r24
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2202:	f5 01       	movw	r30, r10
    2204:	10 82       	st	Z, r1
	}
	
	xLastTime = xTimeNow;
    2206:	c0 92 db 3a 	sts	0x3ADB, r12
    220a:	d0 92 dc 3a 	sts	0x3ADC, r13
	
	return xTimeNow;
}
    220e:	c6 01       	movw	r24, r12
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	ff 90       	pop	r15
    221a:	ef 90       	pop	r14
    221c:	df 90       	pop	r13
    221e:	cf 90       	pop	r12
    2220:	bf 90       	pop	r11
    2222:	af 90       	pop	r10
    2224:	08 95       	ret

00002226 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <prvTimerTask+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <prvTimerTask+0x8>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2232:	ce 01       	movw	r24, r28
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	5c 01       	movw	r10, r24

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    2238:	88 2e       	mov	r8, r24
    223a:	9b 2c       	mov	r9, r11
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    223c:	e0 91 e1 3a 	lds	r30, 0x3AE1
    2240:	f0 91 e2 3a 	lds	r31, 0x3AE2
    2244:	80 81       	ld	r24, Z
	if( *pxListWasEmpty == pdFALSE )
    2246:	88 23       	and	r24, r24
    2248:	09 f4       	brne	.+2      	; 0x224c <prvTimerTask+0x26>
    224a:	b1 c0       	rjmp	.+354    	; 0x23ae <prvTimerTask+0x188>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    224c:	05 80       	ldd	r0, Z+5	; 0x05
    224e:	f6 81       	ldd	r31, Z+6	; 0x06
    2250:	e0 2d       	mov	r30, r0
    2252:	e0 80       	ld	r14, Z
    2254:	f1 80       	ldd	r15, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    2256:	af da       	rcall	.-2722   	; 0x17b6 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2258:	c5 01       	movw	r24, r10
    225a:	75 df       	rcall	.-278    	; 0x2146 <prvSampleTimeNow>
    225c:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	81 11       	cpse	r24, r1
    2262:	43 c0       	rjmp	.+134    	; 0x22ea <prvTimerTask+0xc4>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2264:	0e 15       	cp	r16, r14
    2266:	1f 05       	cpc	r17, r15
    2268:	90 f1       	brcs	.+100    	; 0x22ce <prvTimerTask+0xa8>
			{
				xTaskResumeAll();
    226a:	79 db       	rcall	.-2318   	; 0x195e <xTaskResumeAll>
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    226c:	e0 91 e1 3a 	lds	r30, 0x3AE1
    2270:	f0 91 e2 3a 	lds	r31, 0x3AE2
    2274:	05 80       	ldd	r0, Z+5	; 0x05
    2276:	f6 81       	ldd	r31, Z+6	; 0x06
    2278:	e0 2d       	mov	r30, r0
    227a:	c6 80       	ldd	r12, Z+6	; 0x06
    227c:	d7 80       	ldd	r13, Z+7	; 0x07
	vListRemove( &( pxTimer->xTimerListItem ) );
    227e:	c6 01       	movw	r24, r12
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    2286:	d6 01       	movw	r26, r12
    2288:	1e 96       	adiw	r26, 0x0e	; 14
    228a:	8c 91       	ld	r24, X
    228c:	1e 97       	sbiw	r26, 0x0e	; 14
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	a1 f4       	brne	.+40     	; 0x22ba <prvTimerTask+0x94>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    2292:	1c 96       	adiw	r26, 0x0c	; 12
    2294:	6d 91       	ld	r22, X+
    2296:	7c 91       	ld	r23, X
    2298:	1d 97       	sbiw	r26, 0x0d	; 13
    229a:	6e 0d       	add	r22, r14
    229c:	7f 1d       	adc	r23, r15
    229e:	97 01       	movw	r18, r14
    22a0:	a8 01       	movw	r20, r16
    22a2:	c6 01       	movw	r24, r12
    22a4:	56 de       	rcall	.-852    	; 0x1f52 <prvInsertTimerInActiveList>
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	41 f4       	brne	.+16     	; 0x22ba <prvTimerTask+0x94>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    22aa:	00 e0       	ldi	r16, 0x00	; 0
    22ac:	10 e0       	ldi	r17, 0x00	; 0
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	a7 01       	movw	r20, r14
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	c6 01       	movw	r24, r12
    22b8:	02 df       	rcall	.-508    	; 0x20be <xTimerGenericCommand>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    22ba:	d6 01       	movw	r26, r12
    22bc:	51 96       	adiw	r26, 0x11	; 17
    22be:	ed 91       	ld	r30, X+
    22c0:	fc 91       	ld	r31, X
    22c2:	52 97       	sbiw	r26, 0x12	; 18
    22c4:	c6 01       	movw	r24, r12
    22c6:	19 95       	eicall
    22c8:	11 c0       	rjmp	.+34     	; 0x22ec <prvTimerTask+0xc6>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
    22ca:	e1 2c       	mov	r14, r1
    22cc:	f1 2c       	mov	r15, r1
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    22ce:	b7 01       	movw	r22, r14
    22d0:	60 1b       	sub	r22, r16
    22d2:	71 0b       	sbc	r23, r17
    22d4:	80 91 dd 3a 	lds	r24, 0x3ADD
    22d8:	90 91 de 3a 	lds	r25, 0x3ADE
    22dc:	65 d8       	rcall	.-3894   	; 0x13a8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    22de:	3f db       	rcall	.-2434   	; 0x195e <xTaskResumeAll>
    22e0:	81 11       	cpse	r24, r1
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <prvTimerTask+0xc6>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    22e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <prvTimerTask+0xc6>
				}
			}
		}
		else
		{
			xTaskResumeAll();
    22ea:	39 db       	rcall	.-2446   	; 0x195e <xTaskResumeAll>
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    22ec:	ce 01       	movw	r24, r28
    22ee:	06 96       	adiw	r24, 0x06	; 6
    22f0:	2a df       	rcall	.-428    	; 0x2146 <prvSampleTimeNow>
    22f2:	6c 01       	movw	r12, r24
    22f4:	4e c0       	rjmp	.+156    	; 0x2392 <prvTimerTask+0x16c>

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
    22f6:	ec 80       	ldd	r14, Y+4	; 0x04
    22f8:	fd 80       	ldd	r15, Y+5	; 0x05

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
    22fa:	e1 14       	cp	r14, r1
    22fc:	f1 04       	cpc	r15, r1
    22fe:	59 f0       	breq	.+22     	; 0x2316 <prvTimerTask+0xf0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2300:	d7 01       	movw	r26, r14
    2302:	1a 96       	adiw	r26, 0x0a	; 10
    2304:	ed 91       	ld	r30, X+
    2306:	fc 91       	ld	r31, X
    2308:	1b 97       	sbiw	r26, 0x0b	; 11
    230a:	ef 2b       	or	r30, r31
    230c:	21 f0       	breq	.+8      	; 0x2316 <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
    230e:	c7 01       	movw	r24, r14
    2310:	02 96       	adiw	r24, 0x02	; 2
    2312:	0e 94 fd 06 	call	0xdfa	; 0xdfa <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	49 f1       	breq	.+82     	; 0x236e <prvTimerTask+0x148>
    231c:	83 30       	cpi	r24, 0x03	; 3
    231e:	b1 f1       	breq	.+108    	; 0x238c <prvTimerTask+0x166>
    2320:	81 11       	cpse	r24, r1
    2322:	37 c0       	rjmp	.+110    	; 0x2392 <prvTimerTask+0x16c>
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
    2324:	2a 81       	ldd	r18, Y+2	; 0x02
    2326:	3b 81       	ldd	r19, Y+3	; 0x03
    2328:	f7 01       	movw	r30, r14
    232a:	64 85       	ldd	r22, Z+12	; 0x0c
    232c:	75 85       	ldd	r23, Z+13	; 0x0d
    232e:	62 0f       	add	r22, r18
    2330:	73 1f       	adc	r23, r19
    2332:	a6 01       	movw	r20, r12
    2334:	c7 01       	movw	r24, r14
    2336:	0d de       	rcall	.-998    	; 0x1f52 <prvInsertTimerInActiveList>
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	59 f5       	brne	.+86     	; 0x2392 <prvTimerTask+0x16c>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    233c:	d7 01       	movw	r26, r14
    233e:	51 96       	adiw	r26, 0x11	; 17
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	52 97       	sbiw	r26, 0x12	; 18
    2346:	c7 01       	movw	r24, r14
    2348:	19 95       	eicall

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    234a:	f7 01       	movw	r30, r14
    234c:	86 85       	ldd	r24, Z+14	; 0x0e
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	01 f5       	brne	.+64     	; 0x2392 <prvTimerTask+0x16c>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2352:	44 85       	ldd	r20, Z+12	; 0x0c
    2354:	55 85       	ldd	r21, Z+13	; 0x0d
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	48 0f       	add	r20, r24
    235c:	59 1f       	adc	r21, r25
    235e:	00 e0       	ldi	r16, 0x00	; 0
    2360:	10 e0       	ldi	r17, 0x00	; 0
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	c7 01       	movw	r24, r14
    236a:	a9 de       	rcall	.-686    	; 0x20be <xTimerGenericCommand>
    236c:	12 c0       	rjmp	.+36     	; 0x2392 <prvTimerTask+0x16c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
    236e:	2a 81       	ldd	r18, Y+2	; 0x02
    2370:	3b 81       	ldd	r19, Y+3	; 0x03
    2372:	d7 01       	movw	r26, r14
    2374:	1c 96       	adiw	r26, 0x0c	; 12
    2376:	2d 93       	st	X+, r18
    2378:	3c 93       	st	X, r19
    237a:	1d 97       	sbiw	r26, 0x0d	; 13
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    237c:	b6 01       	movw	r22, r12
    237e:	62 0f       	add	r22, r18
    2380:	73 1f       	adc	r23, r19
    2382:	96 01       	movw	r18, r12
    2384:	a6 01       	movw	r20, r12
    2386:	c7 01       	movw	r24, r14
    2388:	e4 dd       	rcall	.-1080   	; 0x1f52 <prvInsertTimerInActiveList>
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <prvTimerTask+0x16c>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
    238c:	c7 01       	movw	r24, r14
    238e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <vPortFree>

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	68 2d       	mov	r22, r8
    239a:	79 2d       	mov	r23, r9
    239c:	80 91 dd 3a 	lds	r24, 0x3ADD
    23a0:	90 91 de 3a 	lds	r25, 0x3ADE
    23a4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    23a8:	81 11       	cpse	r24, r1
    23aa:	a5 cf       	rjmp	.-182    	; 0x22f6 <prvTimerTask+0xd0>
    23ac:	47 cf       	rjmp	.-370    	; 0x223c <prvTimerTask+0x16>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    23ae:	03 da       	rcall	.-3066   	; 0x17b6 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    23b0:	c5 01       	movw	r24, r10
    23b2:	c9 de       	rcall	.-622    	; 0x2146 <prvSampleTimeNow>
    23b4:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	88 23       	and	r24, r24
    23ba:	09 f4       	brne	.+2      	; 0x23be <prvTimerTask+0x198>
    23bc:	86 cf       	rjmp	.-244    	; 0x22ca <prvTimerTask+0xa4>
    23be:	95 cf       	rjmp	.-214    	; 0x22ea <prvTimerTask+0xc4>

000023c0 <csp_malloc>:

/* FreeRTOS includes */
#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
	return pvPortMalloc(size);
    23c0:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <pvPortMalloc>
}
    23c4:	08 95       	ret

000023c6 <csp_free>:

void csp_free(void *ptr) {
	vPortFree(ptr);
    23c6:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <vPortFree>
    23ca:	08 95       	ret

000023cc <csp_queue_create>:
	return xQueueReceive(handle, buf, timeout);
}

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
	return xQueueReceiveFromISR(handle, buf, (signed CSP_BASE_TYPE *)task_woken);
}
    23cc:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <xQueueCreate>
    23d0:	08 95       	ret

000023d2 <csp_queue_enqueue>:
    23d2:	fb 01       	movw	r30, r22
    23d4:	ba 01       	movw	r22, r20
    23d6:	a9 01       	movw	r20, r18
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	bf 01       	movw	r22, r30
    23dc:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    23e0:	99 27       	eor	r25, r25
    23e2:	87 fd       	sbrc	r24, 7
    23e4:	90 95       	com	r25
    23e6:	08 95       	ret

000023e8 <csp_queue_enqueue_isr>:
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    23ee:	99 27       	eor	r25, r25
    23f0:	87 fd       	sbrc	r24, 7
    23f2:	90 95       	com	r25
    23f4:	08 95       	ret

000023f6 <csp_queue_dequeue>:
    23f6:	fb 01       	movw	r30, r22
    23f8:	ba 01       	movw	r22, r20
    23fa:	a9 01       	movw	r20, r18
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	bf 01       	movw	r22, r30
    2400:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    2404:	99 27       	eor	r25, r25
    2406:	87 fd       	sbrc	r24, 7
    2408:	90 95       	com	r25
    240a:	08 95       	ret

0000240c <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
	return uxQueueMessagesWaiting(handle);
    240c:	0e 94 cc 09 	call	0x1398	; 0x1398 <uxQueueMessagesWaiting>
}
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	08 95       	ret

00002414 <csp_mutex_create>:
	return csp_bin_sem_remove(mutex);
}

int csp_mutex_lock(csp_mutex_t * mutex, uint32_t timeout) {
	return csp_bin_sem_wait(mutex, timeout);
}
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	ec 01       	movw	r28, r24
    241a:	0e 94 a1 08 	call	0x1142	; 0x1142 <xQueueCreateMutex>
    241e:	9c 01       	movw	r18, r24
    2420:	88 83       	st	Y, r24
    2422:	99 83       	std	Y+1, r25	; 0x01
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	23 2b       	or	r18, r19
    242a:	11 f4       	brne	.+4      	; 0x2430 <csp_mutex_create+0x1c>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <csp_bin_sem_create>:
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueCreate>
    2444:	88 83       	st	Y, r24
    2446:	99 83       	std	Y+1, r25	; 0x01
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	39 f0       	breq	.+14     	; 0x245a <csp_bin_sem_create+0x24>
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <csp_bin_sem_wait>:
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	fc 01       	movw	r30, r24
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    2474:	21 e0       	ldi	r18, 0x01	; 1
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	11 f0       	breq	.+4      	; 0x2480 <csp_bin_sem_wait+0x1c>
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	c9 01       	movw	r24, r18
    2482:	08 95       	ret

00002484 <csp_bin_sem_post>:
	}
}

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
	csp_log_lock("Post: %p\r\n", sem);
	if (xSemaphoreGive(*sem) == pdPASS) {
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	fc 01       	movw	r30, r24
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSend>
    2498:	21 e0       	ldi	r18, 0x01	; 1
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	11 f0       	breq	.+4      	; 0x24a4 <csp_bin_sem_post+0x20>
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
		return CSP_SEMAPHORE_OK;
	} else {
		return CSP_SEMAPHORE_ERROR;
	}
}
    24a4:	c9 01       	movw	r24, r18
    24a6:	08 95       	ret

000024a8 <csp_sys_tasklist>:

#include <csp/arch/csp_system.h>

int csp_sys_tasklist(char * out) {
#if FREERTOS_VERSION < 8
	vTaskList((signed char *) out);
    24a8:	e2 da       	rcall	.-2620   	; 0x1a6e <vTaskList>
#else
	vTaskList(out);
#endif
	return CSP_ERR_NONE;
}
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	08 95       	ret

000024b0 <csp_sys_tasklist_size>:

int csp_sys_tasklist_size(void) {
	return 40 * uxTaskGetNumberOfTasks();
    24b0:	92 d9       	rcall	.-3292   	; 0x17d6 <uxTaskGetNumberOfTasks>
}
    24b2:	28 e2       	ldi	r18, 0x28	; 40
    24b4:	82 9f       	mul	r24, r18
    24b6:	c0 01       	movw	r24, r0
    24b8:	11 24       	eor	r1, r1
    24ba:	08 95       	ret

000024bc <csp_sys_memfree>:

uint32_t csp_sys_memfree(void) {
    24bc:	4f 92       	push	r4
    24be:	5f 92       	push	r5
    24c0:	6f 92       	push	r6
    24c2:	7f 92       	push	r7
    24c4:	8f 92       	push	r8
    24c6:	9f 92       	push	r9
    24c8:	af 92       	push	r10
    24ca:	bf 92       	push	r11
    24cc:	cf 92       	push	r12
    24ce:	df 92       	push	r13
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15

	uint32_t total = 0, max = UINT32_MAX, size;
	void * pmem;

	/* If size_t is less than 32 bits, start with 10 KiB */
	size = sizeof(uint32_t) > sizeof(size_t) ? 10000 : 1000000;
    24d4:	0f 2e       	mov	r0, r31
    24d6:	f0 e1       	ldi	r31, 0x10	; 16
    24d8:	cf 2e       	mov	r12, r31
    24da:	f7 e2       	ldi	r31, 0x27	; 39
    24dc:	df 2e       	mov	r13, r31
    24de:	e1 2c       	mov	r14, r1
    24e0:	f1 2c       	mov	r15, r1
    24e2:	f0 2d       	mov	r31, r0
	return 40 * uxTaskGetNumberOfTasks();
}

uint32_t csp_sys_memfree(void) {

	uint32_t total = 0, max = UINT32_MAX, size;
    24e4:	44 24       	eor	r4, r4
    24e6:	4a 94       	dec	r4
    24e8:	54 2c       	mov	r5, r4
    24ea:	32 01       	movw	r6, r4
    24ec:	81 2c       	mov	r8, r1
    24ee:	91 2c       	mov	r9, r1
    24f0:	54 01       	movw	r10, r8

	/* If size_t is less than 32 bits, start with 10 KiB */
	size = sizeof(uint32_t) > sizeof(size_t) ? 10000 : 1000000;

	while (1) {
		pmem = pvPortMalloc(size + total);
    24f2:	c4 01       	movw	r24, r8
    24f4:	8c 0d       	add	r24, r12
    24f6:	9d 1d       	adc	r25, r13
    24f8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pvPortMalloc>
		if (pmem == NULL) {
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	59 f4       	brne	.+22     	; 0x2516 <csp_sys_memfree+0x5a>
			max = size + total;
    2500:	26 01       	movw	r4, r12
    2502:	37 01       	movw	r6, r14
    2504:	48 0c       	add	r4, r8
    2506:	59 1c       	adc	r5, r9
    2508:	6a 1c       	adc	r6, r10
    250a:	7b 1c       	adc	r7, r11
			size = size / 2;
    250c:	f6 94       	lsr	r15
    250e:	e7 94       	ror	r14
    2510:	d7 94       	ror	r13
    2512:	c7 94       	ror	r12
    2514:	15 c0       	rjmp	.+42     	; 0x2540 <csp_sys_memfree+0x84>
		} else {
			total += size;
    2516:	8c 0c       	add	r8, r12
    2518:	9d 1c       	adc	r9, r13
    251a:	ae 1c       	adc	r10, r14
    251c:	bf 1c       	adc	r11, r15
			if (total + size >= max)
    251e:	b5 01       	movw	r22, r10
    2520:	a4 01       	movw	r20, r8
    2522:	4c 0d       	add	r20, r12
    2524:	5d 1d       	adc	r21, r13
    2526:	6e 1d       	adc	r22, r14
    2528:	7f 1d       	adc	r23, r15
    252a:	44 15       	cp	r20, r4
    252c:	55 05       	cpc	r21, r5
    252e:	66 05       	cpc	r22, r6
    2530:	77 05       	cpc	r23, r7
    2532:	20 f0       	brcs	.+8      	; 0x253c <csp_sys_memfree+0x80>
				size = size / 2;
    2534:	f6 94       	lsr	r15
    2536:	e7 94       	ror	r14
    2538:	d7 94       	ror	r13
    253a:	c7 94       	ror	r12
			vPortFree(pmem);
    253c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <vPortFree>
		}
		if (size < 32) break;
    2540:	80 e2       	ldi	r24, 0x20	; 32
    2542:	c8 16       	cp	r12, r24
    2544:	d1 04       	cpc	r13, r1
    2546:	e1 04       	cpc	r14, r1
    2548:	f1 04       	cpc	r15, r1
    254a:	98 f6       	brcc	.-90     	; 0x24f2 <csp_sys_memfree+0x36>
	}

	return total;
}
    254c:	c5 01       	movw	r24, r10
    254e:	b4 01       	movw	r22, r8
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	bf 90       	pop	r11
    255a:	af 90       	pop	r10
    255c:	9f 90       	pop	r9
    255e:	8f 90       	pop	r8
    2560:	7f 90       	pop	r7
    2562:	6f 90       	pop	r6
    2564:	5f 90       	pop	r5
    2566:	4f 90       	pop	r4
    2568:	08 95       	ret

0000256a <csp_sys_reboot>:

int csp_sys_reboot(void) {

	extern void __attribute__((weak)) cpu_set_reset_cause(unsigned int);
	if (cpu_set_reset_cause)
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	89 2b       	or	r24, r25
    2570:	21 f0       	breq	.+8      	; 0x257a <csp_sys_reboot+0x10>
		cpu_set_reset_cause(1);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	0e 94 00 00 	call	0	; 0x0 <__vectors>
	
	extern void __attribute__((weak)) cpu_reset(void);
	if (cpu_reset) {
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	89 2b       	or	r24, r25
    2580:	19 f0       	breq	.+6      	; 0x2588 <csp_sys_reboot+0x1e>
		cpu_reset();
    2582:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2586:	ff cf       	rjmp	.-2      	; 0x2586 <csp_sys_reboot+0x1c>
	}
	
	csp_log_error("Failed to reboot\r\n");

	return CSP_ERR_INVAL;
}
    2588:	8e ef       	ldi	r24, 0xFE	; 254
    258a:	9f ef       	ldi	r25, 0xFF	; 255
    258c:	08 95       	ret

0000258e <csp_thread_create>:
/* CSP includes */
#include <csp/csp.h>

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_return_t (* routine)(void *), const signed char * const thread_name, unsigned short stack_depth, void * parameters, unsigned int priority, csp_thread_handle_t * handle) {
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
#if (FREERTOS_VERSION >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, (char *) thread_name, stack_depth, parameters, priority, handle);
#else
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_depth, parameters, priority, handle);
    259c:	a1 2c       	mov	r10, r1
    259e:	b1 2c       	mov	r11, r1
    25a0:	c1 2c       	mov	r12, r1
    25a2:	d1 2c       	mov	r13, r1
    25a4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
#endif
	if (ret != pdTRUE)
    25a8:	21 e0       	ldi	r18, 0x01	; 1
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <csp_thread_create+0x26>
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
		return CSP_ERR_NOMEM;
	return CSP_ERR_NONE;
}
    25b4:	88 27       	eor	r24, r24
    25b6:	99 27       	eor	r25, r25
    25b8:	82 1b       	sub	r24, r18
    25ba:	93 0b       	sbc	r25, r19
    25bc:	0f 91       	pop	r16
    25be:	ff 90       	pop	r15
    25c0:	ef 90       	pop	r14
    25c2:	df 90       	pop	r13
    25c4:	cf 90       	pop	r12
    25c6:	bf 90       	pop	r11
    25c8:	af 90       	pop	r10
    25ca:	08 95       	ret

000025cc <csp_get_ms>:
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
}

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
}
    25cc:	fa d8       	rcall	.-3596   	; 0x17c2 <xTaskGetTickCount>
    25ce:	bc 01       	movw	r22, r24
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	08 95       	ret

000025d6 <csp_get_s>:

uint32_t csp_get_s(void) {
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
    25d6:	f5 d8       	rcall	.-3606   	; 0x17c2 <xTaskGetTickCount>
    25d8:	9c 01       	movw	r18, r24
    25da:	36 95       	lsr	r19
    25dc:	27 95       	ror	r18
    25de:	36 95       	lsr	r19
    25e0:	27 95       	ror	r18
    25e2:	36 95       	lsr	r19
    25e4:	27 95       	ror	r18
    25e6:	a5 ec       	ldi	r26, 0xC5	; 197
    25e8:	b0 e2       	ldi	r27, 0x20	; 32
    25ea:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__umulhisi3>
    25ee:	92 95       	swap	r25
    25f0:	82 95       	swap	r24
    25f2:	8f 70       	andi	r24, 0x0F	; 15
    25f4:	89 27       	eor	r24, r25
    25f6:	9f 70       	andi	r25, 0x0F	; 15
    25f8:	89 27       	eor	r24, r25
    25fa:	bc 01       	movw	r22, r24
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
}
    2600:	08 95       	ret

00002602 <csp_buffer_init>:
	if (clone)
		memcpy(clone, packet, size);

	return clone;

}
    2602:	cf 92       	push	r12
    2604:	df 92       	push	r13
    2606:	ef 92       	push	r14
    2608:	ff 92       	push	r15
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	1f 92       	push	r1
    2614:	1f 92       	push	r1
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	80 93 f7 3a 	sts	0x3AF7, r24
    261e:	90 93 f8 3a 	sts	0x3AF8, r25
    2622:	60 93 f5 3a 	sts	0x3AF5, r22
    2626:	70 93 f6 3a 	sts	0x3AF6, r23
    262a:	6b 01       	movw	r12, r22
    262c:	25 e0       	ldi	r18, 0x05	; 5
    262e:	c2 0e       	add	r12, r18
    2630:	d1 1c       	adc	r13, r1
    2632:	e8 94       	clt
    2634:	c0 f8       	bld	r12, 0
    2636:	c8 9e       	mul	r12, r24
    2638:	80 01       	movw	r16, r0
    263a:	c9 9e       	mul	r12, r25
    263c:	10 0d       	add	r17, r0
    263e:	d8 9e       	mul	r13, r24
    2640:	10 0d       	add	r17, r0
    2642:	11 24       	eor	r1, r1
    2644:	c8 01       	movw	r24, r16
    2646:	bc de       	rcall	.-648    	; 0x23c0 <csp_malloc>
    2648:	80 93 f9 3a 	sts	0x3AF9, r24
    264c:	90 93 fa 3a 	sts	0x3AFA, r25
    2650:	89 2b       	or	r24, r25
    2652:	09 f4       	brne	.+2      	; 0x2656 <csp_buffer_init+0x54>
    2654:	4d c0       	rjmp	.+154    	; 0x26f0 <csp_buffer_init+0xee>
    2656:	62 e0       	ldi	r22, 0x02	; 2
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	80 91 f7 3a 	lds	r24, 0x3AF7
    265e:	90 91 f8 3a 	lds	r25, 0x3AF8
    2662:	b4 de       	rcall	.-664    	; 0x23cc <csp_queue_create>
    2664:	80 93 fb 3a 	sts	0x3AFB, r24
    2668:	90 93 fc 3a 	sts	0x3AFC, r25
    266c:	89 2b       	or	r24, r25
    266e:	c1 f1       	breq	.+112    	; 0x26e0 <csp_buffer_init+0xde>
    2670:	a8 01       	movw	r20, r16
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	80 91 f9 3a 	lds	r24, 0x3AF9
    267a:	90 91 fa 3a 	lds	r25, 0x3AFA
    267e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <memset>
    2682:	80 91 f7 3a 	lds	r24, 0x3AF7
    2686:	90 91 f8 3a 	lds	r25, 0x3AF8
    268a:	89 2b       	or	r24, r25
    268c:	a1 f1       	breq	.+104    	; 0x26f6 <csp_buffer_init+0xf4>
    268e:	e1 2c       	mov	r14, r1
    2690:	f1 2c       	mov	r15, r1
    2692:	00 e0       	ldi	r16, 0x00	; 0
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	e0 91 f9 3a 	lds	r30, 0x3AF9
    269a:	f0 91 fa 3a 	lds	r31, 0x3AFA
    269e:	ee 0d       	add	r30, r14
    26a0:	ff 1d       	adc	r31, r15
    26a2:	e9 83       	std	Y+1, r30	; 0x01
    26a4:	fa 83       	std	Y+2, r31	; 0x02
    26a6:	10 82       	st	Z, r1
    26a8:	11 82       	std	Z+1, r1	; 0x01
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	e2 83       	std	Z+2, r30	; 0x02
    26b0:	f3 83       	std	Z+3, r31	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	a9 01       	movw	r20, r18
    26b8:	be 01       	movw	r22, r28
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	80 91 fb 3a 	lds	r24, 0x3AFB
    26c2:	90 91 fc 3a 	lds	r25, 0x3AFC
    26c6:	85 de       	rcall	.-758    	; 0x23d2 <csp_queue_enqueue>
    26c8:	0f 5f       	subi	r16, 0xFF	; 255
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	ec 0c       	add	r14, r12
    26ce:	fd 1c       	adc	r15, r13
    26d0:	80 91 f7 3a 	lds	r24, 0x3AF7
    26d4:	90 91 f8 3a 	lds	r25, 0x3AF8
    26d8:	08 17       	cp	r16, r24
    26da:	19 07       	cpc	r17, r25
    26dc:	e0 f2       	brcs	.-72     	; 0x2696 <csp_buffer_init+0x94>
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <csp_buffer_init+0xfa>
    26e0:	80 91 f9 3a 	lds	r24, 0x3AF9
    26e4:	90 91 fa 3a 	lds	r25, 0x3AFA
    26e8:	6e de       	rcall	.-804    	; 0x23c6 <csp_free>
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	9f ef       	ldi	r25, 0xFF	; 255
    26ee:	08 c0       	rjmp	.+16     	; 0x2700 <csp_buffer_init+0xfe>
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	9f ef       	ldi	r25, 0xFF	; 255
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <csp_buffer_init+0xfe>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <csp_buffer_init+0xfe>
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	ff 90       	pop	r15
    270e:	ef 90       	pop	r14
    2710:	df 90       	pop	r13
    2712:	cf 90       	pop	r12
    2714:	08 95       	ret

00002716 <csp_buffer_get>:
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	1f 92       	push	r1
    271c:	1f 92       	push	r1
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	1a 82       	std	Y+2, r1	; 0x02
    2726:	0e 96       	adiw	r24, 0x0e	; 14
    2728:	20 91 f5 3a 	lds	r18, 0x3AF5
    272c:	30 91 f6 3a 	lds	r19, 0x3AF6
    2730:	28 17       	cp	r18, r24
    2732:	39 07       	cpc	r19, r25
    2734:	e8 f0       	brcs	.+58     	; 0x2770 <csp_buffer_get+0x5a>
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	a9 01       	movw	r20, r18
    273c:	be 01       	movw	r22, r28
    273e:	6f 5f       	subi	r22, 0xFF	; 255
    2740:	7f 4f       	sbci	r23, 0xFF	; 255
    2742:	80 91 fb 3a 	lds	r24, 0x3AFB
    2746:	90 91 fc 3a 	lds	r25, 0x3AFC
    274a:	55 de       	rcall	.-854    	; 0x23f6 <csp_queue_dequeue>
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	30 97       	sbiw	r30, 0x00	; 0
    2752:	89 f0       	breq	.+34     	; 0x2776 <csp_buffer_get+0x60>
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	e8 17       	cp	r30, r24
    275a:	f9 07       	cpc	r31, r25
    275c:	79 f4       	brne	.+30     	; 0x277c <csp_buffer_get+0x66>
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	04 96       	adiw	r24, 0x04	; 4
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <csp_buffer_get+0x6a>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	05 c0       	rjmp	.+10     	; 0x2780 <csp_buffer_get+0x6a>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <csp_buffer_get+0x6a>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	08 95       	ret

0000278a <csp_buffer_free_isr>:
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	00 d0       	rcall	.+0      	; 0x2790 <csp_buffer_free_isr+0x6>
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	19 82       	std	Y+1, r1	; 0x01
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	51 f1       	breq	.+84     	; 0x27ee <csp_buffer_free_isr+0x64>
    279a:	9c 01       	movw	r18, r24
    279c:	24 50       	subi	r18, 0x04	; 4
    279e:	31 09       	sbc	r19, r1
    27a0:	2a 83       	std	Y+2, r18	; 0x02
    27a2:	3b 83       	std	Y+3, r19	; 0x03
    27a4:	20 fd       	sbrc	r18, 0
    27a6:	23 c0       	rjmp	.+70     	; 0x27ee <csp_buffer_free_isr+0x64>
    27a8:	f9 01       	movw	r30, r18
    27aa:	42 81       	ldd	r20, Z+2	; 0x02
    27ac:	53 81       	ldd	r21, Z+3	; 0x03
    27ae:	24 17       	cp	r18, r20
    27b0:	35 07       	cpc	r19, r21
    27b2:	e9 f4       	brne	.+58     	; 0x27ee <csp_buffer_free_isr+0x64>
    27b4:	f9 01       	movw	r30, r18
    27b6:	20 81       	ld	r18, Z
    27b8:	31 81       	ldd	r19, Z+1	; 0x01
    27ba:	21 15       	cp	r18, r1
    27bc:	31 05       	cpc	r19, r1
    27be:	b9 f0       	breq	.+46     	; 0x27ee <csp_buffer_free_isr+0x64>
    27c0:	22 30       	cpi	r18, 0x02	; 2
    27c2:	31 05       	cpc	r19, r1
    27c4:	28 f0       	brcs	.+10     	; 0x27d0 <csp_buffer_free_isr+0x46>
    27c6:	21 50       	subi	r18, 0x01	; 1
    27c8:	31 09       	sbc	r19, r1
    27ca:	20 83       	st	Z, r18
    27cc:	31 83       	std	Z+1, r19	; 0x01
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <csp_buffer_free_isr+0x64>
    27d0:	fc 01       	movw	r30, r24
    27d2:	34 97       	sbiw	r30, 0x04	; 4
    27d4:	10 82       	st	Z, r1
    27d6:	11 82       	std	Z+1, r1	; 0x01
    27d8:	ae 01       	movw	r20, r28
    27da:	4f 5f       	subi	r20, 0xFF	; 255
    27dc:	5f 4f       	sbci	r21, 0xFF	; 255
    27de:	be 01       	movw	r22, r28
    27e0:	6e 5f       	subi	r22, 0xFE	; 254
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	80 91 fb 3a 	lds	r24, 0x3AFB
    27e8:	90 91 fc 3a 	lds	r25, 0x3AFC
    27ec:	fd dd       	rcall	.-1030   	; 0x23e8 <csp_queue_enqueue_isr>
    27ee:	23 96       	adiw	r28, 0x03	; 3
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret

000027fa <csp_buffer_free>:
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	1f 92       	push	r1
    2800:	1f 92       	push	r1
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	51 f1       	breq	.+84     	; 0x285e <csp_buffer_free+0x64>
    280a:	9c 01       	movw	r18, r24
    280c:	24 50       	subi	r18, 0x04	; 4
    280e:	31 09       	sbc	r19, r1
    2810:	29 83       	std	Y+1, r18	; 0x01
    2812:	3a 83       	std	Y+2, r19	; 0x02
    2814:	20 fd       	sbrc	r18, 0
    2816:	23 c0       	rjmp	.+70     	; 0x285e <csp_buffer_free+0x64>
    2818:	f9 01       	movw	r30, r18
    281a:	42 81       	ldd	r20, Z+2	; 0x02
    281c:	53 81       	ldd	r21, Z+3	; 0x03
    281e:	24 17       	cp	r18, r20
    2820:	35 07       	cpc	r19, r21
    2822:	e9 f4       	brne	.+58     	; 0x285e <csp_buffer_free+0x64>
    2824:	f9 01       	movw	r30, r18
    2826:	20 81       	ld	r18, Z
    2828:	31 81       	ldd	r19, Z+1	; 0x01
    282a:	21 15       	cp	r18, r1
    282c:	31 05       	cpc	r19, r1
    282e:	b9 f0       	breq	.+46     	; 0x285e <csp_buffer_free+0x64>
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	28 f0       	brcs	.+10     	; 0x2840 <csp_buffer_free+0x46>
    2836:	21 50       	subi	r18, 0x01	; 1
    2838:	31 09       	sbc	r19, r1
    283a:	20 83       	st	Z, r18
    283c:	31 83       	std	Z+1, r19	; 0x01
    283e:	0f c0       	rjmp	.+30     	; 0x285e <csp_buffer_free+0x64>
    2840:	fc 01       	movw	r30, r24
    2842:	34 97       	sbiw	r30, 0x04	; 4
    2844:	10 82       	st	Z, r1
    2846:	11 82       	std	Z+1, r1	; 0x01
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	a9 01       	movw	r20, r18
    284e:	be 01       	movw	r22, r28
    2850:	6f 5f       	subi	r22, 0xFF	; 255
    2852:	7f 4f       	sbci	r23, 0xFF	; 255
    2854:	80 91 fb 3a 	lds	r24, 0x3AFB
    2858:	90 91 fc 3a 	lds	r25, 0x3AFC
    285c:	ba dd       	rcall	.-1164   	; 0x23d2 <csp_queue_enqueue>
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret

00002868 <csp_buffer_remaining>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
    2868:	80 91 fb 3a 	lds	r24, 0x3AFB
    286c:	90 91 fc 3a 	lds	r25, 0x3AFC
    2870:	cd cd       	rjmp	.-1126   	; 0x240c <csp_queue_size>
}
    2872:	08 95       	ret

00002874 <csp_conn_enqueue_packet>:
#endif

	/* We have a successful connection */
	return conn;

}
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	1f 92       	push	r1
    287a:	1f 92       	push	r1
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	69 83       	std	Y+1, r22	; 0x01
    2882:	7a 83       	std	Y+2, r23	; 0x02
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	a9 f0       	breq	.+42     	; 0x28b2 <csp_conn_enqueue_packet+0x3e>
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	a9 01       	movw	r20, r18
    288e:	be 01       	movw	r22, r28
    2890:	6f 5f       	subi	r22, 0xFF	; 255
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	fc 01       	movw	r30, r24
    2896:	84 85       	ldd	r24, Z+12	; 0x0c
    2898:	95 85       	ldd	r25, Z+13	; 0x0d
    289a:	9b dd       	rcall	.-1226   	; 0x23d2 <csp_queue_enqueue>
    289c:	21 e0       	ldi	r18, 0x01	; 1
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	11 f4       	brne	.+4      	; 0x28a8 <csp_conn_enqueue_packet+0x34>
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	88 27       	eor	r24, r24
    28aa:	99 27       	eor	r25, r25
    28ac:	82 1b       	sub	r24, r18
    28ae:	93 0b       	sbc	r25, r19
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <csp_conn_enqueue_packet+0x42>
    28b2:	8e ef       	ldi	r24, 0xFE	; 254
    28b4:	9f ef       	ldi	r25, 0xFF	; 255
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <csp_conn_init>:
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	81 de       	rcall	.-766    	; 0x25cc <csp_get_ms>
    28ca:	cb 01       	movw	r24, r22
    28cc:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <srand>
    28d0:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <rand>
    28d4:	8f 71       	andi	r24, 0x1F	; 31
    28d6:	90 78       	andi	r25, 0x80	; 128
    28d8:	99 23       	and	r25, r25
    28da:	24 f4       	brge	.+8      	; 0x28e4 <csp_conn_init+0x24>
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	80 6e       	ori	r24, 0xE0	; 224
    28e0:	9f 6f       	ori	r25, 0xFF	; 255
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	80 5e       	subi	r24, 0xE0	; 224
    28e6:	80 93 00 3b 	sts	0x3B00, r24
    28ea:	8e ef       	ldi	r24, 0xFE	; 254
    28ec:	9a e3       	ldi	r25, 0x3A	; 58
    28ee:	a3 dd       	rcall	.-1210   	; 0x2436 <csp_bin_sem_create>
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	31 f5       	brne	.+76     	; 0x2940 <csp_conn_init+0x80>
    28f4:	c5 e0       	ldi	r28, 0x05	; 5
    28f6:	db e3       	ldi	r29, 0x3B	; 59
    28f8:	05 ef       	ldi	r16, 0xF5	; 245
    28fa:	1b e3       	ldi	r17, 0x3B	; 59
    28fc:	04 c0       	rjmp	.+8      	; 0x2906 <csp_conn_init+0x46>
    28fe:	68 96       	adiw	r28, 0x18	; 24
    2900:	c0 17       	cp	r28, r16
    2902:	d1 07       	cpc	r29, r17
    2904:	79 f0       	breq	.+30     	; 0x2924 <csp_conn_init+0x64>
    2906:	62 e0       	ldi	r22, 0x02	; 2
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	8a e0       	ldi	r24, 0x0A	; 10
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	5e dd       	rcall	.-1348   	; 0x23cc <csp_queue_create>
    2910:	8a 87       	std	Y+10, r24	; 0x0a
    2912:	9b 87       	std	Y+11, r25	; 0x0b
    2914:	fe 01       	movw	r30, r28
    2916:	31 97       	sbiw	r30, 0x01	; 1
    2918:	10 82       	st	Z, r1
    291a:	ce 01       	movw	r24, r28
    291c:	7b dd       	rcall	.-1290   	; 0x2414 <csp_mutex_create>
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	71 f3       	breq	.-36     	; 0x28fe <csp_conn_init+0x3e>
    2922:	11 c0       	rjmp	.+34     	; 0x2946 <csp_conn_init+0x86>
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	9b e3       	ldi	r25, 0x3B	; 59
    2928:	86 dd       	rcall	.-1268   	; 0x2436 <csp_bin_sem_create>
    292a:	21 e0       	ldi	r18, 0x01	; 1
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	11 f4       	brne	.+4      	; 0x2936 <csp_conn_init+0x76>
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	88 27       	eor	r24, r24
    2938:	99 27       	eor	r25, r25
    293a:	82 1b       	sub	r24, r18
    293c:	93 0b       	sbc	r25, r19
    293e:	05 c0       	rjmp	.+10     	; 0x294a <csp_conn_init+0x8a>
    2940:	8f ef       	ldi	r24, 0xFF	; 255
    2942:	9f ef       	ldi	r25, 0xFF	; 255
    2944:	02 c0       	rjmp	.+4      	; 0x294a <csp_conn_init+0x8a>
    2946:	8f ef       	ldi	r24, 0xFF	; 255
    2948:	9f ef       	ldi	r25, 0xFF	; 255
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <csp_conn_find>:
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	cf 93       	push	r28
    2962:	df 93       	push	r29
    2964:	e3 e0       	ldi	r30, 0x03	; 3
    2966:	fb e3       	ldi	r31, 0x3B	; 59
    2968:	03 ef       	ldi	r16, 0xF3	; 243
    296a:	1b e3       	ldi	r17, 0x3B	; 59
    296c:	ef 01       	movw	r28, r30
    296e:	a1 81       	ldd	r26, Z+1	; 0x01
    2970:	aa 23       	and	r26, r26
    2972:	99 f0       	breq	.+38     	; 0x299a <csp_conn_find+0x46>
    2974:	a0 81       	ld	r26, Z
    2976:	a1 11       	cpse	r26, r1
    2978:	10 c0       	rjmp	.+32     	; 0x299a <csp_conn_find+0x46>
    297a:	c4 80       	ldd	r12, Z+4	; 0x04
    297c:	d5 80       	ldd	r13, Z+5	; 0x05
    297e:	e6 80       	ldd	r14, Z+6	; 0x06
    2980:	f7 80       	ldd	r15, Z+7	; 0x07
    2982:	c6 26       	eor	r12, r22
    2984:	d7 26       	eor	r13, r23
    2986:	e8 26       	eor	r14, r24
    2988:	f9 26       	eor	r15, r25
    298a:	c2 22       	and	r12, r18
    298c:	d3 22       	and	r13, r19
    298e:	e4 22       	and	r14, r20
    2990:	f5 22       	and	r15, r21
    2992:	cd 28       	or	r12, r13
    2994:	ce 28       	or	r12, r14
    2996:	cf 28       	or	r12, r15
    2998:	29 f0       	breq	.+10     	; 0x29a4 <csp_conn_find+0x50>
    299a:	78 96       	adiw	r30, 0x18	; 24
    299c:	e0 17       	cp	r30, r16
    299e:	f1 07       	cpc	r31, r17
    29a0:	29 f7       	brne	.-54     	; 0x296c <csp_conn_find+0x18>
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <csp_conn_find+0x56>
    29a4:	8e 2f       	mov	r24, r30
    29a6:	9d 2f       	mov	r25, r29
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <csp_conn_find+0x5a>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	df 90       	pop	r13
    29bc:	cf 90       	pop	r12
    29be:	08 95       	ret

000029c0 <csp_conn_flush_rx_queue>:
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	1f 92       	push	r1
    29ca:	1f 92       	push	r1
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	8c 01       	movw	r16, r24
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <csp_conn_flush_rx_queue+0x1e>
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	09 f0       	breq	.+2      	; 0x29de <csp_conn_flush_rx_queue+0x1e>
    29dc:	0e df       	rcall	.-484    	; 0x27fa <csp_buffer_free>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	a9 01       	movw	r20, r18
    29e4:	be 01       	movw	r22, r28
    29e6:	6f 5f       	subi	r22, 0xFF	; 255
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	f8 01       	movw	r30, r16
    29ec:	84 85       	ldd	r24, Z+12	; 0x0c
    29ee:	95 85       	ldd	r25, Z+13	; 0x0d
    29f0:	02 dd       	rcall	.-1532   	; 0x23f6 <csp_queue_dequeue>
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	79 f3       	breq	.-34     	; 0x29d4 <csp_conn_flush_rx_queue+0x14>
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	08 95       	ret

00002a08 <csp_conn_allocate>:
    2a08:	1f 93       	push	r17
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	18 2f       	mov	r17, r24
    2a10:	44 e6       	ldi	r20, 0x64	; 100
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	9b e3       	ldi	r25, 0x3B	; 59
    2a1c:	23 dd       	rcall	.-1466   	; 0x2464 <csp_bin_sem_wait>
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	09 f0       	breq	.+2      	; 0x2a24 <csp_conn_allocate+0x1c>
    2a22:	47 c0       	rjmp	.+142    	; 0x2ab2 <csp_conn_allocate+0xaa>
    2a24:	80 91 fd 3a 	lds	r24, 0x3AFD
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	6a e0       	ldi	r22, 0x0A	; 10
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    2a34:	ec 01       	movw	r28, r24
    2a36:	cc 0f       	add	r28, r28
    2a38:	dd 1f       	adc	r29, r29
    2a3a:	c8 0f       	add	r28, r24
    2a3c:	d9 1f       	adc	r29, r25
    2a3e:	cc 0f       	add	r28, r28
    2a40:	dd 1f       	adc	r29, r29
    2a42:	cc 0f       	add	r28, r28
    2a44:	dd 1f       	adc	r29, r29
    2a46:	cc 0f       	add	r28, r28
    2a48:	dd 1f       	adc	r29, r29
    2a4a:	cd 5f       	subi	r28, 0xFD	; 253
    2a4c:	d4 4c       	sbci	r29, 0xC4	; 196
    2a4e:	49 81       	ldd	r20, Y+1	; 0x01
    2a50:	41 11       	cpse	r20, r1
    2a52:	32 c0       	rjmp	.+100    	; 0x2ab8 <csp_conn_allocate+0xb0>
    2a54:	21 c0       	rjmp	.+66     	; 0x2a98 <csp_conn_allocate+0x90>
    2a56:	ec 01       	movw	r28, r24
    2a58:	cc 0f       	add	r28, r28
    2a5a:	dd 1f       	adc	r29, r29
    2a5c:	c8 0f       	add	r28, r24
    2a5e:	d9 1f       	adc	r29, r25
    2a60:	cc 0f       	add	r28, r28
    2a62:	dd 1f       	adc	r29, r29
    2a64:	cc 0f       	add	r28, r28
    2a66:	dd 1f       	adc	r29, r29
    2a68:	cc 0f       	add	r28, r28
    2a6a:	dd 1f       	adc	r29, r29
    2a6c:	cd 5f       	subi	r28, 0xFD	; 253
    2a6e:	d4 4c       	sbci	r29, 0xC4	; 196
    2a70:	49 81       	ldd	r20, Y+1	; 0x01
    2a72:	44 23       	and	r20, r20
    2a74:	89 f0       	breq	.+34     	; 0x2a98 <csp_conn_allocate+0x90>
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	bf 01       	movw	r22, r30
    2a7a:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    2a7e:	21 50       	subi	r18, 0x01	; 1
    2a80:	31 09       	sbc	r19, r1
    2a82:	21 15       	cp	r18, r1
    2a84:	31 05       	cpc	r19, r1
    2a86:	39 f7       	brne	.-50     	; 0x2a56 <csp_conn_allocate+0x4e>
    2a88:	41 30       	cpi	r20, 0x01	; 1
    2a8a:	31 f4       	brne	.+12     	; 0x2a98 <csp_conn_allocate+0x90>
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	9b e3       	ldi	r25, 0x3B	; 59
    2a90:	f9 dc       	rcall	.-1550   	; 0x2484 <csp_bin_sem_post>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	1a c0       	rjmp	.+52     	; 0x2acc <csp_conn_allocate+0xc4>
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	99 83       	std	Y+1, r25	; 0x01
    2a9c:	1e 86       	std	Y+14, r1	; 0x0e
    2a9e:	1f 86       	std	Y+15, r1	; 0x0f
    2aa0:	18 83       	st	Y, r17
    2aa2:	80 93 fd 3a 	sts	0x3AFD, r24
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	9b e3       	ldi	r25, 0x3B	; 59
    2aaa:	ec dc       	rcall	.-1576   	; 0x2484 <csp_bin_sem_post>
    2aac:	8c 2f       	mov	r24, r28
    2aae:	9d 2f       	mov	r25, r29
    2ab0:	0d c0       	rjmp	.+26     	; 0x2acc <csp_conn_allocate+0xc4>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	0a c0       	rjmp	.+20     	; 0x2acc <csp_conn_allocate+0xc4>
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	6a e0       	ldi	r22, 0x0A	; 10
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    2ac2:	29 e0       	ldi	r18, 0x09	; 9
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	ea e0       	ldi	r30, 0x0A	; 10
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	c5 cf       	rjmp	.-118    	; 0x2a56 <csp_conn_allocate+0x4e>
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	08 95       	ret

00002ad4 <csp_conn_new>:
    2ad4:	8f 92       	push	r8
    2ad6:	9f 92       	push	r9
    2ad8:	af 92       	push	r10
    2ada:	bf 92       	push	r11
    2adc:	cf 92       	push	r12
    2ade:	df 92       	push	r13
    2ae0:	ef 92       	push	r14
    2ae2:	ff 92       	push	r15
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	4b 01       	movw	r8, r22
    2aea:	5c 01       	movw	r10, r24
    2aec:	69 01       	movw	r12, r18
    2aee:	7a 01       	movw	r14, r20
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	8a df       	rcall	.-236    	; 0x2a08 <csp_conn_allocate>
    2af4:	ec 01       	movw	r28, r24
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	79 f0       	breq	.+30     	; 0x2b18 <csp_conn_new+0x44>
    2afa:	8c 82       	std	Y+4, r8	; 0x04
    2afc:	9d 82       	std	Y+5, r9	; 0x05
    2afe:	ae 82       	std	Y+6, r10	; 0x06
    2b00:	bf 82       	std	Y+7, r11	; 0x07
    2b02:	c8 86       	std	Y+8, r12	; 0x08
    2b04:	d9 86       	std	Y+9, r13	; 0x09
    2b06:	ea 86       	std	Y+10, r14	; 0x0a
    2b08:	fb 86       	std	Y+11, r15	; 0x0b
    2b0a:	60 dd       	rcall	.-1344   	; 0x25cc <csp_get_ms>
    2b0c:	68 8b       	std	Y+16, r22	; 0x10
    2b0e:	79 8b       	std	Y+17, r23	; 0x11
    2b10:	8a 8b       	std	Y+18, r24	; 0x12
    2b12:	9b 8b       	std	Y+19, r25	; 0x13
    2b14:	ce 01       	movw	r24, r28
    2b16:	54 df       	rcall	.-344    	; 0x29c0 <csp_conn_flush_rx_queue>
    2b18:	ce 01       	movw	r24, r28
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	bf 90       	pop	r11
    2b28:	af 90       	pop	r10
    2b2a:	9f 90       	pop	r9
    2b2c:	8f 90       	pop	r8
    2b2e:	08 95       	ret

00002b30 <csp_close>:
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	ec 01       	movw	r28, r24
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	a9 f0       	breq	.+42     	; 0x2b64 <csp_close+0x34>
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	88 23       	and	r24, r24
    2b3e:	a9 f0       	breq	.+42     	; 0x2b6a <csp_close+0x3a>
    2b40:	44 e6       	ldi	r20, 0x64	; 100
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	9b e3       	ldi	r25, 0x3B	; 59
    2b4c:	8b dc       	rcall	.-1770   	; 0x2464 <csp_bin_sem_wait>
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	79 f4       	brne	.+30     	; 0x2b70 <csp_close+0x40>
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	ce 01       	movw	r24, r28
    2b56:	34 df       	rcall	.-408    	; 0x29c0 <csp_conn_flush_rx_queue>
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	9b e3       	ldi	r25, 0x3B	; 59
    2b5c:	93 dc       	rcall	.-1754   	; 0x2484 <csp_bin_sem_post>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	08 c0       	rjmp	.+16     	; 0x2b74 <csp_close+0x44>
    2b64:	8e ef       	ldi	r24, 0xFE	; 254
    2b66:	9f ef       	ldi	r25, 0xFF	; 255
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <csp_close+0x44>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <csp_close+0x44>
    2b70:	8d ef       	ldi	r24, 0xFD	; 253
    2b72:	9f ef       	ldi	r25, 0xFF	; 255
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <csp_conn_dport>:

inline int csp_conn_dport(csp_conn_t * conn) {
    2b7a:	fc 01       	movw	r30, r24

	return conn->idin.dport;
    2b7c:	95 81       	ldd	r25, Z+5	; 0x05
    2b7e:	92 95       	swap	r25
    2b80:	96 95       	lsr	r25
    2b82:	96 95       	lsr	r25
    2b84:	93 70       	andi	r25, 0x03	; 3
    2b86:	86 81       	ldd	r24, Z+6	; 0x06
    2b88:	8f 70       	andi	r24, 0x0F	; 15
    2b8a:	88 0f       	add	r24, r24
    2b8c:	88 0f       	add	r24, r24
    2b8e:	89 2b       	or	r24, r25

}
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	08 95       	ret

00002b94 <csp_crc32_memory>:
		0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
		0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
		0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
    2b94:	8f 92       	push	r8
    2b96:	9f 92       	push	r9
    2b98:	af 92       	push	r10
    2b9a:	bf 92       	push	r11
    2b9c:	cf 92       	push	r12
    2b9e:	df 92       	push	r13
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
   uint32_t crc;

   crc = 0xFFFFFFFF;
   while (length--)
    2ba8:	8a 01       	movw	r16, r20
    2baa:	9b 01       	movw	r18, r22
    2bac:	01 50       	subi	r16, 0x01	; 1
    2bae:	11 09       	sbc	r17, r1
    2bb0:	21 09       	sbc	r18, r1
    2bb2:	31 09       	sbc	r19, r1
    2bb4:	45 2b       	or	r20, r21
    2bb6:	46 2b       	or	r20, r22
    2bb8:	47 2b       	or	r20, r23
    2bba:	49 f1       	breq	.+82     	; 0x2c0e <csp_crc32_memory+0x7a>
    2bbc:	a8 2f       	mov	r26, r24
    2bbe:	b9 2f       	mov	r27, r25
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
    2bc0:	88 24       	eor	r8, r8
    2bc2:	8a 94       	dec	r8
    2bc4:	98 2c       	mov	r9, r8
    2bc6:	54 01       	movw	r10, r8
   while (length--)
#ifdef __AVR__
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
    2bc8:	4d 91       	ld	r20, X+
    2bca:	75 01       	movw	r14, r10
    2bcc:	64 01       	movw	r12, r8
    2bce:	c4 26       	eor	r12, r20
    2bd0:	dd 24       	eor	r13, r13
    2bd2:	ee 24       	eor	r14, r14
    2bd4:	ff 24       	eor	r15, r15
    2bd6:	c6 01       	movw	r24, r12
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	fc 01       	movw	r30, r24
    2be2:	e6 5f       	subi	r30, 0xF6	; 246
    2be4:	fd 4f       	sbci	r31, 0xFD	; 253
    2be6:	c5 90       	lpm	r12, Z+
    2be8:	d5 90       	lpm	r13, Z+
    2bea:	e5 90       	lpm	r14, Z+
    2bec:	f4 90       	lpm	r15, Z
    2bee:	77 27       	eor	r23, r23
    2bf0:	6b 2d       	mov	r22, r11
    2bf2:	5a 2d       	mov	r21, r10
    2bf4:	49 2d       	mov	r20, r9
    2bf6:	4a 01       	movw	r8, r20
    2bf8:	5b 01       	movw	r10, r22
    2bfa:	8c 24       	eor	r8, r12
    2bfc:	9d 24       	eor	r9, r13
    2bfe:	ae 24       	eor	r10, r14
    2c00:	bf 24       	eor	r11, r15

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
   while (length--)
    2c02:	01 50       	subi	r16, 0x01	; 1
    2c04:	11 09       	sbc	r17, r1
    2c06:	21 09       	sbc	r18, r1
    2c08:	31 09       	sbc	r19, r1
    2c0a:	f0 f6       	brcc	.-68     	; 0x2bc8 <csp_crc32_memory+0x34>
    2c0c:	04 c0       	rjmp	.+8      	; 0x2c16 <csp_crc32_memory+0x82>
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
   uint32_t crc;

   crc = 0xFFFFFFFF;
    2c0e:	88 24       	eor	r8, r8
    2c10:	8a 94       	dec	r8
    2c12:	98 2c       	mov	r9, r8
    2c14:	54 01       	movw	r10, r8
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
#else
	   crc = crc_tab[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
#endif

   return (crc ^ 0xFFFFFFFF);
    2c16:	c5 01       	movw	r24, r10
    2c18:	b4 01       	movw	r22, r8
    2c1a:	60 95       	com	r22
    2c1c:	70 95       	com	r23
    2c1e:	80 95       	com	r24
    2c20:	90 95       	com	r25
}
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	bf 90       	pop	r11
    2c30:	af 90       	pop	r10
    2c32:	9f 90       	pop	r9
    2c34:	8f 90       	pop	r8
    2c36:	08 95       	ret

00002c38 <csp_crc32_append>:

int csp_crc32_append(csp_packet_t * packet) {
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	ec 01       	movw	r28, r24

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	b9 f0       	breq	.+46     	; 0x2c70 <csp_crc32_append+0x38>
		return CSP_ERR_INVAL;

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory(packet->data, packet->length);
    2c42:	48 85       	ldd	r20, Y+8	; 0x08
    2c44:	59 85       	ldd	r21, Y+9	; 0x09
    2c46:	60 e0       	ldi	r22, 0x00	; 0
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	0e 96       	adiw	r24, 0x0e	; 14
    2c4c:	a3 df       	rcall	.-186    	; 0x2b94 <csp_crc32_memory>
	crc = csp_hton32(crc);
    2c4e:	5e d0       	rcall	.+188    	; 0x2d0c <csp_hton32>

	/* Copy checksum to packet */
	memcpy(&packet->data[packet->length], &crc, sizeof(uint32_t));
    2c50:	e8 85       	ldd	r30, Y+8	; 0x08
    2c52:	f9 85       	ldd	r31, Y+9	; 0x09
    2c54:	ec 0f       	add	r30, r28
    2c56:	fd 1f       	adc	r31, r29
    2c58:	66 87       	std	Z+14, r22	; 0x0e
    2c5a:	77 87       	std	Z+15, r23	; 0x0f
    2c5c:	80 8b       	std	Z+16, r24	; 0x10
    2c5e:	91 8b       	std	Z+17, r25	; 0x11
	packet->length += sizeof(uint32_t);
    2c60:	88 85       	ldd	r24, Y+8	; 0x08
    2c62:	99 85       	ldd	r25, Y+9	; 0x09
    2c64:	04 96       	adiw	r24, 0x04	; 4
    2c66:	88 87       	std	Y+8, r24	; 0x08
    2c68:	99 87       	std	Y+9, r25	; 0x09

	return CSP_ERR_NONE;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <csp_crc32_append+0x3c>

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
		return CSP_ERR_INVAL;
    2c70:	8e ef       	ldi	r24, 0xFE	; 254
    2c72:	9f ef       	ldi	r25, 0xFF	; 255
	memcpy(&packet->data[packet->length], &crc, sizeof(uint32_t));
	packet->length += sizeof(uint32_t);

	return CSP_ERR_NONE;

}
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

00002c7a <csp_crc32_verify>:

int csp_crc32_verify(csp_packet_t * packet) {
    2c7a:	ef 92       	push	r14
    2c7c:	ff 92       	push	r15
    2c7e:	0f 93       	push	r16
    2c80:	1f 93       	push	r17
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <csp_crc32_verify+0xe>
    2c88:	1f 92       	push	r1
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	8c 01       	movw	r16, r24

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	51 f1       	breq	.+84     	; 0x2ce8 <csp_crc32_verify+0x6e>
		return CSP_ERR_INVAL;

	if (packet->length < sizeof(uint32_t))
    2c94:	fc 01       	movw	r30, r24
    2c96:	80 85       	ldd	r24, Z+8	; 0x08
    2c98:	91 85       	ldd	r25, Z+9	; 0x09
    2c9a:	84 30       	cpi	r24, 0x04	; 4
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	38 f1       	brcs	.+78     	; 0x2cee <csp_crc32_verify+0x74>
		return CSP_ERR_INVAL;

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory(packet->data, packet->length - sizeof(uint32_t));
    2ca0:	ac 01       	movw	r20, r24
    2ca2:	44 50       	subi	r20, 0x04	; 4
    2ca4:	51 09       	sbc	r21, r1
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	c8 01       	movw	r24, r16
    2cac:	0e 96       	adiw	r24, 0x0e	; 14
    2cae:	72 df       	rcall	.-284    	; 0x2b94 <csp_crc32_memory>
	crc = csp_hton32(crc);
    2cb0:	2d d0       	rcall	.+90     	; 0x2d0c <csp_hton32>
    2cb2:	69 83       	std	Y+1, r22	; 0x01
    2cb4:	7a 83       	std	Y+2, r23	; 0x02
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
    2cb8:	9c 83       	std	Y+4, r25	; 0x04

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(uint32_t), &crc, sizeof(uint32_t)) != 0) {
    2cba:	f8 01       	movw	r30, r16
    2cbc:	80 85       	ldd	r24, Z+8	; 0x08
    2cbe:	91 85       	ldd	r25, Z+9	; 0x09
    2cc0:	7c 01       	movw	r14, r24
    2cc2:	f4 e0       	ldi	r31, 0x04	; 4
    2cc4:	ef 1a       	sub	r14, r31
    2cc6:	f1 08       	sbc	r15, r1
    2cc8:	0a 96       	adiw	r24, 0x0a	; 10
    2cca:	44 e0       	ldi	r20, 0x04	; 4
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	be 01       	movw	r22, r28
    2cd0:	6f 5f       	subi	r22, 0xFF	; 255
    2cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd4:	80 0f       	add	r24, r16
    2cd6:	91 1f       	adc	r25, r17
    2cd8:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <memcmp>
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	51 f4       	brne	.+20     	; 0x2cf4 <csp_crc32_verify+0x7a>
		/* CRC32 failed */
		return CSP_ERR_INVAL;
	} else {
		/* Strip CRC32 */
		packet->length -= sizeof(uint32_t);
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	e0 86       	std	Z+8, r14	; 0x08
    2ce4:	f1 86       	std	Z+9, r15	; 0x09
		return CSP_ERR_NONE;
    2ce6:	08 c0       	rjmp	.+16     	; 0x2cf8 <csp_crc32_verify+0x7e>

	uint32_t crc;

	/* NULL pointer check */
	if (packet == NULL)
		return CSP_ERR_INVAL;
    2ce8:	8e ef       	ldi	r24, 0xFE	; 254
    2cea:	9f ef       	ldi	r25, 0xFF	; 255
    2cec:	05 c0       	rjmp	.+10     	; 0x2cf8 <csp_crc32_verify+0x7e>

	if (packet->length < sizeof(uint32_t))
		return CSP_ERR_INVAL;
    2cee:	8e ef       	ldi	r24, 0xFE	; 254
    2cf0:	9f ef       	ldi	r25, 0xFF	; 255
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <csp_crc32_verify+0x7e>
	crc = csp_hton32(crc);

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(uint32_t), &crc, sizeof(uint32_t)) != 0) {
		/* CRC32 failed */
		return CSP_ERR_INVAL;
    2cf4:	8e ef       	ldi	r24, 0xFE	; 254
    2cf6:	9f ef       	ldi	r25, 0xFF	; 255
		/* Strip CRC32 */
		packet->length -= sizeof(uint32_t);
		return CSP_ERR_NONE;
	}

}
    2cf8:	24 96       	adiw	r28, 0x04	; 4
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	ff 90       	pop	r15
    2d08:	ef 90       	pop	r14
    2d0a:	08 95       	ret

00002d0c <csp_hton32>:
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
	return csp_hton16(n16);
}

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
    2d0c:	cf 92       	push	r12
    2d0e:	df 92       	push	r13
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d18:	f6 2e       	mov	r15, r22
    2d1a:	ee 24       	eor	r14, r14
    2d1c:	dd 24       	eor	r13, r13
    2d1e:	cc 24       	eor	r12, r12
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d20:	09 2f       	mov	r16, r25
    2d22:	11 27       	eor	r17, r17
    2d24:	22 27       	eor	r18, r18
    2d26:	33 27       	eor	r19, r19
    2d28:	0c 29       	or	r16, r12
    2d2a:	1d 29       	or	r17, r13
    2d2c:	2e 29       	or	r18, r14
    2d2e:	3f 29       	or	r19, r15
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
    2d30:	6b 01       	movw	r12, r22
    2d32:	7c 01       	movw	r14, r24
    2d34:	cc 24       	eor	r12, r12
    2d36:	ee 24       	eor	r14, r14
    2d38:	ff 24       	eor	r15, r15
    2d3a:	fe 2c       	mov	r15, r14
    2d3c:	ed 2c       	mov	r14, r13
    2d3e:	dc 2c       	mov	r13, r12
    2d40:	cc 24       	eor	r12, r12
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d42:	0c 29       	or	r16, r12
    2d44:	1d 29       	or	r17, r13
    2d46:	2e 29       	or	r18, r14
    2d48:	3f 29       	or	r19, r15
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	88 27       	eor	r24, r24
    2d50:	99 27       	eor	r25, r25
    2d52:	bb 27       	eor	r27, r27
    2d54:	89 2f       	mov	r24, r25
    2d56:	9a 2f       	mov	r25, r26
    2d58:	ab 2f       	mov	r26, r27
    2d5a:	bb 27       	eor	r27, r27
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	60 2b       	or	r22, r16
    2d62:	71 2b       	or	r23, r17
    2d64:	82 2b       	or	r24, r18
    2d66:	93 2b       	or	r25, r19
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
#endif
}
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    2d74:	08 95       	ret

00002d76 <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2d82:	f6 2e       	mov	r15, r22
    2d84:	ee 24       	eor	r14, r14
    2d86:	dd 24       	eor	r13, r13
    2d88:	cc 24       	eor	r12, r12
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2d8a:	09 2f       	mov	r16, r25
    2d8c:	11 27       	eor	r17, r17
    2d8e:	22 27       	eor	r18, r18
    2d90:	33 27       	eor	r19, r19
    2d92:	0c 29       	or	r16, r12
    2d94:	1d 29       	or	r17, r13
    2d96:	2e 29       	or	r18, r14
    2d98:	3f 29       	or	r19, r15
			((h32 & 0x000000ff) << 24) |
			((h32 & 0x0000ff00) <<  8) |
    2d9a:	6b 01       	movw	r12, r22
    2d9c:	7c 01       	movw	r14, r24
    2d9e:	cc 24       	eor	r12, r12
    2da0:	ee 24       	eor	r14, r14
    2da2:	ff 24       	eor	r15, r15
    2da4:	fe 2c       	mov	r15, r14
    2da6:	ed 2c       	mov	r14, r13
    2da8:	dc 2c       	mov	r13, r12
    2daa:	cc 24       	eor	r12, r12
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
			((h32 & 0x000000ff) << 24) |
    2dac:	0c 29       	or	r16, r12
    2dae:	1d 29       	or	r17, r13
    2db0:	2e 29       	or	r18, r14
    2db2:	3f 29       	or	r19, r15
			((h32 & 0x0000ff00) <<  8) |
			((h32 & 0x00ff0000) >>  8));
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	88 27       	eor	r24, r24
    2dba:	99 27       	eor	r25, r25
    2dbc:	bb 27       	eor	r27, r27
    2dbe:	89 2f       	mov	r24, r25
    2dc0:	9a 2f       	mov	r25, r26
    2dc2:	ab 2f       	mov	r26, r27
    2dc4:	bb 27       	eor	r27, r27
/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	60 2b       	or	r22, r16
    2dcc:	71 2b       	or	r23, r17
    2dce:	82 2b       	or	r24, r18
    2dd0:	93 2b       	or	r25, r19
}

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
	return csp_hton32(n32);
}
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	cf 90       	pop	r12
    2dde:	08 95       	ret

00002de0 <csp_get_hostname>:
	csp_packet_t * packet = NULL;
	csp_queue_dequeue(socket->socket, &packet, timeout);

	return packet;

}
    2de0:	80 91 f5 3b 	lds	r24, 0x3BF5
    2de4:	90 91 f6 3b 	lds	r25, 0x3BF6
    2de8:	08 95       	ret

00002dea <csp_get_model>:
    2dea:	80 91 f3 3b 	lds	r24, 0x3BF3
    2dee:	90 91 f4 3b 	lds	r25, 0x3BF4
    2df2:	08 95       	ret

00002df4 <csp_init>:
    2df4:	80 93 6d 3d 	sts	0x3D6D, r24
    2df8:	63 dd       	rcall	.-1338   	; 0x28c0 <csp_conn_init>
    2dfa:	9c 01       	movw	r18, r24
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	31 f4       	brne	.+12     	; 0x2e0c <csp_init+0x18>
    2e00:	08 d2       	rcall	.+1040   	; 0x3212 <csp_port_init>
    2e02:	9c 01       	movw	r18, r24
    2e04:	00 97       	sbiw	r24, 0x00	; 0
    2e06:	21 f4       	brne	.+8      	; 0x2e10 <csp_init+0x1c>
    2e08:	37 c3       	rjmp	.+1646   	; 0x3478 <csp_route_table_init>
    2e0a:	08 95       	ret
    2e0c:	93 2f       	mov	r25, r19
    2e0e:	08 95       	ret
    2e10:	93 2f       	mov	r25, r19
    2e12:	08 95       	ret

00002e14 <csp_socket>:
    2e14:	cf 92       	push	r12
    2e16:	df 92       	push	r13
    2e18:	ef 92       	push	r14
    2e1a:	ff 92       	push	r15
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	6b 01       	movw	r12, r22
    2e22:	7c 01       	movw	r14, r24
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	81 71       	andi	r24, 0x11	; 17
    2e2a:	99 27       	eor	r25, r25
    2e2c:	aa 27       	eor	r26, r26
    2e2e:	bb 27       	eor	r27, r27
    2e30:	89 2b       	or	r24, r25
    2e32:	8a 2b       	or	r24, r26
    2e34:	8b 2b       	or	r24, r27
    2e36:	11 f5       	brne	.+68     	; 0x2e7c <csp_socket+0x68>
    2e38:	d7 01       	movw	r26, r14
    2e3a:	c6 01       	movw	r24, r12
    2e3c:	8e 7a       	andi	r24, 0xAE	; 174
    2e3e:	9e 7f       	andi	r25, 0xFE	; 254
    2e40:	89 2b       	or	r24, r25
    2e42:	8a 2b       	or	r24, r26
    2e44:	8b 2b       	or	r24, r27
    2e46:	e9 f4       	brne	.+58     	; 0x2e82 <csp_socket+0x6e>
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	de dd       	rcall	.-1092   	; 0x2a08 <csp_conn_allocate>
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	d9 f0       	breq	.+54     	; 0x2e88 <csp_socket+0x74>
    2e52:	d0 fe       	sbrs	r13, 0
    2e54:	0a c0       	rjmp	.+20     	; 0x2e6a <csp_socket+0x56>
    2e56:	62 e0       	ldi	r22, 0x02	; 2
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	8a e0       	ldi	r24, 0x0A	; 10
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	b6 da       	rcall	.-2708   	; 0x23cc <csp_queue_create>
    2e60:	8e 87       	std	Y+14, r24	; 0x0e
    2e62:	9f 87       	std	Y+15, r25	; 0x0f
    2e64:	89 2b       	or	r24, r25
    2e66:	19 f4       	brne	.+6      	; 0x2e6e <csp_socket+0x5a>
    2e68:	12 c0       	rjmp	.+36     	; 0x2e8e <csp_socket+0x7a>
    2e6a:	1e 86       	std	Y+14, r1	; 0x0e
    2e6c:	1f 86       	std	Y+15, r1	; 0x0f
    2e6e:	cc 8a       	std	Y+20, r12	; 0x14
    2e70:	dd 8a       	std	Y+21, r13	; 0x15
    2e72:	ee 8a       	std	Y+22, r14	; 0x16
    2e74:	ff 8a       	std	Y+23, r15	; 0x17
    2e76:	8c 2f       	mov	r24, r28
    2e78:	9d 2f       	mov	r25, r29
    2e7a:	0b c0       	rjmp	.+22     	; 0x2e92 <csp_socket+0x7e>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	08 c0       	rjmp	.+16     	; 0x2e92 <csp_socket+0x7e>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	05 c0       	rjmp	.+10     	; 0x2e92 <csp_socket+0x7e>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <csp_socket+0x7e>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	ff 90       	pop	r15
    2e98:	ef 90       	pop	r14
    2e9a:	df 90       	pop	r13
    2e9c:	cf 90       	pop	r12
    2e9e:	08 95       	ret

00002ea0 <csp_accept>:
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	1f 92       	push	r1
    2ea6:	1f 92       	push	r1
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	81 f0       	breq	.+32     	; 0x2ed0 <csp_accept+0x30>
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	86 85       	ldd	r24, Z+14	; 0x0e
    2eb4:	97 85       	ldd	r25, Z+15	; 0x0f
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	71 f0       	breq	.+28     	; 0x2ed6 <csp_accept+0x36>
    2eba:	9a 01       	movw	r18, r20
    2ebc:	ab 01       	movw	r20, r22
    2ebe:	be 01       	movw	r22, r28
    2ec0:	6f 5f       	subi	r22, 0xFF	; 255
    2ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec4:	98 da       	rcall	.-2768   	; 0x23f6 <csp_queue_dequeue>
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	49 f4       	brne	.+18     	; 0x2edc <csp_accept+0x3c>
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	08 c0       	rjmp	.+16     	; 0x2ee0 <csp_accept+0x40>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	05 c0       	rjmp	.+10     	; 0x2ee0 <csp_accept+0x40>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <csp_accept+0x40>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	08 95       	ret

00002eea <csp_read>:
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	1f 92       	push	r1
    2ef0:	1f 92       	push	r1
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	19 82       	std	Y+1, r1	; 0x01
    2ef8:	1a 82       	std	Y+2, r1	; 0x02
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	89 f0       	breq	.+34     	; 0x2f20 <csp_read+0x36>
    2efe:	fc 01       	movw	r30, r24
    2f00:	21 81       	ldd	r18, Z+1	; 0x01
    2f02:	21 30       	cpi	r18, 0x01	; 1
    2f04:	81 f4       	brne	.+32     	; 0x2f26 <csp_read+0x3c>
    2f06:	9a 01       	movw	r18, r20
    2f08:	ab 01       	movw	r20, r22
    2f0a:	be 01       	movw	r22, r28
    2f0c:	6f 5f       	subi	r22, 0xFF	; 255
    2f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f10:	84 85       	ldd	r24, Z+12	; 0x0c
    2f12:	95 85       	ldd	r25, Z+13	; 0x0d
    2f14:	70 da       	rcall	.-2848   	; 0x23f6 <csp_queue_dequeue>
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	49 f4       	brne	.+18     	; 0x2f2c <csp_read+0x42>
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	08 c0       	rjmp	.+16     	; 0x2f30 <csp_read+0x46>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	05 c0       	rjmp	.+10     	; 0x2f30 <csp_read+0x46>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <csp_read+0x46>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	08 95       	ret

00002f3a <csp_send_direct>:
    2f3a:	8f 92       	push	r8
    2f3c:	9f 92       	push	r9
    2f3e:	af 92       	push	r10
    2f40:	bf 92       	push	r11
    2f42:	cf 92       	push	r12
    2f44:	df 92       	push	r13
    2f46:	ef 92       	push	r14
    2f48:	ff 92       	push	r15
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	96 2e       	mov	r9, r22
    2f54:	87 2e       	mov	r8, r23
    2f56:	d8 2f       	mov	r29, r24
    2f58:	c9 2f       	mov	r28, r25
    2f5a:	5a 01       	movw	r10, r20
    2f5c:	68 01       	movw	r12, r16
    2f5e:	79 01       	movw	r14, r18
    2f60:	41 15       	cp	r20, r1
    2f62:	51 05       	cpc	r21, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <csp_send_direct+0x2e>
    2f66:	7b c0       	rjmp	.+246    	; 0x305e <csp_send_direct+0x124>
    2f68:	89 2f       	mov	r24, r25
    2f6a:	81 70       	andi	r24, 0x01	; 1
    2f6c:	82 95       	swap	r24
    2f6e:	80 7f       	andi	r24, 0xF0	; 240
    2f70:	9d 2f       	mov	r25, r29
    2f72:	92 95       	swap	r25
    2f74:	9f 70       	andi	r25, 0x0F	; 15
    2f76:	89 2b       	or	r24, r25
    2f78:	a9 d2       	rcall	.+1362   	; 0x34cc <csp_route_if>
    2f7a:	8c 01       	movw	r16, r24
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <csp_send_direct+0x48>
    2f80:	71 c0       	rjmp	.+226    	; 0x3064 <csp_send_direct+0x12a>
    2f82:	dc 01       	movw	r26, r24
    2f84:	ed 91       	ld	r30, X+
    2f86:	fc 91       	ld	r31, X
    2f88:	30 97       	sbiw	r30, 0x00	; 0
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <csp_send_direct+0x54>
    2f8c:	6e c0       	rjmp	.+220    	; 0x306a <csp_send_direct+0x130>
    2f8e:	24 81       	ldd	r18, Z+4	; 0x04
    2f90:	35 81       	ldd	r19, Z+5	; 0x05
    2f92:	23 2b       	or	r18, r19
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <csp_send_direct+0x5e>
    2f96:	6c c0       	rjmp	.+216    	; 0x3070 <csp_send_direct+0x136>
    2f98:	2c 2f       	mov	r18, r28
    2f9a:	26 95       	lsr	r18
    2f9c:	2f 71       	andi	r18, 0x1F	; 31
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	80 91 6d 3d 	lds	r24, 0x3D6D
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	28 17       	cp	r18, r24
    2fa8:	39 07       	cpc	r19, r25
    2faa:	59 f4       	brne	.+22     	; 0x2fc2 <csp_send_direct+0x88>
    2fac:	93 fc       	sbrc	r9, 3
    2fae:	46 c0       	rjmp	.+140    	; 0x303c <csp_send_direct+0x102>
    2fb0:	90 fe       	sbrs	r9, 0
    2fb2:	05 c0       	rjmp	.+10     	; 0x2fbe <csp_send_direct+0x84>
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	40 de       	rcall	.-896    	; 0x2c38 <csp_crc32_append>
    2fb8:	89 2b       	or	r24, r25
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <csp_send_direct+0x84>
    2fbc:	3f c0       	rjmp	.+126    	; 0x303c <csp_send_direct+0x102>
    2fbe:	92 fc       	sbrc	r9, 2
    2fc0:	3d c0       	rjmp	.+122    	; 0x303c <csp_send_direct+0x102>
    2fc2:	f5 01       	movw	r30, r10
    2fc4:	92 86       	std	Z+10, r9	; 0x0a
    2fc6:	83 86       	std	Z+11, r8	; 0x0b
    2fc8:	d4 87       	std	Z+12, r29	; 0x0c
    2fca:	c5 87       	std	Z+13, r28	; 0x0d
    2fcc:	c0 85       	ldd	r28, Z+8	; 0x08
    2fce:	d1 85       	ldd	r29, Z+9	; 0x09
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	a0 81       	ld	r26, Z
    2fd4:	b1 81       	ldd	r27, Z+1	; 0x01
    2fd6:	17 96       	adiw	r26, 0x07	; 7
    2fd8:	8d 91       	ld	r24, X+
    2fda:	9c 91       	ld	r25, X
    2fdc:	18 97       	sbiw	r26, 0x08	; 8
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	19 f0       	breq	.+6      	; 0x2fe8 <csp_send_direct+0xae>
    2fe2:	8c 17       	cp	r24, r28
    2fe4:	9d 07       	cpc	r25, r29
    2fe6:	50 f1       	brcs	.+84     	; 0x303c <csp_send_direct+0x102>
    2fe8:	14 96       	adiw	r26, 0x04	; 4
    2fea:	ed 91       	ld	r30, X+
    2fec:	fc 91       	ld	r31, X
    2fee:	15 97       	sbiw	r26, 0x05	; 5
    2ff0:	a7 01       	movw	r20, r14
    2ff2:	96 01       	movw	r18, r12
    2ff4:	b5 01       	movw	r22, r10
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	19 95       	eicall
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	f9 f4       	brne	.+62     	; 0x303c <csp_send_direct+0x102>
    2ffe:	d8 01       	movw	r26, r16
    3000:	ed 91       	ld	r30, X+
    3002:	fc 91       	ld	r31, X
    3004:	11 97       	sbiw	r26, 0x01	; 1
    3006:	42 85       	ldd	r20, Z+10	; 0x0a
    3008:	53 85       	ldd	r21, Z+11	; 0x0b
    300a:	64 85       	ldd	r22, Z+12	; 0x0c
    300c:	75 85       	ldd	r23, Z+13	; 0x0d
    300e:	4f 5f       	subi	r20, 0xFF	; 255
    3010:	5f 4f       	sbci	r21, 0xFF	; 255
    3012:	6f 4f       	sbci	r22, 0xFF	; 255
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	42 87       	std	Z+10, r20	; 0x0a
    3018:	53 87       	std	Z+11, r21	; 0x0b
    301a:	64 87       	std	Z+12, r22	; 0x0c
    301c:	75 87       	std	Z+13, r23	; 0x0d
    301e:	ed 91       	ld	r30, X+
    3020:	fc 91       	ld	r31, X
    3022:	46 a1       	ldd	r20, Z+38	; 0x26
    3024:	57 a1       	ldd	r21, Z+39	; 0x27
    3026:	60 a5       	ldd	r22, Z+40	; 0x28
    3028:	71 a5       	ldd	r23, Z+41	; 0x29
    302a:	4c 0f       	add	r20, r28
    302c:	5d 1f       	adc	r21, r29
    302e:	61 1d       	adc	r22, r1
    3030:	71 1d       	adc	r23, r1
    3032:	46 a3       	std	Z+38, r20	; 0x26
    3034:	57 a3       	std	Z+39, r21	; 0x27
    3036:	60 a7       	std	Z+40, r22	; 0x28
    3038:	71 a7       	std	Z+41, r23	; 0x29
    303a:	1c c0       	rjmp	.+56     	; 0x3074 <csp_send_direct+0x13a>
    303c:	d8 01       	movw	r26, r16
    303e:	ed 91       	ld	r30, X+
    3040:	fc 91       	ld	r31, X
    3042:	82 89       	ldd	r24, Z+18	; 0x12
    3044:	93 89       	ldd	r25, Z+19	; 0x13
    3046:	a4 89       	ldd	r26, Z+20	; 0x14
    3048:	b5 89       	ldd	r27, Z+21	; 0x15
    304a:	01 96       	adiw	r24, 0x01	; 1
    304c:	a1 1d       	adc	r26, r1
    304e:	b1 1d       	adc	r27, r1
    3050:	82 8b       	std	Z+18, r24	; 0x12
    3052:	93 8b       	std	Z+19, r25	; 0x13
    3054:	a4 8b       	std	Z+20, r26	; 0x14
    3056:	b5 8b       	std	Z+21, r27	; 0x15
    3058:	86 ef       	ldi	r24, 0xF6	; 246
    305a:	9f ef       	ldi	r25, 0xFF	; 255
    305c:	0b c0       	rjmp	.+22     	; 0x3074 <csp_send_direct+0x13a>
    305e:	86 ef       	ldi	r24, 0xF6	; 246
    3060:	9f ef       	ldi	r25, 0xFF	; 255
    3062:	08 c0       	rjmp	.+16     	; 0x3074 <csp_send_direct+0x13a>
    3064:	86 ef       	ldi	r24, 0xF6	; 246
    3066:	9f ef       	ldi	r25, 0xFF	; 255
    3068:	05 c0       	rjmp	.+10     	; 0x3074 <csp_send_direct+0x13a>
    306a:	86 ef       	ldi	r24, 0xF6	; 246
    306c:	9f ef       	ldi	r25, 0xFF	; 255
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <csp_send_direct+0x13a>
    3070:	86 ef       	ldi	r24, 0xF6	; 246
    3072:	9f ef       	ldi	r25, 0xFF	; 255
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	ff 90       	pop	r15
    307e:	ef 90       	pop	r14
    3080:	df 90       	pop	r13
    3082:	cf 90       	pop	r12
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	08 95       	ret

0000308e <csp_send>:
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	fb 01       	movw	r30, r22
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	d1 f0       	breq	.+52     	; 0x30cc <csp_send+0x3e>
    3098:	30 97       	sbiw	r30, 0x00	; 0
    309a:	d9 f0       	breq	.+54     	; 0x30d2 <csp_send+0x44>
    309c:	dc 01       	movw	r26, r24
    309e:	11 96       	adiw	r26, 0x01	; 1
    30a0:	6c 91       	ld	r22, X
    30a2:	11 97       	sbiw	r26, 0x01	; 1
    30a4:	61 30       	cpi	r22, 0x01	; 1
    30a6:	c1 f4       	brne	.+48     	; 0x30d8 <csp_send+0x4a>
    30a8:	18 96       	adiw	r26, 0x08	; 8
    30aa:	6d 91       	ld	r22, X+
    30ac:	7d 91       	ld	r23, X+
    30ae:	8d 91       	ld	r24, X+
    30b0:	9c 91       	ld	r25, X
    30b2:	1b 97       	sbiw	r26, 0x0b	; 11
    30b4:	89 01       	movw	r16, r18
    30b6:	9a 01       	movw	r18, r20
    30b8:	af 01       	movw	r20, r30
    30ba:	3f df       	rcall	.-386    	; 0x2f3a <csp_send_direct>
    30bc:	31 e0       	ldi	r19, 0x01	; 1
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	89 2b       	or	r24, r25
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <csp_send+0x38>
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	83 2f       	mov	r24, r19
    30c8:	92 2f       	mov	r25, r18
    30ca:	08 c0       	rjmp	.+16     	; 0x30dc <csp_send+0x4e>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	05 c0       	rjmp	.+10     	; 0x30dc <csp_send+0x4e>
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <csp_send+0x4e>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	08 95       	ret

000030e2 <csp_sendto>:

int csp_sendto(uint8_t prio, uint8_t dest, uint8_t dport, uint8_t src_port, uint32_t opts, csp_packet_t * packet, uint32_t timeout) {
    30e2:	4f 92       	push	r4
    30e4:	5f 92       	push	r5
    30e6:	6f 92       	push	r6
    30e8:	7f 92       	push	r7
    30ea:	8f 92       	push	r8
    30ec:	9f 92       	push	r9
    30ee:	af 92       	push	r10
    30f0:	bf 92       	push	r11
    30f2:	cf 92       	push	r12
    30f4:	df 92       	push	r13
    30f6:	ef 92       	push	r14
    30f8:	ff 92       	push	r15
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	f6 01       	movw	r30, r12

	packet->id.flags = 0;
    3108:	12 86       	std	Z+10, r1	; 0x0a

	if (opts & CSP_O_RDP) {
    310a:	e0 fc       	sbrc	r14, 0
    310c:	45 c0       	rjmp	.+138    	; 0x3198 <csp_sendto+0xb6>
    310e:	27 01       	movw	r4, r14
    3110:	38 01       	movw	r6, r16
    3112:	94 e1       	ldi	r25, 0x14	; 20
    3114:	49 22       	and	r4, r25
    3116:	55 24       	eor	r5, r5
    3118:	66 24       	eor	r6, r6
    311a:	77 24       	eor	r7, r7
		csp_log_error("Attempt to create HMAC authenticated packet, but CSP was compiled without HMAC support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	if (opts & CSP_O_XTEA) {
    311c:	45 28       	or	r4, r5
    311e:	46 28       	or	r4, r6
    3120:	47 28       	or	r4, r7
    3122:	e9 f5       	brne	.+122    	; 0x319e <csp_sendto+0xbc>
		csp_log_error("Attempt to create XTEA encrypted packet, but CSP was compiled without XTEA support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	if (opts & CSP_O_CRC32) {
    3124:	e6 fe       	sbrs	r14, 6
    3126:	02 c0       	rjmp	.+4      	; 0x312c <csp_sendto+0x4a>
#ifdef CSP_USE_CRC32
		packet->id.flags |= CSP_FCRC32;
    3128:	91 e0       	ldi	r25, 0x01	; 1
    312a:	92 87       	std	Z+10, r25	; 0x0a
		csp_log_error("Attempt to create CRC32 validated packet, but CSP was compiled without CRC32 support\r\n");
		return CSP_ERR_NOTSUP;
#endif
	}

	packet->id.dst = dest;
    312c:	64 fb       	bst	r22, 4
    312e:	99 27       	eor	r25, r25
    3130:	90 f9       	bld	r25, 0
    3132:	35 85       	ldd	r19, Z+13	; 0x0d
    3134:	3e 7f       	andi	r19, 0xFE	; 254
    3136:	39 2b       	or	r19, r25
    3138:	35 87       	std	Z+13, r19	; 0x0d
	packet->id.dport = dport;
    313a:	54 2f       	mov	r21, r20
    313c:	52 95       	swap	r21
    313e:	55 0f       	add	r21, r21
    3140:	55 0f       	add	r21, r21
    3142:	50 7c       	andi	r21, 0xC0	; 192
    3144:	93 85       	ldd	r25, Z+11	; 0x0b
    3146:	9f 73       	andi	r25, 0x3F	; 63
    3148:	95 2b       	or	r25, r21
    314a:	93 87       	std	Z+11, r25	; 0x0b
    314c:	46 95       	lsr	r20
    314e:	46 95       	lsr	r20
    3150:	4f 70       	andi	r20, 0x0F	; 15
    3152:	62 95       	swap	r22
    3154:	60 7f       	andi	r22, 0xF0	; 240
    3156:	64 2b       	or	r22, r20
    3158:	64 87       	std	Z+12, r22	; 0x0c
	packet->id.src = my_address;
    315a:	40 91 6d 3d 	lds	r20, 0x3D6D
    315e:	4f 71       	andi	r20, 0x1F	; 31
    3160:	44 0f       	add	r20, r20
    3162:	31 70       	andi	r19, 0x01	; 1
	packet->id.sport = src_port;
    3164:	2f 73       	andi	r18, 0x3F	; 63
    3166:	90 7c       	andi	r25, 0xC0	; 192
    3168:	29 2b       	or	r18, r25
    316a:	23 87       	std	Z+11, r18	; 0x0b
	packet->id.pri = prio;
    316c:	98 2f       	mov	r25, r24
    316e:	92 95       	swap	r25
    3170:	99 0f       	add	r25, r25
    3172:	99 0f       	add	r25, r25
    3174:	90 7c       	andi	r25, 0xC0	; 192
    3176:	83 2f       	mov	r24, r19
    3178:	84 2b       	or	r24, r20
    317a:	89 2b       	or	r24, r25
    317c:	85 87       	std	Z+13, r24	; 0x0d

	if (csp_send_direct(packet->id, packet, timeout) != CSP_ERR_NONE)
    317e:	62 85       	ldd	r22, Z+10	; 0x0a
    3180:	73 85       	ldd	r23, Z+11	; 0x0b
    3182:	84 85       	ldd	r24, Z+12	; 0x0c
    3184:	95 85       	ldd	r25, Z+13	; 0x0d
    3186:	95 01       	movw	r18, r10
    3188:	84 01       	movw	r16, r8
    318a:	af 01       	movw	r20, r30
    318c:	d6 de       	rcall	.-596    	; 0x2f3a <csp_send_direct>
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	41 f0       	breq	.+16     	; 0x31a2 <csp_sendto+0xc0>
		return CSP_ERR_NOTSUP;
    3192:	8b ef       	ldi	r24, 0xFB	; 251
    3194:	9f ef       	ldi	r25, 0xFF	; 255
    3196:	05 c0       	rjmp	.+10     	; 0x31a2 <csp_sendto+0xc0>

	packet->id.flags = 0;

	if (opts & CSP_O_RDP) {
		csp_log_error("Attempt to create RDP packet on connection-less socket\r\n");
		return CSP_ERR_INVAL;
    3198:	8e ef       	ldi	r24, 0xFE	; 254
    319a:	9f ef       	ldi	r25, 0xFF	; 255
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <csp_sendto+0xc0>
	if (opts & CSP_O_XTEA) {
#ifdef CSP_USE_XTEA
		packet->id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted packet, but CSP was compiled without XTEA support\r\n");
		return CSP_ERR_NOTSUP;
    319e:	8b ef       	ldi	r24, 0xFB	; 251
    31a0:	9f ef       	ldi	r25, 0xFF	; 255
	if (csp_send_direct(packet->id, packet, timeout) != CSP_ERR_NONE)
		return CSP_ERR_NOTSUP;
	
	return CSP_ERR_NONE;

}
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	ff 90       	pop	r15
    31ac:	ef 90       	pop	r14
    31ae:	df 90       	pop	r13
    31b0:	cf 90       	pop	r12
    31b2:	bf 90       	pop	r11
    31b4:	af 90       	pop	r10
    31b6:	9f 90       	pop	r9
    31b8:	8f 90       	pop	r8
    31ba:	7f 90       	pop	r7
    31bc:	6f 90       	pop	r6
    31be:	5f 90       	pop	r5
    31c0:	4f 90       	pop	r4
    31c2:	08 95       	ret

000031c4 <csp_port_get_socket>:

csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;

	if (port > CSP_ANY)
    31c4:	81 32       	cpi	r24, 0x21	; 33
    31c6:	91 05       	cpc	r25, r1
    31c8:	f0 f4       	brcc	.+60     	; 0x3206 <csp_port_get_socket+0x42>
		return NULL;

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN)
    31ca:	fc 01       	movw	r30, r24
    31cc:	ee 0f       	add	r30, r30
    31ce:	ff 1f       	adc	r31, r31
    31d0:	e8 0f       	add	r30, r24
    31d2:	f9 1f       	adc	r31, r25
    31d4:	e9 50       	subi	r30, 0x09	; 9
    31d6:	f4 4c       	sbci	r31, 0xC4	; 196
    31d8:	20 81       	ld	r18, Z
    31da:	21 30       	cpi	r18, 0x01	; 1
    31dc:	59 f4       	brne	.+22     	; 0x31f4 <csp_port_get_socket+0x30>
		ret = ports[port].socket;
    31de:	fc 01       	movw	r30, r24
    31e0:	ee 0f       	add	r30, r30
    31e2:	ff 1f       	adc	r31, r31
    31e4:	8e 0f       	add	r24, r30
    31e6:	9f 1f       	adc	r25, r31
    31e8:	fc 01       	movw	r30, r24
    31ea:	e9 50       	subi	r30, 0x09	; 9
    31ec:	f4 4c       	sbci	r31, 0xC4	; 196
    31ee:	81 81       	ldd	r24, Z+1	; 0x01
    31f0:	92 81       	ldd	r25, Z+2	; 0x02
    31f2:	08 95       	ret
	else if (ports[CSP_ANY].state == PORT_OPEN)
    31f4:	80 91 57 3c 	lds	r24, 0x3C57
    31f8:	81 30       	cpi	r24, 0x01	; 1
    31fa:	41 f4       	brne	.+16     	; 0x320c <csp_port_get_socket+0x48>
		ret = ports[CSP_ANY].socket;
    31fc:	80 91 58 3c 	lds	r24, 0x3C58
    3200:	90 91 59 3c 	lds	r25, 0x3C59
    3204:	08 95       	ret
csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;

	if (port > CSP_ANY)
		return NULL;
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	08 95       	ret
/* Allocation of ports */
static csp_port_t ports[CSP_MAX_BIND_PORT + 2];

csp_socket_t * csp_port_get_socket(unsigned int port) {

	csp_socket_t * ret = NULL;
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
	else if (ports[CSP_ANY].state == PORT_OPEN)
		ret = ports[CSP_ANY].socket;

	return ret;

}
    3210:	08 95       	ret

00003212 <csp_port_init>:

int csp_port_init(void) {

	memset(ports, PORT_CLOSED, sizeof(csp_port_t) * (CSP_MAX_BIND_PORT + 2));
    3212:	83 e6       	ldi	r24, 0x63	; 99
    3214:	e7 ef       	ldi	r30, 0xF7	; 247
    3216:	fb e3       	ldi	r31, 0x3B	; 59
    3218:	df 01       	movw	r26, r30
    321a:	1d 92       	st	X+, r1
    321c:	8a 95       	dec	r24
    321e:	e9 f7       	brne	.-6      	; 0x321a <csp_port_init+0x8>

	return CSP_ERR_NONE;

}
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	08 95       	ret

00003226 <csp_listen>:

int csp_listen(csp_socket_t * socket, size_t conn_queue_length) {
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	ec 01       	movw	r28, r24
    322c:	cb 01       	movw	r24, r22
	
	if (socket == NULL)
    322e:	20 97       	sbiw	r28, 0x00	; 0
    3230:	81 f0       	breq	.+32     	; 0x3252 <csp_listen+0x2c>
		return CSP_ERR_INVAL;

	socket->socket = csp_queue_create(conn_queue_length, sizeof(csp_conn_t *));
    3232:	62 e0       	ldi	r22, 0x02	; 2
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	ca d8       	rcall	.-3692   	; 0x23cc <csp_queue_create>
    3238:	8e 87       	std	Y+14, r24	; 0x0e
    323a:	9f 87       	std	Y+15, r25	; 0x0f
	if (socket->socket == NULL)
    323c:	21 e0       	ldi	r18, 0x01	; 1
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	89 2b       	or	r24, r25
    3242:	11 f0       	breq	.+4      	; 0x3248 <csp_listen+0x22>
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	88 27       	eor	r24, r24
    324a:	99 27       	eor	r25, r25
    324c:	82 1b       	sub	r24, r18
    324e:	93 0b       	sbc	r25, r19
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <csp_listen+0x30>
}

int csp_listen(csp_socket_t * socket, size_t conn_queue_length) {
	
	if (socket == NULL)
		return CSP_ERR_INVAL;
    3252:	8e ef       	ldi	r24, 0xFE	; 254
    3254:	9f ef       	ldi	r25, 0xFF	; 255
	if (socket->socket == NULL)
		return CSP_ERR_NOMEM;

	return CSP_ERR_NONE;

}
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	08 95       	ret

0000325c <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
	
	if (socket == NULL)
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	e1 f0       	breq	.+56     	; 0x3298 <csp_bind+0x3c>
		return CSP_ERR_INVAL;

	if (port > CSP_ANY) {
    3260:	61 32       	cpi	r22, 0x21	; 33
    3262:	e8 f4       	brcc	.+58     	; 0x329e <csp_bind+0x42>
		csp_log_error("Only ports from 0-%u (and CSP_ANY for default) are available for incoming ports\r\n", CSP_ANY);
		return CSP_ERR_INVAL;
	}

	/* Check if port number is valid */
	if (ports[port].state != PORT_CLOSED) {
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	fb 01       	movw	r30, r22
    3268:	ee 0f       	add	r30, r30
    326a:	ff 1f       	adc	r31, r31
    326c:	e6 0f       	add	r30, r22
    326e:	f7 1f       	adc	r31, r23
    3270:	e9 50       	subi	r30, 0x09	; 9
    3272:	f4 4c       	sbci	r31, 0xC4	; 196
    3274:	20 81       	ld	r18, Z
    3276:	21 11       	cpse	r18, r1
    3278:	15 c0       	rjmp	.+42     	; 0x32a4 <csp_bind+0x48>
	}

	csp_log_info("Binding socket %p to port %u\r\n", socket, port);

	/* Save listener */
	ports[port].socket = socket;
    327a:	fb 01       	movw	r30, r22
    327c:	ee 0f       	add	r30, r30
    327e:	ff 1f       	adc	r31, r31
    3280:	6e 0f       	add	r22, r30
    3282:	7f 1f       	adc	r23, r31
    3284:	fb 01       	movw	r30, r22
    3286:	e9 50       	subi	r30, 0x09	; 9
    3288:	f4 4c       	sbci	r31, 0xC4	; 196
    328a:	81 83       	std	Z+1, r24	; 0x01
    328c:	92 83       	std	Z+2, r25	; 0x02
	ports[port].state = PORT_OPEN;
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	80 83       	st	Z, r24

	return CSP_ERR_NONE;
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	08 95       	ret
}

int csp_bind(csp_socket_t * socket, uint8_t port) {
	
	if (socket == NULL)
		return CSP_ERR_INVAL;
    3298:	8e ef       	ldi	r24, 0xFE	; 254
    329a:	9f ef       	ldi	r25, 0xFF	; 255
    329c:	08 95       	ret

	if (port > CSP_ANY) {
		csp_log_error("Only ports from 0-%u (and CSP_ANY for default) are available for incoming ports\r\n", CSP_ANY);
		return CSP_ERR_INVAL;
    329e:	8e ef       	ldi	r24, 0xFE	; 254
    32a0:	9f ef       	ldi	r25, 0xFF	; 255
    32a2:	08 95       	ret
	}

	/* Check if port number is valid */
	if (ports[port].state != PORT_CLOSED) {
		csp_log_error("Port %d is already in use\r\n", port);
		return CSP_ERR_USED;
    32a4:	8c ef       	ldi	r24, 0xFC	; 252
    32a6:	9f ef       	ldi	r25, 0xFF	; 255
	ports[port].socket = socket;
	ports[port].state = PORT_OPEN;

	return CSP_ERR_NONE;

}
    32a8:	08 95       	ret

000032aa <csp_route_security_check>:
	return prio;
#else
	return 0;
#endif

}
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	ea 01       	movw	r28, r20
    32b4:	89 01       	movw	r16, r18
    32b6:	f9 01       	movw	r30, r18
    32b8:	82 85       	ldd	r24, Z+10	; 0x0a
    32ba:	82 ff       	sbrs	r24, 2
    32bc:	0e c0       	rjmp	.+28     	; 0x32da <csp_route_security_check+0x30>
    32be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32c2:	a8 a1       	ldd	r26, Y+32	; 0x20
    32c4:	b9 a1       	ldd	r27, Y+33	; 0x21
    32c6:	01 96       	adiw	r24, 0x01	; 1
    32c8:	a1 1d       	adc	r26, r1
    32ca:	b1 1d       	adc	r27, r1
    32cc:	8e 8f       	std	Y+30, r24	; 0x1e
    32ce:	9f 8f       	std	Y+31, r25	; 0x1f
    32d0:	a8 a3       	std	Y+32, r26	; 0x20
    32d2:	b9 a3       	std	Y+33, r27	; 0x21
    32d4:	8b ef       	ldi	r24, 0xFB	; 251
    32d6:	9f ef       	ldi	r25, 0xFF	; 255
    32d8:	28 c0       	rjmp	.+80     	; 0x332a <csp_route_security_check+0x80>
    32da:	80 ff       	sbrs	r24, 0
    32dc:	12 c0       	rjmp	.+36     	; 0x3302 <csp_route_security_check+0x58>
    32de:	c9 01       	movw	r24, r18
    32e0:	cc dc       	rcall	.-1640   	; 0x2c7a <csp_crc32_verify>
    32e2:	89 2b       	or	r24, r25
    32e4:	71 f0       	breq	.+28     	; 0x3302 <csp_route_security_check+0x58>
    32e6:	8e 89       	ldd	r24, Y+22	; 0x16
    32e8:	9f 89       	ldd	r25, Y+23	; 0x17
    32ea:	a8 8d       	ldd	r26, Y+24	; 0x18
    32ec:	b9 8d       	ldd	r27, Y+25	; 0x19
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	a1 1d       	adc	r26, r1
    32f2:	b1 1d       	adc	r27, r1
    32f4:	8e 8b       	std	Y+22, r24	; 0x16
    32f6:	9f 8b       	std	Y+23, r25	; 0x17
    32f8:	a8 8f       	std	Y+24, r26	; 0x18
    32fa:	b9 8f       	std	Y+25, r27	; 0x19
    32fc:	8a e9       	ldi	r24, 0x9A	; 154
    32fe:	9f ef       	ldi	r25, 0xFF	; 255
    3300:	14 c0       	rjmp	.+40     	; 0x332a <csp_route_security_check+0x80>
    3302:	f8 01       	movw	r30, r16
    3304:	82 85       	ldd	r24, Z+10	; 0x0a
    3306:	83 ff       	sbrs	r24, 3
    3308:	0e c0       	rjmp	.+28     	; 0x3326 <csp_route_security_check+0x7c>
    330a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    330c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    330e:	a8 a1       	ldd	r26, Y+32	; 0x20
    3310:	b9 a1       	ldd	r27, Y+33	; 0x21
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	a1 1d       	adc	r26, r1
    3316:	b1 1d       	adc	r27, r1
    3318:	8e 8f       	std	Y+30, r24	; 0x1e
    331a:	9f 8f       	std	Y+31, r25	; 0x1f
    331c:	a8 a3       	std	Y+32, r26	; 0x20
    331e:	b9 a3       	std	Y+33, r27	; 0x21
    3320:	8b ef       	ldi	r24, 0xFB	; 251
    3322:	9f ef       	ldi	r25, 0xFF	; 255
    3324:	02 c0       	rjmp	.+4      	; 0x332a <csp_route_security_check+0x80>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	08 95       	ret

00003334 <csp_route_next_packet>:
    3334:	2f ef       	ldi	r18, 0xFF	; 255
    3336:	3f ef       	ldi	r19, 0xFF	; 255
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	bc 01       	movw	r22, r24
    333e:	80 91 5a 3c 	lds	r24, 0x3C5A
    3342:	90 91 5b 3c 	lds	r25, 0x3C5B
    3346:	57 d8       	rcall	.-3922   	; 0x23f6 <csp_queue_dequeue>
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	19 f0       	breq	.+6      	; 0x3352 <csp_route_next_packet+0x1e>
    334c:	8d ef       	ldi	r24, 0xFD	; 253
    334e:	9f ef       	ldi	r25, 0xFF	; 255
    3350:	08 95       	ret
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	08 95       	ret

00003358 <csp_route_start_task>:
    3358:	ef 92       	push	r14
    335a:	ff 92       	push	r15
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	0f 2e       	mov	r0, r31
    3362:	fc e5       	ldi	r31, 0x5C	; 92
    3364:	ef 2e       	mov	r14, r31
    3366:	fc e3       	ldi	r31, 0x3C	; 60
    3368:	ff 2e       	mov	r15, r31
    336a:	f0 2d       	mov	r31, r0
    336c:	8b 01       	movw	r16, r22
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	ac 01       	movw	r20, r24
    3374:	6e e8       	ldi	r22, 0x8E	; 142
    3376:	70 e2       	ldi	r23, 0x20	; 32
    3378:	80 e8       	ldi	r24, 0x80	; 128
    337a:	9a e1       	ldi	r25, 0x1A	; 26
    337c:	08 d9       	rcall	.-3568   	; 0x258e <csp_thread_create>
    337e:	21 e0       	ldi	r18, 0x01	; 1
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	89 2b       	or	r24, r25
    3384:	11 f4       	brne	.+4      	; 0x338a <csp_route_start_task+0x32>
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	88 27       	eor	r24, r24
    338c:	99 27       	eor	r25, r25
    338e:	82 1b       	sub	r24, r18
    3390:	93 0b       	sbc	r25, r19
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	ff 90       	pop	r15
    3398:	ef 90       	pop	r14
    339a:	08 95       	ret

0000339c <csp_route_get_if_by_name>:
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	8c 01       	movw	r16, r24
    33a6:	c0 91 c1 3c 	lds	r28, 0x3CC1
    33aa:	d0 91 c2 3c 	lds	r29, 0x3CC2
    33ae:	20 97       	sbiw	r28, 0x00	; 0
    33b0:	71 f0       	breq	.+28     	; 0x33ce <csp_route_get_if_by_name+0x32>
    33b2:	4a e0       	ldi	r20, 0x0A	; 10
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	b8 01       	movw	r22, r16
    33b8:	88 81       	ld	r24, Y
    33ba:	99 81       	ldd	r25, Y+1	; 0x01
    33bc:	0e 94 98 2b 	call	0x5730	; 0x5730 <strncmp>
    33c0:	89 2b       	or	r24, r25
    33c2:	29 f0       	breq	.+10     	; 0x33ce <csp_route_get_if_by_name+0x32>
    33c4:	0a a8       	ldd	r0, Y+50	; 0x32
    33c6:	db a9       	ldd	r29, Y+51	; 0x33
    33c8:	c0 2d       	mov	r28, r0
    33ca:	20 97       	sbiw	r28, 0x00	; 0
    33cc:	91 f7       	brne	.-28     	; 0x33b2 <csp_route_get_if_by_name+0x16>
    33ce:	ce 01       	movw	r24, r28
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	08 95       	ret

000033da <csp_route_add_if>:
    33da:	a0 91 c1 3c 	lds	r26, 0x3CC1
    33de:	b0 91 c2 3c 	lds	r27, 0x3CC2
    33e2:	10 97       	sbiw	r26, 0x00	; 0
    33e4:	41 f4       	brne	.+16     	; 0x33f6 <csp_route_add_if+0x1c>
    33e6:	80 93 c1 3c 	sts	0x3CC1, r24
    33ea:	90 93 c2 3c 	sts	0x3CC2, r25
    33ee:	fc 01       	movw	r30, r24
    33f0:	12 aa       	std	Z+50, r1	; 0x32
    33f2:	13 aa       	std	Z+51, r1	; 0x33
    33f4:	08 95       	ret
    33f6:	a8 17       	cp	r26, r24
    33f8:	b9 07       	cpc	r27, r25
    33fa:	b9 f0       	breq	.+46     	; 0x342a <csp_route_add_if+0x50>
    33fc:	d2 96       	adiw	r26, 0x32	; 50
    33fe:	ed 91       	ld	r30, X+
    3400:	fc 91       	ld	r31, X
    3402:	d3 97       	sbiw	r26, 0x33	; 51
    3404:	30 97       	sbiw	r30, 0x00	; 0
    3406:	39 f4       	brne	.+14     	; 0x3416 <csp_route_add_if+0x3c>
    3408:	0a c0       	rjmp	.+20     	; 0x341e <csp_route_add_if+0x44>
    340a:	22 a9       	ldd	r18, Z+50	; 0x32
    340c:	33 a9       	ldd	r19, Z+51	; 0x33
    340e:	21 15       	cp	r18, r1
    3410:	31 05       	cpc	r19, r1
    3412:	31 f0       	breq	.+12     	; 0x3420 <csp_route_add_if+0x46>
    3414:	f9 01       	movw	r30, r18
    3416:	8e 17       	cp	r24, r30
    3418:	9f 07       	cpc	r25, r31
    341a:	b9 f7       	brne	.-18     	; 0x340a <csp_route_add_if+0x30>
    341c:	08 95       	ret
    341e:	fd 01       	movw	r30, r26
    3420:	82 ab       	std	Z+50, r24	; 0x32
    3422:	93 ab       	std	Z+51, r25	; 0x33
    3424:	fc 01       	movw	r30, r24
    3426:	12 aa       	std	Z+50, r1	; 0x32
    3428:	13 aa       	std	Z+51, r1	; 0x33
    342a:	08 95       	ret

0000342c <csp_route_set>:
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
    3434:	18 2f       	mov	r17, r24
    3436:	eb 01       	movw	r28, r22
    3438:	04 2f       	mov	r16, r20
    343a:	20 97       	sbiw	r28, 0x00	; 0
    343c:	99 f0       	breq	.+38     	; 0x3464 <csp_route_set+0x38>
    343e:	cb 01       	movw	r24, r22
    3440:	cc df       	rcall	.-104    	; 0x33da <csp_route_add_if>
    3442:	11 32       	cpi	r17, 0x21	; 33
    3444:	90 f4       	brcc	.+36     	; 0x346a <csp_route_set+0x3e>
    3446:	81 2f       	mov	r24, r17
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	fc 01       	movw	r30, r24
    344c:	ee 0f       	add	r30, r30
    344e:	ff 1f       	adc	r31, r31
    3450:	e8 0f       	add	r30, r24
    3452:	f9 1f       	adc	r31, r25
    3454:	e2 5a       	subi	r30, 0xA2	; 162
    3456:	f3 4c       	sbci	r31, 0xC3	; 195
    3458:	c0 83       	st	Z, r28
    345a:	d1 83       	std	Z+1, r29	; 0x01
    345c:	02 83       	std	Z+2, r16	; 0x02
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	05 c0       	rjmp	.+10     	; 0x346e <csp_route_set+0x42>
    3464:	8e ef       	ldi	r24, 0xFE	; 254
    3466:	9f ef       	ldi	r25, 0xFF	; 255
    3468:	02 c0       	rjmp	.+4      	; 0x346e <csp_route_set+0x42>
    346a:	8e ef       	ldi	r24, 0xFE	; 254
    346c:	9f ef       	ldi	r25, 0xFF	; 255
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	08 95       	ret

00003478 <csp_route_table_init>:
    3478:	83 e6       	ldi	r24, 0x63	; 99
    347a:	ee e5       	ldi	r30, 0x5E	; 94
    347c:	fc e3       	ldi	r31, 0x3C	; 60
    347e:	df 01       	movw	r26, r30
    3480:	1d 92       	st	X+, r1
    3482:	8a 95       	dec	r24
    3484:	e9 f7       	brne	.-6      	; 0x3480 <csp_route_table_init+0x8>
    3486:	80 91 5a 3c 	lds	r24, 0x3C5A
    348a:	90 91 5b 3c 	lds	r25, 0x3C5B
    348e:	89 2b       	or	r24, r25
    3490:	61 f4       	brne	.+24     	; 0x34aa <csp_route_table_init+0x32>
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	8a e0       	ldi	r24, 0x0A	; 10
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <csp_queue_create>
    349e:	80 93 5a 3c 	sts	0x3C5A, r24
    34a2:	90 93 5b 3c 	sts	0x3C5B, r25
    34a6:	89 2b       	or	r24, r25
    34a8:	71 f0       	breq	.+28     	; 0x34c6 <csp_route_table_init+0x4e>
    34aa:	4f ef       	ldi	r20, 0xFF	; 255
    34ac:	6b e3       	ldi	r22, 0x3B	; 59
    34ae:	70 e2       	ldi	r23, 0x20	; 32
    34b0:	80 91 6d 3d 	lds	r24, 0x3D6D
    34b4:	bb df       	rcall	.-138    	; 0x342c <csp_route_set>
    34b6:	4f ef       	ldi	r20, 0xFF	; 255
    34b8:	6b e3       	ldi	r22, 0x3B	; 59
    34ba:	70 e2       	ldi	r23, 0x20	; 32
    34bc:	80 e2       	ldi	r24, 0x20	; 32
    34be:	b6 df       	rcall	.-148    	; 0x342c <csp_route_set>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	08 95       	ret
    34c6:	8f ef       	ldi	r24, 0xFF	; 255
    34c8:	9f ef       	ldi	r25, 0xFF	; 255
    34ca:	08 95       	ret

000034cc <csp_route_if>:
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	fc 01       	movw	r30, r24
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	e8 0f       	add	r30, r24
    34d6:	f9 1f       	adc	r31, r25
    34d8:	e2 5a       	subi	r30, 0xA2	; 162
    34da:	f3 4c       	sbci	r31, 0xC3	; 195
    34dc:	20 81       	ld	r18, Z
    34de:	31 81       	ldd	r19, Z+1	; 0x01
    34e0:	23 2b       	or	r18, r19
    34e2:	11 f0       	breq	.+4      	; 0x34e8 <csp_route_if+0x1c>
    34e4:	cf 01       	movw	r24, r30
    34e6:	08 95       	ret
    34e8:	80 91 be 3c 	lds	r24, 0x3CBE
    34ec:	90 91 bf 3c 	lds	r25, 0x3CBF
    34f0:	89 2b       	or	r24, r25
    34f2:	19 f0       	breq	.+6      	; 0x34fa <csp_route_if+0x2e>
    34f4:	8e eb       	ldi	r24, 0xBE	; 190
    34f6:	9c e3       	ldi	r25, 0x3C	; 60
    34f8:	08 95       	ret
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	08 95       	ret

00003500 <csp_task_router>:
    3500:	cf 93       	push	r28
    3502:	df 93       	push	r29
    3504:	00 d0       	rcall	.+0      	; 0x3506 <csp_task_router+0x6>
    3506:	00 d0       	rcall	.+0      	; 0x3508 <csp_task_router+0x8>
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	ce 01       	movw	r24, r28
    350e:	01 96       	adiw	r24, 0x01	; 1
    3510:	11 df       	rcall	.-478    	; 0x3334 <csp_route_next_packet>
    3512:	89 2b       	or	r24, r25
    3514:	d9 f7       	brne	.-10     	; 0x350c <csp_task_router+0xc>
    3516:	cb 80       	ldd	r12, Y+3	; 0x03
    3518:	dc 80       	ldd	r13, Y+4	; 0x04
    351a:	cd 82       	std	Y+5, r12	; 0x05
    351c:	de 82       	std	Y+6, r13	; 0x06
    351e:	d6 01       	movw	r26, r12
    3520:	1c 96       	adiw	r26, 0x0c	; 12
    3522:	9c 91       	ld	r25, X
    3524:	1c 97       	sbiw	r26, 0x0c	; 12
    3526:	92 95       	swap	r25
    3528:	9f 70       	andi	r25, 0x0F	; 15
    352a:	1d 96       	adiw	r26, 0x0d	; 13
    352c:	8c 91       	ld	r24, X
    352e:	81 70       	andi	r24, 0x01	; 1
    3530:	82 95       	swap	r24
    3532:	80 7f       	andi	r24, 0xF0	; 240
    3534:	89 2b       	or	r24, r25
    3536:	48 2f       	mov	r20, r24
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	20 91 6d 3d 	lds	r18, 0x3D6D
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	42 17       	cp	r20, r18
    3542:	53 07       	cpc	r21, r19
    3544:	21 f1       	breq	.+72     	; 0x358e <csp_task_router+0x8e>
    3546:	8f 31       	cpi	r24, 0x1F	; 31
    3548:	11 f1       	breq	.+68     	; 0x358e <csp_task_router+0x8e>
    354a:	c0 df       	rcall	.-128    	; 0x34cc <csp_route_if>
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	59 f0       	breq	.+22     	; 0x3566 <csp_task_router+0x66>
    3550:	dc 01       	movw	r26, r24
    3552:	ed 91       	ld	r30, X+
    3554:	fc 91       	ld	r31, X
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	e8 17       	cp	r30, r24
    355c:	f9 07       	cpc	r31, r25
    355e:	31 f4       	brne	.+12     	; 0x356c <csp_task_router+0x6c>
    3560:	81 85       	ldd	r24, Z+9	; 0x09
    3562:	81 11       	cpse	r24, r1
    3564:	03 c0       	rjmp	.+6      	; 0x356c <csp_task_router+0x6c>
    3566:	c6 01       	movw	r24, r12
    3568:	48 d9       	rcall	.-3440   	; 0x27fa <csp_buffer_free>
    356a:	d0 cf       	rjmp	.-96     	; 0x350c <csp_task_router+0xc>
    356c:	f6 01       	movw	r30, r12
    356e:	62 85       	ldd	r22, Z+10	; 0x0a
    3570:	73 85       	ldd	r23, Z+11	; 0x0b
    3572:	84 85       	ldd	r24, Z+12	; 0x0c
    3574:	95 85       	ldd	r25, Z+13	; 0x0d
    3576:	00 e0       	ldi	r16, 0x00	; 0
    3578:	10 e0       	ldi	r17, 0x00	; 0
    357a:	98 01       	movw	r18, r16
    357c:	a6 01       	movw	r20, r12
    357e:	dd dc       	rcall	.-1606   	; 0x2f3a <csp_send_direct>
    3580:	89 2b       	or	r24, r25
    3582:	09 f4       	brne	.+2      	; 0x3586 <csp_task_router+0x86>
    3584:	c3 cf       	rjmp	.-122    	; 0x350c <csp_task_router+0xc>
    3586:	8d 81       	ldd	r24, Y+5	; 0x05
    3588:	9e 81       	ldd	r25, Y+6	; 0x06
    358a:	37 d9       	rcall	.-3474   	; 0x27fa <csp_buffer_free>
    358c:	bf cf       	rjmp	.-130    	; 0x350c <csp_task_router+0xc>
    358e:	d6 01       	movw	r26, r12
    3590:	1b 96       	adiw	r26, 0x0b	; 11
    3592:	9c 91       	ld	r25, X
    3594:	1b 97       	sbiw	r26, 0x0b	; 11
    3596:	92 95       	swap	r25
    3598:	96 95       	lsr	r25
    359a:	96 95       	lsr	r25
    359c:	93 70       	andi	r25, 0x03	; 3
    359e:	1c 96       	adiw	r26, 0x0c	; 12
    35a0:	8c 91       	ld	r24, X
    35a2:	8f 70       	andi	r24, 0x0F	; 15
    35a4:	88 0f       	add	r24, r24
    35a6:	88 0f       	add	r24, r24
    35a8:	89 2b       	or	r24, r25
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0b de       	rcall	.-1002   	; 0x31c4 <csp_port_get_socket>
    35ae:	8c 01       	movw	r16, r24
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <csp_task_router+0xb6>
    35b4:	b5 c0       	rjmp	.+362    	; 0x3720 <csp_task_router+0x220>
    35b6:	fc 01       	movw	r30, r24
    35b8:	64 89       	ldd	r22, Z+20	; 0x14
    35ba:	75 89       	ldd	r23, Z+21	; 0x15
    35bc:	86 89       	ldd	r24, Z+22	; 0x16
    35be:	97 89       	ldd	r25, Z+23	; 0x17
    35c0:	70 ff       	sbrs	r23, 0
    35c2:	bd c0       	rjmp	.+378    	; 0x373e <csp_task_router+0x23e>
    35c4:	2d 81       	ldd	r18, Y+5	; 0x05
    35c6:	3e 81       	ldd	r19, Y+6	; 0x06
    35c8:	49 81       	ldd	r20, Y+1	; 0x01
    35ca:	5a 81       	ldd	r21, Y+2	; 0x02
    35cc:	6e de       	rcall	.-804    	; 0x32aa <csp_route_security_check>
    35ce:	99 23       	and	r25, r25
    35d0:	24 f4       	brge	.+8      	; 0x35da <csp_task_router+0xda>
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	11 d9       	rcall	.-3550   	; 0x27fa <csp_buffer_free>
    35d8:	99 cf       	rjmp	.-206    	; 0x350c <csp_task_router+0xc>
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	a9 01       	movw	r20, r18
    35e0:	be 01       	movw	r22, r28
    35e2:	6b 5f       	subi	r22, 0xFB	; 251
    35e4:	7f 4f       	sbci	r23, 0xFF	; 255
    35e6:	d8 01       	movw	r26, r16
    35e8:	1e 96       	adiw	r26, 0x0e	; 14
    35ea:	8d 91       	ld	r24, X+
    35ec:	9c 91       	ld	r25, X
    35ee:	1f 97       	sbiw	r26, 0x0f	; 15
    35f0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <csp_queue_enqueue>
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	09 f4       	brne	.+2      	; 0x35fa <csp_task_router+0xfa>
    35f8:	89 cf       	rjmp	.-238    	; 0x350c <csp_task_router+0xc>
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	fd d8       	rcall	.-3590   	; 0x27fa <csp_buffer_free>
    3600:	85 cf       	rjmp	.-246    	; 0x350c <csp_task_router+0xc>
    3602:	8d 81       	ldd	r24, Y+5	; 0x05
    3604:	9e 81       	ldd	r25, Y+6	; 0x06
    3606:	f9 d8       	rcall	.-3598   	; 0x27fa <csp_buffer_free>
    3608:	81 cf       	rjmp	.-254    	; 0x350c <csp_task_router+0xc>
    360a:	2d 81       	ldd	r18, Y+5	; 0x05
    360c:	3e 81       	ldd	r19, Y+6	; 0x06
    360e:	49 81       	ldd	r20, Y+1	; 0x01
    3610:	5a 81       	ldd	r21, Y+2	; 0x02
    3612:	f8 01       	movw	r30, r16
    3614:	64 89       	ldd	r22, Z+20	; 0x14
    3616:	75 89       	ldd	r23, Z+21	; 0x15
    3618:	86 89       	ldd	r24, Z+22	; 0x16
    361a:	97 89       	ldd	r25, Z+23	; 0x17
    361c:	46 de       	rcall	.-884    	; 0x32aa <csp_route_security_check>
    361e:	99 23       	and	r25, r25
    3620:	24 f4       	brge	.+8      	; 0x362a <csp_task_router+0x12a>
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	e9 d8       	rcall	.-3630   	; 0x27fa <csp_buffer_free>
    3628:	71 cf       	rjmp	.-286    	; 0x350c <csp_task_router+0xc>
    362a:	ed 81       	ldd	r30, Y+5	; 0x05
    362c:	fe 81       	ldd	r31, Y+6	; 0x06
    362e:	95 85       	ldd	r25, Z+13	; 0x0d
    3630:	89 2f       	mov	r24, r25
    3632:	80 7c       	andi	r24, 0xC0	; 192
    3634:	2f 2d       	mov	r18, r15
    3636:	2f 73       	andi	r18, 0x3F	; 63
    3638:	f2 2e       	mov	r15, r18
    363a:	f8 2a       	or	r15, r24
    363c:	80 91 6d 3d 	lds	r24, 0x3D6D
    3640:	8f 71       	andi	r24, 0x1F	; 31
    3642:	88 0f       	add	r24, r24
    3644:	2f 2d       	mov	r18, r15
    3646:	21 7c       	andi	r18, 0xC1	; 193
    3648:	f2 2e       	mov	r15, r18
    364a:	f8 2a       	or	r15, r24
    364c:	96 95       	lsr	r25
    364e:	94 fb       	bst	r25, 4
    3650:	88 27       	eor	r24, r24
    3652:	80 f9       	bld	r24, 0
    3654:	80 fb       	bst	r24, 0
    3656:	f0 f8       	bld	r15, 0
    3658:	83 85       	ldd	r24, Z+11	; 0x0b
    365a:	48 2f       	mov	r20, r24
    365c:	4f 73       	andi	r20, 0x3F	; 63
    365e:	46 95       	lsr	r20
    3660:	46 95       	lsr	r20
    3662:	92 95       	swap	r25
    3664:	90 7f       	andi	r25, 0xF0	; 240
    3666:	49 2b       	or	r20, r25
    3668:	98 2f       	mov	r25, r24
    366a:	92 95       	swap	r25
    366c:	96 95       	lsr	r25
    366e:	96 95       	lsr	r25
    3670:	93 70       	andi	r25, 0x03	; 3
    3672:	34 85       	ldd	r19, Z+12	; 0x0c
    3674:	3f 70       	andi	r19, 0x0F	; 15
    3676:	33 0f       	add	r19, r19
    3678:	33 0f       	add	r19, r19
    367a:	39 2b       	or	r19, r25
    367c:	82 95       	swap	r24
    367e:	88 0f       	add	r24, r24
    3680:	88 0f       	add	r24, r24
    3682:	80 7c       	andi	r24, 0xC0	; 192
    3684:	38 2b       	or	r19, r24
    3686:	22 85       	ldd	r18, Z+10	; 0x0a
    3688:	62 85       	ldd	r22, Z+10	; 0x0a
    368a:	73 85       	ldd	r23, Z+11	; 0x0b
    368c:	84 85       	ldd	r24, Z+12	; 0x0c
    368e:	95 85       	ldd	r25, Z+13	; 0x0d
    3690:	5f 2d       	mov	r21, r15
    3692:	20 da       	rcall	.-3008   	; 0x2ad4 <csp_conn_new>
    3694:	6c 01       	movw	r12, r24
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	21 f4       	brne	.+8      	; 0x36a2 <csp_task_router+0x1a2>
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	ad d8       	rcall	.-3750   	; 0x27fa <csp_buffer_free>
    36a0:	35 cf       	rjmp	.-406    	; 0x350c <csp_task_router+0xc>
    36a2:	d8 01       	movw	r26, r16
    36a4:	1e 96       	adiw	r26, 0x0e	; 14
    36a6:	8d 91       	ld	r24, X+
    36a8:	9c 91       	ld	r25, X
    36aa:	1f 97       	sbiw	r26, 0x0f	; 15
    36ac:	f6 01       	movw	r30, r12
    36ae:	86 87       	std	Z+14, r24	; 0x0e
    36b0:	97 87       	std	Z+15, r25	; 0x0f
    36b2:	54 96       	adiw	r26, 0x14	; 20
    36b4:	8d 91       	ld	r24, X+
    36b6:	9d 91       	ld	r25, X+
    36b8:	0d 90       	ld	r0, X+
    36ba:	bc 91       	ld	r27, X
    36bc:	a0 2d       	mov	r26, r0
    36be:	84 8b       	std	Z+20, r24	; 0x14
    36c0:	95 8b       	std	Z+21, r25	; 0x15
    36c2:	a6 8b       	std	Z+22, r26	; 0x16
    36c4:	b7 8b       	std	Z+23, r27	; 0x17
    36c6:	12 c0       	rjmp	.+36     	; 0x36ec <csp_task_router+0x1ec>
    36c8:	2d 81       	ldd	r18, Y+5	; 0x05
    36ca:	3e 81       	ldd	r19, Y+6	; 0x06
    36cc:	49 81       	ldd	r20, Y+1	; 0x01
    36ce:	5a 81       	ldd	r21, Y+2	; 0x02
    36d0:	d6 01       	movw	r26, r12
    36d2:	54 96       	adiw	r26, 0x14	; 20
    36d4:	6d 91       	ld	r22, X+
    36d6:	7d 91       	ld	r23, X+
    36d8:	8d 91       	ld	r24, X+
    36da:	9c 91       	ld	r25, X
    36dc:	57 97       	sbiw	r26, 0x17	; 23
    36de:	e5 dd       	rcall	.-1078   	; 0x32aa <csp_route_security_check>
    36e0:	99 23       	and	r25, r25
    36e2:	24 f4       	brge	.+8      	; 0x36ec <csp_task_router+0x1ec>
    36e4:	8d 81       	ldd	r24, Y+5	; 0x05
    36e6:	9e 81       	ldd	r25, Y+6	; 0x06
    36e8:	88 d8       	rcall	.-3824   	; 0x27fa <csp_buffer_free>
    36ea:	10 cf       	rjmp	.-480    	; 0x350c <csp_task_router+0xc>
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	9e 81       	ldd	r25, Y+6	; 0x06
    36f0:	fc 01       	movw	r30, r24
    36f2:	22 85       	ldd	r18, Z+10	; 0x0a
    36f4:	21 ff       	sbrs	r18, 1
    36f6:	10 c0       	rjmp	.+32     	; 0x3718 <csp_task_router+0x218>
    36f8:	e9 81       	ldd	r30, Y+1	; 0x01
    36fa:	fa 81       	ldd	r31, Y+2	; 0x02
    36fc:	46 89       	ldd	r20, Z+22	; 0x16
    36fe:	57 89       	ldd	r21, Z+23	; 0x17
    3700:	60 8d       	ldd	r22, Z+24	; 0x18
    3702:	71 8d       	ldd	r23, Z+25	; 0x19
    3704:	4f 5f       	subi	r20, 0xFF	; 255
    3706:	5f 4f       	sbci	r21, 0xFF	; 255
    3708:	6f 4f       	sbci	r22, 0xFF	; 255
    370a:	7f 4f       	sbci	r23, 0xFF	; 255
    370c:	46 8b       	std	Z+22, r20	; 0x16
    370e:	57 8b       	std	Z+23, r21	; 0x17
    3710:	60 8f       	std	Z+24, r22	; 0x18
    3712:	71 8f       	std	Z+25, r23	; 0x19
    3714:	72 d8       	rcall	.-3868   	; 0x27fa <csp_buffer_free>
    3716:	fa ce       	rjmp	.-524    	; 0x350c <csp_task_router+0xc>
    3718:	bc 01       	movw	r22, r24
    371a:	c6 01       	movw	r24, r12
    371c:	8a d3       	rcall	.+1812   	; 0x3e32 <csp_udp_new_packet>
    371e:	f6 ce       	rjmp	.-532    	; 0x350c <csp_task_router+0xc>
    3720:	ed 81       	ldd	r30, Y+5	; 0x05
    3722:	fe 81       	ldd	r31, Y+6	; 0x06
    3724:	62 85       	ldd	r22, Z+10	; 0x0a
    3726:	73 85       	ldd	r23, Z+11	; 0x0b
    3728:	84 85       	ldd	r24, Z+12	; 0x0c
    372a:	95 85       	ldd	r25, Z+13	; 0x0d
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	3f ef       	ldi	r19, 0xFF	; 255
    3730:	4f ef       	ldi	r20, 0xFF	; 255
    3732:	5f e3       	ldi	r21, 0x3F	; 63
    3734:	0f d9       	rcall	.-3554   	; 0x2954 <csp_conn_find>
    3736:	6c 01       	movw	r12, r24
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	31 f6       	brne	.-116    	; 0x36c8 <csp_task_router+0x1c8>
    373c:	62 cf       	rjmp	.-316    	; 0x3602 <csp_task_router+0x102>
    373e:	ed 81       	ldd	r30, Y+5	; 0x05
    3740:	fe 81       	ldd	r31, Y+6	; 0x06
    3742:	62 85       	ldd	r22, Z+10	; 0x0a
    3744:	73 85       	ldd	r23, Z+11	; 0x0b
    3746:	84 85       	ldd	r24, Z+12	; 0x0c
    3748:	95 85       	ldd	r25, Z+13	; 0x0d
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	3f ef       	ldi	r19, 0xFF	; 255
    374e:	4f ef       	ldi	r20, 0xFF	; 255
    3750:	5f e3       	ldi	r21, 0x3F	; 63
    3752:	00 d9       	rcall	.-3584   	; 0x2954 <csp_conn_find>
    3754:	6c 01       	movw	r12, r24
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	09 f0       	breq	.+2      	; 0x375c <csp_task_router+0x25c>
    375a:	b6 cf       	rjmp	.-148    	; 0x36c8 <csp_task_router+0x1c8>
    375c:	56 cf       	rjmp	.-340    	; 0x360a <csp_task_router+0x10a>

0000375e <csp_route_enqueue>:
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	01 15       	cp	r16, r1
    3764:	11 05       	cpc	r17, r1
    3766:	19 f4       	brne	.+6      	; 0x376e <csp_route_enqueue+0x10>
    3768:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <csp_queue_enqueue>
    376c:	03 c0       	rjmp	.+6      	; 0x3774 <csp_route_enqueue+0x16>
    376e:	a8 01       	movw	r20, r16
    3770:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <csp_queue_enqueue_isr>
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	19 f4       	brne	.+6      	; 0x377e <csp_route_enqueue+0x20>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <csp_route_enqueue+0x24>
    377e:	87 ef       	ldi	r24, 0xF7	; 247
    3780:	9f ef       	ldi	r25, 0xFF	; 255
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	08 95       	ret

00003788 <csp_new_packet>:

void csp_new_packet(csp_packet_t * packet, csp_iface_t * interface, CSP_BASE_TYPE * pxTaskWoken) {
    3788:	af 92       	push	r10
    378a:	bf 92       	push	r11
    378c:	cf 92       	push	r12
    378e:	df 92       	push	r13
    3790:	ef 92       	push	r14
    3792:	ff 92       	push	r15
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	00 d0       	rcall	.+0      	; 0x379e <csp_new_packet+0x16>
    379e:	1f 92       	push	r1
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	6c 01       	movw	r12, r24
    37a6:	7b 01       	movw	r14, r22
    37a8:	5a 01       	movw	r10, r20

	int result, fifo;

	if (packet == NULL) {
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <csp_new_packet+0x28>
    37ae:	50 c0       	rjmp	.+160    	; 0x3850 <csp_new_packet+0xc8>
		csp_log_warn("csp_new packet called with NULL packet\r\n");
		return;
	} else if (interface == NULL) {
    37b0:	61 15       	cp	r22, r1
    37b2:	71 05       	cpc	r23, r1
    37b4:	41 f4       	brne	.+16     	; 0x37c6 <csp_new_packet+0x3e>
		csp_log_warn("csp_new packet called with NULL interface\r\n");
		if (pxTaskWoken == NULL)
    37b6:	41 15       	cp	r20, r1
    37b8:	51 05       	cpc	r21, r1
    37ba:	11 f4       	brne	.+4      	; 0x37c0 <csp_new_packet+0x38>
			csp_buffer_free(packet);
    37bc:	1e d8       	rcall	.-4036   	; 0x27fa <csp_buffer_free>
    37be:	48 c0       	rjmp	.+144    	; 0x3850 <csp_new_packet+0xc8>
		else
			csp_buffer_free_isr(packet);
    37c0:	0e 94 c5 13 	call	0x278a	; 0x278a <csp_buffer_free_isr>
    37c4:	45 c0       	rjmp	.+138    	; 0x3850 <csp_new_packet+0xc8>
		return;
	}

	csp_route_queue_t queue_element;
	queue_element.interface = interface;
    37c6:	69 83       	std	Y+1, r22	; 0x01
    37c8:	7a 83       	std	Y+2, r23	; 0x02
	queue_element.outcomingPacket = packet;
    37ca:	8b 83       	std	Y+3, r24	; 0x03
    37cc:	9c 83       	std	Y+4, r25	; 0x04

	fifo = csp_route_get_fifo(packet->id.pri);
	result = csp_route_enqueue(router_input_fifo[fifo], &queue_element, 0, pxTaskWoken);
    37ce:	8a 01       	movw	r16, r20
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	a9 01       	movw	r20, r18
    37d6:	be 01       	movw	r22, r28
    37d8:	6f 5f       	subi	r22, 0xFF	; 255
    37da:	7f 4f       	sbci	r23, 0xFF	; 255
    37dc:	80 91 5a 3c 	lds	r24, 0x3C5A
    37e0:	90 91 5b 3c 	lds	r25, 0x3C5B
    37e4:	bc df       	rcall	.-136    	; 0x375e <csp_route_enqueue>

	if (result != CSP_ERR_NONE) {
    37e6:	89 2b       	or	r24, r25
    37e8:	b1 f0       	breq	.+44     	; 0x3816 <csp_new_packet+0x8e>
		csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.\r\n");
		interface->drop++;
    37ea:	f7 01       	movw	r30, r14
    37ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    37ee:	93 8d       	ldd	r25, Z+27	; 0x1b
    37f0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    37f2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	a1 1d       	adc	r26, r1
    37f8:	b1 1d       	adc	r27, r1
    37fa:	82 8f       	std	Z+26, r24	; 0x1a
    37fc:	93 8f       	std	Z+27, r25	; 0x1b
    37fe:	a4 8f       	std	Z+28, r26	; 0x1c
    3800:	b5 8f       	std	Z+29, r27	; 0x1d
		if (pxTaskWoken == NULL)
    3802:	ab 28       	or	r10, r11
    3804:	21 f4       	brne	.+8      	; 0x380e <csp_new_packet+0x86>
			csp_buffer_free(packet);
    3806:	c6 01       	movw	r24, r12
    3808:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
    380c:	21 c0       	rjmp	.+66     	; 0x3850 <csp_new_packet+0xc8>
		else
			csp_buffer_free_isr(packet);
    380e:	c6 01       	movw	r24, r12
    3810:	0e 94 c5 13 	call	0x278a	; 0x278a <csp_buffer_free_isr>
    3814:	1d c0       	rjmp	.+58     	; 0x3850 <csp_new_packet+0xc8>
	} else {
		interface->rx++;
    3816:	f7 01       	movw	r30, r14
    3818:	46 85       	ldd	r20, Z+14	; 0x0e
    381a:	57 85       	ldd	r21, Z+15	; 0x0f
    381c:	60 89       	ldd	r22, Z+16	; 0x10
    381e:	71 89       	ldd	r23, Z+17	; 0x11
    3820:	4f 5f       	subi	r20, 0xFF	; 255
    3822:	5f 4f       	sbci	r21, 0xFF	; 255
    3824:	6f 4f       	sbci	r22, 0xFF	; 255
    3826:	7f 4f       	sbci	r23, 0xFF	; 255
    3828:	46 87       	std	Z+14, r20	; 0x0e
    382a:	57 87       	std	Z+15, r21	; 0x0f
    382c:	60 8b       	std	Z+16, r22	; 0x10
    382e:	71 8b       	std	Z+17, r23	; 0x11
		interface->rxbytes += packet->length;
    3830:	f6 01       	movw	r30, r12
    3832:	20 85       	ldd	r18, Z+8	; 0x08
    3834:	31 85       	ldd	r19, Z+9	; 0x09
    3836:	f7 01       	movw	r30, r14
    3838:	82 a5       	ldd	r24, Z+42	; 0x2a
    383a:	93 a5       	ldd	r25, Z+43	; 0x2b
    383c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    383e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3840:	82 0f       	add	r24, r18
    3842:	93 1f       	adc	r25, r19
    3844:	a1 1d       	adc	r26, r1
    3846:	b1 1d       	adc	r27, r1
    3848:	82 a7       	std	Z+42, r24	; 0x2a
    384a:	93 a7       	std	Z+43, r25	; 0x2b
    384c:	a4 a7       	std	Z+44, r26	; 0x2c
    384e:	b5 a7       	std	Z+45, r27	; 0x2d
	}

}
    3850:	24 96       	adiw	r28, 0x04	; 4
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	df 90       	pop	r13
    3864:	cf 90       	pop	r12
    3866:	bf 90       	pop	r11
    3868:	af 90       	pop	r10
    386a:	08 95       	ret

0000386c <csp_route_get_nexthop_mac>:

uint8_t csp_route_get_nexthop_mac(uint8_t node) {

	csp_route_t * route = csp_route_if(node);
    386c:	2f de       	rcall	.-930    	; 0x34cc <csp_route_if>
	return route->nexthop_mac_addr;

}
    386e:	fc 01       	movw	r30, r24
    3870:	82 81       	ldd	r24, Z+2	; 0x02
    3872:	08 95       	ret

00003874 <csp_cmp_handler>:
	return CSP_ERR_NONE;

}

/* CSP Management Protocol handler */
int csp_cmp_handler(csp_conn_t * conn, csp_packet_t * packet) {
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	eb 01       	movw	r28, r22

	int ret = CSP_ERR_INVAL;
	struct csp_cmp_message * cmp = (struct csp_cmp_message *) packet->data;

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
    387e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3880:	81 11       	cpse	r24, r1
    3882:	55 c1       	rjmp	.+682    	; 0x3b2e <csp_cmp_handler+0x2ba>
		return ret;

	switch (cmp->code) {
    3884:	8f 85       	ldd	r24, Y+15	; 0x0f
    3886:	83 30       	cpi	r24, 0x03	; 3
    3888:	09 f4       	brne	.+2      	; 0x388c <csp_cmp_handler+0x18>
    388a:	6d c0       	rjmp	.+218    	; 0x3966 <csp_cmp_handler+0xf2>
    388c:	30 f4       	brcc	.+12     	; 0x389a <csp_cmp_handler+0x26>
    388e:	81 30       	cpi	r24, 0x01	; 1
    3890:	69 f0       	breq	.+26     	; 0x38ac <csp_cmp_handler+0x38>
    3892:	82 30       	cpi	r24, 0x02	; 2
    3894:	09 f4       	brne	.+2      	; 0x3898 <csp_cmp_handler+0x24>
    3896:	4f c0       	rjmp	.+158    	; 0x3936 <csp_cmp_handler+0xc2>
    3898:	45 c1       	rjmp	.+650    	; 0x3b24 <csp_cmp_handler+0x2b0>
    389a:	85 30       	cpi	r24, 0x05	; 5
    389c:	09 f4       	brne	.+2      	; 0x38a0 <csp_cmp_handler+0x2c>
    389e:	f1 c0       	rjmp	.+482    	; 0x3a82 <csp_cmp_handler+0x20e>
    38a0:	08 f4       	brcc	.+2      	; 0x38a4 <csp_cmp_handler+0x30>
    38a2:	d8 c0       	rjmp	.+432    	; 0x3a54 <csp_cmp_handler+0x1e0>
    38a4:	86 30       	cpi	r24, 0x06	; 6
    38a6:	09 f4       	brne	.+2      	; 0x38aa <csp_cmp_handler+0x36>
    38a8:	06 c1       	rjmp	.+524    	; 0x3ab6 <csp_cmp_handler+0x242>
    38aa:	3c c1       	rjmp	.+632    	; 0x3b24 <csp_cmp_handler+0x2b0>
#define CSP_RPS_MTU	196

static int do_cmp_ident(struct csp_cmp_message *cmp) {

	/* Copy revision */
	strncpy(cmp->ident.revision, GIT_REV, CSP_CMP_IDENT_REV_LEN);
    38ac:	44 e1       	ldi	r20, 0x14	; 20
    38ae:	50 e0       	ldi	r21, 0x00	; 0
    38b0:	62 e9       	ldi	r22, 0x92	; 146
    38b2:	70 e2       	ldi	r23, 0x20	; 32
    38b4:	ce 01       	movw	r24, r28
    38b6:	8e 5b       	subi	r24, 0xBE	; 190
    38b8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ba:	0e 94 a6 2b 	call	0x574c	; 0x574c <strncpy>
	cmp->ident.revision[CSP_CMP_IDENT_REV_LEN - 1] = '\0';
    38be:	fe 01       	movw	r30, r28
    38c0:	eb 5a       	subi	r30, 0xAB	; 171
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	10 82       	st	Z, r1

	/* Copy compilation date */
	strncpy(cmp->ident.date, __DATE__, CSP_CMP_IDENT_DATE_LEN);
    38c6:	8c e0       	ldi	r24, 0x0C	; 12
    38c8:	ea e9       	ldi	r30, 0x9A	; 154
    38ca:	f0 e2       	ldi	r31, 0x20	; 32
    38cc:	de 01       	movw	r26, r28
    38ce:	aa 5a       	subi	r26, 0xAA	; 170
    38d0:	bf 4f       	sbci	r27, 0xFF	; 255
    38d2:	01 90       	ld	r0, Z+
    38d4:	0d 92       	st	X+, r0
    38d6:	8a 95       	dec	r24
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <csp_cmp_handler+0x5e>
	cmp->ident.date[CSP_CMP_IDENT_DATE_LEN - 1] = '\0';
    38da:	fe 01       	movw	r30, r28
    38dc:	ef 59       	subi	r30, 0x9F	; 159
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	10 82       	st	Z, r1

	/* Copy compilation time */
	strncpy(cmp->ident.time, __TIME__, CSP_CMP_IDENT_TIME_LEN);
    38e2:	89 e0       	ldi	r24, 0x09	; 9
    38e4:	e6 ea       	ldi	r30, 0xA6	; 166
    38e6:	f0 e2       	ldi	r31, 0x20	; 32
    38e8:	de 01       	movw	r26, r28
    38ea:	ae 59       	subi	r26, 0x9E	; 158
    38ec:	bf 4f       	sbci	r27, 0xFF	; 255
    38ee:	01 90       	ld	r0, Z+
    38f0:	0d 92       	st	X+, r0
    38f2:	8a 95       	dec	r24
    38f4:	e1 f7       	brne	.-8      	; 0x38ee <csp_cmp_handler+0x7a>
	cmp->ident.time[CSP_CMP_IDENT_TIME_LEN - 1] = '\0';
    38f6:	fe 01       	movw	r30, r28
    38f8:	e6 59       	subi	r30, 0x96	; 150
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	10 82       	st	Z, r1

	/* Copy hostname */
	strncpy(cmp->ident.hostname, csp_get_hostname(), CSP_HOSTNAME_LEN);
    38fe:	70 da       	rcall	.-2848   	; 0x2de0 <csp_get_hostname>
    3900:	44 e1       	ldi	r20, 0x14	; 20
    3902:	50 e0       	ldi	r21, 0x00	; 0
    3904:	bc 01       	movw	r22, r24
    3906:	ce 01       	movw	r24, r28
    3908:	40 96       	adiw	r24, 0x10	; 16
    390a:	0e 94 a6 2b 	call	0x574c	; 0x574c <strncpy>
	cmp->ident.hostname[CSP_HOSTNAME_LEN - 1] = '\0';
    390e:	1b a2       	std	Y+35, r1	; 0x23

	/* Copy model name */
	strncpy(cmp->ident.model, csp_get_model(), CSP_MODEL_LEN);
    3910:	6c da       	rcall	.-2856   	; 0x2dea <csp_get_model>
    3912:	4e e1       	ldi	r20, 0x1E	; 30
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	bc 01       	movw	r22, r24
    3918:	ce 01       	movw	r24, r28
    391a:	84 96       	adiw	r24, 0x24	; 36
    391c:	0e 94 a6 2b 	call	0x574c	; 0x574c <strncpy>
	cmp->ident.model[CSP_MODEL_LEN - 1] = '\0';
    3920:	fe 01       	movw	r30, r28
    3922:	ef 5b       	subi	r30, 0xBF	; 191
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	10 82       	st	Z, r1
		return ret;

	switch (cmp->code) {
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
			packet->length = CMP_SIZE(ident);
    3928:	8d e5       	ldi	r24, 0x5D	; 93
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	88 87       	std	Y+8, r24	; 0x08
    392e:	99 87       	std	Y+9, r25	; 0x09
	if (cmp->type != CSP_CMP_REQUEST)
		return ret;

	switch (cmp->code) {
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	90 e0       	ldi	r25, 0x00	; 0
			packet->length = CMP_SIZE(ident);
			break;
    3934:	f9 c0       	rjmp	.+498    	; 0x3b28 <csp_cmp_handler+0x2b4>

}

static int do_cmp_route_set(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->route_set.interface);
    3936:	cb 01       	movw	r24, r22
    3938:	42 96       	adiw	r24, 0x12	; 18
    393a:	30 dd       	rcall	.-1440   	; 0x339c <csp_route_get_if_by_name>
	if (ifc == NULL)
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	49 f0       	breq	.+18     	; 0x3952 <csp_cmp_handler+0xde>
		return CSP_ERR_INVAL;

	if (csp_route_set(cmp->route_set.dest_node, ifc, cmp->route_set.next_hop_mac) != CSP_ERR_NONE)
    3940:	49 89       	ldd	r20, Y+17	; 0x11
    3942:	bc 01       	movw	r22, r24
    3944:	88 89       	ldd	r24, Y+16	; 0x10
    3946:	72 dd       	rcall	.-1308   	; 0x342c <csp_route_set>
    3948:	89 2b       	or	r24, r25
    394a:	31 f0       	breq	.+12     	; 0x3958 <csp_cmp_handler+0xe4>
		return CSP_ERR_INVAL;
    394c:	8e ef       	ldi	r24, 0xFE	; 254
    394e:	9f ef       	ldi	r25, 0xFF	; 255
    3950:	05 c0       	rjmp	.+10     	; 0x395c <csp_cmp_handler+0xe8>

static int do_cmp_route_set(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->route_set.interface);
	if (ifc == NULL)
		return CSP_ERR_INVAL;
    3952:	8e ef       	ldi	r24, 0xFE	; 254
    3954:	9f ef       	ldi	r25, 0xFF	; 255
    3956:	02 c0       	rjmp	.+4      	; 0x395c <csp_cmp_handler+0xe8>

	if (csp_route_set(cmp->route_set.dest_node, ifc, cmp->route_set.next_hop_mac) != CSP_ERR_NONE)
		return CSP_ERR_INVAL;

	return CSP_ERR_NONE;
    3958:	80 e0       	ldi	r24, 0x00	; 0
    395a:	90 e0       	ldi	r25, 0x00	; 0
			packet->length = CMP_SIZE(ident);
			break;

		case CSP_CMP_ROUTE_SET:
			ret = do_cmp_route_set(cmp);
			packet->length = CMP_SIZE(route_set);
    395c:	2f e0       	ldi	r18, 0x0F	; 15
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	28 87       	std	Y+8, r18	; 0x08
    3962:	39 87       	std	Y+9, r19	; 0x09
			break;
    3964:	e1 c0       	rjmp	.+450    	; 0x3b28 <csp_cmp_handler+0x2b4>

}

static int do_cmp_if_stats(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->if_stats.interface);
    3966:	cb 01       	movw	r24, r22
    3968:	40 96       	adiw	r24, 0x10	; 16
    396a:	18 dd       	rcall	.-1488   	; 0x339c <csp_route_get_if_by_name>
    396c:	8c 01       	movw	r16, r24
	if (ifc == NULL)
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	09 f4       	brne	.+2      	; 0x3974 <csp_cmp_handler+0x100>
    3972:	69 c0       	rjmp	.+210    	; 0x3a46 <csp_cmp_handler+0x1d2>
		return CSP_ERR_INVAL;

	cmp->if_stats.tx =       csp_hton32(ifc->tx);
    3974:	fc 01       	movw	r30, r24
    3976:	62 85       	ldd	r22, Z+10	; 0x0a
    3978:	73 85       	ldd	r23, Z+11	; 0x0b
    397a:	84 85       	ldd	r24, Z+12	; 0x0c
    397c:	95 85       	ldd	r25, Z+13	; 0x0d
    397e:	c6 d9       	rcall	.-3188   	; 0x2d0c <csp_hton32>
    3980:	6b 8f       	std	Y+27, r22	; 0x1b
    3982:	7c 8f       	std	Y+28, r23	; 0x1c
    3984:	8d 8f       	std	Y+29, r24	; 0x1d
    3986:	9e 8f       	std	Y+30, r25	; 0x1e
	cmp->if_stats.rx =       csp_hton32(ifc->rx);
    3988:	f8 01       	movw	r30, r16
    398a:	66 85       	ldd	r22, Z+14	; 0x0e
    398c:	77 85       	ldd	r23, Z+15	; 0x0f
    398e:	80 89       	ldd	r24, Z+16	; 0x10
    3990:	91 89       	ldd	r25, Z+17	; 0x11
    3992:	bc d9       	rcall	.-3208   	; 0x2d0c <csp_hton32>
    3994:	6f 8f       	std	Y+31, r22	; 0x1f
    3996:	78 a3       	std	Y+32, r23	; 0x20
    3998:	89 a3       	std	Y+33, r24	; 0x21
    399a:	9a a3       	std	Y+34, r25	; 0x22
	cmp->if_stats.tx_error = csp_hton32(ifc->tx_error);
    399c:	f8 01       	movw	r30, r16
    399e:	62 89       	ldd	r22, Z+18	; 0x12
    39a0:	73 89       	ldd	r23, Z+19	; 0x13
    39a2:	84 89       	ldd	r24, Z+20	; 0x14
    39a4:	95 89       	ldd	r25, Z+21	; 0x15
    39a6:	b2 d9       	rcall	.-3228   	; 0x2d0c <csp_hton32>
    39a8:	6b a3       	std	Y+35, r22	; 0x23
    39aa:	7c a3       	std	Y+36, r23	; 0x24
    39ac:	8d a3       	std	Y+37, r24	; 0x25
    39ae:	9e a3       	std	Y+38, r25	; 0x26
	cmp->if_stats.rx_error = csp_hton32(ifc->rx_error);
    39b0:	f8 01       	movw	r30, r16
    39b2:	66 89       	ldd	r22, Z+22	; 0x16
    39b4:	77 89       	ldd	r23, Z+23	; 0x17
    39b6:	80 8d       	ldd	r24, Z+24	; 0x18
    39b8:	91 8d       	ldd	r25, Z+25	; 0x19
    39ba:	a8 d9       	rcall	.-3248   	; 0x2d0c <csp_hton32>
    39bc:	6f a3       	std	Y+39, r22	; 0x27
    39be:	78 a7       	std	Y+40, r23	; 0x28
    39c0:	89 a7       	std	Y+41, r24	; 0x29
    39c2:	9a a7       	std	Y+42, r25	; 0x2a
	cmp->if_stats.drop =     csp_hton32(ifc->drop);
    39c4:	f8 01       	movw	r30, r16
    39c6:	62 8d       	ldd	r22, Z+26	; 0x1a
    39c8:	73 8d       	ldd	r23, Z+27	; 0x1b
    39ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    39cc:	95 8d       	ldd	r25, Z+29	; 0x1d
    39ce:	9e d9       	rcall	.-3268   	; 0x2d0c <csp_hton32>
    39d0:	6b a7       	std	Y+43, r22	; 0x2b
    39d2:	7c a7       	std	Y+44, r23	; 0x2c
    39d4:	8d a7       	std	Y+45, r24	; 0x2d
    39d6:	9e a7       	std	Y+46, r25	; 0x2e
	cmp->if_stats.autherr =  csp_hton32(ifc->autherr);
    39d8:	f8 01       	movw	r30, r16
    39da:	66 8d       	ldd	r22, Z+30	; 0x1e
    39dc:	77 8d       	ldd	r23, Z+31	; 0x1f
    39de:	80 a1       	ldd	r24, Z+32	; 0x20
    39e0:	91 a1       	ldd	r25, Z+33	; 0x21
    39e2:	94 d9       	rcall	.-3288   	; 0x2d0c <csp_hton32>
    39e4:	6f a7       	std	Y+47, r22	; 0x2f
    39e6:	78 ab       	std	Y+48, r23	; 0x30
    39e8:	89 ab       	std	Y+49, r24	; 0x31
    39ea:	9a ab       	std	Y+50, r25	; 0x32
	cmp->if_stats.frame =    csp_hton32(ifc->frame);
    39ec:	f8 01       	movw	r30, r16
    39ee:	62 a1       	ldd	r22, Z+34	; 0x22
    39f0:	73 a1       	ldd	r23, Z+35	; 0x23
    39f2:	84 a1       	ldd	r24, Z+36	; 0x24
    39f4:	95 a1       	ldd	r25, Z+37	; 0x25
    39f6:	8a d9       	rcall	.-3308   	; 0x2d0c <csp_hton32>
    39f8:	6b ab       	std	Y+51, r22	; 0x33
    39fa:	7c ab       	std	Y+52, r23	; 0x34
    39fc:	8d ab       	std	Y+53, r24	; 0x35
    39fe:	9e ab       	std	Y+54, r25	; 0x36
	cmp->if_stats.txbytes =  csp_hton32(ifc->txbytes);
    3a00:	f8 01       	movw	r30, r16
    3a02:	66 a1       	ldd	r22, Z+38	; 0x26
    3a04:	77 a1       	ldd	r23, Z+39	; 0x27
    3a06:	80 a5       	ldd	r24, Z+40	; 0x28
    3a08:	91 a5       	ldd	r25, Z+41	; 0x29
    3a0a:	80 d9       	rcall	.-3328   	; 0x2d0c <csp_hton32>
    3a0c:	6f ab       	std	Y+55, r22	; 0x37
    3a0e:	78 af       	std	Y+56, r23	; 0x38
    3a10:	89 af       	std	Y+57, r24	; 0x39
    3a12:	9a af       	std	Y+58, r25	; 0x3a
	cmp->if_stats.rxbytes =  csp_hton32(ifc->rxbytes);
    3a14:	f8 01       	movw	r30, r16
    3a16:	62 a5       	ldd	r22, Z+42	; 0x2a
    3a18:	73 a5       	ldd	r23, Z+43	; 0x2b
    3a1a:	84 a5       	ldd	r24, Z+44	; 0x2c
    3a1c:	95 a5       	ldd	r25, Z+45	; 0x2d
    3a1e:	76 d9       	rcall	.-3348   	; 0x2d0c <csp_hton32>
    3a20:	6b af       	std	Y+59, r22	; 0x3b
    3a22:	7c af       	std	Y+60, r23	; 0x3c
    3a24:	8d af       	std	Y+61, r24	; 0x3d
    3a26:	9e af       	std	Y+62, r25	; 0x3e
	cmp->if_stats.irq = 	 csp_hton32(ifc->irq);
    3a28:	f8 01       	movw	r30, r16
    3a2a:	66 a5       	ldd	r22, Z+46	; 0x2e
    3a2c:	77 a5       	ldd	r23, Z+47	; 0x2f
    3a2e:	80 a9       	ldd	r24, Z+48	; 0x30
    3a30:	91 a9       	ldd	r25, Z+49	; 0x31
    3a32:	6c d9       	rcall	.-3368   	; 0x2d0c <csp_hton32>
    3a34:	fe 01       	movw	r30, r28
    3a36:	ff 96       	adiw	r30, 0x3f	; 63
    3a38:	60 83       	st	Z, r22
    3a3a:	71 83       	std	Z+1, r23	; 0x01
    3a3c:	82 83       	std	Z+2, r24	; 0x02
    3a3e:	93 83       	std	Z+3, r25	; 0x03

	return CSP_ERR_NONE;
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <csp_cmp_handler+0x1d6>

static int do_cmp_if_stats(struct csp_cmp_message *cmp) {

	csp_iface_t *ifc = csp_route_get_if_by_name(cmp->if_stats.interface);
	if (ifc == NULL)
		return CSP_ERR_INVAL;
    3a46:	8e ef       	ldi	r24, 0xFE	; 254
    3a48:	9f ef       	ldi	r25, 0xFF	; 255
			packet->length = CMP_SIZE(route_set);
			break;

		case CSP_CMP_IF_STATS:
			ret = do_cmp_if_stats(cmp);
			packet->length = CMP_SIZE(if_stats);
    3a4a:	25 e3       	ldi	r18, 0x35	; 53
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	28 87       	std	Y+8, r18	; 0x08
    3a50:	39 87       	std	Y+9, r19	; 0x09
			break;
    3a52:	6a c0       	rjmp	.+212    	; 0x3b28 <csp_cmp_handler+0x2b4>
	return CSP_ERR_NONE;
}

static int do_cmp_peek(struct csp_cmp_message *cmp) {

	cmp->peek.addr = csp_hton32(cmp->peek.addr);
    3a54:	68 89       	ldd	r22, Y+16	; 0x10
    3a56:	79 89       	ldd	r23, Y+17	; 0x11
    3a58:	8a 89       	ldd	r24, Y+18	; 0x12
    3a5a:	9b 89       	ldd	r25, Y+19	; 0x13
    3a5c:	57 d9       	rcall	.-3410   	; 0x2d0c <csp_hton32>
    3a5e:	68 8b       	std	Y+16, r22	; 0x10
    3a60:	79 8b       	std	Y+17, r23	; 0x11
    3a62:	8a 8b       	std	Y+18, r24	; 0x12
    3a64:	9b 8b       	std	Y+19, r25	; 0x13
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
    3a66:	4c 89       	ldd	r20, Y+20	; 0x14
    3a68:	49 3c       	cpi	r20, 0xC9	; 201
    3a6a:	40 f4       	brcc	.+16     	; 0x3a7c <csp_cmp_handler+0x208>
		return CSP_ERR_INVAL;

	/* Dangerous, you better know what you are doing */
	memcpy(cmp->peek.data, (void *) (uintptr_t) cmp->peek.addr, cmp->peek.len);
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	ce 01       	movw	r24, r28
    3a70:	45 96       	adiw	r24, 0x15	; 21
    3a72:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>

	return CSP_ERR_NONE;
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	56 c0       	rjmp	.+172    	; 0x3b28 <csp_cmp_handler+0x2b4>

static int do_cmp_peek(struct csp_cmp_message *cmp) {

	cmp->peek.addr = csp_hton32(cmp->peek.addr);
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
		return CSP_ERR_INVAL;
    3a7c:	8e ef       	ldi	r24, 0xFE	; 254
    3a7e:	9f ef       	ldi	r25, 0xFF	; 255
			packet->length = CMP_SIZE(if_stats);
			break;

		case CSP_CMP_PEEK:
			ret = do_cmp_peek(cmp);
			break;
    3a80:	53 c0       	rjmp	.+166    	; 0x3b28 <csp_cmp_handler+0x2b4>

}

static int do_cmp_poke(struct csp_cmp_message *cmp) {

	cmp->poke.addr = csp_hton32(cmp->poke.addr);
    3a82:	68 89       	ldd	r22, Y+16	; 0x10
    3a84:	79 89       	ldd	r23, Y+17	; 0x11
    3a86:	8a 89       	ldd	r24, Y+18	; 0x12
    3a88:	9b 89       	ldd	r25, Y+19	; 0x13
    3a8a:	40 d9       	rcall	.-3456   	; 0x2d0c <csp_hton32>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	88 8b       	std	Y+16, r24	; 0x10
    3a92:	99 8b       	std	Y+17, r25	; 0x11
    3a94:	aa 8b       	std	Y+18, r26	; 0x12
    3a96:	bb 8b       	std	Y+19, r27	; 0x13
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
    3a98:	4c 89       	ldd	r20, Y+20	; 0x14
    3a9a:	49 3c       	cpi	r20, 0xC9	; 201
    3a9c:	48 f4       	brcc	.+18     	; 0x3ab0 <csp_cmp_handler+0x23c>
		return CSP_ERR_INVAL;

	/* Extremely dangerous, you better know what you are doing */
	memcpy((void *) (uintptr_t) cmp->poke.addr, cmp->poke.data, cmp->poke.len);
    3a9e:	50 e0       	ldi	r21, 0x00	; 0
    3aa0:	be 01       	movw	r22, r28
    3aa2:	6b 5e       	subi	r22, 0xEB	; 235
    3aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa6:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>

	return CSP_ERR_NONE;
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	3c c0       	rjmp	.+120    	; 0x3b28 <csp_cmp_handler+0x2b4>

static int do_cmp_poke(struct csp_cmp_message *cmp) {

	cmp->poke.addr = csp_hton32(cmp->poke.addr);
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
		return CSP_ERR_INVAL;
    3ab0:	8e ef       	ldi	r24, 0xFE	; 254
    3ab2:	9f ef       	ldi	r25, 0xFF	; 255
			ret = do_cmp_peek(cmp);
			break;

		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
			break;
    3ab4:	39 c0       	rjmp	.+114    	; 0x3b28 <csp_cmp_handler+0x2b4>

}

static int do_cmp_clock(struct csp_cmp_message *cmp) {

	cmp->clock.tv_sec = csp_ntoh32(cmp->clock.tv_sec);
    3ab6:	68 89       	ldd	r22, Y+16	; 0x10
    3ab8:	79 89       	ldd	r23, Y+17	; 0x11
    3aba:	8a 89       	ldd	r24, Y+18	; 0x12
    3abc:	9b 89       	ldd	r25, Y+19	; 0x13
    3abe:	5b d9       	rcall	.-3402   	; 0x2d76 <csp_ntoh32>
    3ac0:	68 8b       	std	Y+16, r22	; 0x10
    3ac2:	79 8b       	std	Y+17, r23	; 0x11
    3ac4:	8a 8b       	std	Y+18, r24	; 0x12
    3ac6:	9b 8b       	std	Y+19, r25	; 0x13
	cmp->clock.tv_nsec = csp_ntoh32(cmp->clock.tv_nsec);
    3ac8:	6c 89       	ldd	r22, Y+20	; 0x14
    3aca:	7d 89       	ldd	r23, Y+21	; 0x15
    3acc:	8e 89       	ldd	r24, Y+22	; 0x16
    3ace:	9f 89       	ldd	r25, Y+23	; 0x17
    3ad0:	52 d9       	rcall	.-3420   	; 0x2d76 <csp_ntoh32>
    3ad2:	6c 8b       	std	Y+20, r22	; 0x14
    3ad4:	7d 8b       	std	Y+21, r23	; 0x15
    3ad6:	8e 8b       	std	Y+22, r24	; 0x16
    3ad8:	9f 8b       	std	Y+23, r25	; 0x17

	if (cmp->clock.tv_sec != 0) {
    3ada:	88 89       	ldd	r24, Y+16	; 0x10
    3adc:	99 89       	ldd	r25, Y+17	; 0x11
    3ade:	aa 89       	ldd	r26, Y+18	; 0x12
    3ae0:	bb 89       	ldd	r27, Y+19	; 0x13
    3ae2:	89 2b       	or	r24, r25
    3ae4:	8a 2b       	or	r24, r26
    3ae6:	8b 2b       	or	r24, r27
    3ae8:	21 f0       	breq	.+8      	; 0x3af2 <csp_cmp_handler+0x27e>
		clock_set_time(&cmp->clock);
    3aea:	ce 01       	movw	r24, r28
    3aec:	40 96       	adiw	r24, 0x10	; 16
    3aee:	0e 94 8f 04 	call	0x91e	; 0x91e <clock_set_time>
	}

	clock_get_time(&cmp->clock);
    3af2:	ce 01       	movw	r24, r28
    3af4:	40 96       	adiw	r24, 0x10	; 16
    3af6:	0e 94 8e 04 	call	0x91c	; 0x91c <clock_get_time>
	cmp->clock.tv_sec = csp_hton32(cmp->clock.tv_sec);
    3afa:	68 89       	ldd	r22, Y+16	; 0x10
    3afc:	79 89       	ldd	r23, Y+17	; 0x11
    3afe:	8a 89       	ldd	r24, Y+18	; 0x12
    3b00:	9b 89       	ldd	r25, Y+19	; 0x13
    3b02:	04 d9       	rcall	.-3576   	; 0x2d0c <csp_hton32>
    3b04:	68 8b       	std	Y+16, r22	; 0x10
    3b06:	79 8b       	std	Y+17, r23	; 0x11
    3b08:	8a 8b       	std	Y+18, r24	; 0x12
    3b0a:	9b 8b       	std	Y+19, r25	; 0x13
	cmp->clock.tv_nsec = csp_hton32(cmp->clock.tv_nsec);
    3b0c:	6c 89       	ldd	r22, Y+20	; 0x14
    3b0e:	7d 89       	ldd	r23, Y+21	; 0x15
    3b10:	8e 89       	ldd	r24, Y+22	; 0x16
    3b12:	9f 89       	ldd	r25, Y+23	; 0x17
    3b14:	fb d8       	rcall	.-3594   	; 0x2d0c <csp_hton32>
    3b16:	6c 8b       	std	Y+20, r22	; 0x14
    3b18:	7d 8b       	std	Y+21, r23	; 0x15
    3b1a:	8e 8b       	std	Y+22, r24	; 0x16
    3b1c:	9f 8b       	std	Y+23, r25	; 0x17
		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
			break;

		case CSP_CMP_CLOCK:
			ret = do_cmp_clock(cmp);
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
			break;
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <csp_cmp_handler+0x2b4>

		default:
			ret = CSP_ERR_INVAL;
    3b24:	8e ef       	ldi	r24, 0xFE	; 254
    3b26:	9f ef       	ldi	r25, 0xFF	; 255
			break;
	}

	cmp->type = CSP_CMP_REPLY;
    3b28:	2f ef       	ldi	r18, 0xFF	; 255
    3b2a:	2e 87       	std	Y+14, r18	; 0x0e

	return ret;
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <csp_cmp_handler+0x2be>
	int ret = CSP_ERR_INVAL;
	struct csp_cmp_message * cmp = (struct csp_cmp_message *) packet->data;

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
		return ret;
    3b2e:	8e ef       	ldi	r24, 0xFE	; 254
    3b30:	9f ef       	ldi	r25, 0xFF	; 255
	}

	cmp->type = CSP_CMP_REPLY;

	return ret;
}
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	08 95       	ret

00003b3c <csp_service_handler>:

void csp_service_handler(csp_conn_t * conn, csp_packet_t * packet) {
    3b3c:	af 92       	push	r10
    3b3e:	bf 92       	push	r11
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	ff 92       	push	r15
    3b48:	0f 93       	push	r16
    3b4a:	1f 93       	push	r17
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	8c 01       	movw	r16, r24
    3b52:	eb 01       	movw	r28, r22

	switch (csp_conn_dport(conn)) {
    3b54:	12 d8       	rcall	.-4060   	; 0x2b7a <csp_conn_dport>
    3b56:	87 30       	cpi	r24, 0x07	; 7
    3b58:	91 05       	cpc	r25, r1
    3b5a:	08 f0       	brcs	.+2      	; 0x3b5e <csp_service_handler+0x22>
    3b5c:	90 c0       	rjmp	.+288    	; 0x3c7e <csp_service_handler+0x142>
    3b5e:	fc 01       	movw	r30, r24
    3b60:	e2 50       	subi	r30, 0x02	; 2
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	0c 94 06 2a 	jmp	0x540c	; 0x540c <__tablejump2__>

	case CSP_CMP:
		/* Pass to CMP handler */
		if (csp_cmp_handler(conn, packet) != CSP_ERR_NONE) {
    3b68:	be 01       	movw	r22, r28
    3b6a:	c8 01       	movw	r24, r16
    3b6c:	83 de       	rcall	.-762    	; 0x3874 <csp_cmp_handler>
    3b6e:	89 2b       	or	r24, r25
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <csp_service_handler+0x38>
    3b72:	89 c0       	rjmp	.+274    	; 0x3c86 <csp_service_handler+0x14a>
			csp_buffer_free(packet);
    3b74:	ce 01       	movw	r24, r28
    3b76:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
			return;
    3b7a:	92 c0       	rjmp	.+292    	; 0x3ca0 <csp_service_handler+0x164>
		break;

	case CSP_PS: {

		/* Start by allocating just the right amount of memory */
		int task_list_size = csp_sys_tasklist_size();
    3b7c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <csp_sys_tasklist_size>
    3b80:	7c 01       	movw	r14, r24
		char * pslist = csp_malloc(task_list_size);
    3b82:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <csp_malloc>
    3b86:	5c 01       	movw	r10, r24

		/* Retrieve the tasklist */
		csp_sys_tasklist(pslist);
    3b88:	0e 94 54 12 	call	0x24a8	; 0x24a8 <csp_sys_tasklist>
		int pslen = strnlen(pslist, task_list_size);
    3b8c:	b7 01       	movw	r22, r14
    3b8e:	c5 01       	movw	r24, r10
    3b90:	0e 94 b5 2b 	call	0x576a	; 0x576a <strnlen>
    3b94:	6c 01       	movw	r12, r24

		/* Split the potentially very long string into packets */
		int i = 0;
		while(i < pslen) {
    3b96:	18 16       	cp	r1, r24
    3b98:	19 06       	cpc	r1, r25
    3b9a:	0c f0       	brlt	.+2      	; 0x3b9e <csp_service_handler+0x62>
    3b9c:	74 c0       	rjmp	.+232    	; 0x3c86 <csp_service_handler+0x14a>
		/* Retrieve the tasklist */
		csp_sys_tasklist(pslist);
		int pslen = strnlen(pslist, task_list_size);

		/* Split the potentially very long string into packets */
		int i = 0;
    3b9e:	e1 2c       	mov	r14, r1
    3ba0:	f1 2c       	mov	r15, r1
		while(i < pslen) {

			/* Allocate packet buffer, if need be */
			if (packet == NULL)
    3ba2:	20 97       	sbiw	r28, 0x00	; 0
    3ba4:	41 f4       	brne	.+16     	; 0x3bb6 <csp_service_handler+0x7a>
				packet = csp_buffer_get(CSP_RPS_MTU);
    3ba6:	84 ec       	ldi	r24, 0xC4	; 196
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 8b 13 	call	0x2716	; 0x2716 <csp_buffer_get>
    3bae:	ec 01       	movw	r28, r24
			if (packet == NULL)
    3bb0:	00 97       	sbiw	r24, 0x00	; 0
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <csp_service_handler+0x7a>
    3bb4:	75 c0       	rjmp	.+234    	; 0x3ca0 <csp_service_handler+0x164>
				break;

			/* Calculate length, either full MTU or the remainder */
			packet->length = (pslen - i > CSP_RPS_MTU) ? CSP_RPS_MTU : (pslen - i);
    3bb6:	a6 01       	movw	r20, r12
    3bb8:	4e 19       	sub	r20, r14
    3bba:	5f 09       	sbc	r21, r15
    3bbc:	45 3c       	cpi	r20, 0xC5	; 197
    3bbe:	51 05       	cpc	r21, r1
    3bc0:	14 f0       	brlt	.+4      	; 0x3bc6 <csp_service_handler+0x8a>
    3bc2:	44 ec       	ldi	r20, 0xC4	; 196
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	48 87       	std	Y+8, r20	; 0x08
    3bc8:	59 87       	std	Y+9, r21	; 0x09

			/* Send out the data */
			memcpy(packet->data, &pslist[i], packet->length);
    3bca:	b5 01       	movw	r22, r10
    3bcc:	6e 0d       	add	r22, r14
    3bce:	7f 1d       	adc	r23, r15
    3bd0:	ce 01       	movw	r24, r28
    3bd2:	0e 96       	adiw	r24, 0x0e	; 14
    3bd4:	0e 94 76 2b 	call	0x56ec	; 0x56ec <memcpy>
			i += packet->length;
    3bd8:	88 85       	ldd	r24, Y+8	; 0x08
    3bda:	99 85       	ldd	r25, Y+9	; 0x09
    3bdc:	e8 0e       	add	r14, r24
    3bde:	f9 1e       	adc	r15, r25
			if (!csp_send(conn, packet, 0))
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	a9 01       	movw	r20, r18
    3be6:	be 01       	movw	r22, r28
    3be8:	c8 01       	movw	r24, r16
    3bea:	51 da       	rcall	.-2910   	; 0x308e <csp_send>
    3bec:	89 2b       	or	r24, r25
    3bee:	19 f4       	brne	.+6      	; 0x3bf6 <csp_service_handler+0xba>
				csp_buffer_free(packet);
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
		csp_sys_tasklist(pslist);
		int pslen = strnlen(pslist, task_list_size);

		/* Split the potentially very long string into packets */
		int i = 0;
		while(i < pslen) {
    3bf6:	ec 14       	cp	r14, r12
    3bf8:	fd 04       	cpc	r15, r13
    3bfa:	0c f0       	brlt	.+2      	; 0x3bfe <csp_service_handler+0xc2>
    3bfc:	51 c0       	rjmp	.+162    	; 0x3ca0 <csp_service_handler+0x164>
    3bfe:	c0 e0       	ldi	r28, 0x00	; 0
    3c00:	d0 e0       	ldi	r29, 0x00	; 0
    3c02:	cf cf       	rjmp	.-98     	; 0x3ba2 <csp_service_handler+0x66>
		}
		break;
	}

	case CSP_MEMFREE: {
		uint32_t total = csp_sys_memfree();
    3c04:	0e 94 5e 12 	call	0x24bc	; 0x24bc <csp_sys_memfree>

		total = csp_hton32(total);
    3c08:	81 d8       	rcall	.-3838   	; 0x2d0c <csp_hton32>
		memcpy(packet->data, &total, sizeof(total));
    3c0a:	6e 87       	std	Y+14, r22	; 0x0e
    3c0c:	7f 87       	std	Y+15, r23	; 0x0f
    3c0e:	88 8b       	std	Y+16, r24	; 0x10
    3c10:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(total);
    3c12:	84 e0       	ldi	r24, 0x04	; 4
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	88 87       	std	Y+8, r24	; 0x08
    3c18:	99 87       	std	Y+9, r25	; 0x09
    3c1a:	35 c0       	rjmp	.+106    	; 0x3c86 <csp_service_handler+0x14a>

	case CSP_REBOOT: {
		uint32_t magic_word;
		memcpy(&magic_word, packet->data, sizeof(magic_word));

		magic_word = csp_ntoh32(magic_word);
    3c1c:	6e 85       	ldd	r22, Y+14	; 0x0e
    3c1e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3c20:	88 89       	ldd	r24, Y+16	; 0x10
    3c22:	99 89       	ldd	r25, Y+17	; 0x11
    3c24:	a8 d8       	rcall	.-3760   	; 0x2d76 <csp_ntoh32>

		/* If the magic word is invalid, return */
		if (magic_word != 0x80078007) {
    3c26:	67 30       	cpi	r22, 0x07	; 7
    3c28:	70 48       	sbci	r23, 0x80	; 128
    3c2a:	87 40       	sbci	r24, 0x07	; 7
    3c2c:	90 48       	sbci	r25, 0x80	; 128
    3c2e:	21 f0       	breq	.+8      	; 0x3c38 <csp_service_handler+0xfc>
			csp_buffer_free(packet);
    3c30:	ce 01       	movw	r24, r28
    3c32:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
			return;
    3c36:	34 c0       	rjmp	.+104    	; 0x3ca0 <csp_service_handler+0x164>
		}

		/* Otherwise Reboot */
		csp_sys_reboot();
    3c38:	0e 94 b5 12 	call	0x256a	; 0x256a <csp_sys_reboot>
		
		csp_buffer_free(packet);
    3c3c:	ce 01       	movw	r24, r28
    3c3e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
		return;
    3c42:	2e c0       	rjmp	.+92     	; 0x3ca0 <csp_service_handler+0x164>
	}

	case CSP_BUF_FREE: {
		uint32_t size = csp_buffer_remaining();
    3c44:	0e 94 34 14 	call	0x2868	; 0x2868 <csp_buffer_remaining>
    3c48:	bc 01       	movw	r22, r24
    3c4a:	88 27       	eor	r24, r24
    3c4c:	77 fd       	sbrc	r23, 7
    3c4e:	80 95       	com	r24
    3c50:	98 2f       	mov	r25, r24
		size = csp_hton32(size);
    3c52:	5c d8       	rcall	.-3912   	; 0x2d0c <csp_hton32>
		memcpy(packet->data, &size, sizeof(size));
    3c54:	6e 87       	std	Y+14, r22	; 0x0e
    3c56:	7f 87       	std	Y+15, r23	; 0x0f
    3c58:	88 8b       	std	Y+16, r24	; 0x10
    3c5a:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(size);
    3c5c:	84 e0       	ldi	r24, 0x04	; 4
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	88 87       	std	Y+8, r24	; 0x08
    3c62:	99 87       	std	Y+9, r25	; 0x09
    3c64:	10 c0       	rjmp	.+32     	; 0x3c86 <csp_service_handler+0x14a>
		break;
	}

	case CSP_UPTIME: {
		uint32_t time = csp_get_s();
    3c66:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <csp_get_s>
		time = csp_hton32(time);
    3c6a:	50 d8       	rcall	.-3936   	; 0x2d0c <csp_hton32>
		memcpy(packet->data, &time, sizeof(time));
    3c6c:	6e 87       	std	Y+14, r22	; 0x0e
    3c6e:	7f 87       	std	Y+15, r23	; 0x0f
    3c70:	88 8b       	std	Y+16, r24	; 0x10
    3c72:	99 8b       	std	Y+17, r25	; 0x11
		packet->length = sizeof(time);
    3c74:	84 e0       	ldi	r24, 0x04	; 4
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	88 87       	std	Y+8, r24	; 0x08
    3c7a:	99 87       	std	Y+9, r25	; 0x09
    3c7c:	04 c0       	rjmp	.+8      	; 0x3c86 <csp_service_handler+0x14a>
		break;
	}

	default:
		csp_buffer_free(packet);
    3c7e:	ce 01       	movw	r24, r28
    3c80:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
		return;
    3c84:	0d c0       	rjmp	.+26     	; 0x3ca0 <csp_service_handler+0x164>
	}

	if (packet != NULL) {
    3c86:	20 97       	sbiw	r28, 0x00	; 0
    3c88:	59 f0       	breq	.+22     	; 0x3ca0 <csp_service_handler+0x164>
		if (!csp_send(conn, packet, 0))
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	a9 01       	movw	r20, r18
    3c90:	be 01       	movw	r22, r28
    3c92:	c8 01       	movw	r24, r16
    3c94:	fc d9       	rcall	.-3080   	; 0x308e <csp_send>
    3c96:	89 2b       	or	r24, r25
    3c98:	19 f4       	brne	.+6      	; 0x3ca0 <csp_service_handler+0x164>
			csp_buffer_free(packet);
    3c9a:	ce 01       	movw	r24, r28
    3c9c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
	}

}
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	ff 90       	pop	r15
    3caa:	ef 90       	pop	r14
    3cac:	df 90       	pop	r13
    3cae:	cf 90       	pop	r12
    3cb0:	bf 90       	pop	r11
    3cb2:	af 90       	pop	r10
    3cb4:	08 95       	ret

00003cb6 <csp_i2c_tx>:
#include <csp/csp_interface.h>
#include <csp/csp_error.h>
#include <csp/interfaces/csp_if_i2c.h>
#include <csp/drivers/i2c.h>

int csp_i2c_tx(csp_iface_t * interface, csp_packet_t * packet, uint32_t timeout) {
    3cb6:	cf 92       	push	r12
    3cb8:	df 92       	push	r13
    3cba:	ef 92       	push	r14
    3cbc:	ff 92       	push	r15
    3cbe:	cf 93       	push	r28
    3cc0:	df 93       	push	r29
    3cc2:	eb 01       	movw	r28, r22
    3cc4:	69 01       	movw	r12, r18
    3cc6:	7a 01       	movw	r14, r20

	/* Cast the CSP packet buffer into an i2c frame */
	i2c_frame_t * frame = (i2c_frame_t *) packet;

	/* Insert destination node into the i2c destination field */
	if (csp_route_get_nexthop_mac(packet->id.dst) == CSP_NODE_MAC) {
    3cc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cca:	92 95       	swap	r25
    3ccc:	9f 70       	andi	r25, 0x0F	; 15
    3cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd0:	81 70       	andi	r24, 0x01	; 1
    3cd2:	82 95       	swap	r24
    3cd4:	80 7f       	andi	r24, 0xF0	; 240
    3cd6:	89 2b       	or	r24, r25
    3cd8:	c9 dd       	rcall	.-1134   	; 0x386c <csp_route_get_nexthop_mac>
    3cda:	8f 3f       	cpi	r24, 0xFF	; 255
    3cdc:	51 f4       	brne	.+20     	; 0x3cf2 <csp_i2c_tx+0x3c>
		frame->dest = packet->id.dst;
    3cde:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ce0:	92 95       	swap	r25
    3ce2:	9f 70       	andi	r25, 0x0F	; 15
    3ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce6:	81 70       	andi	r24, 0x01	; 1
    3ce8:	82 95       	swap	r24
    3cea:	80 7f       	andi	r24, 0xF0	; 240
    3cec:	89 2b       	or	r24, r25
    3cee:	8e 83       	std	Y+6, r24	; 0x06
    3cf0:	0a c0       	rjmp	.+20     	; 0x3d06 <csp_i2c_tx+0x50>
	} else {
		frame->dest = csp_route_get_nexthop_mac(packet->id.dst);
    3cf2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cf4:	92 95       	swap	r25
    3cf6:	9f 70       	andi	r25, 0x0F	; 15
    3cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cfa:	81 70       	andi	r24, 0x01	; 1
    3cfc:	82 95       	swap	r24
    3cfe:	80 7f       	andi	r24, 0xF0	; 240
    3d00:	89 2b       	or	r24, r25
    3d02:	b4 dd       	rcall	.-1176   	; 0x386c <csp_route_get_nexthop_mac>
    3d04:	8e 83       	std	Y+6, r24	; 0x06
	}

	/* Save the outgoing id in the buffer */
	packet->id.ext = csp_hton32(packet->id.ext);
    3d06:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d08:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d0e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <csp_hton32>
    3d12:	6a 87       	std	Y+10, r22	; 0x0a
    3d14:	7b 87       	std	Y+11, r23	; 0x0b
    3d16:	8c 87       	std	Y+12, r24	; 0x0c
    3d18:	9d 87       	std	Y+13, r25	; 0x0d

	/* Add the CSP header to the I2C length field */
	frame->len += sizeof(packet->id);
    3d1a:	88 85       	ldd	r24, Y+8	; 0x08
    3d1c:	99 85       	ldd	r25, Y+9	; 0x09
    3d1e:	04 96       	adiw	r24, 0x04	; 4
    3d20:	88 87       	std	Y+8, r24	; 0x08
    3d22:	99 87       	std	Y+9, r25	; 0x09
	frame->len_rx = 0;
    3d24:	1f 82       	std	Y+7, r1	; 0x07

	/* Some I2C drivers support X number of retries
	 * CSP don't care about this. If it doesn't work the first
	 * time, don'y use time on it.
	 */
	frame->retries = 0;
    3d26:	19 82       	std	Y+1, r1	; 0x01

	/* enqueue the frame */
	if (i2c_send(0, frame, timeout) != E_NO_ERR)
    3d28:	a6 01       	movw	r20, r12
    3d2a:	be 01       	movw	r22, r28
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <i2c_send>
    3d34:	01 96       	adiw	r24, 0x01	; 1
    3d36:	19 f0       	breq	.+6      	; 0x3d3e <csp_i2c_tx+0x88>
		return CSP_ERR_DRIVER;
    3d38:	85 ef       	ldi	r24, 0xF5	; 245
    3d3a:	9f ef       	ldi	r25, 0xFF	; 255
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <csp_i2c_tx+0x8c>

	return CSP_ERR_NONE;
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0

}
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	ff 90       	pop	r15
    3d48:	ef 90       	pop	r14
    3d4a:	df 90       	pop	r13
    3d4c:	cf 90       	pop	r12
    3d4e:	08 95       	ret

00003d50 <csp_i2c_rx>:
 * When a frame is received, cast it to a csp_packet
 * and send it directly to the CSP new packet function.
 * Context: ISR only
 * @param frame
 */
void csp_i2c_rx(i2c_frame_t * frame, void * pxTaskWoken) {
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ec 01       	movw	r28, r24
    3d5a:	8b 01       	movw	r16, r22

	static csp_packet_t * packet;

	/* Validate input */
	if (frame == NULL)
    3d5c:	00 97       	sbiw	r24, 0x00	; 0
    3d5e:	79 f1       	breq	.+94     	; 0x3dbe <csp_i2c_rx+0x6e>
		return;

	if ((frame->len < 4) || (frame->len > I2C_MTU)) {
    3d60:	88 85       	ldd	r24, Y+8	; 0x08
    3d62:	99 85       	ldd	r25, Y+9	; 0x09
    3d64:	04 97       	sbiw	r24, 0x04	; 4
    3d66:	8d 3f       	cpi	r24, 0xFD	; 253
    3d68:	91 05       	cpc	r25, r1
    3d6a:	88 f0       	brcs	.+34     	; 0x3d8e <csp_i2c_rx+0x3e>
		csp_if_i2c.frame++;
    3d6c:	e9 e2       	ldi	r30, 0x29	; 41
    3d6e:	f0 e2       	ldi	r31, 0x20	; 32
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	a2 81       	ldd	r26, Z+2	; 0x02
    3d76:	b3 81       	ldd	r27, Z+3	; 0x03
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	a1 1d       	adc	r26, r1
    3d7c:	b1 1d       	adc	r27, r1
    3d7e:	80 83       	st	Z, r24
    3d80:	91 83       	std	Z+1, r25	; 0x01
    3d82:	a2 83       	std	Z+2, r26	; 0x02
    3d84:	b3 83       	std	Z+3, r27	; 0x03
		csp_buffer_free_isr(frame);
    3d86:	ce 01       	movw	r24, r28
    3d88:	0e 94 c5 13 	call	0x278a	; 0x278a <csp_buffer_free_isr>
		return;
    3d8c:	18 c0       	rjmp	.+48     	; 0x3dbe <csp_i2c_rx+0x6e>
	}

	/* Strip the CSP header off the length field before converting to CSP packet */
	frame->len -= sizeof(csp_id_t);
    3d8e:	88 87       	std	Y+8, r24	; 0x08
    3d90:	99 87       	std	Y+9, r25	; 0x09

	/* Convert the packet from network to host order */
	packet = (csp_packet_t *) frame;
    3d92:	c0 93 c3 3c 	sts	0x3CC3, r28
    3d96:	d0 93 c4 3c 	sts	0x3CC4, r29
	packet->id.ext = csp_ntoh32(packet->id.ext);
    3d9a:	6a 85       	ldd	r22, Y+10	; 0x0a
    3d9c:	7b 85       	ldd	r23, Y+11	; 0x0b
    3d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3da0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3da2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <csp_ntoh32>
    3da6:	6a 87       	std	Y+10, r22	; 0x0a
    3da8:	7b 87       	std	Y+11, r23	; 0x0b
    3daa:	8c 87       	std	Y+12, r24	; 0x0c
    3dac:	9d 87       	std	Y+13, r25	; 0x0d

	/* Receive the packet in CSP */
	csp_new_packet(packet, &csp_if_i2c, pxTaskWoken);
    3dae:	a8 01       	movw	r20, r16
    3db0:	67 e0       	ldi	r22, 0x07	; 7
    3db2:	70 e2       	ldi	r23, 0x20	; 32
    3db4:	80 91 c3 3c 	lds	r24, 0x3CC3
    3db8:	90 91 c4 3c 	lds	r25, 0x3CC4
    3dbc:	e5 dc       	rcall	.-1590   	; 0x3788 <csp_new_packet>

}
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	08 95       	ret

00003dc8 <csp_i2c_init>:

int csp_i2c_init(uint8_t addr, int handle, int speed) {
    3dc8:	cf 92       	push	r12
    3dca:	df 92       	push	r13
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	e8 2f       	mov	r30, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	9a 01       	movw	r18, r20

	/* Create i2c_handle */
	if (i2c_init(handle, I2C_MASTER, addr, speed, 10, 10, csp_i2c_rx) != E_NO_ERR)
    3dda:	0f 2e       	mov	r0, r31
    3ddc:	f8 ea       	ldi	r31, 0xA8	; 168
    3dde:	cf 2e       	mov	r12, r31
    3de0:	fe e1       	ldi	r31, 0x1E	; 30
    3de2:	df 2e       	mov	r13, r31
    3de4:	f0 2d       	mov	r31, r0
    3de6:	0f 2e       	mov	r0, r31
    3de8:	fa e0       	ldi	r31, 0x0A	; 10
    3dea:	ef 2e       	mov	r14, r31
    3dec:	f1 2c       	mov	r15, r1
    3dee:	f0 2d       	mov	r31, r0
    3df0:	0a e0       	ldi	r16, 0x0A	; 10
    3df2:	10 e0       	ldi	r17, 0x00	; 0
    3df4:	4e 2f       	mov	r20, r30
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	70 e0       	ldi	r23, 0x00	; 0
    3dfa:	0e 94 59 04 	call	0x8b2	; 0x8b2 <i2c_init>
    3dfe:	01 96       	adiw	r24, 0x01	; 1
    3e00:	31 f4       	brne	.+12     	; 0x3e0e <csp_i2c_init+0x46>
		return CSP_ERR_DRIVER;

	/* Regsiter interface */
	csp_route_add_if(&csp_if_i2c);
    3e02:	87 e0       	ldi	r24, 0x07	; 7
    3e04:	90 e2       	ldi	r25, 0x20	; 32
    3e06:	e9 da       	rcall	.-2606   	; 0x33da <csp_route_add_if>

	return CSP_ERR_NONE;
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <csp_i2c_init+0x4a>

int csp_i2c_init(uint8_t addr, int handle, int speed) {

	/* Create i2c_handle */
	if (i2c_init(handle, I2C_MASTER, addr, speed, 10, 10, csp_i2c_rx) != E_NO_ERR)
		return CSP_ERR_DRIVER;
    3e0e:	85 ef       	ldi	r24, 0xF5	; 245
    3e10:	9f ef       	ldi	r25, 0xFF	; 255
	/* Regsiter interface */
	csp_route_add_if(&csp_if_i2c);

	return CSP_ERR_NONE;

}
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	ff 90       	pop	r15
    3e18:	ef 90       	pop	r14
    3e1a:	df 90       	pop	r13
    3e1c:	cf 90       	pop	r12
    3e1e:	08 95       	ret

00003e20 <csp_lo_tx>:
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @param timeout Timout in ms
 * @return 1 if packet was successfully transmitted, 0 on error
 */
int csp_lo_tx(csp_iface_t * interface, csp_packet_t * packet, uint32_t timeout) {
    3e20:	cb 01       	movw	r24, r22

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_new_packet(packet, &csp_if_lo, NULL);
    3e22:	40 e0       	ldi	r20, 0x00	; 0
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	6b e3       	ldi	r22, 0x3B	; 59
    3e28:	70 e2       	ldi	r23, 0x20	; 32
    3e2a:	ae dc       	rcall	.-1700   	; 0x3788 <csp_new_packet>

	return CSP_ERR_NONE;

}
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	08 95       	ret

00003e32 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>
#include "../csp_port.h"
#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	1f 92       	push	r1
    3e3c:	1f 92       	push	r1
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	9a 83       	std	Y+2, r25	; 0x02
    3e46:	8b 01       	movw	r16, r22

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
    3e48:	0e 94 3a 14 	call	0x2874	; 0x2874 <csp_conn_enqueue_packet>
    3e4c:	99 23       	and	r25, r25
    3e4e:	24 f4       	brge	.+8      	; 0x3e58 <csp_udp_new_packet+0x26>
		csp_log_error("Connection buffer queue full!\r\n");
		csp_buffer_free(packet);
    3e50:	c8 01       	movw	r24, r16
    3e52:	0e 94 fd 13 	call	0x27fa	; 0x27fa <csp_buffer_free>
		return;
    3e56:	19 c0       	rjmp	.+50     	; 0x3e8a <csp_udp_new_packet+0x58>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
    3e58:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e5c:	86 85       	ldd	r24, Z+14	; 0x0e
    3e5e:	97 85       	ldd	r25, Z+15	; 0x0f
    3e60:	00 97       	sbiw	r24, 0x00	; 0
    3e62:	99 f0       	breq	.+38     	; 0x3e8a <csp_udp_new_packet+0x58>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	a9 01       	movw	r20, r18
    3e6a:	be 01       	movw	r22, r28
    3e6c:	6f 5f       	subi	r22, 0xFF	; 255
    3e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e70:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <csp_queue_enqueue>
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	29 f0       	breq	.+10     	; 0x3e82 <csp_udp_new_packet+0x50>
			csp_log_warn("Warning socket connection queue full\r\n");
			csp_close(conn);
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <csp_close>
			return;
    3e80:	04 c0       	rjmp	.+8      	; 0x3e8a <csp_udp_new_packet+0x58>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
    3e82:	e9 81       	ldd	r30, Y+1	; 0x01
    3e84:	fa 81       	ldd	r31, Y+2	; 0x02
    3e86:	16 86       	std	Z+14, r1	; 0x0e
    3e88:	17 86       	std	Z+15, r1	; 0x0f
	}

}
    3e8a:	0f 90       	pop	r0
    3e8c:	0f 90       	pop	r0
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	08 95       	ret

00003e98 <main>:
		power_switch_toggle();		
        vTaskDelay(1000);
	}
}

int main(void) {
    3e98:	af 92       	push	r10
    3e9a:	bf 92       	push	r11
    3e9c:	cf 92       	push	r12
    3e9e:	df 92       	push	r13
    3ea0:	ef 92       	push	r14
    3ea2:	ff 92       	push	r15
    3ea4:	0f 93       	push	r16
	
	// initialize the xMega peripherals
	boardInit();
    3ea6:	68 d6       	rcall	.+3280   	; 0x4b78 <boardInit>
	
	// Initialize the CSP buffers
	csp_buffer_init(CSP_BUFFER_COUNT, CSP_BUFFER_SIZE);
    3ea8:	66 e5       	ldi	r22, 0x56	; 86
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	0e 94 01 13 	call	0x2602	; 0x2602 <csp_buffer_init>
			
	// Initialize the CSP
	csp_init(CSP_MY_ADDRESS);
    3eb4:	86 e0       	ldi	r24, 0x06	; 6
    3eb6:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <csp_init>
	
	// Initialize the CSP I2C interface
	csp_i2c_init(CSP_I2C_SLAVE_ADDRESS, 0, CSP_I2C_BAUDSETTING);
    3eba:	43 e2       	ldi	r20, 0x23	; 35
    3ebc:	50 e0       	ldi	r21, 0x00	; 0
    3ebe:	60 e0       	ldi	r22, 0x00	; 0
    3ec0:	70 e0       	ldi	r23, 0x00	; 0
    3ec2:	86 e0       	ldi	r24, 0x06	; 6
    3ec4:	81 df       	rcall	.-254    	; 0x3dc8 <csp_i2c_init>
					
	// Add route to OBC via i2c
	csp_route_set(CSP_OBC_ADDRESS, &csp_if_i2c, CSP_I2C_OBC_ADDRESS);
    3ec6:	41 e0       	ldi	r20, 0x01	; 1
    3ec8:	67 e0       	ldi	r22, 0x07	; 7
    3eca:	70 e2       	ldi	r23, 0x20	; 32
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	ae da       	rcall	.-2724   	; 0x342c <csp_route_set>
					
	// Start router task
	csp_route_start_task(CSP_ROUTER_STACK, CSP_ROUTER_PRIORITY);
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	70 e0       	ldi	r23, 0x00	; 0
    3ed4:	84 ef       	ldi	r24, 0xF4	; 244
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	3f da       	rcall	.-2946   	; 0x3358 <csp_route_start_task>
	
	//xTaskCreate(testing_spi, (signed char*) "testing", 256, NULL, configNORMAL_PRIORITY, NULL);	
	/* -------------------------------------------------------------------- */
	/*	Starts task that handles incoming communication		 				*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(cspTask, (signed char*) "cspTask", 512, NULL, configNORMAL_PRIORITY, NULL);
    3eda:	a1 2c       	mov	r10, r1
    3edc:	b1 2c       	mov	r11, r1
    3ede:	c1 2c       	mov	r12, r1
    3ee0:	d1 2c       	mov	r13, r1
    3ee2:	e1 2c       	mov	r14, r1
    3ee4:	f1 2c       	mov	r15, r1
    3ee6:	00 e0       	ldi	r16, 0x00	; 0
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	52 e0       	ldi	r21, 0x02	; 2
    3ef0:	68 eb       	ldi	r22, 0xB8	; 184
    3ef2:	70 e2       	ldi	r23, 0x20	; 32
    3ef4:	8d ea       	ldi	r24, 0xAD	; 173
    3ef6:	93 e0       	ldi	r25, 0x03	; 3
    3ef8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	/* -------------------------------------------------------------------- */
	/*	Starts task that handles outgoing communication		 				*/
	/* -------------------------------------------------------------------- */
	xTaskCreate(mainTask, (signed char*) "mainTask", 512, NULL, configNORMAL_PRIORITY, NULL);
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e0       	ldi	r20, 0x00	; 0
    3f02:	52 e0       	ldi	r21, 0x02	; 2
    3f04:	60 ec       	ldi	r22, 0xC0	; 192
    3f06:	70 e2       	ldi	r23, 0x20	; 32
    3f08:	81 ee       	ldi	r24, 0xE1	; 225
    3f0a:	90 e2       	ldi	r25, 0x20	; 32
    3f0c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <xTaskGenericCreate>
	
	/* -------------------------------------------------------------------- */
	/*	Starts the scheduler and all previously created tasks				*/
	/* -------------------------------------------------------------------- */
	vTaskStartScheduler();
    3f10:	0e 94 af 0b 	call	0x175e	; 0x175e <vTaskStartScheduler>
	
	return 0;
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	0f 91       	pop	r16
    3f1a:	ff 90       	pop	r15
    3f1c:	ef 90       	pop	r14
    3f1e:	df 90       	pop	r13
    3f20:	cf 90       	pop	r12
    3f22:	bf 90       	pop	r11
    3f24:	af 90       	pop	r10
    3f26:	08 95       	ret

00003f28 <sendFreeHeapSpace>:
csp_packet_t * outcomingPacket;

/* -------------------------------------------------------------------- */
/*	Reply the free heap space in human readable form					*/
/* -------------------------------------------------------------------- */
int sendFreeHeapSpace(csp_packet_t * inPacket) {
    3f28:	8f 92       	push	r8
    3f2a:	9f 92       	push	r9
    3f2c:	af 92       	push	r10
    3f2e:	bf 92       	push	r11
    3f30:	cf 92       	push	r12
    3f32:	df 92       	push	r13
    3f34:	ef 92       	push	r14
    3f36:	ff 92       	push	r15
    3f38:	0f 93       	push	r16
    3f3a:	1f 93       	push	r17
    3f3c:	cf 93       	push	r28
    3f3e:	df 93       	push	r29
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	64 97       	sbiw	r28, 0x14	; 20
    3f46:	cd bf       	out	0x3d, r28	; 61
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	7c 01       	movw	r14, r24
	
	char msg[20];
	itoa(xPortGetFreeHeapSize(), msg, 10);
    3f4c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <xPortGetFreeHeapSize>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3f50:	4a e0       	ldi	r20, 0x0A	; 10
    3f52:	8e 01       	movw	r16, r28
    3f54:	0f 5f       	subi	r16, 0xFF	; 255
    3f56:	1f 4f       	sbci	r17, 0xFF	; 255
    3f58:	b8 01       	movw	r22, r16
    3f5a:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__itoa_ncheck>
	
	/* Copy message to packet */
	strcpy(outcomingPacket->data, msg);
    3f5e:	80 91 6e 3d 	lds	r24, 0x3D6E
    3f62:	90 91 6f 3d 	lds	r25, 0x3D6F
    3f66:	b8 01       	movw	r22, r16
    3f68:	0e 96       	adiw	r24, 0x0e	; 14
    3f6a:	0e 94 91 2b 	call	0x5722	; 0x5722 <strcpy>
	outcomingPacket->length = strlen(msg);
    3f6e:	c0 90 6e 3d 	lds	r12, 0x3D6E
    3f72:	d0 90 6f 3d 	lds	r13, 0x3D6F
    3f76:	f8 01       	movw	r30, r16
    3f78:	01 90       	ld	r0, Z+
    3f7a:	00 20       	and	r0, r0
    3f7c:	e9 f7       	brne	.-6      	; 0x3f78 <sendFreeHeapSpace+0x50>
    3f7e:	31 97       	sbiw	r30, 0x01	; 1
    3f80:	e0 1b       	sub	r30, r16
    3f82:	f1 0b       	sbc	r31, r17
    3f84:	d6 01       	movw	r26, r12
    3f86:	18 96       	adiw	r26, 0x08	; 8
    3f88:	ed 93       	st	X+, r30
    3f8a:	fc 93       	st	X, r31
    3f8c:	19 97       	sbiw	r26, 0x09	; 9

	/* Send packet */
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, outcomingPacket, 1000) == CSP_ERR_NONE) {		
    3f8e:	f7 01       	movw	r30, r14
    3f90:	43 85       	ldd	r20, Z+11	; 0x0b
    3f92:	84 2f       	mov	r24, r20
    3f94:	82 95       	swap	r24
    3f96:	86 95       	lsr	r24
    3f98:	86 95       	lsr	r24
    3f9a:	83 70       	andi	r24, 0x03	; 3
    3f9c:	24 85       	ldd	r18, Z+12	; 0x0c
    3f9e:	2f 70       	andi	r18, 0x0F	; 15
    3fa0:	22 0f       	add	r18, r18
    3fa2:	22 0f       	add	r18, r18
    3fa4:	28 2b       	or	r18, r24
    3fa6:	4f 73       	andi	r20, 0x3F	; 63
    3fa8:	65 85       	ldd	r22, Z+13	; 0x0d
    3faa:	66 95       	lsr	r22
    3fac:	6f 71       	andi	r22, 0x1F	; 31
    3fae:	0f 2e       	mov	r0, r31
    3fb0:	f8 ee       	ldi	r31, 0xE8	; 232
    3fb2:	8f 2e       	mov	r8, r31
    3fb4:	f3 e0       	ldi	r31, 0x03	; 3
    3fb6:	9f 2e       	mov	r9, r31
    3fb8:	a1 2c       	mov	r10, r1
    3fba:	b1 2c       	mov	r11, r1
    3fbc:	f0 2d       	mov	r31, r0
    3fbe:	e1 2c       	mov	r14, r1
    3fc0:	f1 2c       	mov	r15, r1
    3fc2:	87 01       	movw	r16, r14
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	8d d8       	rcall	.-3814   	; 0x30e2 <csp_sendto>
	else {
		/* Send failed */
	}

	return 0;
}
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	64 96       	adiw	r28, 0x14	; 20
    3fce:	cd bf       	out	0x3d, r28	; 61
    3fd0:	de bf       	out	0x3e, r29	; 62
    3fd2:	df 91       	pop	r29
    3fd4:	cf 91       	pop	r28
    3fd6:	1f 91       	pop	r17
    3fd8:	0f 91       	pop	r16
    3fda:	ff 90       	pop	r15
    3fdc:	ef 90       	pop	r14
    3fde:	df 90       	pop	r13
    3fe0:	cf 90       	pop	r12
    3fe2:	bf 90       	pop	r11
    3fe4:	af 90       	pop	r10
    3fe6:	9f 90       	pop	r9
    3fe8:	8f 90       	pop	r8
    3fea:	08 95       	ret

00003fec <houseKeeping>:

/* -------------------------------------------------------------------- */
/*	Reply with some status info message									*/
/* -------------------------------------------------------------------- */
int houseKeeping(csp_packet_t * inPacket) {
    3fec:	2f 92       	push	r2
    3fee:	3f 92       	push	r3
    3ff0:	4f 92       	push	r4
    3ff2:	5f 92       	push	r5
    3ff4:	6f 92       	push	r6
    3ff6:	7f 92       	push	r7
    3ff8:	8f 92       	push	r8
    3ffa:	9f 92       	push	r9
    3ffc:	af 92       	push	r10
    3ffe:	bf 92       	push	r11
    4000:	cf 92       	push	r12
    4002:	df 92       	push	r13
    4004:	ef 92       	push	r14
    4006:	ff 92       	push	r15
    4008:	0f 93       	push	r16
    400a:	1f 93       	push	r17
    400c:	cf 93       	push	r28
    400e:	df 93       	push	r29
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	c0 54       	subi	r28, 0x40	; 64
    4016:	d1 09       	sbc	r29, r1
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	de bf       	out	0x3e, r29	; 62
    401c:	1c 01       	movw	r2, r24

// 	complex cislo;
// 	complex cislo_read;
	char msg[64];

	memset(msg,0,64);
    401e:	ce 01       	movw	r24, r28
    4020:	01 96       	adiw	r24, 0x01	; 1
    4022:	7c 01       	movw	r14, r24
    4024:	80 e4       	ldi	r24, 0x40	; 64
    4026:	d7 01       	movw	r26, r14
    4028:	1d 92       	st	X+, r1
    402a:	8a 95       	dec	r24
    402c:	e9 f7       	brne	.-6      	; 0x4028 <__stack+0x29>

	//spi_mem_write_complex(0x15,cislo);
	//cislo_read = spi_mem_read_complex(0x15);

		
	sprintf(msg, "\n\r*** HM Board ***\n\rUptime: %id %ih %im %ds\n\r", (int16_t) hoursTimer/24, (int16_t) hoursTimer%24, (int16_t) secondsTimer/60, (int16_t) secondsTimer%60);
    402e:	80 91 82 3d 	lds	r24, 0x3D82
    4032:	90 91 83 3d 	lds	r25, 0x3D83
    4036:	a0 91 84 3d 	lds	r26, 0x3D84
    403a:	b0 91 85 3d 	lds	r27, 0x3D85
    403e:	80 90 82 3d 	lds	r8, 0x3D82
    4042:	90 90 83 3d 	lds	r9, 0x3D83
    4046:	a0 90 84 3d 	lds	r10, 0x3D84
    404a:	b0 90 85 3d 	lds	r11, 0x3D85
    404e:	40 90 78 3d 	lds	r4, 0x3D78
    4052:	50 90 79 3d 	lds	r5, 0x3D79
    4056:	60 90 7a 3d 	lds	r6, 0x3D7A
    405a:	70 90 7b 3d 	lds	r7, 0x3D7B
    405e:	00 91 78 3d 	lds	r16, 0x3D78
    4062:	10 91 79 3d 	lds	r17, 0x3D79
    4066:	20 91 7a 3d 	lds	r18, 0x3D7A
    406a:	30 91 7b 3d 	lds	r19, 0x3D7B
    406e:	ec e3       	ldi	r30, 0x3C	; 60
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	bf 01       	movw	r22, r30
    4074:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    4078:	9f 93       	push	r25
    407a:	8f 93       	push	r24
    407c:	c4 01       	movw	r24, r8
    407e:	bf 01       	movw	r22, r30
    4080:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    4084:	7f 93       	push	r23
    4086:	6f 93       	push	r22
    4088:	e8 e1       	ldi	r30, 0x18	; 24
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	c2 01       	movw	r24, r4
    408e:	bf 01       	movw	r22, r30
    4090:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    4094:	9f 93       	push	r25
    4096:	8f 93       	push	r24
    4098:	c8 01       	movw	r24, r16
    409a:	bf 01       	movw	r22, r30
    409c:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <__divmodhi4>
    40a0:	7f 93       	push	r23
    40a2:	6f 93       	push	r22
    40a4:	89 ec       	ldi	r24, 0xC9	; 201
    40a6:	90 e2       	ldi	r25, 0x20	; 32
    40a8:	9f 93       	push	r25
    40aa:	8f 93       	push	r24
    40ac:	ff 92       	push	r15
    40ae:	ef 92       	push	r14
    40b0:	0e 94 15 2c 	call	0x582a	; 0x582a <sprintf>

	strcpy(outcomingPacket->data, msg);
    40b4:	80 91 6e 3d 	lds	r24, 0x3D6E
    40b8:	90 91 6f 3d 	lds	r25, 0x3D6F
    40bc:	b7 01       	movw	r22, r14
    40be:	0e 96       	adiw	r24, 0x0e	; 14
    40c0:	0e 94 91 2b 	call	0x5722	; 0x5722 <strcpy>
	outcomingPacket->length = strlen(msg);
    40c4:	c0 90 6e 3d 	lds	r12, 0x3D6E
    40c8:	d0 90 6f 3d 	lds	r13, 0x3D6F
    40cc:	f7 01       	movw	r30, r14
    40ce:	01 90       	ld	r0, Z+
    40d0:	00 20       	and	r0, r0
    40d2:	e9 f7       	brne	.-6      	; 0x40ce <__stack+0xcf>
    40d4:	31 97       	sbiw	r30, 0x01	; 1
    40d6:	ee 19       	sub	r30, r14
    40d8:	ff 09       	sbc	r31, r15
    40da:	d6 01       	movw	r26, r12
    40dc:	18 96       	adiw	r26, 0x08	; 8
    40de:	ed 93       	st	X+, r30
    40e0:	fc 93       	st	X, r31
    40e2:	19 97       	sbiw	r26, 0x09	; 9

	/* Send packet */
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, outcomingPacket, 1000) == CSP_ERR_NONE) {
    40e4:	f1 01       	movw	r30, r2
    40e6:	43 85       	ldd	r20, Z+11	; 0x0b
    40e8:	84 2f       	mov	r24, r20
    40ea:	82 95       	swap	r24
    40ec:	86 95       	lsr	r24
    40ee:	86 95       	lsr	r24
    40f0:	83 70       	andi	r24, 0x03	; 3
    40f2:	24 85       	ldd	r18, Z+12	; 0x0c
    40f4:	2f 70       	andi	r18, 0x0F	; 15
    40f6:	22 0f       	add	r18, r18
    40f8:	22 0f       	add	r18, r18
    40fa:	28 2b       	or	r18, r24
    40fc:	4f 73       	andi	r20, 0x3F	; 63
    40fe:	65 85       	ldd	r22, Z+13	; 0x0d
    4100:	66 95       	lsr	r22
    4102:	6f 71       	andi	r22, 0x1F	; 31
    4104:	0f 2e       	mov	r0, r31
    4106:	f8 ee       	ldi	r31, 0xE8	; 232
    4108:	8f 2e       	mov	r8, r31
    410a:	f3 e0       	ldi	r31, 0x03	; 3
    410c:	9f 2e       	mov	r9, r31
    410e:	a1 2c       	mov	r10, r1
    4110:	b1 2c       	mov	r11, r1
    4112:	f0 2d       	mov	r31, r0
    4114:	e1 2c       	mov	r14, r1
    4116:	f1 2c       	mov	r15, r1
    4118:	87 01       	movw	r16, r14
    411a:	82 e0       	ldi	r24, 0x02	; 2
    411c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <csp_sendto>
	} 
	else {
		/* Send failed */
	}

	return 0;
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	de bf       	out	0x3e, r29	; 62
}
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	c0 5c       	subi	r28, 0xC0	; 192
    412a:	df 4f       	sbci	r29, 0xFF	; 255
    412c:	cd bf       	out	0x3d, r28	; 61
    412e:	de bf       	out	0x3e, r29	; 62
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	1f 91       	pop	r17
    4136:	0f 91       	pop	r16
    4138:	ff 90       	pop	r15
    413a:	ef 90       	pop	r14
    413c:	df 90       	pop	r13
    413e:	cf 90       	pop	r12
    4140:	bf 90       	pop	r11
    4142:	af 90       	pop	r10
    4144:	9f 90       	pop	r9
    4146:	8f 90       	pop	r8
    4148:	7f 90       	pop	r7
    414a:	6f 90       	pop	r6
    414c:	5f 90       	pop	r5
    414e:	4f 90       	pop	r4
    4150:	3f 90       	pop	r3
    4152:	2f 90       	pop	r2
    4154:	08 95       	ret

00004156 <echoBack>:

/* -------------------------------------------------------------------- */
/*	Sends back the incoming packet										*/
/* -------------------------------------------------------------------- */
int echoBack(csp_packet_t * inPacket) {
    4156:	8f 92       	push	r8
    4158:	9f 92       	push	r9
    415a:	af 92       	push	r10
    415c:	bf 92       	push	r11
    415e:	cf 92       	push	r12
    4160:	df 92       	push	r13
    4162:	ef 92       	push	r14
    4164:	ff 92       	push	r15
    4166:	0f 93       	push	r16
    4168:	1f 93       	push	r17
    416a:	fc 01       	movw	r30, r24

	/* Send packet */
	// reuses the incoming packet for the response
	if (csp_sendto(CSP_PRIO_NORM, inPacket->id.src, inPacket->id.sport, inPacket->id.dport, CSP_O_NONE, inPacket, 1000) == CSP_ERR_NONE) {
    416c:	43 85       	ldd	r20, Z+11	; 0x0b
    416e:	84 2f       	mov	r24, r20
    4170:	82 95       	swap	r24
    4172:	86 95       	lsr	r24
    4174:	86 95       	lsr	r24
    4176:	83 70       	andi	r24, 0x03	; 3
    4178:	24 85       	ldd	r18, Z+12	; 0x0c
    417a:	2f 70       	andi	r18, 0x0F	; 15
    417c:	22 0f       	add	r18, r18
    417e:	22 0f       	add	r18, r18
    4180:	28 2b       	or	r18, r24
    4182:	4f 73       	andi	r20, 0x3F	; 63
    4184:	65 85       	ldd	r22, Z+13	; 0x0d
    4186:	66 95       	lsr	r22
    4188:	6f 71       	andi	r22, 0x1F	; 31
    418a:	0f 2e       	mov	r0, r31
    418c:	f8 ee       	ldi	r31, 0xE8	; 232
    418e:	8f 2e       	mov	r8, r31
    4190:	f3 e0       	ldi	r31, 0x03	; 3
    4192:	9f 2e       	mov	r9, r31
    4194:	a1 2c       	mov	r10, r1
    4196:	b1 2c       	mov	r11, r1
    4198:	f0 2d       	mov	r31, r0
    419a:	6f 01       	movw	r12, r30
    419c:	e1 2c       	mov	r14, r1
    419e:	f1 2c       	mov	r15, r1
    41a0:	87 01       	movw	r16, r14
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	0e 94 71 18 	call	0x30e2	; 0x30e2 <csp_sendto>
	else {
		/* Send failed */
	}

	return 0;
}
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	ff 90       	pop	r15
    41b2:	ef 90       	pop	r14
    41b4:	df 90       	pop	r13
    41b6:	cf 90       	pop	r12
    41b8:	bf 90       	pop	r11
    41ba:	af 90       	pop	r10
    41bc:	9f 90       	pop	r9
    41be:	8f 90       	pop	r8
    41c0:	08 95       	ret

000041c2 <mainTask>:


/* -------------------------------------------------------------------- */
/*	The main task														*/
/* -------------------------------------------------------------------- */
void mainTask(void *p) {
    41c2:	cf 93       	push	r28
    41c4:	df 93       	push	r29
    41c6:	00 d0       	rcall	.+0      	; 0x41c8 <mainTask+0x6>
    41c8:	cd b7       	in	r28, 0x3d	; 61
    41ca:	de b7       	in	r29, 0x3e	; 62
	
	/* The variable used to receive from the queue. */
	xCSPStackEvent_t xReceivedEvent;
	
	outcomingPacket = csp_buffer_get(CSP_PACKET_SIZE);
    41cc:	88 e4       	ldi	r24, 0x48	; 72
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 8b 13 	call	0x2716	; 0x2716 <csp_buffer_get>
    41d4:	80 93 6e 3d 	sts	0x3D6E, r24
    41d8:	90 93 6f 3d 	sts	0x3D6F, r25
	// infinite while loop of the program 
	while (1) {
		
		// the queue between cspTask and the main task
		// this is unblocking way how to read from the queue, the last parameter is "ticks to wait"
		if (xQueueReceive(xCSPEventQueue, &xReceivedEvent, 1)) {
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	41 e0       	ldi	r20, 0x01	; 1
    41e0:	50 e0       	ldi	r21, 0x00	; 0
    41e2:	be 01       	movw	r22, r28
    41e4:	6f 5f       	subi	r22, 0xFF	; 255
    41e6:	7f 4f       	sbci	r23, 0xFF	; 255
    41e8:	80 91 c5 3c 	lds	r24, 0x3CC5
    41ec:	90 91 c6 3c 	lds	r25, 0x3CC6
    41f0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xQueueGenericReceive>
    41f4:	88 23       	and	r24, r24
    41f6:	91 f3       	breq	.-28     	; 0x41dc <mainTask+0x1a>
		
			switch( xReceivedEvent.eEventType )
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	81 30       	cpi	r24, 0x01	; 1
    41fc:	21 f0       	breq	.+8      	; 0x4206 <mainTask+0x44>
    41fe:	38 f0       	brcs	.+14     	; 0x420e <mainTask+0x4c>
    4200:	82 30       	cpi	r24, 0x02	; 2
    4202:	49 f0       	breq	.+18     	; 0x4216 <mainTask+0x54>
    4204:	eb cf       	rjmp	.-42     	; 0x41dc <mainTask+0x1a>
			{
				// Reply with RTOS free heap space
				// replies in Human Readable form
				case freeHeapEvent :
			
					sendFreeHeapSpace(xReceivedEvent.pvData);
    4206:	8a 81       	ldd	r24, Y+2	; 0x02
    4208:	9b 81       	ldd	r25, Y+3	; 0x03
    420a:	8e de       	rcall	.-740    	; 0x3f28 <sendFreeHeapSpace>
			
				break;
    420c:	e7 cf       	rjmp	.-50     	; 0x41dc <mainTask+0x1a>
			
				// Echo back the whole packet
				// incoming port => outcoming
				case echoBackEvent :
			
					echoBack(xReceivedEvent.pvData);
    420e:	8a 81       	ldd	r24, Y+2	; 0x02
    4210:	9b 81       	ldd	r25, Y+3	; 0x03
    4212:	a1 df       	rcall	.-190    	; 0x4156 <echoBack>
			
				break;
    4214:	e3 cf       	rjmp	.-58     	; 0x41dc <mainTask+0x1a>
			
				// sends the info about the system
				case housKeepingEvent :
			
					houseKeeping(xReceivedEvent.pvData);
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	9b 81       	ldd	r25, Y+3	; 0x03
    421a:	e8 de       	rcall	.-560    	; 0x3fec <houseKeeping>
			
				break;
    421c:	df cf       	rjmp	.-66     	; 0x41dc <mainTask+0x1a>

0000421e <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    421e:	fc 01       	movw	r30, r24
    4220:	20 81       	ld	r18, Z
    4222:	20 7f       	andi	r18, 0xF0	; 240
    4224:	62 2b       	or	r22, r18
    4226:	60 83       	st	Z, r22
    4228:	08 95       	ret

0000422a <TC0_SetOverflowIntLevel>:
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    422a:	fc 01       	movw	r30, r24
    422c:	26 81       	ldd	r18, Z+6	; 0x06
    422e:	2c 7f       	andi	r18, 0xFC	; 252
    4230:	62 2b       	or	r22, r18
    4232:	66 83       	std	Z+6, r22	; 0x06
    4234:	08 95       	ret

00004236 <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    4236:	fc 01       	movw	r30, r24
    4238:	60 83       	st	Z, r22
    423a:	71 83       	std	Z+1, r23	; 0x01
    423c:	48 63       	ori	r20, 0x38	; 56
    423e:	db 01       	movw	r26, r22
    4240:	11 96       	adiw	r26, 0x01	; 1
    4242:	4c 93       	st	X, r20
    4244:	a0 81       	ld	r26, Z
    4246:	b1 81       	ldd	r27, Z+1	; 0x01
    4248:	15 96       	adiw	r26, 0x05	; 5
    424a:	2c 93       	st	X, r18
    424c:	01 90       	ld	r0, Z+
    424e:	f0 81       	ld	r31, Z
    4250:	e0 2d       	mov	r30, r0
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	84 83       	std	Z+4, r24	; 0x04
    4256:	08 95       	ret

00004258 <TWI_MasterWriteRead>:
    4258:	0f 93       	push	r16
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	29 34       	cpi	r18, 0x49	; 73
    4260:	08 f0       	brcs	.+2      	; 0x4264 <TWI_MasterWriteRead+0xc>
    4262:	4f c0       	rjmp	.+158    	; 0x4302 <TWI_MasterWriteRead+0xaa>
    4264:	02 30       	cpi	r16, 0x02	; 2
    4266:	08 f0       	brcs	.+2      	; 0x426a <TWI_MasterWriteRead+0x12>
    4268:	4e c0       	rjmp	.+156    	; 0x4306 <TWI_MasterWriteRead+0xae>
    426a:	fc 01       	movw	r30, r24
    426c:	e0 5b       	subi	r30, 0xB0	; 176
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	30 81       	ld	r19, Z
    4272:	31 11       	cpse	r19, r1
    4274:	4a c0       	rjmp	.+148    	; 0x430a <TWI_MasterWriteRead+0xb2>
    4276:	31 e0       	ldi	r19, 0x01	; 1
    4278:	30 83       	st	Z, r19
    427a:	31 96       	adiw	r30, 0x01	; 1
    427c:	10 82       	st	Z, r1
    427e:	66 0f       	add	r22, r22
    4280:	dc 01       	movw	r26, r24
    4282:	12 96       	adiw	r26, 0x02	; 2
    4284:	6c 93       	st	X, r22
    4286:	22 23       	and	r18, r18
    4288:	a1 f0       	breq	.+40     	; 0x42b2 <TWI_MasterWriteRead+0x5a>
    428a:	ea 01       	movw	r28, r20
    428c:	ba 01       	movw	r22, r20
    428e:	6f 5f       	subi	r22, 0xFF	; 255
    4290:	7f 4f       	sbci	r23, 0xFF	; 255
    4292:	3f ef       	ldi	r19, 0xFF	; 255
    4294:	32 0f       	add	r19, r18
    4296:	63 0f       	add	r22, r19
    4298:	71 1d       	adc	r23, r1
    429a:	fa 01       	movw	r30, r20
    429c:	df 01       	movw	r26, r30
    429e:	ac 1b       	sub	r26, r28
    42a0:	bd 0b       	sbc	r27, r29
    42a2:	31 91       	ld	r19, Z+
    42a4:	a8 0f       	add	r26, r24
    42a6:	b9 1f       	adc	r27, r25
    42a8:	13 96       	adiw	r26, 0x03	; 3
    42aa:	3c 93       	st	X, r19
    42ac:	e6 17       	cp	r30, r22
    42ae:	f7 07       	cpc	r31, r23
    42b0:	a9 f7       	brne	.-22     	; 0x429c <TWI_MasterWriteRead+0x44>
    42b2:	fc 01       	movw	r30, r24
    42b4:	e4 5b       	subi	r30, 0xB4	; 180
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	20 83       	st	Z, r18
    42ba:	dc 01       	movw	r26, r24
    42bc:	a3 5b       	subi	r26, 0xB3	; 179
    42be:	bf 4f       	sbci	r27, 0xFF	; 255
    42c0:	0c 93       	st	X, r16
    42c2:	11 96       	adiw	r26, 0x01	; 1
    42c4:	1c 92       	st	X, r1
    42c6:	11 96       	adiw	r26, 0x01	; 1
    42c8:	1c 92       	st	X, r1
    42ca:	20 81       	ld	r18, Z
    42cc:	22 23       	and	r18, r18
    42ce:	49 f0       	breq	.+18     	; 0x42e2 <TWI_MasterWriteRead+0x8a>
    42d0:	fc 01       	movw	r30, r24
    42d2:	22 81       	ldd	r18, Z+2	; 0x02
    42d4:	2e 7f       	andi	r18, 0xFE	; 254
    42d6:	01 90       	ld	r0, Z+
    42d8:	f0 81       	ld	r31, Z
    42da:	e0 2d       	mov	r30, r0
    42dc:	26 83       	std	Z+6, r18	; 0x06
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	17 c0       	rjmp	.+46     	; 0x4310 <TWI_MasterWriteRead+0xb8>
    42e2:	fc 01       	movw	r30, r24
    42e4:	e3 5b       	subi	r30, 0xB3	; 179
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	20 81       	ld	r18, Z
    42ea:	22 23       	and	r18, r18
    42ec:	81 f0       	breq	.+32     	; 0x430e <TWI_MasterWriteRead+0xb6>
    42ee:	dc 01       	movw	r26, r24
    42f0:	12 96       	adiw	r26, 0x02	; 2
    42f2:	2c 91       	ld	r18, X
    42f4:	12 97       	sbiw	r26, 0x02	; 2
    42f6:	21 60       	ori	r18, 0x01	; 1
    42f8:	ed 91       	ld	r30, X+
    42fa:	fc 91       	ld	r31, X
    42fc:	26 83       	std	Z+6, r18	; 0x06
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	07 c0       	rjmp	.+14     	; 0x4310 <TWI_MasterWriteRead+0xb8>
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	05 c0       	rjmp	.+10     	; 0x4310 <TWI_MasterWriteRead+0xb8>
    4306:	80 e0       	ldi	r24, 0x00	; 0
    4308:	03 c0       	rjmp	.+6      	; 0x4310 <TWI_MasterWriteRead+0xb8>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	01 c0       	rjmp	.+2      	; 0x4310 <TWI_MasterWriteRead+0xb8>
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	0f 91       	pop	r16
    4316:	08 95       	ret

00004318 <TWI_MasterWrite>:
    4318:	0f 93       	push	r16
    431a:	00 e0       	ldi	r16, 0x00	; 0
    431c:	9d df       	rcall	.-198    	; 0x4258 <TWI_MasterWriteRead>
    431e:	0f 91       	pop	r16
    4320:	08 95       	ret

00004322 <TWI_MasterArbitrationLostBusErrorHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4322:	dc 01       	movw	r26, r24
    4324:	ed 91       	ld	r30, X+
    4326:	fc 91       	ld	r31, X
    4328:	11 97       	sbiw	r26, 0x01	; 1
    432a:	24 81       	ldd	r18, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    432c:	22 ff       	sbrs	r18, 2
    432e:	05 c0       	rjmp	.+10     	; 0x433a <TWI_MasterArbitrationLostBusErrorHandler+0x18>
		twi->result = TWIM_RESULT_BUS_ERROR;
    4330:	34 e0       	ldi	r19, 0x04	; 4
    4332:	af 5a       	subi	r26, 0xAF	; 175
    4334:	bf 4f       	sbci	r27, 0xFF	; 255
    4336:	3c 93       	st	X, r19
    4338:	05 c0       	rjmp	.+10     	; 0x4344 <TWI_MasterArbitrationLostBusErrorHandler+0x22>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    433a:	33 e0       	ldi	r19, 0x03	; 3
    433c:	dc 01       	movw	r26, r24
    433e:	af 5a       	subi	r26, 0xAF	; 175
    4340:	bf 4f       	sbci	r27, 0xFF	; 255
    4342:	3c 93       	st	X, r19
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    4344:	28 60       	ori	r18, 0x08	; 8
    4346:	24 83       	std	Z+4, r18	; 0x04

	twi->status = TWIM_STATUS_READY;
    4348:	fc 01       	movw	r30, r24
    434a:	e0 5b       	subi	r30, 0xB0	; 176
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	10 82       	st	Z, r1
    4350:	08 95       	ret

00004352 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    4356:	fc 01       	movw	r30, r24
    4358:	e4 5b       	subi	r30, 0xB4	; 180
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	30 81       	ld	r19, Z
	uint8_t bytesToRead   = twi->bytesToRead;
    435e:	31 96       	adiw	r30, 0x01	; 1
    4360:	40 81       	ld	r20, Z

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    4362:	dc 01       	movw	r26, r24
    4364:	ed 91       	ld	r30, X+
    4366:	fc 91       	ld	r31, X
    4368:	24 81       	ldd	r18, Z+4	; 0x04
    436a:	24 ff       	sbrs	r18, 4
    436c:	0a c0       	rjmp	.+20     	; 0x4382 <TWI_MasterWriteHandler+0x30>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    436e:	23 e0       	ldi	r18, 0x03	; 3
    4370:	23 83       	std	Z+3, r18	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    4372:	fc 01       	movw	r30, r24
    4374:	ef 5a       	subi	r30, 0xAF	; 175
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	25 e0       	ldi	r18, 0x05	; 5
    437a:	20 83       	st	Z, r18
		twi->status = TWIM_STATUS_READY;
    437c:	31 97       	sbiw	r30, 0x01	; 1
    437e:	10 82       	st	Z, r1
    4380:	25 c0       	rjmp	.+74     	; 0x43cc <TWI_MasterWriteHandler+0x7a>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    4382:	dc 01       	movw	r26, r24
    4384:	a2 5b       	subi	r26, 0xB2	; 178
    4386:	bf 4f       	sbci	r27, 0xFF	; 255
    4388:	2c 91       	ld	r18, X
    438a:	23 17       	cp	r18, r19
    438c:	50 f4       	brcc	.+20     	; 0x43a2 <TWI_MasterWriteHandler+0x50>
		uint8_t data = twi->writeData[twi->bytesWritten];
    438e:	2c 91       	ld	r18, X
    4390:	ec 01       	movw	r28, r24
    4392:	c2 0f       	add	r28, r18
    4394:	d1 1d       	adc	r29, r1
    4396:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    4398:	87 83       	std	Z+7, r24	; 0x07
		++twi->bytesWritten;
    439a:	8c 91       	ld	r24, X
    439c:	8f 5f       	subi	r24, 0xFF	; 255
    439e:	8c 93       	st	X, r24
    43a0:	15 c0       	rjmp	.+42     	; 0x43cc <TWI_MasterWriteHandler+0x7a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    43a2:	dc 01       	movw	r26, r24
    43a4:	a1 5b       	subi	r26, 0xB1	; 177
    43a6:	bf 4f       	sbci	r27, 0xFF	; 255
    43a8:	2c 91       	ld	r18, X
    43aa:	24 17       	cp	r18, r20
    43ac:	30 f4       	brcc	.+12     	; 0x43ba <TWI_MasterWriteHandler+0x68>
		uint8_t readAddress = twi->address | 0x01;
    43ae:	dc 01       	movw	r26, r24
    43b0:	12 96       	adiw	r26, 0x02	; 2
    43b2:	8c 91       	ld	r24, X
    43b4:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    43b6:	86 83       	std	Z+6, r24	; 0x06
    43b8:	09 c0       	rjmp	.+18     	; 0x43cc <TWI_MasterWriteHandler+0x7a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    43ba:	23 e0       	ldi	r18, 0x03	; 3
    43bc:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    43be:	fc 01       	movw	r30, r24
    43c0:	ef 5a       	subi	r30, 0xAF	; 175
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	21 e0       	ldi	r18, 0x01	; 1
    43c6:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    43c8:	31 97       	sbiw	r30, 0x01	; 1
    43ca:	10 82       	st	Z, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    43cc:	df 91       	pop	r29
    43ce:	cf 91       	pop	r28
    43d0:	08 95       	ret

000043d2 <TWI_MasterReadHandler>:
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    43d2:	fc 01       	movw	r30, r24
    43d4:	e1 5b       	subi	r30, 0xB1	; 177
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	20 81       	ld	r18, Z
    43da:	21 11       	cpse	r18, r1
    43dc:	12 c0       	rjmp	.+36     	; 0x4402 <TWI_MasterReadHandler+0x30>
		uint8_t data = twi->interface->MASTER.DATA;
    43de:	dc 01       	movw	r26, r24
    43e0:	ed 91       	ld	r30, X+
    43e2:	fc 91       	ld	r31, X
    43e4:	11 97       	sbiw	r26, 0x01	; 1
    43e6:	27 81       	ldd	r18, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
    43e8:	fc 01       	movw	r30, r24
    43ea:	e1 5b       	subi	r30, 0xB1	; 177
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	30 81       	ld	r19, Z
    43f0:	a3 0f       	add	r26, r19
    43f2:	b1 1d       	adc	r27, r1
    43f4:	a5 5b       	subi	r26, 0xB5	; 181
    43f6:	bf 4f       	sbci	r27, 0xFF	; 255
    43f8:	2c 93       	st	X, r18
		twi->bytesRead++;
    43fa:	20 81       	ld	r18, Z
    43fc:	2f 5f       	subi	r18, 0xFF	; 255
    43fe:	20 83       	st	Z, r18
    4400:	0c c0       	rjmp	.+24     	; 0x441a <TWI_MasterReadHandler+0x48>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4402:	dc 01       	movw	r26, r24
    4404:	ed 91       	ld	r30, X+
    4406:	fc 91       	ld	r31, X
    4408:	23 e0       	ldi	r18, 0x03	; 3
    440a:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    440c:	22 e0       	ldi	r18, 0x02	; 2
    440e:	fc 01       	movw	r30, r24
    4410:	ef 5a       	subi	r30, 0xAF	; 175
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    4416:	31 97       	sbiw	r30, 0x01	; 1
    4418:	10 82       	st	Z, r1
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    441a:	fc 01       	movw	r30, r24
    441c:	e3 5b       	subi	r30, 0xB3	; 179
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	30 81       	ld	r19, Z

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    4422:	32 96       	adiw	r30, 0x02	; 2
    4424:	20 81       	ld	r18, Z
    4426:	23 17       	cp	r18, r19
    4428:	30 f4       	brcc	.+12     	; 0x4436 <TWI_MasterReadHandler+0x64>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    442a:	dc 01       	movw	r26, r24
    442c:	ed 91       	ld	r30, X+
    442e:	fc 91       	ld	r31, X
    4430:	82 e0       	ldi	r24, 0x02	; 2
    4432:	83 83       	std	Z+3, r24	; 0x03
    4434:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    4436:	dc 01       	movw	r26, r24
    4438:	ed 91       	ld	r30, X+
    443a:	fc 91       	ld	r31, X
    443c:	27 e0       	ldi	r18, 0x07	; 7
    443e:	23 83       	std	Z+3, r18	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4440:	fc 01       	movw	r30, r24
    4442:	ef 5a       	subi	r30, 0xAF	; 175
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	21 e0       	ldi	r18, 0x01	; 1
    4448:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    444a:	31 97       	sbiw	r30, 0x01	; 1
    444c:	10 82       	st	Z, r1
    444e:	08 95       	ret

00004450 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    4450:	dc 01       	movw	r26, r24
    4452:	ed 91       	ld	r30, X+
    4454:	fc 91       	ld	r31, X
    4456:	24 81       	ldd	r18, Z+4	; 0x04
    4458:	32 2f       	mov	r19, r18
    445a:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    445c:	11 f0       	breq	.+4      	; 0x4462 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    445e:	61 cf       	rjmp	.-318    	; 0x4322 <TWI_MasterArbitrationLostBusErrorHandler>
    4460:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    4462:	26 ff       	sbrs	r18, 6
    4464:	02 c0       	rjmp	.+4      	; 0x446a <TWI_MasterInterruptHandler+0x1a>
		TWI_MasterWriteHandler(twi);
    4466:	75 cf       	rjmp	.-278    	; 0x4352 <TWI_MasterWriteHandler>
    4468:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    446a:	22 23       	and	r18, r18
    446c:	14 f4       	brge	.+4      	; 0x4472 <TWI_MasterInterruptHandler+0x22>
		TWI_MasterReadHandler(twi);
    446e:	b1 cf       	rjmp	.-158    	; 0x43d2 <TWI_MasterReadHandler>
    4470:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    4472:	fc 01       	movw	r30, r24
    4474:	ef 5a       	subi	r30, 0xAF	; 175
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	26 e0       	ldi	r18, 0x06	; 6
    447a:	20 83       	st	Z, r18
	twi->status = TWIM_STATUS_READY;
    447c:	31 97       	sbiw	r30, 0x01	; 1
    447e:	10 82       	st	Z, r1
    4480:	08 95       	ret

00004482 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
    4482:	fc 01       	movw	r30, r24
    4484:	60 83       	st	Z, r22
    4486:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
    4488:	42 83       	std	Z+2, r20	; 0x02
    448a:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
    448c:	e3 5b       	subi	r30, 0xB3	; 179
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	10 82       	st	Z, r1
	twi->bytesSent = 0;
    4492:	31 96       	adiw	r30, 0x01	; 1
    4494:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
    4496:	31 96       	adiw	r30, 0x01	; 1
    4498:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
    449a:	31 96       	adiw	r30, 0x01	; 1
    449c:	10 82       	st	Z, r1
	twi->abort = false;
    449e:	31 96       	adiw	r30, 0x01	; 1
    44a0:	10 82       	st	Z, r1
    44a2:	08 95       	ret

000044a4 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
    44a4:	dc 01       	movw	r26, r24
    44a6:	ed 91       	ld	r30, X+
    44a8:	fc 91       	ld	r31, X
    44aa:	11 97       	sbiw	r26, 0x01	; 1
    44ac:	48 63       	ori	r20, 0x38	; 56
    44ae:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
    44b0:	ed 91       	ld	r30, X+
    44b2:	fc 91       	ld	r31, X
    44b4:	66 0f       	add	r22, r22
    44b6:	63 87       	std	Z+11, r22	; 0x0b
    44b8:	08 95       	ret

000044ba <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    44ba:	fc 01       	movw	r30, r24
    44bc:	e0 5b       	subi	r30, 0xB0	; 176
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
    44c2:	31 97       	sbiw	r30, 0x01	; 1
    44c4:	10 82       	st	Z, r1
	

	/* Process data. */
	twi->Process_Data();
    44c6:	dc 01       	movw	r26, r24
    44c8:	12 96       	adiw	r26, 0x02	; 2
    44ca:	ed 91       	ld	r30, X+
    44cc:	fc 91       	ld	r31, X
    44ce:	13 97       	sbiw	r26, 0x03	; 3
    44d0:	19 95       	eicall
    44d2:	08 95       	ret

000044d4 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
    44da:	fc 01       	movw	r30, r24
    44dc:	ef 5a       	subi	r30, 0xAF	; 175
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	80 81       	ld	r24, Z
    44e2:	88 23       	and	r24, r24
    44e4:	59 f0       	breq	.+22     	; 0x44fc <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    44e6:	e8 81       	ld	r30, Y
    44e8:	f9 81       	ldd	r31, Y+1	; 0x01
    44ea:	82 e0       	ldi	r24, 0x02	; 2
    44ec:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
    44ee:	66 e0       	ldi	r22, 0x06	; 6
    44f0:	ce 01       	movw	r24, r28
    44f2:	e3 df       	rcall	.-58     	; 0x44ba <TWI_SlaveTransactionFinished>
		twi->abort = false;
    44f4:	cf 5a       	subi	r28, 0xAF	; 175
    44f6:	df 4f       	sbci	r29, 0xFF	; 255
    44f8:	18 82       	st	Y, r1
    44fa:	16 c0       	rjmp	.+44     	; 0x4528 <TWI_SlaveAddressMatchHandler+0x54>
	} else {
		twi->status = TWIS_STATUS_BUSY;
    44fc:	fe 01       	movw	r30, r28
    44fe:	e1 5b       	subi	r30, 0xB1	; 177
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
    4506:	31 96       	adiw	r30, 0x01	; 1
    4508:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    450a:	e8 81       	ld	r30, Y
    450c:	f9 81       	ldd	r31, Y+1	; 0x01
    450e:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    4510:	8b 7f       	andi	r24, 0xFB	; 251
    4512:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
    4514:	fe 01       	movw	r30, r28
    4516:	e3 5b       	subi	r30, 0xB3	; 179
    4518:	ff 4f       	sbci	r31, 0xFF	; 255
    451a:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    451c:	31 96       	adiw	r30, 0x01	; 1
    451e:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    4520:	e8 81       	ld	r30, Y
    4522:	f9 81       	ldd	r31, Y+1	; 0x01
    4524:	83 e0       	ldi	r24, 0x03	; 3
    4526:	81 87       	std	Z+9, r24	; 0x09
	}
}
    4528:	df 91       	pop	r29
    452a:	cf 91       	pop	r28
    452c:	08 95       	ret

0000452e <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    452e:	dc 01       	movw	r26, r24
    4530:	ed 91       	ld	r30, X+
    4532:	fc 91       	ld	r31, X
    4534:	11 97       	sbiw	r26, 0x01	; 1
    4536:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    4538:	2b 7f       	andi	r18, 0xFB	; 251
    453a:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    453c:	ed 91       	ld	r30, X+
    453e:	fc 91       	ld	r31, X
    4540:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
    4542:	20 64       	ori	r18, 0x40	; 64
    4544:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
    4546:	61 e0       	ldi	r22, 0x01	; 1
    4548:	b8 cf       	rjmp	.-144    	; 0x44ba <TWI_SlaveTransactionFinished>
    454a:	08 95       	ret

0000454c <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    4552:	e8 81       	ld	r30, Y
    4554:	f9 81       	ldd	r31, Y+1	; 0x01
    4556:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
    4558:	84 60       	ori	r24, 0x04	; 4
    455a:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
    455c:	fe 01       	movw	r30, r28
    455e:	e3 5b       	subi	r30, 0xB3	; 179
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	80 81       	ld	r24, Z
    4564:	88 34       	cpi	r24, 0x48	; 72
    4566:	10 f5       	brcc	.+68     	; 0x45ac <TWI_SlaveReadHandler+0x60>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
    4568:	68 81       	ld	r22, Y
    456a:	79 81       	ldd	r23, Y+1	; 0x01
    456c:	db 01       	movw	r26, r22
    456e:	1c 96       	adiw	r26, 0x0c	; 12
    4570:	2c 91       	ld	r18, X
		twi->receivedData[twi->bytesReceived] = data;
    4572:	80 81       	ld	r24, Z
    4574:	ae 01       	movw	r20, r28
    4576:	48 0f       	add	r20, r24
    4578:	51 1d       	adc	r21, r1
    457a:	da 01       	movw	r26, r20
    457c:	14 96       	adiw	r26, 0x04	; 4
    457e:	2c 93       	st	X, r18

		twi->bytesReceived++;
    4580:	80 81       	ld	r24, Z
    4582:	8f 5f       	subi	r24, 0xFF	; 255
    4584:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
    4586:	34 96       	adiw	r30, 0x04	; 4
    4588:	80 81       	ld	r24, Z
    458a:	88 23       	and	r24, r24
    458c:	51 f0       	breq	.+20     	; 0x45a2 <TWI_SlaveReadHandler+0x56>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    458e:	82 e0       	ldi	r24, 0x02	; 2
    4590:	fb 01       	movw	r30, r22
    4592:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
    4594:	66 e0       	ldi	r22, 0x06	; 6
    4596:	ce 01       	movw	r24, r28
    4598:	90 df       	rcall	.-224    	; 0x44ba <TWI_SlaveTransactionFinished>
			twi->abort = false;
    459a:	cf 5a       	subi	r28, 0xAF	; 175
    459c:	df 4f       	sbci	r29, 0xFF	; 255
    459e:	18 82       	st	Y, r1
    45a0:	0c c0       	rjmp	.+24     	; 0x45ba <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    45a2:	83 e0       	ldi	r24, 0x03	; 3
    45a4:	db 01       	movw	r26, r22
    45a6:	19 96       	adiw	r26, 0x09	; 9
    45a8:	8c 93       	st	X, r24
    45aa:	07 c0       	rjmp	.+14     	; 0x45ba <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
    45ac:	e8 81       	ld	r30, Y
    45ae:	f9 81       	ldd	r31, Y+1	; 0x01
    45b0:	86 e0       	ldi	r24, 0x06	; 6
    45b2:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
    45b4:	62 e0       	ldi	r22, 0x02	; 2
    45b6:	ce 01       	movw	r24, r28
    45b8:	80 df       	rcall	.-256    	; 0x44ba <TWI_SlaveTransactionFinished>
	}
}
    45ba:	df 91       	pop	r29
    45bc:	cf 91       	pop	r28
    45be:	08 95       	ret

000045c0 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
    45c0:	cf 93       	push	r28
    45c2:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
    45c4:	fc 01       	movw	r30, r24
    45c6:	e2 5b       	subi	r30, 0xB2	; 178
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	20 81       	ld	r18, Z
    45cc:	22 23       	and	r18, r18
    45ce:	59 f0       	breq	.+22     	; 0x45e6 <TWI_SlaveWriteHandler+0x26>
    45d0:	dc 01       	movw	r26, r24
    45d2:	ed 91       	ld	r30, X+
    45d4:	fc 91       	ld	r31, X
    45d6:	22 85       	ldd	r18, Z+10	; 0x0a
    45d8:	24 ff       	sbrs	r18, 4
    45da:	05 c0       	rjmp	.+10     	; 0x45e6 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    45dc:	22 e0       	ldi	r18, 0x02	; 2
    45de:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
    45e0:	61 e0       	ldi	r22, 0x01	; 1
    45e2:	6b df       	rcall	.-298    	; 0x44ba <TWI_SlaveTransactionFinished>
    45e4:	21 c0       	rjmp	.+66     	; 0x4628 <TWI_SlaveWriteHandler+0x68>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
    45e6:	fc 01       	movw	r30, r24
    45e8:	e2 5b       	subi	r30, 0xB2	; 178
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	20 81       	ld	r18, Z
    45ee:	21 11       	cpse	r18, r1
    45f0:	14 c0       	rjmp	.+40     	; 0x461a <TWI_SlaveWriteHandler+0x5a>
			uint8_t data = twi->sendData[twi->bytesSent];
    45f2:	20 81       	ld	r18, Z
    45f4:	dc 01       	movw	r26, r24
    45f6:	a2 0f       	add	r26, r18
    45f8:	b1 1d       	adc	r27, r1
    45fa:	a4 5b       	subi	r26, 0xB4	; 180
    45fc:	bf 4f       	sbci	r27, 0xFF	; 255
    45fe:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
    4600:	ec 01       	movw	r28, r24
    4602:	a8 81       	ld	r26, Y
    4604:	b9 81       	ldd	r27, Y+1	; 0x01
    4606:	1c 96       	adiw	r26, 0x0c	; 12
    4608:	2c 93       	st	X, r18
			twi->bytesSent++;
    460a:	20 81       	ld	r18, Z
    460c:	2f 5f       	subi	r18, 0xFF	; 255
    460e:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    4610:	e8 81       	ld	r30, Y
    4612:	f9 81       	ldd	r31, Y+1	; 0x01
    4614:	83 e0       	ldi	r24, 0x03	; 3
    4616:	81 87       	std	Z+9, r24	; 0x09
    4618:	07 c0       	rjmp	.+14     	; 0x4628 <TWI_SlaveWriteHandler+0x68>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    461a:	dc 01       	movw	r26, r24
    461c:	ed 91       	ld	r30, X+
    461e:	fc 91       	ld	r31, X
    4620:	22 e0       	ldi	r18, 0x02	; 2
    4622:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
    4624:	62 e0       	ldi	r22, 0x02	; 2
    4626:	49 df       	rcall	.-366    	; 0x44ba <TWI_SlaveTransactionFinished>
		}
	}
}
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	08 95       	ret

0000462e <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
    462e:	dc 01       	movw	r26, r24
    4630:	ed 91       	ld	r30, X+
    4632:	fc 91       	ld	r31, X
    4634:	22 85       	ldd	r18, Z+10	; 0x0a
    4636:	21 ff       	sbrs	r18, 1
    4638:	02 c0       	rjmp	.+4      	; 0x463e <TWI_SlaveDataHandler+0x10>
		TWI_SlaveWriteHandler(twi);
    463a:	c2 cf       	rjmp	.-124    	; 0x45c0 <TWI_SlaveWriteHandler>
    463c:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
    463e:	86 cf       	rjmp	.-244    	; 0x454c <TWI_SlaveReadHandler>
    4640:	08 95       	ret

00004642 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    4642:	dc 01       	movw	r26, r24
    4644:	ed 91       	ld	r30, X+
    4646:	fc 91       	ld	r31, X
    4648:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
    464a:	22 ff       	sbrs	r18, 2
    464c:	0c c0       	rjmp	.+24     	; 0x4666 <TWI_SlaveInterruptHandler+0x24>
		twi->bytesReceived = 0;
    464e:	fc 01       	movw	r30, r24
    4650:	e3 5b       	subi	r30, 0xB3	; 179
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    4656:	31 96       	adiw	r30, 0x01	; 1
    4658:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
    465a:	32 96       	adiw	r30, 0x02	; 2
    465c:	24 e0       	ldi	r18, 0x04	; 4
    465e:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
    4660:	31 97       	sbiw	r30, 0x01	; 1
    4662:	10 82       	st	Z, r1
    4664:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
    4666:	23 ff       	sbrs	r18, 3
    4668:	0c c0       	rjmp	.+24     	; 0x4682 <TWI_SlaveInterruptHandler+0x40>
		twi->bytesReceived = 0;
    466a:	fc 01       	movw	r30, r24
    466c:	e3 5b       	subi	r30, 0xB3	; 179
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	10 82       	st	Z, r1
		twi->bytesSent = 0;
    4672:	31 96       	adiw	r30, 0x01	; 1
    4674:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
    4676:	32 96       	adiw	r30, 0x02	; 2
    4678:	23 e0       	ldi	r18, 0x03	; 3
    467a:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
    467c:	31 97       	sbiw	r30, 0x01	; 1
    467e:	10 82       	st	Z, r1
    4680:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
    4682:	42 2f       	mov	r20, r18
    4684:	40 74       	andi	r20, 0x40	; 64
    4686:	32 2f       	mov	r19, r18
    4688:	31 74       	andi	r19, 0x41	; 65
    468a:	31 34       	cpi	r19, 0x41	; 65
    468c:	11 f4       	brne	.+4      	; 0x4692 <TWI_SlaveInterruptHandler+0x50>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
    468e:	22 cf       	rjmp	.-444    	; 0x44d4 <TWI_SlaveAddressMatchHandler>
    4690:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
    4692:	44 23       	and	r20, r20
    4694:	11 f0       	breq	.+4      	; 0x469a <TWI_SlaveInterruptHandler+0x58>
		TWI_SlaveStopHandler(twi);
    4696:	4b cf       	rjmp	.-362    	; 0x452e <TWI_SlaveStopHandler>
    4698:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
    469a:	22 23       	and	r18, r18
    469c:	14 f4       	brge	.+4      	; 0x46a2 <TWI_SlaveInterruptHandler+0x60>
		TWI_SlaveDataHandler(twi);
    469e:	c7 cf       	rjmp	.-114    	; 0x462e <TWI_SlaveDataHandler>
    46a0:	08 95       	ret
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
    46a2:	65 e0       	ldi	r22, 0x05	; 5
    46a4:	0a cf       	rjmp	.-492    	; 0x44ba <TWI_SlaveTransactionFinished>
    46a6:	08 95       	ret

000046a8 <__vector_25>:
 *  as argument.
 */
ISR(USARTC0_RXC_vect){ if( USART_RXComplete(usartBufferC) ) taskYIELD(); }
ISR(USARTD0_RXC_vect){ if( USART_RXComplete(usartBufferD) ) taskYIELD(); }
ISR(USARTE0_RXC_vect){ if( USART_RXComplete(usartBufferE) ) taskYIELD(); }
ISR(USARTF0_RXC_vect){ if( USART_RXComplete(usartBufferF) ) taskYIELD(); }
    46a8:	1f 92       	push	r1
    46aa:	0f 92       	push	r0
    46ac:	0f b6       	in	r0, 0x3f	; 63
    46ae:	0f 92       	push	r0
    46b0:	11 24       	eor	r1, r1
    46b2:	08 b6       	in	r0, 0x38	; 56
    46b4:	0f 92       	push	r0
    46b6:	18 be       	out	0x38, r1	; 56
    46b8:	09 b6       	in	r0, 0x39	; 57
    46ba:	0f 92       	push	r0
    46bc:	19 be       	out	0x39, r1	; 57
    46be:	0a b6       	in	r0, 0x3a	; 58
    46c0:	0f 92       	push	r0
    46c2:	1a be       	out	0x3a, r1	; 58
    46c4:	0b b6       	in	r0, 0x3b	; 59
    46c6:	0f 92       	push	r0
    46c8:	1b be       	out	0x3b, r1	; 59
    46ca:	2f 93       	push	r18
    46cc:	3f 93       	push	r19
    46ce:	4f 93       	push	r20
    46d0:	5f 93       	push	r21
    46d2:	6f 93       	push	r22
    46d4:	7f 93       	push	r23
    46d6:	8f 93       	push	r24
    46d8:	9f 93       	push	r25
    46da:	af 93       	push	r26
    46dc:	bf 93       	push	r27
    46de:	ef 93       	push	r30
    46e0:	ff 93       	push	r31
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	1f 92       	push	r1
    46e8:	1f 92       	push	r1
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	e0 91 76 3d 	lds	r30, 0x3D76
    46f2:	f0 91 77 3d 	lds	r31, 0x3D77
    46f6:	1a 82       	std	Y+2, r1	; 0x02
    46f8:	a0 81       	ld	r26, Z
    46fa:	b1 81       	ldd	r27, Z+1	; 0x01
    46fc:	8c 91       	ld	r24, X
    46fe:	89 83       	std	Y+1, r24	; 0x01
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	ae 01       	movw	r20, r28
    4704:	4e 5f       	subi	r20, 0xFE	; 254
    4706:	5f 4f       	sbci	r21, 0xFF	; 255
    4708:	be 01       	movw	r22, r28
    470a:	6f 5f       	subi	r22, 0xFF	; 255
    470c:	7f 4f       	sbci	r23, 0xFF	; 255
    470e:	83 81       	ldd	r24, Z+3	; 0x03
    4710:	94 81       	ldd	r25, Z+4	; 0x04
    4712:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    4716:	8a 81       	ldd	r24, Y+2	; 0x02
    4718:	81 11       	cpse	r24, r1
    471a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    471e:	0f 90       	pop	r0
    4720:	0f 90       	pop	r0
    4722:	df 91       	pop	r29
    4724:	cf 91       	pop	r28
    4726:	ff 91       	pop	r31
    4728:	ef 91       	pop	r30
    472a:	bf 91       	pop	r27
    472c:	af 91       	pop	r26
    472e:	9f 91       	pop	r25
    4730:	8f 91       	pop	r24
    4732:	7f 91       	pop	r23
    4734:	6f 91       	pop	r22
    4736:	5f 91       	pop	r21
    4738:	4f 91       	pop	r20
    473a:	3f 91       	pop	r19
    473c:	2f 91       	pop	r18
    473e:	0f 90       	pop	r0
    4740:	0b be       	out	0x3b, r0	; 59
    4742:	0f 90       	pop	r0
    4744:	0a be       	out	0x3a, r0	; 58
    4746:	0f 90       	pop	r0
    4748:	09 be       	out	0x39, r0	; 57
    474a:	0f 90       	pop	r0
    474c:	08 be       	out	0x38, r0	; 56
    474e:	0f 90       	pop	r0
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	0f 90       	pop	r0
    4754:	1f 90       	pop	r1
    4756:	18 95       	reti

00004758 <__vector_88>:
    4758:	1f 92       	push	r1
    475a:	0f 92       	push	r0
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	0f 92       	push	r0
    4760:	11 24       	eor	r1, r1
    4762:	08 b6       	in	r0, 0x38	; 56
    4764:	0f 92       	push	r0
    4766:	18 be       	out	0x38, r1	; 56
    4768:	09 b6       	in	r0, 0x39	; 57
    476a:	0f 92       	push	r0
    476c:	19 be       	out	0x39, r1	; 57
    476e:	0a b6       	in	r0, 0x3a	; 58
    4770:	0f 92       	push	r0
    4772:	1a be       	out	0x3a, r1	; 58
    4774:	0b b6       	in	r0, 0x3b	; 59
    4776:	0f 92       	push	r0
    4778:	1b be       	out	0x3b, r1	; 59
    477a:	2f 93       	push	r18
    477c:	3f 93       	push	r19
    477e:	4f 93       	push	r20
    4780:	5f 93       	push	r21
    4782:	6f 93       	push	r22
    4784:	7f 93       	push	r23
    4786:	8f 93       	push	r24
    4788:	9f 93       	push	r25
    478a:	af 93       	push	r26
    478c:	bf 93       	push	r27
    478e:	ef 93       	push	r30
    4790:	ff 93       	push	r31
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	1f 92       	push	r1
    4798:	1f 92       	push	r1
    479a:	cd b7       	in	r28, 0x3d	; 61
    479c:	de b7       	in	r29, 0x3e	; 62
    479e:	e0 91 74 3d 	lds	r30, 0x3D74
    47a2:	f0 91 75 3d 	lds	r31, 0x3D75
    47a6:	1a 82       	std	Y+2, r1	; 0x02
    47a8:	a0 81       	ld	r26, Z
    47aa:	b1 81       	ldd	r27, Z+1	; 0x01
    47ac:	8c 91       	ld	r24, X
    47ae:	89 83       	std	Y+1, r24	; 0x01
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	ae 01       	movw	r20, r28
    47b4:	4e 5f       	subi	r20, 0xFE	; 254
    47b6:	5f 4f       	sbci	r21, 0xFF	; 255
    47b8:	be 01       	movw	r22, r28
    47ba:	6f 5f       	subi	r22, 0xFF	; 255
    47bc:	7f 4f       	sbci	r23, 0xFF	; 255
    47be:	83 81       	ldd	r24, Z+3	; 0x03
    47c0:	94 81       	ldd	r25, Z+4	; 0x04
    47c2:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    47c6:	8a 81       	ldd	r24, Y+2	; 0x02
    47c8:	81 11       	cpse	r24, r1
    47ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	df 91       	pop	r29
    47d4:	cf 91       	pop	r28
    47d6:	ff 91       	pop	r31
    47d8:	ef 91       	pop	r30
    47da:	bf 91       	pop	r27
    47dc:	af 91       	pop	r26
    47de:	9f 91       	pop	r25
    47e0:	8f 91       	pop	r24
    47e2:	7f 91       	pop	r23
    47e4:	6f 91       	pop	r22
    47e6:	5f 91       	pop	r21
    47e8:	4f 91       	pop	r20
    47ea:	3f 91       	pop	r19
    47ec:	2f 91       	pop	r18
    47ee:	0f 90       	pop	r0
    47f0:	0b be       	out	0x3b, r0	; 59
    47f2:	0f 90       	pop	r0
    47f4:	0a be       	out	0x3a, r0	; 58
    47f6:	0f 90       	pop	r0
    47f8:	09 be       	out	0x39, r0	; 57
    47fa:	0f 90       	pop	r0
    47fc:	08 be       	out	0x38, r0	; 56
    47fe:	0f 90       	pop	r0
    4800:	0f be       	out	0x3f, r0	; 63
    4802:	0f 90       	pop	r0
    4804:	1f 90       	pop	r1
    4806:	18 95       	reti

00004808 <__vector_58>:
    4808:	1f 92       	push	r1
    480a:	0f 92       	push	r0
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	0f 92       	push	r0
    4810:	11 24       	eor	r1, r1
    4812:	08 b6       	in	r0, 0x38	; 56
    4814:	0f 92       	push	r0
    4816:	18 be       	out	0x38, r1	; 56
    4818:	09 b6       	in	r0, 0x39	; 57
    481a:	0f 92       	push	r0
    481c:	19 be       	out	0x39, r1	; 57
    481e:	0a b6       	in	r0, 0x3a	; 58
    4820:	0f 92       	push	r0
    4822:	1a be       	out	0x3a, r1	; 58
    4824:	0b b6       	in	r0, 0x3b	; 59
    4826:	0f 92       	push	r0
    4828:	1b be       	out	0x3b, r1	; 59
    482a:	2f 93       	push	r18
    482c:	3f 93       	push	r19
    482e:	4f 93       	push	r20
    4830:	5f 93       	push	r21
    4832:	6f 93       	push	r22
    4834:	7f 93       	push	r23
    4836:	8f 93       	push	r24
    4838:	9f 93       	push	r25
    483a:	af 93       	push	r26
    483c:	bf 93       	push	r27
    483e:	ef 93       	push	r30
    4840:	ff 93       	push	r31
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	1f 92       	push	r1
    4848:	1f 92       	push	r1
    484a:	cd b7       	in	r28, 0x3d	; 61
    484c:	de b7       	in	r29, 0x3e	; 62
    484e:	e0 91 72 3d 	lds	r30, 0x3D72
    4852:	f0 91 73 3d 	lds	r31, 0x3D73
    4856:	1a 82       	std	Y+2, r1	; 0x02
    4858:	a0 81       	ld	r26, Z
    485a:	b1 81       	ldd	r27, Z+1	; 0x01
    485c:	8c 91       	ld	r24, X
    485e:	89 83       	std	Y+1, r24	; 0x01
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	ae 01       	movw	r20, r28
    4864:	4e 5f       	subi	r20, 0xFE	; 254
    4866:	5f 4f       	sbci	r21, 0xFF	; 255
    4868:	be 01       	movw	r22, r28
    486a:	6f 5f       	subi	r22, 0xFF	; 255
    486c:	7f 4f       	sbci	r23, 0xFF	; 255
    486e:	83 81       	ldd	r24, Z+3	; 0x03
    4870:	94 81       	ldd	r25, Z+4	; 0x04
    4872:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueGenericSendFromISR>
    4876:	8a 81       	ldd	r24, Y+2	; 0x02
    4878:	81 11       	cpse	r24, r1
    487a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vPortYield>
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	df 91       	pop	r29
    4884:	cf 91       	pop	r28
    4886:	ff 91       	pop	r31
    4888:	ef 91       	pop	r30
    488a:	bf 91       	pop	r27
    488c:	af 91       	pop	r26
    488e:	9f 91       	pop	r25
    4890:	8f 91       	pop	r24
    4892:	7f 91       	pop	r23
    4894:	6f 91       	pop	r22
    4896:	5f 91       	pop	r21
    4898:	4f 91       	pop	r20
    489a:	3f 91       	pop	r19
    489c:	2f 91       	pop	r18
    489e:	0f 90       	pop	r0
    48a0:	0b be       	out	0x3b, r0	; 59
    48a2:	0f 90       	pop	r0
    48a4:	0a be       	out	0x3a, r0	; 58
    48a6:	0f 90       	pop	r0
    48a8:	09 be       	out	0x39, r0	; 57
    48aa:	0f 90       	pop	r0
    48ac:	08 be       	out	0x38, r0	; 56
    48ae:	0f 90       	pop	r0
    48b0:	0f be       	out	0x3f, r0	; 63
    48b2:	0f 90       	pop	r0
    48b4:	1f 90       	pop	r1
    48b6:	18 95       	reti

000048b8 <__vector_26>:
 *
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
    48b8:	1f 92       	push	r1
    48ba:	0f 92       	push	r0
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	0f 92       	push	r0
    48c0:	11 24       	eor	r1, r1
    48c2:	08 b6       	in	r0, 0x38	; 56
    48c4:	0f 92       	push	r0
    48c6:	18 be       	out	0x38, r1	; 56
    48c8:	09 b6       	in	r0, 0x39	; 57
    48ca:	0f 92       	push	r0
    48cc:	19 be       	out	0x39, r1	; 57
    48ce:	0a b6       	in	r0, 0x3a	; 58
    48d0:	0f 92       	push	r0
    48d2:	1a be       	out	0x3a, r1	; 58
    48d4:	0b b6       	in	r0, 0x3b	; 59
    48d6:	0f 92       	push	r0
    48d8:	1b be       	out	0x3b, r1	; 59
    48da:	0f 93       	push	r16
    48dc:	1f 93       	push	r17
    48de:	2f 93       	push	r18
    48e0:	3f 93       	push	r19
    48e2:	4f 93       	push	r20
    48e4:	5f 93       	push	r21
    48e6:	6f 93       	push	r22
    48e8:	7f 93       	push	r23
    48ea:	8f 93       	push	r24
    48ec:	9f 93       	push	r25
    48ee:	af 93       	push	r26
    48f0:	bf 93       	push	r27
    48f2:	ef 93       	push	r30
    48f4:	ff 93       	push	r31
    48f6:	cf 93       	push	r28
    48f8:	df 93       	push	r29
    48fa:	1f 92       	push	r1
    48fc:	1f 92       	push	r1
    48fe:	cd b7       	in	r28, 0x3d	; 61
    4900:	de b7       	in	r29, 0x3e	; 62
    4902:	00 91 76 3d 	lds	r16, 0x3D76
    4906:	10 91 77 3d 	lds	r17, 0x3D77
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    490a:	ae 01       	movw	r20, r28
    490c:	4f 5f       	subi	r20, 0xFF	; 255
    490e:	5f 4f       	sbci	r21, 0xFF	; 255
    4910:	be 01       	movw	r22, r28
    4912:	6e 5f       	subi	r22, 0xFE	; 254
    4914:	7f 4f       	sbci	r23, 0xFF	; 255
    4916:	d8 01       	movw	r26, r16
    4918:	15 96       	adiw	r26, 0x05	; 5
    491a:	8d 91       	ld	r24, X+
    491c:	9c 91       	ld	r25, X
    491e:	16 97       	sbiw	r26, 0x06	; 6
    4920:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	31 f4       	brne	.+12     	; 0x4934 <__vector_26+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    4928:	d8 01       	movw	r26, r16
    492a:	ed 91       	ld	r30, X+
    492c:	fc 91       	ld	r31, X
    492e:	8a 81       	ldd	r24, Y+2	; 0x02
    4930:	80 83       	st	Z, r24
    4932:	06 c0       	rjmp	.+12     	; 0x4940 <__vector_26+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    4934:	d8 01       	movw	r26, r16
    4936:	ed 91       	ld	r30, X+
    4938:	fc 91       	ld	r31, X
    493a:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    493c:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    493e:	83 83       	std	Z+3, r24	; 0x03
 *
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	df 91       	pop	r29
    4946:	cf 91       	pop	r28
    4948:	ff 91       	pop	r31
    494a:	ef 91       	pop	r30
    494c:	bf 91       	pop	r27
    494e:	af 91       	pop	r26
    4950:	9f 91       	pop	r25
    4952:	8f 91       	pop	r24
    4954:	7f 91       	pop	r23
    4956:	6f 91       	pop	r22
    4958:	5f 91       	pop	r21
    495a:	4f 91       	pop	r20
    495c:	3f 91       	pop	r19
    495e:	2f 91       	pop	r18
    4960:	1f 91       	pop	r17
    4962:	0f 91       	pop	r16
    4964:	0f 90       	pop	r0
    4966:	0b be       	out	0x3b, r0	; 59
    4968:	0f 90       	pop	r0
    496a:	0a be       	out	0x3a, r0	; 58
    496c:	0f 90       	pop	r0
    496e:	09 be       	out	0x39, r0	; 57
    4970:	0f 90       	pop	r0
    4972:	08 be       	out	0x38, r0	; 56
    4974:	0f 90       	pop	r0
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	0f 90       	pop	r0
    497a:	1f 90       	pop	r1
    497c:	18 95       	reti

0000497e <__vector_89>:
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
    497e:	1f 92       	push	r1
    4980:	0f 92       	push	r0
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	0f 92       	push	r0
    4986:	11 24       	eor	r1, r1
    4988:	08 b6       	in	r0, 0x38	; 56
    498a:	0f 92       	push	r0
    498c:	18 be       	out	0x38, r1	; 56
    498e:	09 b6       	in	r0, 0x39	; 57
    4990:	0f 92       	push	r0
    4992:	19 be       	out	0x39, r1	; 57
    4994:	0a b6       	in	r0, 0x3a	; 58
    4996:	0f 92       	push	r0
    4998:	1a be       	out	0x3a, r1	; 58
    499a:	0b b6       	in	r0, 0x3b	; 59
    499c:	0f 92       	push	r0
    499e:	1b be       	out	0x3b, r1	; 59
    49a0:	0f 93       	push	r16
    49a2:	1f 93       	push	r17
    49a4:	2f 93       	push	r18
    49a6:	3f 93       	push	r19
    49a8:	4f 93       	push	r20
    49aa:	5f 93       	push	r21
    49ac:	6f 93       	push	r22
    49ae:	7f 93       	push	r23
    49b0:	8f 93       	push	r24
    49b2:	9f 93       	push	r25
    49b4:	af 93       	push	r26
    49b6:	bf 93       	push	r27
    49b8:	ef 93       	push	r30
    49ba:	ff 93       	push	r31
    49bc:	cf 93       	push	r28
    49be:	df 93       	push	r29
    49c0:	1f 92       	push	r1
    49c2:	1f 92       	push	r1
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
    49c8:	00 91 74 3d 	lds	r16, 0x3D74
    49cc:	10 91 75 3d 	lds	r17, 0x3D75
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    49d0:	ae 01       	movw	r20, r28
    49d2:	4f 5f       	subi	r20, 0xFF	; 255
    49d4:	5f 4f       	sbci	r21, 0xFF	; 255
    49d6:	be 01       	movw	r22, r28
    49d8:	6e 5f       	subi	r22, 0xFE	; 254
    49da:	7f 4f       	sbci	r23, 0xFF	; 255
    49dc:	d8 01       	movw	r26, r16
    49de:	15 96       	adiw	r26, 0x05	; 5
    49e0:	8d 91       	ld	r24, X+
    49e2:	9c 91       	ld	r25, X
    49e4:	16 97       	sbiw	r26, 0x06	; 6
    49e6:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    49ea:	81 30       	cpi	r24, 0x01	; 1
    49ec:	31 f4       	brne	.+12     	; 0x49fa <__vector_89+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    49ee:	d8 01       	movw	r26, r16
    49f0:	ed 91       	ld	r30, X+
    49f2:	fc 91       	ld	r31, X
    49f4:	8a 81       	ldd	r24, Y+2	; 0x02
    49f6:	80 83       	st	Z, r24
    49f8:	06 c0       	rjmp	.+12     	; 0x4a06 <__vector_89+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    49fa:	d8 01       	movw	r26, r16
    49fc:	ed 91       	ld	r30, X+
    49fe:	fc 91       	ld	r31, X
    4a00:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4a02:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4a04:	83 83       	std	Z+3, r24	; 0x03
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
    4a06:	0f 90       	pop	r0
    4a08:	0f 90       	pop	r0
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	ff 91       	pop	r31
    4a10:	ef 91       	pop	r30
    4a12:	bf 91       	pop	r27
    4a14:	af 91       	pop	r26
    4a16:	9f 91       	pop	r25
    4a18:	8f 91       	pop	r24
    4a1a:	7f 91       	pop	r23
    4a1c:	6f 91       	pop	r22
    4a1e:	5f 91       	pop	r21
    4a20:	4f 91       	pop	r20
    4a22:	3f 91       	pop	r19
    4a24:	2f 91       	pop	r18
    4a26:	1f 91       	pop	r17
    4a28:	0f 91       	pop	r16
    4a2a:	0f 90       	pop	r0
    4a2c:	0b be       	out	0x3b, r0	; 59
    4a2e:	0f 90       	pop	r0
    4a30:	0a be       	out	0x3a, r0	; 58
    4a32:	0f 90       	pop	r0
    4a34:	09 be       	out	0x39, r0	; 57
    4a36:	0f 90       	pop	r0
    4a38:	08 be       	out	0x38, r0	; 56
    4a3a:	0f 90       	pop	r0
    4a3c:	0f be       	out	0x3f, r0	; 63
    4a3e:	0f 90       	pop	r0
    4a40:	1f 90       	pop	r1
    4a42:	18 95       	reti

00004a44 <__vector_59>:
ISR(USARTE0_DRE_vect){USART_DataRegEmpty(usartBufferE);}
    4a44:	1f 92       	push	r1
    4a46:	0f 92       	push	r0
    4a48:	0f b6       	in	r0, 0x3f	; 63
    4a4a:	0f 92       	push	r0
    4a4c:	11 24       	eor	r1, r1
    4a4e:	08 b6       	in	r0, 0x38	; 56
    4a50:	0f 92       	push	r0
    4a52:	18 be       	out	0x38, r1	; 56
    4a54:	09 b6       	in	r0, 0x39	; 57
    4a56:	0f 92       	push	r0
    4a58:	19 be       	out	0x39, r1	; 57
    4a5a:	0a b6       	in	r0, 0x3a	; 58
    4a5c:	0f 92       	push	r0
    4a5e:	1a be       	out	0x3a, r1	; 58
    4a60:	0b b6       	in	r0, 0x3b	; 59
    4a62:	0f 92       	push	r0
    4a64:	1b be       	out	0x3b, r1	; 59
    4a66:	0f 93       	push	r16
    4a68:	1f 93       	push	r17
    4a6a:	2f 93       	push	r18
    4a6c:	3f 93       	push	r19
    4a6e:	4f 93       	push	r20
    4a70:	5f 93       	push	r21
    4a72:	6f 93       	push	r22
    4a74:	7f 93       	push	r23
    4a76:	8f 93       	push	r24
    4a78:	9f 93       	push	r25
    4a7a:	af 93       	push	r26
    4a7c:	bf 93       	push	r27
    4a7e:	ef 93       	push	r30
    4a80:	ff 93       	push	r31
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	1f 92       	push	r1
    4a88:	1f 92       	push	r1
    4a8a:	cd b7       	in	r28, 0x3d	; 61
    4a8c:	de b7       	in	r29, 0x3e	; 62
    4a8e:	00 91 72 3d 	lds	r16, 0x3D72
    4a92:	10 91 73 3d 	lds	r17, 0x3D73
 *  \param usart_struct      The USART_struct_t struct instance.
 */
inline signed char USART_DataRegEmpty(UsartBuffer * usartBuffer)
{
	signed char cChar, cTaskWoken;
		if( xQueueReceiveFromISR( usartBuffer->xQueueTX, &cChar, &cTaskWoken ) == pdTRUE )
    4a96:	ae 01       	movw	r20, r28
    4a98:	4f 5f       	subi	r20, 0xFF	; 255
    4a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a9c:	be 01       	movw	r22, r28
    4a9e:	6e 5f       	subi	r22, 0xFE	; 254
    4aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa2:	d8 01       	movw	r26, r16
    4aa4:	15 96       	adiw	r26, 0x05	; 5
    4aa6:	8d 91       	ld	r24, X+
    4aa8:	9c 91       	ld	r25, X
    4aaa:	16 97       	sbiw	r26, 0x06	; 6
    4aac:	0e 94 a1 09 	call	0x1342	; 0x1342 <xQueueReceiveFromISR>
    4ab0:	81 30       	cpi	r24, 0x01	; 1
    4ab2:	31 f4       	brne	.+12     	; 0x4ac0 <__vector_59+0x7c>
		{
			/* Send the next character queued for Tx. */
			usartBuffer->usart->DATA = cChar;
    4ab4:	d8 01       	movw	r26, r16
    4ab6:	ed 91       	ld	r30, X+
    4ab8:	fc 91       	ld	r31, X
    4aba:	8a 81       	ldd	r24, Y+2	; 0x02
    4abc:	80 83       	st	Z, r24
    4abe:	06 c0       	rjmp	.+12     	; 0x4acc <__vector_59+0x88>
		}
		else
		{
			/* Queue empty, nothing to send. */
		    /* Disable DRE interrupts. */
			uint8_t tempCTRLA = usartBuffer->usart->CTRLA;
    4ac0:	d8 01       	movw	r26, r16
    4ac2:	ed 91       	ld	r30, X+
    4ac4:	fc 91       	ld	r31, X
    4ac6:	83 81       	ldd	r24, Z+3	; 0x03
			tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    4ac8:	8c 7f       	andi	r24, 0xFC	; 252
			usartBuffer->usart->CTRLA = tempCTRLA;
    4aca:	83 83       	std	Z+3, r24	; 0x03
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect){USART_DataRegEmpty(usartBufferC);}
ISR(USARTD0_DRE_vect){USART_DataRegEmpty(usartBufferD);}
ISR(USARTE0_DRE_vect){USART_DataRegEmpty(usartBufferE);}
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	ff 91       	pop	r31
    4ad6:	ef 91       	pop	r30
    4ad8:	bf 91       	pop	r27
    4ada:	af 91       	pop	r26
    4adc:	9f 91       	pop	r25
    4ade:	8f 91       	pop	r24
    4ae0:	7f 91       	pop	r23
    4ae2:	6f 91       	pop	r22
    4ae4:	5f 91       	pop	r21
    4ae6:	4f 91       	pop	r20
    4ae8:	3f 91       	pop	r19
    4aea:	2f 91       	pop	r18
    4aec:	1f 91       	pop	r17
    4aee:	0f 91       	pop	r16
    4af0:	0f 90       	pop	r0
    4af2:	0b be       	out	0x3b, r0	; 59
    4af4:	0f 90       	pop	r0
    4af6:	0a be       	out	0x3a, r0	; 58
    4af8:	0f 90       	pop	r0
    4afa:	09 be       	out	0x39, r0	; 57
    4afc:	0f 90       	pop	r0
    4afe:	08 be       	out	0x38, r0	; 56
    4b00:	0f 90       	pop	r0
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	0f 90       	pop	r0
    4b06:	1f 90       	pop	r1
    4b08:	18 95       	reti

00004b0a <timerRTC>:
/* -------------------------------------------------------------------- */
/*	Timing of the RTC every 1s											*/
/* -------------------------------------------------------------------- */
void timerRTC(void *p)
{
	if (secondsTimer++ == 3600) 
    4b0a:	80 91 82 3d 	lds	r24, 0x3D82
    4b0e:	90 91 83 3d 	lds	r25, 0x3D83
    4b12:	a0 91 84 3d 	lds	r26, 0x3D84
    4b16:	b0 91 85 3d 	lds	r27, 0x3D85
    4b1a:	ac 01       	movw	r20, r24
    4b1c:	bd 01       	movw	r22, r26
    4b1e:	4f 5f       	subi	r20, 0xFF	; 255
    4b20:	5f 4f       	sbci	r21, 0xFF	; 255
    4b22:	6f 4f       	sbci	r22, 0xFF	; 255
    4b24:	7f 4f       	sbci	r23, 0xFF	; 255
    4b26:	40 93 82 3d 	sts	0x3D82, r20
    4b2a:	50 93 83 3d 	sts	0x3D83, r21
    4b2e:	60 93 84 3d 	sts	0x3D84, r22
    4b32:	70 93 85 3d 	sts	0x3D85, r23
    4b36:	80 31       	cpi	r24, 0x10	; 16
    4b38:	9e 40       	sbci	r25, 0x0E	; 14
    4b3a:	a1 05       	cpc	r26, r1
    4b3c:	b1 05       	cpc	r27, r1
    4b3e:	d9 f4       	brne	.+54     	; 0x4b76 <timerRTC+0x6c>
	{
		secondsTimer = 0;
    4b40:	10 92 82 3d 	sts	0x3D82, r1
    4b44:	10 92 83 3d 	sts	0x3D83, r1
    4b48:	10 92 84 3d 	sts	0x3D84, r1
    4b4c:	10 92 85 3d 	sts	0x3D85, r1
		hoursTimer++;
    4b50:	80 91 78 3d 	lds	r24, 0x3D78
    4b54:	90 91 79 3d 	lds	r25, 0x3D79
    4b58:	a0 91 7a 3d 	lds	r26, 0x3D7A
    4b5c:	b0 91 7b 3d 	lds	r27, 0x3D7B
    4b60:	01 96       	adiw	r24, 0x01	; 1
    4b62:	a1 1d       	adc	r26, r1
    4b64:	b1 1d       	adc	r27, r1
    4b66:	80 93 78 3d 	sts	0x3D78, r24
    4b6a:	90 93 79 3d 	sts	0x3D79, r25
    4b6e:	a0 93 7a 3d 	sts	0x3D7A, r26
    4b72:	b0 93 7b 3d 	sts	0x3D7B, r27
    4b76:	08 95       	ret

00004b78 <boardInit>:
 

/* -------------------------------------------------------------------- */
/*	Initialize the xMega peripherals									*/
/* -------------------------------------------------------------------- */
void boardInit() {
    4b78:	0f 93       	push	r16
    4b7a:	1f 93       	push	r17
	
	// prepare i/o
	ioport_init();

	// clock init & enable system clock to all peripheral modules
	sysclk_init();
    4b7c:	7a d0       	rcall	.+244    	; 0x4c72 <sysclk_init>
	//enable_xtal();
	
	// enable SPI communication on port C for SPI memory
	//spi_mem_init();	
	
	sysclk_enable_module(SYSCLK_PORT_GEN, 0xff);
    4b7e:	6f ef       	ldi	r22, 0xFF	; 255
    4b80:	80 e0       	ldi	r24, 0x00	; 0
    4b82:	9e d0       	rcall	.+316    	; 0x4cc0 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_A, 0xff);
    4b84:	6f ef       	ldi	r22, 0xFF	; 255
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	9b d0       	rcall	.+310    	; 0x4cc0 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_B, 0xff);
    4b8a:	6f ef       	ldi	r22, 0xFF	; 255
    4b8c:	82 e0       	ldi	r24, 0x02	; 2
    4b8e:	98 d0       	rcall	.+304    	; 0x4cc0 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, 0xff);
    4b90:	6f ef       	ldi	r22, 0xFF	; 255
    4b92:	83 e0       	ldi	r24, 0x03	; 3
    4b94:	95 d0       	rcall	.+298    	; 0x4cc0 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, 0xff);
    4b96:	6f ef       	ldi	r22, 0xFF	; 255
    4b98:	84 e0       	ldi	r24, 0x04	; 4
    4b9a:	92 d0       	rcall	.+292    	; 0x4cc0 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E, 0xff);
    4b9c:	6f ef       	ldi	r22, 0xFF	; 255
    4b9e:	85 e0       	ldi	r24, 0x05	; 5
    4ba0:	8f d0       	rcall	.+286    	; 0x4cc0 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, 0xff);
    4ba2:	6f ef       	ldi	r22, 0xFF	; 255
    4ba4:	86 e0       	ldi	r24, 0x06	; 6
    4ba6:	8c d0       	rcall	.+280    	; 0x4cc0 <sysclk_enable_module>
		
/* -------------------------------------------------------------------- */
/*	Timer for RTC - SW timer											*/
/* -------------------------------------------------------------------- */
	
	xTimers[0] = xTimerCreate("timerRTC", 1000, pdTRUE,( void * ) 0, timerRTC);
    4ba8:	05 e8       	ldi	r16, 0x85	; 133
    4baa:	15 e2       	ldi	r17, 0x25	; 37
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	41 e0       	ldi	r20, 0x01	; 1
    4bb2:	68 ee       	ldi	r22, 0xE8	; 232
    4bb4:	73 e0       	ldi	r23, 0x03	; 3
    4bb6:	87 ef       	ldi	r24, 0xF7	; 247
    4bb8:	90 e2       	ldi	r25, 0x20	; 32
    4bba:	0e 94 28 10 	call	0x2050	; 0x2050 <xTimerCreate>
    4bbe:	80 93 80 3d 	sts	0x3D80, r24
    4bc2:	90 93 81 3d 	sts	0x3D81, r25
	
	xTimerStart(xTimers[0], 0);
    4bc6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xTaskGetTickCount>
    4bca:	00 e0       	ldi	r16, 0x00	; 0
    4bcc:	10 e0       	ldi	r17, 0x00	; 0
    4bce:	20 e0       	ldi	r18, 0x00	; 0
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	ac 01       	movw	r20, r24
    4bd4:	60 e0       	ldi	r22, 0x00	; 0
    4bd6:	80 91 80 3d 	lds	r24, 0x3D80
    4bda:	90 91 81 3d 	lds	r25, 0x3D81
    4bde:	0e 94 5f 10 	call	0x20be	; 0x20be <xTimerGenericCommand>
	
	milisecondsTimer = 0;
    4be2:	10 92 7c 3d 	sts	0x3D7C, r1
    4be6:	10 92 7d 3d 	sts	0x3D7D, r1
    4bea:	10 92 7e 3d 	sts	0x3D7E, r1
    4bee:	10 92 7f 3d 	sts	0x3D7F, r1
	secondsTimer = 0;
    4bf2:	10 92 82 3d 	sts	0x3D82, r1
    4bf6:	10 92 83 3d 	sts	0x3D83, r1
    4bfa:	10 92 84 3d 	sts	0x3D84, r1
    4bfe:	10 92 85 3d 	sts	0x3D85, r1
	hoursTimer = 0;
    4c02:	10 92 78 3d 	sts	0x3D78, r1
    4c06:	10 92 79 3d 	sts	0x3D79, r1
    4c0a:	10 92 7a 3d 	sts	0x3D7A, r1
    4c0e:	10 92 7b 3d 	sts	0x3D7B, r1
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4c12:	e0 e8       	ldi	r30, 0x80	; 128
    4c14:	f6 e0       	ldi	r31, 0x06	; 6
    4c16:	88 e0       	ldi	r24, 0x08	; 8
    4c18:	81 83       	std	Z+1, r24	; 0x01
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4c1a:	85 83       	std	Z+5, r24	; 0x05
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4c1c:	e0 e4       	ldi	r30, 0x40	; 64
    4c1e:	f6 e0       	ldi	r31, 0x06	; 6
    4c20:	80 e1       	ldi	r24, 0x10	; 16
    4c22:	81 83       	std	Z+1, r24	; 0x01
    4c24:	80 e2       	ldi	r24, 0x20	; 32
    4c26:	81 83       	std	Z+1, r24	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    4c28:	80 e4       	ldi	r24, 0x40	; 64
    4c2a:	82 83       	std	Z+2, r24	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4c2c:	80 e8       	ldi	r24, 0x80	; 128
    4c2e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_dir(MEM_MISO,IOPORT_DIR_INPUT);
	ioport_set_pin_dir(MEM_SCK,IOPORT_DIR_OUTPUT);
	
	//power_switch_off();
	
}
    4c30:	1f 91       	pop	r17
    4c32:	0f 91       	pop	r16
    4c34:	08 95       	ret

00004c36 <__vector_20>:

/* -------------------------------------------------------------------- */
/*	Interrupt for sampling input										*/
/* -------------------------------------------------------------------- */

ISR(TCC1_OVF_vect) {
    4c36:	1f 92       	push	r1
    4c38:	0f 92       	push	r0
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	0f 92       	push	r0
    4c3e:	11 24       	eor	r1, r1
    4c40:	08 b6       	in	r0, 0x38	; 56
    4c42:	0f 92       	push	r0
    4c44:	18 be       	out	0x38, r1	; 56
    4c46:	0b b6       	in	r0, 0x3b	; 59
    4c48:	0f 92       	push	r0
    4c4a:	1b be       	out	0x3b, r1	; 59
    4c4c:	8f 93       	push	r24
    4c4e:	ef 93       	push	r30
    4c50:	ff 93       	push	r31

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    4c52:	88 e0       	ldi	r24, 0x08	; 8
    4c54:	e0 e8       	ldi	r30, 0x80	; 128
    4c56:	f6 e0       	ldi	r31, 0x06	; 6
    4c58:	87 83       	std	Z+7, r24	; 0x07
	
	power_switch_toggle();
	//asm volatile ( "reti" );

}
    4c5a:	ff 91       	pop	r31
    4c5c:	ef 91       	pop	r30
    4c5e:	8f 91       	pop	r24
    4c60:	0f 90       	pop	r0
    4c62:	0b be       	out	0x3b, r0	; 59
    4c64:	0f 90       	pop	r0
    4c66:	08 be       	out	0x38, r0	; 56
    4c68:	0f 90       	pop	r0
    4c6a:	0f be       	out	0x3f, r0	; 63
    4c6c:	0f 90       	pop	r0
    4c6e:	1f 90       	pop	r1
    4c70:	18 95       	reti

00004c72 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    4c72:	8f ef       	ldi	r24, 0xFF	; 255
    4c74:	80 93 70 00 	sts	0x0070, r24
    4c78:	80 93 71 00 	sts	0x0071, r24
    4c7c:	80 93 72 00 	sts	0x0072, r24
    4c80:	80 93 73 00 	sts	0x0073, r24
    4c84:	80 93 74 00 	sts	0x0074, r24
    4c88:	80 93 75 00 	sts	0x0075, r24
    4c8c:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4c90:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4c92:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    4c94:	e0 e5       	ldi	r30, 0x50	; 80
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	90 81       	ld	r25, Z
    4c9a:	92 60       	ori	r25, 0x02	; 2
    4c9c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4c9e:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    4ca0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    4ca2:	81 ff       	sbrs	r24, 1
    4ca4:	fd cf       	rjmp	.-6      	; 0x4ca0 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	80 e4       	ldi	r24, 0x40	; 64
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	15 d0       	rcall	.+42     	; 0x4cd8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4cae:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4cb0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    4cb2:	e0 e5       	ldi	r30, 0x50	; 80
    4cb4:	f0 e0       	ldi	r31, 0x00	; 0
    4cb6:	90 81       	ld	r25, Z
    4cb8:	9e 7f       	andi	r25, 0xFE	; 254
    4cba:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4cbc:	8f bf       	out	0x3f, r24	; 63
    4cbe:	08 95       	ret

00004cc0 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4cc0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    4cc2:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    4cc4:	e8 2f       	mov	r30, r24
    4cc6:	f0 e0       	ldi	r31, 0x00	; 0
    4cc8:	e0 59       	subi	r30, 0x90	; 144
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	60 95       	com	r22
    4cce:	80 81       	ld	r24, Z
    4cd0:	68 23       	and	r22, r24
    4cd2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4cd4:	9f bf       	out	0x3f, r25	; 63
    4cd6:	08 95       	ret

00004cd8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    4cd8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    4cda:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    4cdc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    4cde:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    4ce0:	60 83       	st	Z, r22
	ret                             // Return to caller
    4ce2:	08 95       	ret

00004ce4 <vfprintf>:
    4ce4:	2f 92       	push	r2
    4ce6:	3f 92       	push	r3
    4ce8:	4f 92       	push	r4
    4cea:	5f 92       	push	r5
    4cec:	6f 92       	push	r6
    4cee:	7f 92       	push	r7
    4cf0:	8f 92       	push	r8
    4cf2:	9f 92       	push	r9
    4cf4:	af 92       	push	r10
    4cf6:	bf 92       	push	r11
    4cf8:	cf 92       	push	r12
    4cfa:	df 92       	push	r13
    4cfc:	ef 92       	push	r14
    4cfe:	ff 92       	push	r15
    4d00:	0f 93       	push	r16
    4d02:	1f 93       	push	r17
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
    4d0c:	63 97       	sbiw	r28, 0x13	; 19
    4d0e:	cd bf       	out	0x3d, r28	; 61
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	7c 01       	movw	r14, r24
    4d14:	1b 01       	movw	r2, r22
    4d16:	6a 01       	movw	r12, r20
    4d18:	fc 01       	movw	r30, r24
    4d1a:	16 82       	std	Z+6, r1	; 0x06
    4d1c:	17 82       	std	Z+7, r1	; 0x07
    4d1e:	83 81       	ldd	r24, Z+3	; 0x03
    4d20:	81 ff       	sbrs	r24, 1
    4d22:	49 c3       	rjmp	.+1682   	; 0x53b6 <vfprintf+0x6d2>
    4d24:	be 01       	movw	r22, r28
    4d26:	6f 5f       	subi	r22, 0xFF	; 255
    4d28:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2a:	4b 01       	movw	r8, r22
    4d2c:	f7 01       	movw	r30, r14
    4d2e:	93 81       	ldd	r25, Z+3	; 0x03
    4d30:	f1 01       	movw	r30, r2
    4d32:	93 fd       	sbrc	r25, 3
    4d34:	85 91       	lpm	r24, Z+
    4d36:	93 ff       	sbrs	r25, 3
    4d38:	81 91       	ld	r24, Z+
    4d3a:	1f 01       	movw	r2, r30
    4d3c:	88 23       	and	r24, r24
    4d3e:	09 f4       	brne	.+2      	; 0x4d42 <vfprintf+0x5e>
    4d40:	36 c3       	rjmp	.+1644   	; 0x53ae <vfprintf+0x6ca>
    4d42:	85 32       	cpi	r24, 0x25	; 37
    4d44:	39 f4       	brne	.+14     	; 0x4d54 <vfprintf+0x70>
    4d46:	93 fd       	sbrc	r25, 3
    4d48:	85 91       	lpm	r24, Z+
    4d4a:	93 ff       	sbrs	r25, 3
    4d4c:	81 91       	ld	r24, Z+
    4d4e:	1f 01       	movw	r2, r30
    4d50:	85 32       	cpi	r24, 0x25	; 37
    4d52:	31 f4       	brne	.+12     	; 0x4d60 <vfprintf+0x7c>
    4d54:	b7 01       	movw	r22, r14
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	36 d5       	rcall	.+2668   	; 0x57c6 <fputc>
    4d5a:	56 01       	movw	r10, r12
    4d5c:	65 01       	movw	r12, r10
    4d5e:	e6 cf       	rjmp	.-52     	; 0x4d2c <vfprintf+0x48>
    4d60:	10 e0       	ldi	r17, 0x00	; 0
    4d62:	51 2c       	mov	r5, r1
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	20 32       	cpi	r18, 0x20	; 32
    4d68:	a0 f4       	brcc	.+40     	; 0x4d92 <vfprintf+0xae>
    4d6a:	8b 32       	cpi	r24, 0x2B	; 43
    4d6c:	69 f0       	breq	.+26     	; 0x4d88 <vfprintf+0xa4>
    4d6e:	30 f4       	brcc	.+12     	; 0x4d7c <vfprintf+0x98>
    4d70:	80 32       	cpi	r24, 0x20	; 32
    4d72:	59 f0       	breq	.+22     	; 0x4d8a <vfprintf+0xa6>
    4d74:	83 32       	cpi	r24, 0x23	; 35
    4d76:	69 f4       	brne	.+26     	; 0x4d92 <vfprintf+0xae>
    4d78:	20 61       	ori	r18, 0x10	; 16
    4d7a:	2c c0       	rjmp	.+88     	; 0x4dd4 <vfprintf+0xf0>
    4d7c:	8d 32       	cpi	r24, 0x2D	; 45
    4d7e:	39 f0       	breq	.+14     	; 0x4d8e <vfprintf+0xaa>
    4d80:	80 33       	cpi	r24, 0x30	; 48
    4d82:	39 f4       	brne	.+14     	; 0x4d92 <vfprintf+0xae>
    4d84:	21 60       	ori	r18, 0x01	; 1
    4d86:	26 c0       	rjmp	.+76     	; 0x4dd4 <vfprintf+0xf0>
    4d88:	22 60       	ori	r18, 0x02	; 2
    4d8a:	24 60       	ori	r18, 0x04	; 4
    4d8c:	23 c0       	rjmp	.+70     	; 0x4dd4 <vfprintf+0xf0>
    4d8e:	28 60       	ori	r18, 0x08	; 8
    4d90:	21 c0       	rjmp	.+66     	; 0x4dd4 <vfprintf+0xf0>
    4d92:	27 fd       	sbrc	r18, 7
    4d94:	27 c0       	rjmp	.+78     	; 0x4de4 <vfprintf+0x100>
    4d96:	30 ed       	ldi	r19, 0xD0	; 208
    4d98:	38 0f       	add	r19, r24
    4d9a:	3a 30       	cpi	r19, 0x0A	; 10
    4d9c:	78 f4       	brcc	.+30     	; 0x4dbc <vfprintf+0xd8>
    4d9e:	26 ff       	sbrs	r18, 6
    4da0:	06 c0       	rjmp	.+12     	; 0x4dae <vfprintf+0xca>
    4da2:	fa e0       	ldi	r31, 0x0A	; 10
    4da4:	1f 9f       	mul	r17, r31
    4da6:	30 0d       	add	r19, r0
    4da8:	11 24       	eor	r1, r1
    4daa:	13 2f       	mov	r17, r19
    4dac:	13 c0       	rjmp	.+38     	; 0x4dd4 <vfprintf+0xf0>
    4dae:	6a e0       	ldi	r22, 0x0A	; 10
    4db0:	56 9e       	mul	r5, r22
    4db2:	30 0d       	add	r19, r0
    4db4:	11 24       	eor	r1, r1
    4db6:	53 2e       	mov	r5, r19
    4db8:	20 62       	ori	r18, 0x20	; 32
    4dba:	0c c0       	rjmp	.+24     	; 0x4dd4 <vfprintf+0xf0>
    4dbc:	8e 32       	cpi	r24, 0x2E	; 46
    4dbe:	21 f4       	brne	.+8      	; 0x4dc8 <vfprintf+0xe4>
    4dc0:	26 fd       	sbrc	r18, 6
    4dc2:	f5 c2       	rjmp	.+1514   	; 0x53ae <vfprintf+0x6ca>
    4dc4:	20 64       	ori	r18, 0x40	; 64
    4dc6:	06 c0       	rjmp	.+12     	; 0x4dd4 <vfprintf+0xf0>
    4dc8:	8c 36       	cpi	r24, 0x6C	; 108
    4dca:	11 f4       	brne	.+4      	; 0x4dd0 <vfprintf+0xec>
    4dcc:	20 68       	ori	r18, 0x80	; 128
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <vfprintf+0xf0>
    4dd0:	88 36       	cpi	r24, 0x68	; 104
    4dd2:	41 f4       	brne	.+16     	; 0x4de4 <vfprintf+0x100>
    4dd4:	f1 01       	movw	r30, r2
    4dd6:	93 fd       	sbrc	r25, 3
    4dd8:	85 91       	lpm	r24, Z+
    4dda:	93 ff       	sbrs	r25, 3
    4ddc:	81 91       	ld	r24, Z+
    4dde:	1f 01       	movw	r2, r30
    4de0:	81 11       	cpse	r24, r1
    4de2:	c1 cf       	rjmp	.-126    	; 0x4d66 <vfprintf+0x82>
    4de4:	9b eb       	ldi	r25, 0xBB	; 187
    4de6:	98 0f       	add	r25, r24
    4de8:	93 30       	cpi	r25, 0x03	; 3
    4dea:	18 f4       	brcc	.+6      	; 0x4df2 <vfprintf+0x10e>
    4dec:	20 61       	ori	r18, 0x10	; 16
    4dee:	80 5e       	subi	r24, 0xE0	; 224
    4df0:	06 c0       	rjmp	.+12     	; 0x4dfe <vfprintf+0x11a>
    4df2:	9b e9       	ldi	r25, 0x9B	; 155
    4df4:	98 0f       	add	r25, r24
    4df6:	93 30       	cpi	r25, 0x03	; 3
    4df8:	08 f0       	brcs	.+2      	; 0x4dfc <vfprintf+0x118>
    4dfa:	9a c1       	rjmp	.+820    	; 0x5130 <vfprintf+0x44c>
    4dfc:	2f 7e       	andi	r18, 0xEF	; 239
    4dfe:	26 ff       	sbrs	r18, 6
    4e00:	16 e0       	ldi	r17, 0x06	; 6
    4e02:	2f 73       	andi	r18, 0x3F	; 63
    4e04:	72 2e       	mov	r7, r18
    4e06:	85 36       	cpi	r24, 0x65	; 101
    4e08:	21 f4       	brne	.+8      	; 0x4e12 <vfprintf+0x12e>
    4e0a:	f2 2f       	mov	r31, r18
    4e0c:	f0 64       	ori	r31, 0x40	; 64
    4e0e:	7f 2e       	mov	r7, r31
    4e10:	08 c0       	rjmp	.+16     	; 0x4e22 <vfprintf+0x13e>
    4e12:	86 36       	cpi	r24, 0x66	; 102
    4e14:	21 f4       	brne	.+8      	; 0x4e1e <vfprintf+0x13a>
    4e16:	62 2f       	mov	r22, r18
    4e18:	60 68       	ori	r22, 0x80	; 128
    4e1a:	76 2e       	mov	r7, r22
    4e1c:	02 c0       	rjmp	.+4      	; 0x4e22 <vfprintf+0x13e>
    4e1e:	11 11       	cpse	r17, r1
    4e20:	11 50       	subi	r17, 0x01	; 1
    4e22:	77 fe       	sbrs	r7, 7
    4e24:	07 c0       	rjmp	.+14     	; 0x4e34 <vfprintf+0x150>
    4e26:	1c 33       	cpi	r17, 0x3C	; 60
    4e28:	48 f4       	brcc	.+18     	; 0x4e3c <vfprintf+0x158>
    4e2a:	44 24       	eor	r4, r4
    4e2c:	43 94       	inc	r4
    4e2e:	41 0e       	add	r4, r17
    4e30:	27 e0       	ldi	r18, 0x07	; 7
    4e32:	0b c0       	rjmp	.+22     	; 0x4e4a <vfprintf+0x166>
    4e34:	18 30       	cpi	r17, 0x08	; 8
    4e36:	30 f4       	brcc	.+12     	; 0x4e44 <vfprintf+0x160>
    4e38:	21 2f       	mov	r18, r17
    4e3a:	06 c0       	rjmp	.+12     	; 0x4e48 <vfprintf+0x164>
    4e3c:	27 e0       	ldi	r18, 0x07	; 7
    4e3e:	4c e3       	ldi	r20, 0x3C	; 60
    4e40:	44 2e       	mov	r4, r20
    4e42:	03 c0       	rjmp	.+6      	; 0x4e4a <vfprintf+0x166>
    4e44:	27 e0       	ldi	r18, 0x07	; 7
    4e46:	17 e0       	ldi	r17, 0x07	; 7
    4e48:	41 2c       	mov	r4, r1
    4e4a:	56 01       	movw	r10, r12
    4e4c:	74 e0       	ldi	r23, 0x04	; 4
    4e4e:	a7 0e       	add	r10, r23
    4e50:	b1 1c       	adc	r11, r1
    4e52:	f6 01       	movw	r30, r12
    4e54:	60 81       	ld	r22, Z
    4e56:	71 81       	ldd	r23, Z+1	; 0x01
    4e58:	82 81       	ldd	r24, Z+2	; 0x02
    4e5a:	93 81       	ldd	r25, Z+3	; 0x03
    4e5c:	04 2d       	mov	r16, r4
    4e5e:	a4 01       	movw	r20, r8
    4e60:	55 d3       	rcall	.+1706   	; 0x550c <__ftoa_engine>
    4e62:	6c 01       	movw	r12, r24
    4e64:	09 81       	ldd	r16, Y+1	; 0x01
    4e66:	00 ff       	sbrs	r16, 0
    4e68:	02 c0       	rjmp	.+4      	; 0x4e6e <vfprintf+0x18a>
    4e6a:	03 ff       	sbrs	r16, 3
    4e6c:	06 c0       	rjmp	.+12     	; 0x4e7a <vfprintf+0x196>
    4e6e:	71 fc       	sbrc	r7, 1
    4e70:	07 c0       	rjmp	.+14     	; 0x4e80 <vfprintf+0x19c>
    4e72:	72 fc       	sbrc	r7, 2
    4e74:	08 c0       	rjmp	.+16     	; 0x4e86 <vfprintf+0x1a2>
    4e76:	61 2c       	mov	r6, r1
    4e78:	08 c0       	rjmp	.+16     	; 0x4e8a <vfprintf+0x1a6>
    4e7a:	3d e2       	ldi	r19, 0x2D	; 45
    4e7c:	63 2e       	mov	r6, r19
    4e7e:	05 c0       	rjmp	.+10     	; 0x4e8a <vfprintf+0x1a6>
    4e80:	2b e2       	ldi	r18, 0x2B	; 43
    4e82:	62 2e       	mov	r6, r18
    4e84:	02 c0       	rjmp	.+4      	; 0x4e8a <vfprintf+0x1a6>
    4e86:	90 e2       	ldi	r25, 0x20	; 32
    4e88:	69 2e       	mov	r6, r25
    4e8a:	80 2f       	mov	r24, r16
    4e8c:	8c 70       	andi	r24, 0x0C	; 12
    4e8e:	81 f1       	breq	.+96     	; 0x4ef0 <vfprintf+0x20c>
    4e90:	66 20       	and	r6, r6
    4e92:	11 f0       	breq	.+4      	; 0x4e98 <vfprintf+0x1b4>
    4e94:	84 e0       	ldi	r24, 0x04	; 4
    4e96:	01 c0       	rjmp	.+2      	; 0x4e9a <vfprintf+0x1b6>
    4e98:	83 e0       	ldi	r24, 0x03	; 3
    4e9a:	85 15       	cp	r24, r5
    4e9c:	10 f0       	brcs	.+4      	; 0x4ea2 <vfprintf+0x1be>
    4e9e:	51 2c       	mov	r5, r1
    4ea0:	0a c0       	rjmp	.+20     	; 0x4eb6 <vfprintf+0x1d2>
    4ea2:	58 1a       	sub	r5, r24
    4ea4:	73 fc       	sbrc	r7, 3
    4ea6:	07 c0       	rjmp	.+14     	; 0x4eb6 <vfprintf+0x1d2>
    4ea8:	b7 01       	movw	r22, r14
    4eaa:	80 e2       	ldi	r24, 0x20	; 32
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	8b d4       	rcall	.+2326   	; 0x57c6 <fputc>
    4eb0:	5a 94       	dec	r5
    4eb2:	d1 f7       	brne	.-12     	; 0x4ea8 <vfprintf+0x1c4>
    4eb4:	f4 cf       	rjmp	.-24     	; 0x4e9e <vfprintf+0x1ba>
    4eb6:	66 20       	and	r6, r6
    4eb8:	21 f0       	breq	.+8      	; 0x4ec2 <vfprintf+0x1de>
    4eba:	b7 01       	movw	r22, r14
    4ebc:	86 2d       	mov	r24, r6
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	82 d4       	rcall	.+2308   	; 0x57c6 <fputc>
    4ec2:	03 fd       	sbrc	r16, 3
    4ec4:	03 c0       	rjmp	.+6      	; 0x4ecc <vfprintf+0x1e8>
    4ec6:	0e e0       	ldi	r16, 0x0E	; 14
    4ec8:	16 e0       	ldi	r17, 0x06	; 6
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <vfprintf+0x1ec>
    4ecc:	0a e0       	ldi	r16, 0x0A	; 10
    4ece:	16 e0       	ldi	r17, 0x06	; 6
    4ed0:	f7 2d       	mov	r31, r7
    4ed2:	f0 71       	andi	r31, 0x10	; 16
    4ed4:	7f 2e       	mov	r7, r31
    4ed6:	f8 01       	movw	r30, r16
    4ed8:	84 91       	lpm	r24, Z
    4eda:	88 23       	and	r24, r24
    4edc:	09 f4       	brne	.+2      	; 0x4ee0 <vfprintf+0x1fc>
    4ede:	5e c2       	rjmp	.+1212   	; 0x539c <vfprintf+0x6b8>
    4ee0:	71 10       	cpse	r7, r1
    4ee2:	80 52       	subi	r24, 0x20	; 32
    4ee4:	b7 01       	movw	r22, r14
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	6e d4       	rcall	.+2268   	; 0x57c6 <fputc>
    4eea:	0f 5f       	subi	r16, 0xFF	; 255
    4eec:	1f 4f       	sbci	r17, 0xFF	; 255
    4eee:	f3 cf       	rjmp	.-26     	; 0x4ed6 <vfprintf+0x1f2>
    4ef0:	77 fe       	sbrs	r7, 7
    4ef2:	0f c0       	rjmp	.+30     	; 0x4f12 <vfprintf+0x22e>
    4ef4:	4c 0c       	add	r4, r12
    4ef6:	04 ff       	sbrs	r16, 4
    4ef8:	04 c0       	rjmp	.+8      	; 0x4f02 <vfprintf+0x21e>
    4efa:	8a 81       	ldd	r24, Y+2	; 0x02
    4efc:	81 33       	cpi	r24, 0x31	; 49
    4efe:	09 f4       	brne	.+2      	; 0x4f02 <vfprintf+0x21e>
    4f00:	4a 94       	dec	r4
    4f02:	14 14       	cp	r1, r4
    4f04:	74 f5       	brge	.+92     	; 0x4f62 <vfprintf+0x27e>
    4f06:	f8 e0       	ldi	r31, 0x08	; 8
    4f08:	f4 15       	cp	r31, r4
    4f0a:	78 f5       	brcc	.+94     	; 0x4f6a <vfprintf+0x286>
    4f0c:	88 e0       	ldi	r24, 0x08	; 8
    4f0e:	48 2e       	mov	r4, r24
    4f10:	2c c0       	rjmp	.+88     	; 0x4f6a <vfprintf+0x286>
    4f12:	76 fc       	sbrc	r7, 6
    4f14:	2a c0       	rjmp	.+84     	; 0x4f6a <vfprintf+0x286>
    4f16:	81 2f       	mov	r24, r17
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	8c 15       	cp	r24, r12
    4f1c:	9d 05       	cpc	r25, r13
    4f1e:	9c f0       	brlt	.+38     	; 0x4f46 <vfprintf+0x262>
    4f20:	6c ef       	ldi	r22, 0xFC	; 252
    4f22:	c6 16       	cp	r12, r22
    4f24:	6f ef       	ldi	r22, 0xFF	; 255
    4f26:	d6 06       	cpc	r13, r22
    4f28:	74 f0       	brlt	.+28     	; 0x4f46 <vfprintf+0x262>
    4f2a:	77 2d       	mov	r23, r7
    4f2c:	70 68       	ori	r23, 0x80	; 128
    4f2e:	77 2e       	mov	r7, r23
    4f30:	0a c0       	rjmp	.+20     	; 0x4f46 <vfprintf+0x262>
    4f32:	e2 e0       	ldi	r30, 0x02	; 2
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	ec 0f       	add	r30, r28
    4f38:	fd 1f       	adc	r31, r29
    4f3a:	e1 0f       	add	r30, r17
    4f3c:	f1 1d       	adc	r31, r1
    4f3e:	80 81       	ld	r24, Z
    4f40:	80 33       	cpi	r24, 0x30	; 48
    4f42:	19 f4       	brne	.+6      	; 0x4f4a <vfprintf+0x266>
    4f44:	11 50       	subi	r17, 0x01	; 1
    4f46:	11 11       	cpse	r17, r1
    4f48:	f4 cf       	rjmp	.-24     	; 0x4f32 <vfprintf+0x24e>
    4f4a:	77 fe       	sbrs	r7, 7
    4f4c:	0e c0       	rjmp	.+28     	; 0x4f6a <vfprintf+0x286>
    4f4e:	44 24       	eor	r4, r4
    4f50:	43 94       	inc	r4
    4f52:	41 0e       	add	r4, r17
    4f54:	81 2f       	mov	r24, r17
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	c8 16       	cp	r12, r24
    4f5a:	d9 06       	cpc	r13, r25
    4f5c:	2c f4       	brge	.+10     	; 0x4f68 <vfprintf+0x284>
    4f5e:	1c 19       	sub	r17, r12
    4f60:	04 c0       	rjmp	.+8      	; 0x4f6a <vfprintf+0x286>
    4f62:	44 24       	eor	r4, r4
    4f64:	43 94       	inc	r4
    4f66:	01 c0       	rjmp	.+2      	; 0x4f6a <vfprintf+0x286>
    4f68:	10 e0       	ldi	r17, 0x00	; 0
    4f6a:	77 fe       	sbrs	r7, 7
    4f6c:	07 c0       	rjmp	.+14     	; 0x4f7c <vfprintf+0x298>
    4f6e:	1c 14       	cp	r1, r12
    4f70:	1d 04       	cpc	r1, r13
    4f72:	3c f4       	brge	.+14     	; 0x4f82 <vfprintf+0x29e>
    4f74:	96 01       	movw	r18, r12
    4f76:	2f 5f       	subi	r18, 0xFF	; 255
    4f78:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7a:	05 c0       	rjmp	.+10     	; 0x4f86 <vfprintf+0x2a2>
    4f7c:	25 e0       	ldi	r18, 0x05	; 5
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	02 c0       	rjmp	.+4      	; 0x4f86 <vfprintf+0x2a2>
    4f82:	21 e0       	ldi	r18, 0x01	; 1
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	66 20       	and	r6, r6
    4f88:	11 f0       	breq	.+4      	; 0x4f8e <vfprintf+0x2aa>
    4f8a:	2f 5f       	subi	r18, 0xFF	; 255
    4f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f8e:	11 23       	and	r17, r17
    4f90:	31 f0       	breq	.+12     	; 0x4f9e <vfprintf+0x2ba>
    4f92:	41 2f       	mov	r20, r17
    4f94:	50 e0       	ldi	r21, 0x00	; 0
    4f96:	4f 5f       	subi	r20, 0xFF	; 255
    4f98:	5f 4f       	sbci	r21, 0xFF	; 255
    4f9a:	24 0f       	add	r18, r20
    4f9c:	35 1f       	adc	r19, r21
    4f9e:	45 2d       	mov	r20, r5
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	24 17       	cp	r18, r20
    4fa4:	35 07       	cpc	r19, r21
    4fa6:	14 f4       	brge	.+4      	; 0x4fac <vfprintf+0x2c8>
    4fa8:	52 1a       	sub	r5, r18
    4faa:	01 c0       	rjmp	.+2      	; 0x4fae <vfprintf+0x2ca>
    4fac:	51 2c       	mov	r5, r1
    4fae:	87 2d       	mov	r24, r7
    4fb0:	89 70       	andi	r24, 0x09	; 9
    4fb2:	41 f4       	brne	.+16     	; 0x4fc4 <vfprintf+0x2e0>
    4fb4:	55 20       	and	r5, r5
    4fb6:	31 f0       	breq	.+12     	; 0x4fc4 <vfprintf+0x2e0>
    4fb8:	b7 01       	movw	r22, r14
    4fba:	80 e2       	ldi	r24, 0x20	; 32
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	03 d4       	rcall	.+2054   	; 0x57c6 <fputc>
    4fc0:	5a 94       	dec	r5
    4fc2:	f8 cf       	rjmp	.-16     	; 0x4fb4 <vfprintf+0x2d0>
    4fc4:	66 20       	and	r6, r6
    4fc6:	21 f0       	breq	.+8      	; 0x4fd0 <vfprintf+0x2ec>
    4fc8:	b7 01       	movw	r22, r14
    4fca:	86 2d       	mov	r24, r6
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	fb d3       	rcall	.+2038   	; 0x57c6 <fputc>
    4fd0:	73 fc       	sbrc	r7, 3
    4fd2:	08 c0       	rjmp	.+16     	; 0x4fe4 <vfprintf+0x300>
    4fd4:	55 20       	and	r5, r5
    4fd6:	31 f0       	breq	.+12     	; 0x4fe4 <vfprintf+0x300>
    4fd8:	b7 01       	movw	r22, r14
    4fda:	80 e3       	ldi	r24, 0x30	; 48
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	f3 d3       	rcall	.+2022   	; 0x57c6 <fputc>
    4fe0:	5a 94       	dec	r5
    4fe2:	f8 cf       	rjmp	.-16     	; 0x4fd4 <vfprintf+0x2f0>
    4fe4:	77 fe       	sbrs	r7, 7
    4fe6:	5d c0       	rjmp	.+186    	; 0x50a2 <vfprintf+0x3be>
    4fe8:	9c 2d       	mov	r25, r12
    4fea:	8d 2d       	mov	r24, r13
    4fec:	d7 fe       	sbrs	r13, 7
    4fee:	02 c0       	rjmp	.+4      	; 0x4ff4 <vfprintf+0x310>
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	80 e0       	ldi	r24, 0x00	; 0
    4ff4:	69 2e       	mov	r6, r25
    4ff6:	78 2e       	mov	r7, r24
    4ff8:	40 e0       	ldi	r20, 0x00	; 0
    4ffa:	50 e0       	ldi	r21, 0x00	; 0
    4ffc:	c6 01       	movw	r24, r12
    4ffe:	84 19       	sub	r24, r4
    5000:	91 09       	sbc	r25, r1
    5002:	8c 87       	std	Y+12, r24	; 0x0c
    5004:	9d 87       	std	Y+13, r25	; 0x0d
    5006:	96 01       	movw	r18, r12
    5008:	26 19       	sub	r18, r6
    500a:	37 09       	sbc	r19, r7
    500c:	28 0d       	add	r18, r8
    500e:	39 1d       	adc	r19, r9
    5010:	81 2f       	mov	r24, r17
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	ee 27       	eor	r30, r30
    5016:	ff 27       	eor	r31, r31
    5018:	e8 1b       	sub	r30, r24
    501a:	f9 0b       	sbc	r31, r25
    501c:	ee 87       	std	Y+14, r30	; 0x0e
    501e:	ff 87       	std	Y+15, r31	; 0x0f
    5020:	ff ef       	ldi	r31, 0xFF	; 255
    5022:	6f 16       	cp	r6, r31
    5024:	7f 06       	cpc	r7, r31
    5026:	61 f4       	brne	.+24     	; 0x5040 <vfprintf+0x35c>
    5028:	b7 01       	movw	r22, r14
    502a:	8e e2       	ldi	r24, 0x2E	; 46
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	2b 8b       	std	Y+19, r18	; 0x13
    5030:	3a 8b       	std	Y+18, r19	; 0x12
    5032:	48 8b       	std	Y+16, r20	; 0x10
    5034:	59 8b       	std	Y+17, r21	; 0x11
    5036:	c7 d3       	rcall	.+1934   	; 0x57c6 <fputc>
    5038:	59 89       	ldd	r21, Y+17	; 0x11
    503a:	48 89       	ldd	r20, Y+16	; 0x10
    503c:	3a 89       	ldd	r19, Y+18	; 0x12
    503e:	2b 89       	ldd	r18, Y+19	; 0x13
    5040:	c6 14       	cp	r12, r6
    5042:	d7 04       	cpc	r13, r7
    5044:	54 f0       	brlt	.+20     	; 0x505a <vfprintf+0x376>
    5046:	6c 85       	ldd	r22, Y+12	; 0x0c
    5048:	7d 85       	ldd	r23, Y+13	; 0x0d
    504a:	66 15       	cp	r22, r6
    504c:	77 05       	cpc	r23, r7
    504e:	2c f4       	brge	.+10     	; 0x505a <vfprintf+0x376>
    5050:	f9 01       	movw	r30, r18
    5052:	e4 0f       	add	r30, r20
    5054:	f5 1f       	adc	r31, r21
    5056:	81 81       	ldd	r24, Z+1	; 0x01
    5058:	01 c0       	rjmp	.+2      	; 0x505c <vfprintf+0x378>
    505a:	80 e3       	ldi	r24, 0x30	; 48
    505c:	71 e0       	ldi	r23, 0x01	; 1
    505e:	67 1a       	sub	r6, r23
    5060:	71 08       	sbc	r7, r1
    5062:	4f 5f       	subi	r20, 0xFF	; 255
    5064:	5f 4f       	sbci	r21, 0xFF	; 255
    5066:	ee 85       	ldd	r30, Y+14	; 0x0e
    5068:	ff 85       	ldd	r31, Y+15	; 0x0f
    506a:	6e 16       	cp	r6, r30
    506c:	7f 06       	cpc	r7, r31
    506e:	64 f0       	brlt	.+24     	; 0x5088 <vfprintf+0x3a4>
    5070:	b7 01       	movw	r22, r14
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	2b 8b       	std	Y+19, r18	; 0x13
    5076:	3a 8b       	std	Y+18, r19	; 0x12
    5078:	48 8b       	std	Y+16, r20	; 0x10
    507a:	59 8b       	std	Y+17, r21	; 0x11
    507c:	a4 d3       	rcall	.+1864   	; 0x57c6 <fputc>
    507e:	2b 89       	ldd	r18, Y+19	; 0x13
    5080:	3a 89       	ldd	r19, Y+18	; 0x12
    5082:	48 89       	ldd	r20, Y+16	; 0x10
    5084:	59 89       	ldd	r21, Y+17	; 0x11
    5086:	cc cf       	rjmp	.-104    	; 0x5020 <vfprintf+0x33c>
    5088:	6c 14       	cp	r6, r12
    508a:	7d 04       	cpc	r7, r13
    508c:	39 f4       	brne	.+14     	; 0x509c <vfprintf+0x3b8>
    508e:	9a 81       	ldd	r25, Y+2	; 0x02
    5090:	96 33       	cpi	r25, 0x36	; 54
    5092:	18 f4       	brcc	.+6      	; 0x509a <vfprintf+0x3b6>
    5094:	95 33       	cpi	r25, 0x35	; 53
    5096:	11 f4       	brne	.+4      	; 0x509c <vfprintf+0x3b8>
    5098:	04 ff       	sbrs	r16, 4
    509a:	81 e3       	ldi	r24, 0x31	; 49
    509c:	b7 01       	movw	r22, r14
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	45 c0       	rjmp	.+138    	; 0x512c <vfprintf+0x448>
    50a2:	8a 81       	ldd	r24, Y+2	; 0x02
    50a4:	81 33       	cpi	r24, 0x31	; 49
    50a6:	09 f0       	breq	.+2      	; 0x50aa <vfprintf+0x3c6>
    50a8:	0f 7e       	andi	r16, 0xEF	; 239
    50aa:	b7 01       	movw	r22, r14
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	8b d3       	rcall	.+1814   	; 0x57c6 <fputc>
    50b0:	11 11       	cpse	r17, r1
    50b2:	05 c0       	rjmp	.+10     	; 0x50be <vfprintf+0x3da>
    50b4:	74 fe       	sbrs	r7, 4
    50b6:	16 c0       	rjmp	.+44     	; 0x50e4 <vfprintf+0x400>
    50b8:	85 e4       	ldi	r24, 0x45	; 69
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	15 c0       	rjmp	.+42     	; 0x50e8 <vfprintf+0x404>
    50be:	b7 01       	movw	r22, r14
    50c0:	8e e2       	ldi	r24, 0x2E	; 46
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	80 d3       	rcall	.+1792   	; 0x57c6 <fputc>
    50c6:	82 e0       	ldi	r24, 0x02	; 2
    50c8:	66 24       	eor	r6, r6
    50ca:	63 94       	inc	r6
    50cc:	68 0e       	add	r6, r24
    50ce:	f4 01       	movw	r30, r8
    50d0:	e8 0f       	add	r30, r24
    50d2:	f1 1d       	adc	r31, r1
    50d4:	80 81       	ld	r24, Z
    50d6:	b7 01       	movw	r22, r14
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	75 d3       	rcall	.+1770   	; 0x57c6 <fputc>
    50dc:	11 50       	subi	r17, 0x01	; 1
    50de:	51 f3       	breq	.-44     	; 0x50b4 <vfprintf+0x3d0>
    50e0:	86 2d       	mov	r24, r6
    50e2:	f2 cf       	rjmp	.-28     	; 0x50c8 <vfprintf+0x3e4>
    50e4:	85 e6       	ldi	r24, 0x65	; 101
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	b7 01       	movw	r22, r14
    50ea:	6d d3       	rcall	.+1754   	; 0x57c6 <fputc>
    50ec:	d7 fc       	sbrc	r13, 7
    50ee:	05 c0       	rjmp	.+10     	; 0x50fa <vfprintf+0x416>
    50f0:	c1 14       	cp	r12, r1
    50f2:	d1 04       	cpc	r13, r1
    50f4:	39 f4       	brne	.+14     	; 0x5104 <vfprintf+0x420>
    50f6:	04 ff       	sbrs	r16, 4
    50f8:	05 c0       	rjmp	.+10     	; 0x5104 <vfprintf+0x420>
    50fa:	d1 94       	neg	r13
    50fc:	c1 94       	neg	r12
    50fe:	d1 08       	sbc	r13, r1
    5100:	8d e2       	ldi	r24, 0x2D	; 45
    5102:	01 c0       	rjmp	.+2      	; 0x5106 <vfprintf+0x422>
    5104:	8b e2       	ldi	r24, 0x2B	; 43
    5106:	b7 01       	movw	r22, r14
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	5d d3       	rcall	.+1722   	; 0x57c6 <fputc>
    510c:	80 e3       	ldi	r24, 0x30	; 48
    510e:	6a e0       	ldi	r22, 0x0A	; 10
    5110:	c6 16       	cp	r12, r22
    5112:	d1 04       	cpc	r13, r1
    5114:	2c f0       	brlt	.+10     	; 0x5120 <vfprintf+0x43c>
    5116:	8f 5f       	subi	r24, 0xFF	; 255
    5118:	fa e0       	ldi	r31, 0x0A	; 10
    511a:	cf 1a       	sub	r12, r31
    511c:	d1 08       	sbc	r13, r1
    511e:	f7 cf       	rjmp	.-18     	; 0x510e <vfprintf+0x42a>
    5120:	b7 01       	movw	r22, r14
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	50 d3       	rcall	.+1696   	; 0x57c6 <fputc>
    5126:	b7 01       	movw	r22, r14
    5128:	c6 01       	movw	r24, r12
    512a:	c0 96       	adiw	r24, 0x30	; 48
    512c:	4c d3       	rcall	.+1688   	; 0x57c6 <fputc>
    512e:	36 c1       	rjmp	.+620    	; 0x539c <vfprintf+0x6b8>
    5130:	83 36       	cpi	r24, 0x63	; 99
    5132:	31 f0       	breq	.+12     	; 0x5140 <vfprintf+0x45c>
    5134:	83 37       	cpi	r24, 0x73	; 115
    5136:	79 f0       	breq	.+30     	; 0x5156 <vfprintf+0x472>
    5138:	83 35       	cpi	r24, 0x53	; 83
    513a:	09 f0       	breq	.+2      	; 0x513e <vfprintf+0x45a>
    513c:	54 c0       	rjmp	.+168    	; 0x51e6 <vfprintf+0x502>
    513e:	20 c0       	rjmp	.+64     	; 0x5180 <vfprintf+0x49c>
    5140:	56 01       	movw	r10, r12
    5142:	72 e0       	ldi	r23, 0x02	; 2
    5144:	a7 0e       	add	r10, r23
    5146:	b1 1c       	adc	r11, r1
    5148:	f6 01       	movw	r30, r12
    514a:	80 81       	ld	r24, Z
    514c:	89 83       	std	Y+1, r24	; 0x01
    514e:	01 e0       	ldi	r16, 0x01	; 1
    5150:	10 e0       	ldi	r17, 0x00	; 0
    5152:	64 01       	movw	r12, r8
    5154:	13 c0       	rjmp	.+38     	; 0x517c <vfprintf+0x498>
    5156:	56 01       	movw	r10, r12
    5158:	f2 e0       	ldi	r31, 0x02	; 2
    515a:	af 0e       	add	r10, r31
    515c:	b1 1c       	adc	r11, r1
    515e:	f6 01       	movw	r30, r12
    5160:	c0 80       	ld	r12, Z
    5162:	d1 80       	ldd	r13, Z+1	; 0x01
    5164:	26 ff       	sbrs	r18, 6
    5166:	03 c0       	rjmp	.+6      	; 0x516e <vfprintf+0x48a>
    5168:	61 2f       	mov	r22, r17
    516a:	70 e0       	ldi	r23, 0x00	; 0
    516c:	02 c0       	rjmp	.+4      	; 0x5172 <vfprintf+0x48e>
    516e:	6f ef       	ldi	r22, 0xFF	; 255
    5170:	7f ef       	ldi	r23, 0xFF	; 255
    5172:	c6 01       	movw	r24, r12
    5174:	2b 8b       	std	Y+19, r18	; 0x13
    5176:	f9 d2       	rcall	.+1522   	; 0x576a <strnlen>
    5178:	8c 01       	movw	r16, r24
    517a:	2b 89       	ldd	r18, Y+19	; 0x13
    517c:	2f 77       	andi	r18, 0x7F	; 127
    517e:	14 c0       	rjmp	.+40     	; 0x51a8 <vfprintf+0x4c4>
    5180:	56 01       	movw	r10, r12
    5182:	f2 e0       	ldi	r31, 0x02	; 2
    5184:	af 0e       	add	r10, r31
    5186:	b1 1c       	adc	r11, r1
    5188:	f6 01       	movw	r30, r12
    518a:	c0 80       	ld	r12, Z
    518c:	d1 80       	ldd	r13, Z+1	; 0x01
    518e:	26 ff       	sbrs	r18, 6
    5190:	03 c0       	rjmp	.+6      	; 0x5198 <vfprintf+0x4b4>
    5192:	61 2f       	mov	r22, r17
    5194:	70 e0       	ldi	r23, 0x00	; 0
    5196:	02 c0       	rjmp	.+4      	; 0x519c <vfprintf+0x4b8>
    5198:	6f ef       	ldi	r22, 0xFF	; 255
    519a:	7f ef       	ldi	r23, 0xFF	; 255
    519c:	c6 01       	movw	r24, r12
    519e:	2b 8b       	std	Y+19, r18	; 0x13
    51a0:	8d d2       	rcall	.+1306   	; 0x56bc <strnlen_P>
    51a2:	8c 01       	movw	r16, r24
    51a4:	2b 89       	ldd	r18, Y+19	; 0x13
    51a6:	20 68       	ori	r18, 0x80	; 128
    51a8:	72 2e       	mov	r7, r18
    51aa:	23 fd       	sbrc	r18, 3
    51ac:	18 c0       	rjmp	.+48     	; 0x51de <vfprintf+0x4fa>
    51ae:	85 2d       	mov	r24, r5
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	08 17       	cp	r16, r24
    51b4:	19 07       	cpc	r17, r25
    51b6:	98 f4       	brcc	.+38     	; 0x51de <vfprintf+0x4fa>
    51b8:	b7 01       	movw	r22, r14
    51ba:	80 e2       	ldi	r24, 0x20	; 32
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	03 d3       	rcall	.+1542   	; 0x57c6 <fputc>
    51c0:	5a 94       	dec	r5
    51c2:	f5 cf       	rjmp	.-22     	; 0x51ae <vfprintf+0x4ca>
    51c4:	f6 01       	movw	r30, r12
    51c6:	77 fc       	sbrc	r7, 7
    51c8:	85 91       	lpm	r24, Z+
    51ca:	77 fe       	sbrs	r7, 7
    51cc:	81 91       	ld	r24, Z+
    51ce:	6f 01       	movw	r12, r30
    51d0:	b7 01       	movw	r22, r14
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	f8 d2       	rcall	.+1520   	; 0x57c6 <fputc>
    51d6:	51 10       	cpse	r5, r1
    51d8:	5a 94       	dec	r5
    51da:	01 50       	subi	r16, 0x01	; 1
    51dc:	11 09       	sbc	r17, r1
    51de:	01 15       	cp	r16, r1
    51e0:	11 05       	cpc	r17, r1
    51e2:	81 f7       	brne	.-32     	; 0x51c4 <vfprintf+0x4e0>
    51e4:	db c0       	rjmp	.+438    	; 0x539c <vfprintf+0x6b8>
    51e6:	84 36       	cpi	r24, 0x64	; 100
    51e8:	11 f0       	breq	.+4      	; 0x51ee <vfprintf+0x50a>
    51ea:	89 36       	cpi	r24, 0x69	; 105
    51ec:	49 f5       	brne	.+82     	; 0x5240 <vfprintf+0x55c>
    51ee:	56 01       	movw	r10, r12
    51f0:	27 ff       	sbrs	r18, 7
    51f2:	09 c0       	rjmp	.+18     	; 0x5206 <vfprintf+0x522>
    51f4:	f4 e0       	ldi	r31, 0x04	; 4
    51f6:	af 0e       	add	r10, r31
    51f8:	b1 1c       	adc	r11, r1
    51fa:	f6 01       	movw	r30, r12
    51fc:	60 81       	ld	r22, Z
    51fe:	71 81       	ldd	r23, Z+1	; 0x01
    5200:	82 81       	ldd	r24, Z+2	; 0x02
    5202:	93 81       	ldd	r25, Z+3	; 0x03
    5204:	0a c0       	rjmp	.+20     	; 0x521a <vfprintf+0x536>
    5206:	f2 e0       	ldi	r31, 0x02	; 2
    5208:	af 0e       	add	r10, r31
    520a:	b1 1c       	adc	r11, r1
    520c:	f6 01       	movw	r30, r12
    520e:	60 81       	ld	r22, Z
    5210:	71 81       	ldd	r23, Z+1	; 0x01
    5212:	88 27       	eor	r24, r24
    5214:	77 fd       	sbrc	r23, 7
    5216:	80 95       	com	r24
    5218:	98 2f       	mov	r25, r24
    521a:	02 2f       	mov	r16, r18
    521c:	0f 76       	andi	r16, 0x6F	; 111
    521e:	97 ff       	sbrs	r25, 7
    5220:	08 c0       	rjmp	.+16     	; 0x5232 <vfprintf+0x54e>
    5222:	90 95       	com	r25
    5224:	80 95       	com	r24
    5226:	70 95       	com	r23
    5228:	61 95       	neg	r22
    522a:	7f 4f       	sbci	r23, 0xFF	; 255
    522c:	8f 4f       	sbci	r24, 0xFF	; 255
    522e:	9f 4f       	sbci	r25, 0xFF	; 255
    5230:	00 68       	ori	r16, 0x80	; 128
    5232:	2a e0       	ldi	r18, 0x0A	; 10
    5234:	30 e0       	ldi	r19, 0x00	; 0
    5236:	a4 01       	movw	r20, r8
    5238:	20 d3       	rcall	.+1600   	; 0x587a <__ultoa_invert>
    523a:	c8 2e       	mov	r12, r24
    523c:	c8 18       	sub	r12, r8
    523e:	3d c0       	rjmp	.+122    	; 0x52ba <vfprintf+0x5d6>
    5240:	02 2f       	mov	r16, r18
    5242:	85 37       	cpi	r24, 0x75	; 117
    5244:	21 f4       	brne	.+8      	; 0x524e <vfprintf+0x56a>
    5246:	0f 7e       	andi	r16, 0xEF	; 239
    5248:	2a e0       	ldi	r18, 0x0A	; 10
    524a:	30 e0       	ldi	r19, 0x00	; 0
    524c:	1d c0       	rjmp	.+58     	; 0x5288 <vfprintf+0x5a4>
    524e:	09 7f       	andi	r16, 0xF9	; 249
    5250:	8f 36       	cpi	r24, 0x6F	; 111
    5252:	91 f0       	breq	.+36     	; 0x5278 <vfprintf+0x594>
    5254:	18 f4       	brcc	.+6      	; 0x525c <vfprintf+0x578>
    5256:	88 35       	cpi	r24, 0x58	; 88
    5258:	59 f0       	breq	.+22     	; 0x5270 <vfprintf+0x58c>
    525a:	a9 c0       	rjmp	.+338    	; 0x53ae <vfprintf+0x6ca>
    525c:	80 37       	cpi	r24, 0x70	; 112
    525e:	19 f0       	breq	.+6      	; 0x5266 <vfprintf+0x582>
    5260:	88 37       	cpi	r24, 0x78	; 120
    5262:	11 f0       	breq	.+4      	; 0x5268 <vfprintf+0x584>
    5264:	a4 c0       	rjmp	.+328    	; 0x53ae <vfprintf+0x6ca>
    5266:	00 61       	ori	r16, 0x10	; 16
    5268:	04 ff       	sbrs	r16, 4
    526a:	09 c0       	rjmp	.+18     	; 0x527e <vfprintf+0x59a>
    526c:	04 60       	ori	r16, 0x04	; 4
    526e:	07 c0       	rjmp	.+14     	; 0x527e <vfprintf+0x59a>
    5270:	24 ff       	sbrs	r18, 4
    5272:	08 c0       	rjmp	.+16     	; 0x5284 <vfprintf+0x5a0>
    5274:	06 60       	ori	r16, 0x06	; 6
    5276:	06 c0       	rjmp	.+12     	; 0x5284 <vfprintf+0x5a0>
    5278:	28 e0       	ldi	r18, 0x08	; 8
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	05 c0       	rjmp	.+10     	; 0x5288 <vfprintf+0x5a4>
    527e:	20 e1       	ldi	r18, 0x10	; 16
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	02 c0       	rjmp	.+4      	; 0x5288 <vfprintf+0x5a4>
    5284:	20 e1       	ldi	r18, 0x10	; 16
    5286:	32 e0       	ldi	r19, 0x02	; 2
    5288:	56 01       	movw	r10, r12
    528a:	07 ff       	sbrs	r16, 7
    528c:	09 c0       	rjmp	.+18     	; 0x52a0 <vfprintf+0x5bc>
    528e:	f4 e0       	ldi	r31, 0x04	; 4
    5290:	af 0e       	add	r10, r31
    5292:	b1 1c       	adc	r11, r1
    5294:	f6 01       	movw	r30, r12
    5296:	60 81       	ld	r22, Z
    5298:	71 81       	ldd	r23, Z+1	; 0x01
    529a:	82 81       	ldd	r24, Z+2	; 0x02
    529c:	93 81       	ldd	r25, Z+3	; 0x03
    529e:	08 c0       	rjmp	.+16     	; 0x52b0 <vfprintf+0x5cc>
    52a0:	f2 e0       	ldi	r31, 0x02	; 2
    52a2:	af 0e       	add	r10, r31
    52a4:	b1 1c       	adc	r11, r1
    52a6:	f6 01       	movw	r30, r12
    52a8:	60 81       	ld	r22, Z
    52aa:	71 81       	ldd	r23, Z+1	; 0x01
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	a4 01       	movw	r20, r8
    52b2:	e3 d2       	rcall	.+1478   	; 0x587a <__ultoa_invert>
    52b4:	c8 2e       	mov	r12, r24
    52b6:	c8 18       	sub	r12, r8
    52b8:	0f 77       	andi	r16, 0x7F	; 127
    52ba:	06 ff       	sbrs	r16, 6
    52bc:	0b c0       	rjmp	.+22     	; 0x52d4 <vfprintf+0x5f0>
    52be:	20 2f       	mov	r18, r16
    52c0:	2e 7f       	andi	r18, 0xFE	; 254
    52c2:	c1 16       	cp	r12, r17
    52c4:	50 f4       	brcc	.+20     	; 0x52da <vfprintf+0x5f6>
    52c6:	04 ff       	sbrs	r16, 4
    52c8:	0a c0       	rjmp	.+20     	; 0x52de <vfprintf+0x5fa>
    52ca:	02 fd       	sbrc	r16, 2
    52cc:	08 c0       	rjmp	.+16     	; 0x52de <vfprintf+0x5fa>
    52ce:	20 2f       	mov	r18, r16
    52d0:	2e 7e       	andi	r18, 0xEE	; 238
    52d2:	05 c0       	rjmp	.+10     	; 0x52de <vfprintf+0x5fa>
    52d4:	dc 2c       	mov	r13, r12
    52d6:	20 2f       	mov	r18, r16
    52d8:	03 c0       	rjmp	.+6      	; 0x52e0 <vfprintf+0x5fc>
    52da:	dc 2c       	mov	r13, r12
    52dc:	01 c0       	rjmp	.+2      	; 0x52e0 <vfprintf+0x5fc>
    52de:	d1 2e       	mov	r13, r17
    52e0:	24 ff       	sbrs	r18, 4
    52e2:	0d c0       	rjmp	.+26     	; 0x52fe <vfprintf+0x61a>
    52e4:	fe 01       	movw	r30, r28
    52e6:	ec 0d       	add	r30, r12
    52e8:	f1 1d       	adc	r31, r1
    52ea:	80 81       	ld	r24, Z
    52ec:	80 33       	cpi	r24, 0x30	; 48
    52ee:	11 f4       	brne	.+4      	; 0x52f4 <vfprintf+0x610>
    52f0:	29 7e       	andi	r18, 0xE9	; 233
    52f2:	09 c0       	rjmp	.+18     	; 0x5306 <vfprintf+0x622>
    52f4:	22 ff       	sbrs	r18, 2
    52f6:	06 c0       	rjmp	.+12     	; 0x5304 <vfprintf+0x620>
    52f8:	d3 94       	inc	r13
    52fa:	d3 94       	inc	r13
    52fc:	04 c0       	rjmp	.+8      	; 0x5306 <vfprintf+0x622>
    52fe:	82 2f       	mov	r24, r18
    5300:	86 78       	andi	r24, 0x86	; 134
    5302:	09 f0       	breq	.+2      	; 0x5306 <vfprintf+0x622>
    5304:	d3 94       	inc	r13
    5306:	23 fd       	sbrc	r18, 3
    5308:	12 c0       	rjmp	.+36     	; 0x532e <vfprintf+0x64a>
    530a:	20 ff       	sbrs	r18, 0
    530c:	06 c0       	rjmp	.+12     	; 0x531a <vfprintf+0x636>
    530e:	1c 2d       	mov	r17, r12
    5310:	d5 14       	cp	r13, r5
    5312:	18 f4       	brcc	.+6      	; 0x531a <vfprintf+0x636>
    5314:	15 0d       	add	r17, r5
    5316:	1d 19       	sub	r17, r13
    5318:	d5 2c       	mov	r13, r5
    531a:	d5 14       	cp	r13, r5
    531c:	60 f4       	brcc	.+24     	; 0x5336 <vfprintf+0x652>
    531e:	b7 01       	movw	r22, r14
    5320:	80 e2       	ldi	r24, 0x20	; 32
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	2b 8b       	std	Y+19, r18	; 0x13
    5326:	4f d2       	rcall	.+1182   	; 0x57c6 <fputc>
    5328:	d3 94       	inc	r13
    532a:	2b 89       	ldd	r18, Y+19	; 0x13
    532c:	f6 cf       	rjmp	.-20     	; 0x531a <vfprintf+0x636>
    532e:	d5 14       	cp	r13, r5
    5330:	10 f4       	brcc	.+4      	; 0x5336 <vfprintf+0x652>
    5332:	5d 18       	sub	r5, r13
    5334:	01 c0       	rjmp	.+2      	; 0x5338 <vfprintf+0x654>
    5336:	51 2c       	mov	r5, r1
    5338:	24 ff       	sbrs	r18, 4
    533a:	11 c0       	rjmp	.+34     	; 0x535e <vfprintf+0x67a>
    533c:	b7 01       	movw	r22, r14
    533e:	80 e3       	ldi	r24, 0x30	; 48
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	2b 8b       	std	Y+19, r18	; 0x13
    5344:	40 d2       	rcall	.+1152   	; 0x57c6 <fputc>
    5346:	2b 89       	ldd	r18, Y+19	; 0x13
    5348:	22 ff       	sbrs	r18, 2
    534a:	16 c0       	rjmp	.+44     	; 0x5378 <vfprintf+0x694>
    534c:	21 ff       	sbrs	r18, 1
    534e:	03 c0       	rjmp	.+6      	; 0x5356 <vfprintf+0x672>
    5350:	88 e5       	ldi	r24, 0x58	; 88
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	02 c0       	rjmp	.+4      	; 0x535a <vfprintf+0x676>
    5356:	88 e7       	ldi	r24, 0x78	; 120
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	b7 01       	movw	r22, r14
    535c:	0c c0       	rjmp	.+24     	; 0x5376 <vfprintf+0x692>
    535e:	82 2f       	mov	r24, r18
    5360:	86 78       	andi	r24, 0x86	; 134
    5362:	51 f0       	breq	.+20     	; 0x5378 <vfprintf+0x694>
    5364:	21 fd       	sbrc	r18, 1
    5366:	02 c0       	rjmp	.+4      	; 0x536c <vfprintf+0x688>
    5368:	80 e2       	ldi	r24, 0x20	; 32
    536a:	01 c0       	rjmp	.+2      	; 0x536e <vfprintf+0x68a>
    536c:	8b e2       	ldi	r24, 0x2B	; 43
    536e:	27 fd       	sbrc	r18, 7
    5370:	8d e2       	ldi	r24, 0x2D	; 45
    5372:	b7 01       	movw	r22, r14
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	27 d2       	rcall	.+1102   	; 0x57c6 <fputc>
    5378:	c1 16       	cp	r12, r17
    537a:	30 f4       	brcc	.+12     	; 0x5388 <vfprintf+0x6a4>
    537c:	b7 01       	movw	r22, r14
    537e:	80 e3       	ldi	r24, 0x30	; 48
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	21 d2       	rcall	.+1090   	; 0x57c6 <fputc>
    5384:	11 50       	subi	r17, 0x01	; 1
    5386:	f8 cf       	rjmp	.-16     	; 0x5378 <vfprintf+0x694>
    5388:	ca 94       	dec	r12
    538a:	f4 01       	movw	r30, r8
    538c:	ec 0d       	add	r30, r12
    538e:	f1 1d       	adc	r31, r1
    5390:	80 81       	ld	r24, Z
    5392:	b7 01       	movw	r22, r14
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	17 d2       	rcall	.+1070   	; 0x57c6 <fputc>
    5398:	c1 10       	cpse	r12, r1
    539a:	f6 cf       	rjmp	.-20     	; 0x5388 <vfprintf+0x6a4>
    539c:	55 20       	and	r5, r5
    539e:	09 f4       	brne	.+2      	; 0x53a2 <vfprintf+0x6be>
    53a0:	dd cc       	rjmp	.-1606   	; 0x4d5c <vfprintf+0x78>
    53a2:	b7 01       	movw	r22, r14
    53a4:	80 e2       	ldi	r24, 0x20	; 32
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	0e d2       	rcall	.+1052   	; 0x57c6 <fputc>
    53aa:	5a 94       	dec	r5
    53ac:	f7 cf       	rjmp	.-18     	; 0x539c <vfprintf+0x6b8>
    53ae:	f7 01       	movw	r30, r14
    53b0:	86 81       	ldd	r24, Z+6	; 0x06
    53b2:	97 81       	ldd	r25, Z+7	; 0x07
    53b4:	02 c0       	rjmp	.+4      	; 0x53ba <vfprintf+0x6d6>
    53b6:	8f ef       	ldi	r24, 0xFF	; 255
    53b8:	9f ef       	ldi	r25, 0xFF	; 255
    53ba:	63 96       	adiw	r28, 0x13	; 19
    53bc:	cd bf       	out	0x3d, r28	; 61
    53be:	de bf       	out	0x3e, r29	; 62
    53c0:	df 91       	pop	r29
    53c2:	cf 91       	pop	r28
    53c4:	1f 91       	pop	r17
    53c6:	0f 91       	pop	r16
    53c8:	ff 90       	pop	r15
    53ca:	ef 90       	pop	r14
    53cc:	df 90       	pop	r13
    53ce:	cf 90       	pop	r12
    53d0:	bf 90       	pop	r11
    53d2:	af 90       	pop	r10
    53d4:	9f 90       	pop	r9
    53d6:	8f 90       	pop	r8
    53d8:	7f 90       	pop	r7
    53da:	6f 90       	pop	r6
    53dc:	5f 90       	pop	r5
    53de:	4f 90       	pop	r4
    53e0:	3f 90       	pop	r3
    53e2:	2f 90       	pop	r2
    53e4:	08 95       	ret

000053e6 <__divmodhi4>:
    53e6:	97 fb       	bst	r25, 7
    53e8:	07 2e       	mov	r0, r23
    53ea:	16 f4       	brtc	.+4      	; 0x53f0 <__divmodhi4+0xa>
    53ec:	00 94       	com	r0
    53ee:	06 d0       	rcall	.+12     	; 0x53fc <__divmodhi4_neg1>
    53f0:	77 fd       	sbrc	r23, 7
    53f2:	08 d0       	rcall	.+16     	; 0x5404 <__divmodhi4_neg2>
    53f4:	20 d0       	rcall	.+64     	; 0x5436 <__udivmodhi4>
    53f6:	07 fc       	sbrc	r0, 7
    53f8:	05 d0       	rcall	.+10     	; 0x5404 <__divmodhi4_neg2>
    53fa:	3e f4       	brtc	.+14     	; 0x540a <__divmodhi4_exit>

000053fc <__divmodhi4_neg1>:
    53fc:	90 95       	com	r25
    53fe:	81 95       	neg	r24
    5400:	9f 4f       	sbci	r25, 0xFF	; 255
    5402:	08 95       	ret

00005404 <__divmodhi4_neg2>:
    5404:	70 95       	com	r23
    5406:	61 95       	neg	r22
    5408:	7f 4f       	sbci	r23, 0xFF	; 255

0000540a <__divmodhi4_exit>:
    540a:	08 95       	ret

0000540c <__tablejump2__>:
    540c:	ee 0f       	add	r30, r30
    540e:	ff 1f       	adc	r31, r31

00005410 <__tablejump__>:
    5410:	05 90       	lpm	r0, Z+
    5412:	f4 91       	lpm	r31, Z
    5414:	e0 2d       	mov	r30, r0
    5416:	19 94       	eijmp

00005418 <__umulhisi3>:
    5418:	a2 9f       	mul	r26, r18
    541a:	b0 01       	movw	r22, r0
    541c:	b3 9f       	mul	r27, r19
    541e:	c0 01       	movw	r24, r0
    5420:	a3 9f       	mul	r26, r19
    5422:	70 0d       	add	r23, r0
    5424:	81 1d       	adc	r24, r1
    5426:	11 24       	eor	r1, r1
    5428:	91 1d       	adc	r25, r1
    542a:	b2 9f       	mul	r27, r18
    542c:	70 0d       	add	r23, r0
    542e:	81 1d       	adc	r24, r1
    5430:	11 24       	eor	r1, r1
    5432:	91 1d       	adc	r25, r1
    5434:	08 95       	ret

00005436 <__udivmodhi4>:
    5436:	aa 1b       	sub	r26, r26
    5438:	bb 1b       	sub	r27, r27
    543a:	51 e1       	ldi	r21, 0x11	; 17
    543c:	07 c0       	rjmp	.+14     	; 0x544c <__udivmodhi4_ep>

0000543e <__udivmodhi4_loop>:
    543e:	aa 1f       	adc	r26, r26
    5440:	bb 1f       	adc	r27, r27
    5442:	a6 17       	cp	r26, r22
    5444:	b7 07       	cpc	r27, r23
    5446:	10 f0       	brcs	.+4      	; 0x544c <__udivmodhi4_ep>
    5448:	a6 1b       	sub	r26, r22
    544a:	b7 0b       	sbc	r27, r23

0000544c <__udivmodhi4_ep>:
    544c:	88 1f       	adc	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	5a 95       	dec	r21
    5452:	a9 f7       	brne	.-22     	; 0x543e <__udivmodhi4_loop>
    5454:	80 95       	com	r24
    5456:	90 95       	com	r25
    5458:	bc 01       	movw	r22, r24
    545a:	cd 01       	movw	r24, r26
    545c:	08 95       	ret

0000545e <do_rand>:
    545e:	8f 92       	push	r8
    5460:	9f 92       	push	r9
    5462:	af 92       	push	r10
    5464:	bf 92       	push	r11
    5466:	cf 92       	push	r12
    5468:	df 92       	push	r13
    546a:	ef 92       	push	r14
    546c:	ff 92       	push	r15
    546e:	cf 93       	push	r28
    5470:	df 93       	push	r29
    5472:	ec 01       	movw	r28, r24
    5474:	68 81       	ld	r22, Y
    5476:	79 81       	ldd	r23, Y+1	; 0x01
    5478:	8a 81       	ldd	r24, Y+2	; 0x02
    547a:	9b 81       	ldd	r25, Y+3	; 0x03
    547c:	61 15       	cp	r22, r1
    547e:	71 05       	cpc	r23, r1
    5480:	81 05       	cpc	r24, r1
    5482:	91 05       	cpc	r25, r1
    5484:	21 f4       	brne	.+8      	; 0x548e <do_rand+0x30>
    5486:	64 e2       	ldi	r22, 0x24	; 36
    5488:	79 ed       	ldi	r23, 0xD9	; 217
    548a:	8b e5       	ldi	r24, 0x5B	; 91
    548c:	97 e0       	ldi	r25, 0x07	; 7
    548e:	2d e1       	ldi	r18, 0x1D	; 29
    5490:	33 ef       	ldi	r19, 0xF3	; 243
    5492:	41 e0       	ldi	r20, 0x01	; 1
    5494:	50 e0       	ldi	r21, 0x00	; 0
    5496:	5f d2       	rcall	.+1214   	; 0x5956 <__divmodsi4>
    5498:	49 01       	movw	r8, r18
    549a:	5a 01       	movw	r10, r20
    549c:	9b 01       	movw	r18, r22
    549e:	ac 01       	movw	r20, r24
    54a0:	a7 ea       	ldi	r26, 0xA7	; 167
    54a2:	b1 e4       	ldi	r27, 0x41	; 65
    54a4:	74 d2       	rcall	.+1256   	; 0x598e <__muluhisi3>
    54a6:	6b 01       	movw	r12, r22
    54a8:	7c 01       	movw	r14, r24
    54aa:	ac ee       	ldi	r26, 0xEC	; 236
    54ac:	b4 ef       	ldi	r27, 0xF4	; 244
    54ae:	a5 01       	movw	r20, r10
    54b0:	94 01       	movw	r18, r8
    54b2:	79 d2       	rcall	.+1266   	; 0x59a6 <__mulohisi3>
    54b4:	c6 0e       	add	r12, r22
    54b6:	d7 1e       	adc	r13, r23
    54b8:	e8 1e       	adc	r14, r24
    54ba:	f9 1e       	adc	r15, r25
    54bc:	f7 fe       	sbrs	r15, 7
    54be:	06 c0       	rjmp	.+12     	; 0x54cc <do_rand+0x6e>
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	c8 1a       	sub	r12, r24
    54c4:	d1 08       	sbc	r13, r1
    54c6:	e1 08       	sbc	r14, r1
    54c8:	80 e8       	ldi	r24, 0x80	; 128
    54ca:	f8 0a       	sbc	r15, r24
    54cc:	c8 82       	st	Y, r12
    54ce:	d9 82       	std	Y+1, r13	; 0x01
    54d0:	ea 82       	std	Y+2, r14	; 0x02
    54d2:	fb 82       	std	Y+3, r15	; 0x03
    54d4:	c6 01       	movw	r24, r12
    54d6:	9f 77       	andi	r25, 0x7F	; 127
    54d8:	df 91       	pop	r29
    54da:	cf 91       	pop	r28
    54dc:	ff 90       	pop	r15
    54de:	ef 90       	pop	r14
    54e0:	df 90       	pop	r13
    54e2:	cf 90       	pop	r12
    54e4:	bf 90       	pop	r11
    54e6:	af 90       	pop	r10
    54e8:	9f 90       	pop	r9
    54ea:	8f 90       	pop	r8
    54ec:	08 95       	ret

000054ee <rand_r>:
    54ee:	b7 cf       	rjmp	.-146    	; 0x545e <do_rand>

000054f0 <rand>:
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	90 e2       	ldi	r25, 0x20	; 32
    54f4:	b4 cf       	rjmp	.-152    	; 0x545e <do_rand>

000054f6 <srand>:
    54f6:	a0 e0       	ldi	r26, 0x00	; 0
    54f8:	b0 e0       	ldi	r27, 0x00	; 0
    54fa:	80 93 00 20 	sts	0x2000, r24
    54fe:	90 93 01 20 	sts	0x2001, r25
    5502:	a0 93 02 20 	sts	0x2002, r26
    5506:	b0 93 03 20 	sts	0x2003, r27
    550a:	08 95       	ret

0000550c <__ftoa_engine>:
    550c:	28 30       	cpi	r18, 0x08	; 8
    550e:	08 f0       	brcs	.+2      	; 0x5512 <__ftoa_engine+0x6>
    5510:	27 e0       	ldi	r18, 0x07	; 7
    5512:	33 27       	eor	r19, r19
    5514:	da 01       	movw	r26, r20
    5516:	99 0f       	add	r25, r25
    5518:	31 1d       	adc	r19, r1
    551a:	87 fd       	sbrc	r24, 7
    551c:	91 60       	ori	r25, 0x01	; 1
    551e:	00 96       	adiw	r24, 0x00	; 0
    5520:	61 05       	cpc	r22, r1
    5522:	71 05       	cpc	r23, r1
    5524:	39 f4       	brne	.+14     	; 0x5534 <__ftoa_engine+0x28>
    5526:	32 60       	ori	r19, 0x02	; 2
    5528:	2e 5f       	subi	r18, 0xFE	; 254
    552a:	3d 93       	st	X+, r19
    552c:	30 e3       	ldi	r19, 0x30	; 48
    552e:	2a 95       	dec	r18
    5530:	e1 f7       	brne	.-8      	; 0x552a <__ftoa_engine+0x1e>
    5532:	08 95       	ret
    5534:	9f 3f       	cpi	r25, 0xFF	; 255
    5536:	30 f0       	brcs	.+12     	; 0x5544 <__ftoa_engine+0x38>
    5538:	80 38       	cpi	r24, 0x80	; 128
    553a:	71 05       	cpc	r23, r1
    553c:	61 05       	cpc	r22, r1
    553e:	09 f0       	breq	.+2      	; 0x5542 <__ftoa_engine+0x36>
    5540:	3c 5f       	subi	r19, 0xFC	; 252
    5542:	3c 5f       	subi	r19, 0xFC	; 252
    5544:	3d 93       	st	X+, r19
    5546:	91 30       	cpi	r25, 0x01	; 1
    5548:	08 f0       	brcs	.+2      	; 0x554c <__ftoa_engine+0x40>
    554a:	80 68       	ori	r24, 0x80	; 128
    554c:	91 1d       	adc	r25, r1
    554e:	df 93       	push	r29
    5550:	cf 93       	push	r28
    5552:	1f 93       	push	r17
    5554:	0f 93       	push	r16
    5556:	ff 92       	push	r15
    5558:	ef 92       	push	r14
    555a:	19 2f       	mov	r17, r25
    555c:	98 7f       	andi	r25, 0xF8	; 248
    555e:	96 95       	lsr	r25
    5560:	e9 2f       	mov	r30, r25
    5562:	96 95       	lsr	r25
    5564:	96 95       	lsr	r25
    5566:	e9 0f       	add	r30, r25
    5568:	ff 27       	eor	r31, r31
    556a:	e4 59       	subi	r30, 0x94	; 148
    556c:	f9 4f       	sbci	r31, 0xF9	; 249
    556e:	99 27       	eor	r25, r25
    5570:	33 27       	eor	r19, r19
    5572:	ee 24       	eor	r14, r14
    5574:	ff 24       	eor	r15, r15
    5576:	a7 01       	movw	r20, r14
    5578:	e7 01       	movw	r28, r14
    557a:	05 90       	lpm	r0, Z+
    557c:	08 94       	sec
    557e:	07 94       	ror	r0
    5580:	28 f4       	brcc	.+10     	; 0x558c <__ftoa_engine+0x80>
    5582:	36 0f       	add	r19, r22
    5584:	e7 1e       	adc	r14, r23
    5586:	f8 1e       	adc	r15, r24
    5588:	49 1f       	adc	r20, r25
    558a:	51 1d       	adc	r21, r1
    558c:	66 0f       	add	r22, r22
    558e:	77 1f       	adc	r23, r23
    5590:	88 1f       	adc	r24, r24
    5592:	99 1f       	adc	r25, r25
    5594:	06 94       	lsr	r0
    5596:	a1 f7       	brne	.-24     	; 0x5580 <__ftoa_engine+0x74>
    5598:	05 90       	lpm	r0, Z+
    559a:	07 94       	ror	r0
    559c:	28 f4       	brcc	.+10     	; 0x55a8 <__ftoa_engine+0x9c>
    559e:	e7 0e       	add	r14, r23
    55a0:	f8 1e       	adc	r15, r24
    55a2:	49 1f       	adc	r20, r25
    55a4:	56 1f       	adc	r21, r22
    55a6:	c1 1d       	adc	r28, r1
    55a8:	77 0f       	add	r23, r23
    55aa:	88 1f       	adc	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	66 1f       	adc	r22, r22
    55b0:	06 94       	lsr	r0
    55b2:	a1 f7       	brne	.-24     	; 0x559c <__ftoa_engine+0x90>
    55b4:	05 90       	lpm	r0, Z+
    55b6:	07 94       	ror	r0
    55b8:	28 f4       	brcc	.+10     	; 0x55c4 <__ftoa_engine+0xb8>
    55ba:	f8 0e       	add	r15, r24
    55bc:	49 1f       	adc	r20, r25
    55be:	56 1f       	adc	r21, r22
    55c0:	c7 1f       	adc	r28, r23
    55c2:	d1 1d       	adc	r29, r1
    55c4:	88 0f       	add	r24, r24
    55c6:	99 1f       	adc	r25, r25
    55c8:	66 1f       	adc	r22, r22
    55ca:	77 1f       	adc	r23, r23
    55cc:	06 94       	lsr	r0
    55ce:	a1 f7       	brne	.-24     	; 0x55b8 <__ftoa_engine+0xac>
    55d0:	05 90       	lpm	r0, Z+
    55d2:	07 94       	ror	r0
    55d4:	20 f4       	brcc	.+8      	; 0x55de <__ftoa_engine+0xd2>
    55d6:	49 0f       	add	r20, r25
    55d8:	56 1f       	adc	r21, r22
    55da:	c7 1f       	adc	r28, r23
    55dc:	d8 1f       	adc	r29, r24
    55de:	99 0f       	add	r25, r25
    55e0:	66 1f       	adc	r22, r22
    55e2:	77 1f       	adc	r23, r23
    55e4:	88 1f       	adc	r24, r24
    55e6:	06 94       	lsr	r0
    55e8:	a9 f7       	brne	.-22     	; 0x55d4 <__ftoa_engine+0xc8>
    55ea:	84 91       	lpm	r24, Z
    55ec:	10 95       	com	r17
    55ee:	17 70       	andi	r17, 0x07	; 7
    55f0:	41 f0       	breq	.+16     	; 0x5602 <__ftoa_engine+0xf6>
    55f2:	d6 95       	lsr	r29
    55f4:	c7 95       	ror	r28
    55f6:	57 95       	ror	r21
    55f8:	47 95       	ror	r20
    55fa:	f7 94       	ror	r15
    55fc:	e7 94       	ror	r14
    55fe:	1a 95       	dec	r17
    5600:	c1 f7       	brne	.-16     	; 0x55f2 <__ftoa_engine+0xe6>
    5602:	e2 e1       	ldi	r30, 0x12	; 18
    5604:	f6 e0       	ldi	r31, 0x06	; 6
    5606:	68 94       	set
    5608:	15 90       	lpm	r1, Z+
    560a:	15 91       	lpm	r17, Z+
    560c:	35 91       	lpm	r19, Z+
    560e:	65 91       	lpm	r22, Z+
    5610:	95 91       	lpm	r25, Z+
    5612:	05 90       	lpm	r0, Z+
    5614:	7f e2       	ldi	r23, 0x2F	; 47
    5616:	73 95       	inc	r23
    5618:	e1 18       	sub	r14, r1
    561a:	f1 0a       	sbc	r15, r17
    561c:	43 0b       	sbc	r20, r19
    561e:	56 0b       	sbc	r21, r22
    5620:	c9 0b       	sbc	r28, r25
    5622:	d0 09       	sbc	r29, r0
    5624:	c0 f7       	brcc	.-16     	; 0x5616 <__ftoa_engine+0x10a>
    5626:	e1 0c       	add	r14, r1
    5628:	f1 1e       	adc	r15, r17
    562a:	43 1f       	adc	r20, r19
    562c:	56 1f       	adc	r21, r22
    562e:	c9 1f       	adc	r28, r25
    5630:	d0 1d       	adc	r29, r0
    5632:	7e f4       	brtc	.+30     	; 0x5652 <__ftoa_engine+0x146>
    5634:	70 33       	cpi	r23, 0x30	; 48
    5636:	11 f4       	brne	.+4      	; 0x563c <__ftoa_engine+0x130>
    5638:	8a 95       	dec	r24
    563a:	e6 cf       	rjmp	.-52     	; 0x5608 <__ftoa_engine+0xfc>
    563c:	e8 94       	clt
    563e:	01 50       	subi	r16, 0x01	; 1
    5640:	30 f0       	brcs	.+12     	; 0x564e <__ftoa_engine+0x142>
    5642:	08 0f       	add	r16, r24
    5644:	0a f4       	brpl	.+2      	; 0x5648 <__ftoa_engine+0x13c>
    5646:	00 27       	eor	r16, r16
    5648:	02 17       	cp	r16, r18
    564a:	08 f4       	brcc	.+2      	; 0x564e <__ftoa_engine+0x142>
    564c:	20 2f       	mov	r18, r16
    564e:	23 95       	inc	r18
    5650:	02 2f       	mov	r16, r18
    5652:	7a 33       	cpi	r23, 0x3A	; 58
    5654:	28 f0       	brcs	.+10     	; 0x5660 <__ftoa_engine+0x154>
    5656:	79 e3       	ldi	r23, 0x39	; 57
    5658:	7d 93       	st	X+, r23
    565a:	2a 95       	dec	r18
    565c:	e9 f7       	brne	.-6      	; 0x5658 <__ftoa_engine+0x14c>
    565e:	10 c0       	rjmp	.+32     	; 0x5680 <__ftoa_engine+0x174>
    5660:	7d 93       	st	X+, r23
    5662:	2a 95       	dec	r18
    5664:	89 f6       	brne	.-94     	; 0x5608 <__ftoa_engine+0xfc>
    5666:	06 94       	lsr	r0
    5668:	97 95       	ror	r25
    566a:	67 95       	ror	r22
    566c:	37 95       	ror	r19
    566e:	17 95       	ror	r17
    5670:	17 94       	ror	r1
    5672:	e1 18       	sub	r14, r1
    5674:	f1 0a       	sbc	r15, r17
    5676:	43 0b       	sbc	r20, r19
    5678:	56 0b       	sbc	r21, r22
    567a:	c9 0b       	sbc	r28, r25
    567c:	d0 09       	sbc	r29, r0
    567e:	98 f0       	brcs	.+38     	; 0x56a6 <__ftoa_engine+0x19a>
    5680:	23 95       	inc	r18
    5682:	7e 91       	ld	r23, -X
    5684:	73 95       	inc	r23
    5686:	7a 33       	cpi	r23, 0x3A	; 58
    5688:	08 f0       	brcs	.+2      	; 0x568c <__ftoa_engine+0x180>
    568a:	70 e3       	ldi	r23, 0x30	; 48
    568c:	7c 93       	st	X, r23
    568e:	20 13       	cpse	r18, r16
    5690:	b8 f7       	brcc	.-18     	; 0x5680 <__ftoa_engine+0x174>
    5692:	7e 91       	ld	r23, -X
    5694:	70 61       	ori	r23, 0x10	; 16
    5696:	7d 93       	st	X+, r23
    5698:	30 f0       	brcs	.+12     	; 0x56a6 <__ftoa_engine+0x19a>
    569a:	83 95       	inc	r24
    569c:	71 e3       	ldi	r23, 0x31	; 49
    569e:	7d 93       	st	X+, r23
    56a0:	70 e3       	ldi	r23, 0x30	; 48
    56a2:	2a 95       	dec	r18
    56a4:	e1 f7       	brne	.-8      	; 0x569e <__ftoa_engine+0x192>
    56a6:	11 24       	eor	r1, r1
    56a8:	ef 90       	pop	r14
    56aa:	ff 90       	pop	r15
    56ac:	0f 91       	pop	r16
    56ae:	1f 91       	pop	r17
    56b0:	cf 91       	pop	r28
    56b2:	df 91       	pop	r29
    56b4:	99 27       	eor	r25, r25
    56b6:	87 fd       	sbrc	r24, 7
    56b8:	90 95       	com	r25
    56ba:	08 95       	ret

000056bc <strnlen_P>:
    56bc:	fc 01       	movw	r30, r24
    56be:	05 90       	lpm	r0, Z+
    56c0:	61 50       	subi	r22, 0x01	; 1
    56c2:	70 40       	sbci	r23, 0x00	; 0
    56c4:	01 10       	cpse	r0, r1
    56c6:	d8 f7       	brcc	.-10     	; 0x56be <strnlen_P+0x2>
    56c8:	80 95       	com	r24
    56ca:	90 95       	com	r25
    56cc:	8e 0f       	add	r24, r30
    56ce:	9f 1f       	adc	r25, r31
    56d0:	08 95       	ret

000056d2 <memcmp>:
    56d2:	fb 01       	movw	r30, r22
    56d4:	dc 01       	movw	r26, r24
    56d6:	04 c0       	rjmp	.+8      	; 0x56e0 <memcmp+0xe>
    56d8:	8d 91       	ld	r24, X+
    56da:	01 90       	ld	r0, Z+
    56dc:	80 19       	sub	r24, r0
    56de:	21 f4       	brne	.+8      	; 0x56e8 <memcmp+0x16>
    56e0:	41 50       	subi	r20, 0x01	; 1
    56e2:	50 40       	sbci	r21, 0x00	; 0
    56e4:	c8 f7       	brcc	.-14     	; 0x56d8 <memcmp+0x6>
    56e6:	88 1b       	sub	r24, r24
    56e8:	99 0b       	sbc	r25, r25
    56ea:	08 95       	ret

000056ec <memcpy>:
    56ec:	fb 01       	movw	r30, r22
    56ee:	dc 01       	movw	r26, r24
    56f0:	02 c0       	rjmp	.+4      	; 0x56f6 <memcpy+0xa>
    56f2:	01 90       	ld	r0, Z+
    56f4:	0d 92       	st	X+, r0
    56f6:	41 50       	subi	r20, 0x01	; 1
    56f8:	50 40       	sbci	r21, 0x00	; 0
    56fa:	d8 f7       	brcc	.-10     	; 0x56f2 <memcpy+0x6>
    56fc:	08 95       	ret

000056fe <memset>:
    56fe:	dc 01       	movw	r26, r24
    5700:	01 c0       	rjmp	.+2      	; 0x5704 <memset+0x6>
    5702:	6d 93       	st	X+, r22
    5704:	41 50       	subi	r20, 0x01	; 1
    5706:	50 40       	sbci	r21, 0x00	; 0
    5708:	e0 f7       	brcc	.-8      	; 0x5702 <memset+0x4>
    570a:	08 95       	ret

0000570c <strcat>:
    570c:	fb 01       	movw	r30, r22
    570e:	dc 01       	movw	r26, r24
    5710:	0d 90       	ld	r0, X+
    5712:	00 20       	and	r0, r0
    5714:	e9 f7       	brne	.-6      	; 0x5710 <strcat+0x4>
    5716:	11 97       	sbiw	r26, 0x01	; 1
    5718:	01 90       	ld	r0, Z+
    571a:	0d 92       	st	X+, r0
    571c:	00 20       	and	r0, r0
    571e:	e1 f7       	brne	.-8      	; 0x5718 <strcat+0xc>
    5720:	08 95       	ret

00005722 <strcpy>:
    5722:	fb 01       	movw	r30, r22
    5724:	dc 01       	movw	r26, r24
    5726:	01 90       	ld	r0, Z+
    5728:	0d 92       	st	X+, r0
    572a:	00 20       	and	r0, r0
    572c:	e1 f7       	brne	.-8      	; 0x5726 <strcpy+0x4>
    572e:	08 95       	ret

00005730 <strncmp>:
    5730:	fb 01       	movw	r30, r22
    5732:	dc 01       	movw	r26, r24
    5734:	41 50       	subi	r20, 0x01	; 1
    5736:	50 40       	sbci	r21, 0x00	; 0
    5738:	30 f0       	brcs	.+12     	; 0x5746 <strncmp+0x16>
    573a:	8d 91       	ld	r24, X+
    573c:	01 90       	ld	r0, Z+
    573e:	80 19       	sub	r24, r0
    5740:	19 f4       	brne	.+6      	; 0x5748 <strncmp+0x18>
    5742:	00 20       	and	r0, r0
    5744:	b9 f7       	brne	.-18     	; 0x5734 <strncmp+0x4>
    5746:	88 1b       	sub	r24, r24
    5748:	99 0b       	sbc	r25, r25
    574a:	08 95       	ret

0000574c <strncpy>:
    574c:	fb 01       	movw	r30, r22
    574e:	dc 01       	movw	r26, r24
    5750:	41 50       	subi	r20, 0x01	; 1
    5752:	50 40       	sbci	r21, 0x00	; 0
    5754:	48 f0       	brcs	.+18     	; 0x5768 <strncpy+0x1c>
    5756:	01 90       	ld	r0, Z+
    5758:	0d 92       	st	X+, r0
    575a:	00 20       	and	r0, r0
    575c:	c9 f7       	brne	.-14     	; 0x5750 <strncpy+0x4>
    575e:	01 c0       	rjmp	.+2      	; 0x5762 <strncpy+0x16>
    5760:	1d 92       	st	X+, r1
    5762:	41 50       	subi	r20, 0x01	; 1
    5764:	50 40       	sbci	r21, 0x00	; 0
    5766:	e0 f7       	brcc	.-8      	; 0x5760 <strncpy+0x14>
    5768:	08 95       	ret

0000576a <strnlen>:
    576a:	fc 01       	movw	r30, r24
    576c:	61 50       	subi	r22, 0x01	; 1
    576e:	70 40       	sbci	r23, 0x00	; 0
    5770:	01 90       	ld	r0, Z+
    5772:	01 10       	cpse	r0, r1
    5774:	d8 f7       	brcc	.-10     	; 0x576c <strnlen+0x2>
    5776:	80 95       	com	r24
    5778:	90 95       	com	r25
    577a:	8e 0f       	add	r24, r30
    577c:	9f 1f       	adc	r25, r31
    577e:	08 95       	ret

00005780 <__itoa_ncheck>:
    5780:	bb 27       	eor	r27, r27
    5782:	4a 30       	cpi	r20, 0x0A	; 10
    5784:	31 f4       	brne	.+12     	; 0x5792 <__itoa_ncheck+0x12>
    5786:	99 23       	and	r25, r25
    5788:	22 f4       	brpl	.+8      	; 0x5792 <__itoa_ncheck+0x12>
    578a:	bd e2       	ldi	r27, 0x2D	; 45
    578c:	90 95       	com	r25
    578e:	81 95       	neg	r24
    5790:	9f 4f       	sbci	r25, 0xFF	; 255
    5792:	01 c0       	rjmp	.+2      	; 0x5796 <__utoa_common>

00005794 <__utoa_ncheck>:
    5794:	bb 27       	eor	r27, r27

00005796 <__utoa_common>:
    5796:	fb 01       	movw	r30, r22
    5798:	55 27       	eor	r21, r21
    579a:	aa 27       	eor	r26, r26
    579c:	88 0f       	add	r24, r24
    579e:	99 1f       	adc	r25, r25
    57a0:	aa 1f       	adc	r26, r26
    57a2:	a4 17       	cp	r26, r20
    57a4:	10 f0       	brcs	.+4      	; 0x57aa <__utoa_common+0x14>
    57a6:	a4 1b       	sub	r26, r20
    57a8:	83 95       	inc	r24
    57aa:	50 51       	subi	r21, 0x10	; 16
    57ac:	b9 f7       	brne	.-18     	; 0x579c <__utoa_common+0x6>
    57ae:	a0 5d       	subi	r26, 0xD0	; 208
    57b0:	aa 33       	cpi	r26, 0x3A	; 58
    57b2:	08 f0       	brcs	.+2      	; 0x57b6 <__utoa_common+0x20>
    57b4:	a9 5d       	subi	r26, 0xD9	; 217
    57b6:	a1 93       	st	Z+, r26
    57b8:	00 97       	sbiw	r24, 0x00	; 0
    57ba:	79 f7       	brne	.-34     	; 0x579a <__utoa_common+0x4>
    57bc:	b1 11       	cpse	r27, r1
    57be:	b1 93       	st	Z+, r27
    57c0:	11 92       	st	Z+, r1
    57c2:	cb 01       	movw	r24, r22
    57c4:	b8 c0       	rjmp	.+368    	; 0x5936 <strrev>

000057c6 <fputc>:
    57c6:	0f 93       	push	r16
    57c8:	1f 93       	push	r17
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	18 2f       	mov	r17, r24
    57d0:	09 2f       	mov	r16, r25
    57d2:	eb 01       	movw	r28, r22
    57d4:	8b 81       	ldd	r24, Y+3	; 0x03
    57d6:	81 fd       	sbrc	r24, 1
    57d8:	03 c0       	rjmp	.+6      	; 0x57e0 <fputc+0x1a>
    57da:	8f ef       	ldi	r24, 0xFF	; 255
    57dc:	9f ef       	ldi	r25, 0xFF	; 255
    57de:	20 c0       	rjmp	.+64     	; 0x5820 <fputc+0x5a>
    57e0:	82 ff       	sbrs	r24, 2
    57e2:	10 c0       	rjmp	.+32     	; 0x5804 <fputc+0x3e>
    57e4:	4e 81       	ldd	r20, Y+6	; 0x06
    57e6:	5f 81       	ldd	r21, Y+7	; 0x07
    57e8:	2c 81       	ldd	r18, Y+4	; 0x04
    57ea:	3d 81       	ldd	r19, Y+5	; 0x05
    57ec:	42 17       	cp	r20, r18
    57ee:	53 07       	cpc	r21, r19
    57f0:	7c f4       	brge	.+30     	; 0x5810 <fputc+0x4a>
    57f2:	e8 81       	ld	r30, Y
    57f4:	f9 81       	ldd	r31, Y+1	; 0x01
    57f6:	9f 01       	movw	r18, r30
    57f8:	2f 5f       	subi	r18, 0xFF	; 255
    57fa:	3f 4f       	sbci	r19, 0xFF	; 255
    57fc:	28 83       	st	Y, r18
    57fe:	39 83       	std	Y+1, r19	; 0x01
    5800:	10 83       	st	Z, r17
    5802:	06 c0       	rjmp	.+12     	; 0x5810 <fputc+0x4a>
    5804:	e8 85       	ldd	r30, Y+8	; 0x08
    5806:	f9 85       	ldd	r31, Y+9	; 0x09
    5808:	81 2f       	mov	r24, r17
    580a:	19 95       	eicall
    580c:	89 2b       	or	r24, r25
    580e:	29 f7       	brne	.-54     	; 0x57da <fputc+0x14>
    5810:	2e 81       	ldd	r18, Y+6	; 0x06
    5812:	3f 81       	ldd	r19, Y+7	; 0x07
    5814:	2f 5f       	subi	r18, 0xFF	; 255
    5816:	3f 4f       	sbci	r19, 0xFF	; 255
    5818:	2e 83       	std	Y+6, r18	; 0x06
    581a:	3f 83       	std	Y+7, r19	; 0x07
    581c:	81 2f       	mov	r24, r17
    581e:	90 2f       	mov	r25, r16
    5820:	df 91       	pop	r29
    5822:	cf 91       	pop	r28
    5824:	1f 91       	pop	r17
    5826:	0f 91       	pop	r16
    5828:	08 95       	ret

0000582a <sprintf>:
    582a:	0f 93       	push	r16
    582c:	1f 93       	push	r17
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
    5836:	2e 97       	sbiw	r28, 0x0e	; 14
    5838:	cd bf       	out	0x3d, r28	; 61
    583a:	de bf       	out	0x3e, r29	; 62
    583c:	0e 89       	ldd	r16, Y+22	; 0x16
    583e:	1f 89       	ldd	r17, Y+23	; 0x17
    5840:	86 e0       	ldi	r24, 0x06	; 6
    5842:	8c 83       	std	Y+4, r24	; 0x04
    5844:	09 83       	std	Y+1, r16	; 0x01
    5846:	1a 83       	std	Y+2, r17	; 0x02
    5848:	8f ef       	ldi	r24, 0xFF	; 255
    584a:	9f e7       	ldi	r25, 0x7F	; 127
    584c:	8d 83       	std	Y+5, r24	; 0x05
    584e:	9e 83       	std	Y+6, r25	; 0x06
    5850:	ae 01       	movw	r20, r28
    5852:	46 5e       	subi	r20, 0xE6	; 230
    5854:	5f 4f       	sbci	r21, 0xFF	; 255
    5856:	68 8d       	ldd	r22, Y+24	; 0x18
    5858:	79 8d       	ldd	r23, Y+25	; 0x19
    585a:	ce 01       	movw	r24, r28
    585c:	01 96       	adiw	r24, 0x01	; 1
    585e:	42 da       	rcall	.-2940   	; 0x4ce4 <vfprintf>
    5860:	ef 81       	ldd	r30, Y+7	; 0x07
    5862:	f8 85       	ldd	r31, Y+8	; 0x08
    5864:	e0 0f       	add	r30, r16
    5866:	f1 1f       	adc	r31, r17
    5868:	10 82       	st	Z, r1
    586a:	2e 96       	adiw	r28, 0x0e	; 14
    586c:	cd bf       	out	0x3d, r28	; 61
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	08 95       	ret

0000587a <__ultoa_invert>:
    587a:	fa 01       	movw	r30, r20
    587c:	aa 27       	eor	r26, r26
    587e:	28 30       	cpi	r18, 0x08	; 8
    5880:	51 f1       	breq	.+84     	; 0x58d6 <__ultoa_invert+0x5c>
    5882:	20 31       	cpi	r18, 0x10	; 16
    5884:	81 f1       	breq	.+96     	; 0x58e6 <__ultoa_invert+0x6c>
    5886:	e8 94       	clt
    5888:	6f 93       	push	r22
    588a:	6e 7f       	andi	r22, 0xFE	; 254
    588c:	6e 5f       	subi	r22, 0xFE	; 254
    588e:	7f 4f       	sbci	r23, 0xFF	; 255
    5890:	8f 4f       	sbci	r24, 0xFF	; 255
    5892:	9f 4f       	sbci	r25, 0xFF	; 255
    5894:	af 4f       	sbci	r26, 0xFF	; 255
    5896:	b1 e0       	ldi	r27, 0x01	; 1
    5898:	3e d0       	rcall	.+124    	; 0x5916 <__ultoa_invert+0x9c>
    589a:	b4 e0       	ldi	r27, 0x04	; 4
    589c:	3c d0       	rcall	.+120    	; 0x5916 <__ultoa_invert+0x9c>
    589e:	67 0f       	add	r22, r23
    58a0:	78 1f       	adc	r23, r24
    58a2:	89 1f       	adc	r24, r25
    58a4:	9a 1f       	adc	r25, r26
    58a6:	a1 1d       	adc	r26, r1
    58a8:	68 0f       	add	r22, r24
    58aa:	79 1f       	adc	r23, r25
    58ac:	8a 1f       	adc	r24, r26
    58ae:	91 1d       	adc	r25, r1
    58b0:	a1 1d       	adc	r26, r1
    58b2:	6a 0f       	add	r22, r26
    58b4:	71 1d       	adc	r23, r1
    58b6:	81 1d       	adc	r24, r1
    58b8:	91 1d       	adc	r25, r1
    58ba:	a1 1d       	adc	r26, r1
    58bc:	20 d0       	rcall	.+64     	; 0x58fe <__ultoa_invert+0x84>
    58be:	09 f4       	brne	.+2      	; 0x58c2 <__ultoa_invert+0x48>
    58c0:	68 94       	set
    58c2:	3f 91       	pop	r19
    58c4:	2a e0       	ldi	r18, 0x0A	; 10
    58c6:	26 9f       	mul	r18, r22
    58c8:	11 24       	eor	r1, r1
    58ca:	30 19       	sub	r19, r0
    58cc:	30 5d       	subi	r19, 0xD0	; 208
    58ce:	31 93       	st	Z+, r19
    58d0:	de f6       	brtc	.-74     	; 0x5888 <__ultoa_invert+0xe>
    58d2:	cf 01       	movw	r24, r30
    58d4:	08 95       	ret
    58d6:	46 2f       	mov	r20, r22
    58d8:	47 70       	andi	r20, 0x07	; 7
    58da:	40 5d       	subi	r20, 0xD0	; 208
    58dc:	41 93       	st	Z+, r20
    58de:	b3 e0       	ldi	r27, 0x03	; 3
    58e0:	0f d0       	rcall	.+30     	; 0x5900 <__ultoa_invert+0x86>
    58e2:	c9 f7       	brne	.-14     	; 0x58d6 <__ultoa_invert+0x5c>
    58e4:	f6 cf       	rjmp	.-20     	; 0x58d2 <__ultoa_invert+0x58>
    58e6:	46 2f       	mov	r20, r22
    58e8:	4f 70       	andi	r20, 0x0F	; 15
    58ea:	40 5d       	subi	r20, 0xD0	; 208
    58ec:	4a 33       	cpi	r20, 0x3A	; 58
    58ee:	18 f0       	brcs	.+6      	; 0x58f6 <__ultoa_invert+0x7c>
    58f0:	49 5d       	subi	r20, 0xD9	; 217
    58f2:	31 fd       	sbrc	r19, 1
    58f4:	40 52       	subi	r20, 0x20	; 32
    58f6:	41 93       	st	Z+, r20
    58f8:	02 d0       	rcall	.+4      	; 0x58fe <__ultoa_invert+0x84>
    58fa:	a9 f7       	brne	.-22     	; 0x58e6 <__ultoa_invert+0x6c>
    58fc:	ea cf       	rjmp	.-44     	; 0x58d2 <__ultoa_invert+0x58>
    58fe:	b4 e0       	ldi	r27, 0x04	; 4
    5900:	a6 95       	lsr	r26
    5902:	97 95       	ror	r25
    5904:	87 95       	ror	r24
    5906:	77 95       	ror	r23
    5908:	67 95       	ror	r22
    590a:	ba 95       	dec	r27
    590c:	c9 f7       	brne	.-14     	; 0x5900 <__ultoa_invert+0x86>
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	61 05       	cpc	r22, r1
    5912:	71 05       	cpc	r23, r1
    5914:	08 95       	ret
    5916:	9b 01       	movw	r18, r22
    5918:	ac 01       	movw	r20, r24
    591a:	0a 2e       	mov	r0, r26
    591c:	06 94       	lsr	r0
    591e:	57 95       	ror	r21
    5920:	47 95       	ror	r20
    5922:	37 95       	ror	r19
    5924:	27 95       	ror	r18
    5926:	ba 95       	dec	r27
    5928:	c9 f7       	brne	.-14     	; 0x591c <__ultoa_invert+0xa2>
    592a:	62 0f       	add	r22, r18
    592c:	73 1f       	adc	r23, r19
    592e:	84 1f       	adc	r24, r20
    5930:	95 1f       	adc	r25, r21
    5932:	a0 1d       	adc	r26, r0
    5934:	08 95       	ret

00005936 <strrev>:
    5936:	dc 01       	movw	r26, r24
    5938:	fc 01       	movw	r30, r24
    593a:	67 2f       	mov	r22, r23
    593c:	71 91       	ld	r23, Z+
    593e:	77 23       	and	r23, r23
    5940:	e1 f7       	brne	.-8      	; 0x593a <strrev+0x4>
    5942:	32 97       	sbiw	r30, 0x02	; 2
    5944:	04 c0       	rjmp	.+8      	; 0x594e <strrev+0x18>
    5946:	7c 91       	ld	r23, X
    5948:	6d 93       	st	X+, r22
    594a:	70 83       	st	Z, r23
    594c:	62 91       	ld	r22, -Z
    594e:	ae 17       	cp	r26, r30
    5950:	bf 07       	cpc	r27, r31
    5952:	c8 f3       	brcs	.-14     	; 0x5946 <strrev+0x10>
    5954:	08 95       	ret

00005956 <__divmodsi4>:
    5956:	05 2e       	mov	r0, r21
    5958:	97 fb       	bst	r25, 7
    595a:	16 f4       	brtc	.+4      	; 0x5960 <__divmodsi4+0xa>
    595c:	00 94       	com	r0
    595e:	0f d0       	rcall	.+30     	; 0x597e <__negsi2>
    5960:	57 fd       	sbrc	r21, 7
    5962:	05 d0       	rcall	.+10     	; 0x596e <__divmodsi4_neg2>
    5964:	24 d0       	rcall	.+72     	; 0x59ae <__udivmodsi4>
    5966:	07 fc       	sbrc	r0, 7
    5968:	02 d0       	rcall	.+4      	; 0x596e <__divmodsi4_neg2>
    596a:	46 f4       	brtc	.+16     	; 0x597c <__divmodsi4_exit>
    596c:	08 c0       	rjmp	.+16     	; 0x597e <__negsi2>

0000596e <__divmodsi4_neg2>:
    596e:	50 95       	com	r21
    5970:	40 95       	com	r20
    5972:	30 95       	com	r19
    5974:	21 95       	neg	r18
    5976:	3f 4f       	sbci	r19, 0xFF	; 255
    5978:	4f 4f       	sbci	r20, 0xFF	; 255
    597a:	5f 4f       	sbci	r21, 0xFF	; 255

0000597c <__divmodsi4_exit>:
    597c:	08 95       	ret

0000597e <__negsi2>:
    597e:	90 95       	com	r25
    5980:	80 95       	com	r24
    5982:	70 95       	com	r23
    5984:	61 95       	neg	r22
    5986:	7f 4f       	sbci	r23, 0xFF	; 255
    5988:	8f 4f       	sbci	r24, 0xFF	; 255
    598a:	9f 4f       	sbci	r25, 0xFF	; 255
    598c:	08 95       	ret

0000598e <__muluhisi3>:
    598e:	44 dd       	rcall	.-1400   	; 0x5418 <__umulhisi3>
    5990:	a5 9f       	mul	r26, r21
    5992:	90 0d       	add	r25, r0
    5994:	b4 9f       	mul	r27, r20
    5996:	90 0d       	add	r25, r0
    5998:	a4 9f       	mul	r26, r20
    599a:	80 0d       	add	r24, r0
    599c:	91 1d       	adc	r25, r1
    599e:	11 24       	eor	r1, r1
    59a0:	08 95       	ret

000059a2 <__mulshisi3>:
    59a2:	b7 ff       	sbrs	r27, 7
    59a4:	f4 cf       	rjmp	.-24     	; 0x598e <__muluhisi3>

000059a6 <__mulohisi3>:
    59a6:	f3 df       	rcall	.-26     	; 0x598e <__muluhisi3>
    59a8:	82 1b       	sub	r24, r18
    59aa:	93 0b       	sbc	r25, r19
    59ac:	08 95       	ret

000059ae <__udivmodsi4>:
    59ae:	a1 e2       	ldi	r26, 0x21	; 33
    59b0:	1a 2e       	mov	r1, r26
    59b2:	aa 1b       	sub	r26, r26
    59b4:	bb 1b       	sub	r27, r27
    59b6:	fd 01       	movw	r30, r26
    59b8:	0d c0       	rjmp	.+26     	; 0x59d4 <__udivmodsi4_ep>

000059ba <__udivmodsi4_loop>:
    59ba:	aa 1f       	adc	r26, r26
    59bc:	bb 1f       	adc	r27, r27
    59be:	ee 1f       	adc	r30, r30
    59c0:	ff 1f       	adc	r31, r31
    59c2:	a2 17       	cp	r26, r18
    59c4:	b3 07       	cpc	r27, r19
    59c6:	e4 07       	cpc	r30, r20
    59c8:	f5 07       	cpc	r31, r21
    59ca:	20 f0       	brcs	.+8      	; 0x59d4 <__udivmodsi4_ep>
    59cc:	a2 1b       	sub	r26, r18
    59ce:	b3 0b       	sbc	r27, r19
    59d0:	e4 0b       	sbc	r30, r20
    59d2:	f5 0b       	sbc	r31, r21

000059d4 <__udivmodsi4_ep>:
    59d4:	66 1f       	adc	r22, r22
    59d6:	77 1f       	adc	r23, r23
    59d8:	88 1f       	adc	r24, r24
    59da:	99 1f       	adc	r25, r25
    59dc:	1a 94       	dec	r1
    59de:	69 f7       	brne	.-38     	; 0x59ba <__udivmodsi4_loop>
    59e0:	60 95       	com	r22
    59e2:	70 95       	com	r23
    59e4:	80 95       	com	r24
    59e6:	90 95       	com	r25
    59e8:	9b 01       	movw	r18, r22
    59ea:	ac 01       	movw	r20, r24
    59ec:	bd 01       	movw	r22, r26
    59ee:	cf 01       	movw	r24, r30
    59f0:	08 95       	ret

000059f2 <_exit>:
    59f2:	f8 94       	cli

000059f4 <__stop_program>:
    59f4:	ff cf       	rjmp	.-2      	; 0x59f4 <__stop_program>
